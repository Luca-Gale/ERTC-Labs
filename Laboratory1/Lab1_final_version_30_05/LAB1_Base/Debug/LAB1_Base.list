
LAB1_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080081d0  080081d0  000091d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ac  080083ac  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080083ac  080083ac  000093ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b4  080083b4  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083b8  080083b8  000093b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080083bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  20000068  08008424  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08008424  0000a7ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163cd  00000000  00000000  0000a096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a9a  00000000  00000000  00020463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00022f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102f  00000000  00000000  00024390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a578  00000000  00000000  000253bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e22  00000000  00000000  0004f937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107218  00000000  00000000  00069759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170971  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  001709b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00176a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	080081b8 	.word	0x080081b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	080081b8 	.word	0x080081b8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d013      	beq.n	8000610 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005f8:	e000      	b.n	80005fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000606:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffc9 	bl	80005d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf1      	blt.n	8000630 <_write+0x12>
	}
	return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <get_keypad_key>:
//    }
//    return -1; // No key pressed
//}


char get_keypad_key(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af04      	add	r7, sp, #16
	uint8_t col = 0xFF, row = 0xFF;
 800065e:	23ff      	movs	r3, #255	@ 0xff
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	23ff      	movs	r3, #255	@ 0xff
 8000664:	71bb      	strb	r3, [r7, #6]

	// Read column and row register from SX1509
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &col, 1,
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2301      	movs	r3, #1
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	2227      	movs	r2, #39	@ 0x27
 8000676:	217e      	movs	r1, #126	@ 0x7e
 8000678:	4824      	ldr	r0, [pc, #144]	@ (800070c <get_keypad_key+0xb4>)
 800067a:	f002 ffef 	bl	800365c <HAL_I2C_Mem_Read>
			100);
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &row, 1,
 800067e:	2364      	movs	r3, #100	@ 0x64
 8000680:	9302      	str	r3, [sp, #8]
 8000682:	2301      	movs	r3, #1
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	1dbb      	adds	r3, r7, #6
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	2228      	movs	r2, #40	@ 0x28
 800068e:	217e      	movs	r1, #126	@ 0x7e
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <get_keypad_key+0xb4>)
 8000692:	f002 ffe3 	bl	800365c <HAL_I2C_Mem_Read>
			100);

	// Nothing pressed (all bits HIGH)
	if (col == 0xFF || row == 0xFF)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bff      	cmp	r3, #255	@ 0xff
 800069a:	d002      	beq.n	80006a2 <get_keypad_key+0x4a>
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	2bff      	cmp	r3, #255	@ 0xff
 80006a0:	d101      	bne.n	80006a6 <get_keypad_key+0x4e>
		return '\0';
 80006a2:	2300      	movs	r3, #0
 80006a4:	e02e      	b.n	8000704 <get_keypad_key+0xac>

	// Find the LOW bit (indicating which row and column were pressed)
	// Tried to do both row and column at the same time
	for (int r = 0; r < 4; r++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e027      	b.n	80006fc <get_keypad_key+0xa4>
		if (!(row & (1 << r))) {
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	fa42 f303 	asr.w	r3, r2, r3
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11b      	bne.n	80006f6 <get_keypad_key+0x9e>
			for (int c = 0; c < 4; c++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	e015      	b.n	80006f0 <get_keypad_key+0x98>
				if (!(col & (1 << c))) {
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	fa42 f303 	asr.w	r3, r2, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <get_keypad_key+0x92>
					return keypad_map[3-r][c];
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f1c3 0303 	rsb	r3, r3, #3
 80006dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000710 <get_keypad_key+0xb8>)
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	441a      	add	r2, r3
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	e00c      	b.n	8000704 <get_keypad_key+0xac>
			for (int c = 0; c < 4; c++) {
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	dde6      	ble.n	80006c4 <get_keypad_key+0x6c>
	for (int r = 0; r < 4; r++) {
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	ddd4      	ble.n	80006ac <get_keypad_key+0x54>
				}
			}
		}
	}

	return '\0';
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000d0 	.word	0x200000d0
 8000710:	08008250 	.word	0x08008250
 8000714:	00000000 	.word	0x00000000

08000718 <handle_keypad_input>:

// Set frequency with keypad
char input_buffer[6] = { 0 };  // To store up to 5 digits
int input_index = 0;

void handle_keypad_input() {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	char key = get_keypad_key();
 800071e:	f7ff ff9b 	bl	8000658 <get_keypad_key>
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	// Print the pressed button - safety check
	if (key != '\0') {
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d004      	beq.n	8000736 <handle_keypad_input+0x1e>
		printf("Key pressed: %c\n", key);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4619      	mov	r1, r3
 8000730:	482f      	ldr	r0, [pc, #188]	@ (80007f0 <handle_keypad_input+0xd8>)
 8000732:	f006 fe39 	bl	80073a8 <iprintf>
	}

	if (key >= '0' && key <= '9') {
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b2f      	cmp	r3, #47	@ 0x2f
 800073a:	d914      	bls.n	8000766 <handle_keypad_input+0x4e>
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b39      	cmp	r3, #57	@ 0x39
 8000740:	d811      	bhi.n	8000766 <handle_keypad_input+0x4e>
		if (input_index < sizeof(input_buffer) - 1) {
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <handle_keypad_input+0xdc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d849      	bhi.n	80007de <handle_keypad_input+0xc6>
			input_buffer[input_index++] = key;
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <handle_keypad_input+0xdc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	4928      	ldr	r1, [pc, #160]	@ (80007f4 <handle_keypad_input+0xdc>)
 8000752:	600a      	str	r2, [r1, #0]
 8000754:	4928      	ldr	r1, [pc, #160]	@ (80007f8 <handle_keypad_input+0xe0>)
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	54ca      	strb	r2, [r1, r3]
			input_buffer[input_index] = '\0';
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <handle_keypad_input+0xdc>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a26      	ldr	r2, [pc, #152]	@ (80007f8 <handle_keypad_input+0xe0>)
 8000760:	2100      	movs	r1, #0
 8000762:	54d1      	strb	r1, [r2, r3]
		if (input_index < sizeof(input_buffer) - 1) {
 8000764:	e03b      	b.n	80007de <handle_keypad_input+0xc6>
		}
	} else if (key == '#') {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b23      	cmp	r3, #35	@ 0x23
 800076a:	d127      	bne.n	80007bc <handle_keypad_input+0xa4>
		if (input_index > 0) {
 800076c:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <handle_keypad_input+0xdc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dd1c      	ble.n	80007ae <handle_keypad_input+0x96>
			int new_ref = atoi(input_buffer);  // ASCII to Float
 8000774:	4820      	ldr	r0, [pc, #128]	@ (80007f8 <handle_keypad_input+0xe0>)
 8000776:	f006 fccc 	bl	8007112 <atoi>
 800077a:	6038      	str	r0, [r7, #0]
			// TODO check speed bound on reference



			blinkertimer = (uint32_t) ((1.0/(float)new_ref)*1000.0);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000786:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800078a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800078e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000792:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80007e8 <handle_keypad_input+0xd0>
 8000796:	ee27 7b06 	vmul.f64	d7, d7, d6
 800079a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800079e:	ee17 2a90 	vmov	r2, s15
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <handle_keypad_input+0xe4>)
 80007a4:	601a      	str	r2, [r3, #0]

			// Workaround the impossibility to print float
			//int sp_int = (int) (blinkertimer * 100);
			printf("Reference freq = %d\n Hz", new_ref);
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	4815      	ldr	r0, [pc, #84]	@ (8000800 <handle_keypad_input+0xe8>)
 80007aa:	f006 fdfd 	bl	80073a8 <iprintf>
		}
		input_index = 0;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <handle_keypad_input+0xdc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
		input_buffer[0] = '\0';
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <handle_keypad_input+0xe0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
		blinkertimer = 1000;
		input_index = 0;
		input_buffer[0] = '\0';
		printf("Input set to 1Hz\n");
	}
}
 80007ba:	e010      	b.n	80007de <handle_keypad_input+0xc6>
	} else if (key == '*') {
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b2a      	cmp	r3, #42	@ 0x2a
 80007c0:	d10d      	bne.n	80007de <handle_keypad_input+0xc6>
		blinkertimer = 1000;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <handle_keypad_input+0xe4>)
 80007c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007c8:	601a      	str	r2, [r3, #0]
		input_index = 0;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <handle_keypad_input+0xdc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
		input_buffer[0] = '\0';
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <handle_keypad_input+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		printf("Input set to 1Hz\n");
 80007d6:	480b      	ldr	r0, [pc, #44]	@ (8000804 <handle_keypad_input+0xec>)
 80007d8:	f006 fe56 	bl	8007488 <puts>
}
 80007dc:	e7ff      	b.n	80007de <handle_keypad_input+0xc6>
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	00000000 	.word	0x00000000
 80007ec:	408f4000 	.word	0x408f4000
 80007f0:	080081d0 	.word	0x080081d0
 80007f4:	20000654 	.word	0x20000654
 80007f8:	2000064c 	.word	0x2000064c
 80007fc:	20000084 	.word	0x20000084
 8000800:	080081e4 	.word	0x080081e4
 8000804:	080081fc 	.word	0x080081fc

08000808 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	80fb      	strh	r3, [r7, #6]
	//     uint8_t digit = (uint8_t)(keypadLayout[col][row] - '0');
	//     if (digit > 0 && digit <= 9)
	//    	 blinkertimer = 1000/digit;

	// hard way for led blinking
	handle_keypad_input();
 8000812:	f7ff ff81 	bl	8000718 <handle_keypad_input>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000826:	f001 ff32 	bl	800268e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800082a:	f000 fa3b 	bl	8000ca4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800082e:	f001 f80b 	bl	8001848 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000832:	f000 ffd9 	bl	80017e8 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000836:	f000 faa7 	bl	8000d88 <MX_ADC1_Init>
	MX_I2C1_Init();
 800083a:	f000 faf7 	bl	8000e2c <MX_I2C1_Init>
	MX_I2C2_Init();
 800083e:	f000 fb35 	bl	8000eac <MX_I2C2_Init>
	MX_SPI1_Init();
 8000842:	f000 fb73 	bl	8000f2c <MX_SPI1_Init>
	MX_TIM1_Init();
 8000846:	f000 fbaf 	bl	8000fa8 <MX_TIM1_Init>
	MX_TIM2_Init();
 800084a:	f000 fc7d 	bl	8001148 <MX_TIM2_Init>
	MX_TIM3_Init();
 800084e:	f000 fd15 	bl	800127c <MX_TIM3_Init>
	MX_TIM4_Init();
 8000852:	f000 fd69 	bl	8001328 <MX_TIM4_Init>
	MX_TIM5_Init();
 8000856:	f000 fdbd 	bl	80013d4 <MX_TIM5_Init>
	MX_TIM8_Init();
 800085a:	f000 fe33 	bl	80014c4 <MX_TIM8_Init>
	MX_UART4_Init();
 800085e:	f000 ff03 	bl	8001668 <MX_UART4_Init>
	MX_UART5_Init();
 8000862:	f000 ff31 	bl	80016c8 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000866:	f000 ff5f 	bl	8001728 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800086a:	f000 ff8d 	bl	8001788 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Disable LCD SPI SS */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2110      	movs	r1, #16
 8000872:	48bc      	ldr	r0, [pc, #752]	@ (8000b64 <main+0x344>)
 8000874:	f002 fd10 	bl	8003298 <HAL_GPIO_WritePin>

	/* Disable EXTI4_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000878:	200a      	movs	r0, #10
 800087a:	f002 fb46 	bl	8002f0a <HAL_NVIC_DisableIRQ>

	ITM_SendChar('h');
 800087e:	2068      	movs	r0, #104	@ 0x68
 8000880:	f7ff fea6 	bl	80005d0 <ITM_SendChar>

	/* Software reset */
	data = 0x12;
 8000884:	2312      	movs	r3, #18
 8000886:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000888:	23c8      	movs	r3, #200	@ 0xc8
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	2301      	movs	r3, #1
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	1cbb      	adds	r3, r7, #2
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	227d      	movs	r2, #125	@ 0x7d
 8000898:	217e      	movs	r1, #126	@ 0x7e
 800089a:	48b3      	ldr	r0, [pc, #716]	@ (8000b68 <main+0x348>)
 800089c:	f002 fdca 	bl	8003434 <HAL_I2C_Mem_Write>
 80008a0:	4603      	mov	r3, r0
 80008a2:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <main+0x94>
		printf("I2C communication error (%X).\n", status);
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	4619      	mov	r1, r3
 80008ae:	48af      	ldr	r0, [pc, #700]	@ (8000b6c <main+0x34c>)
 80008b0:	f006 fd7a 	bl	80073a8 <iprintf>

	data = 0x34;
 80008b4:	2334      	movs	r3, #52	@ 0x34
 80008b6:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80008b8:	23c8      	movs	r3, #200	@ 0xc8
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	2301      	movs	r3, #1
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	1cbb      	adds	r3, r7, #2
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2301      	movs	r3, #1
 80008c6:	227d      	movs	r2, #125	@ 0x7d
 80008c8:	217e      	movs	r1, #126	@ 0x7e
 80008ca:	48a7      	ldr	r0, [pc, #668]	@ (8000b68 <main+0x348>)
 80008cc:	f002 fdb2 	bl	8003434 <HAL_I2C_Mem_Write>
 80008d0:	4603      	mov	r3, r0
 80008d2:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <main+0xc4>
		printf("I2C communication error (%X).\n", status);
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	4619      	mov	r1, r3
 80008de:	48a3      	ldr	r0, [pc, #652]	@ (8000b6c <main+0x34c>)
 80008e0:	f006 fd62 	bl	80073a8 <iprintf>

	HAL_Delay(100);
 80008e4:	2064      	movs	r0, #100	@ 0x64
 80008e6:	f001 ff2f 	bl	8002748 <HAL_Delay>

	/* Set KeyPad scanning engine */

	/* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
	data = 0x40;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 80008ee:	23c8      	movs	r3, #200	@ 0xc8
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2301      	movs	r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	1cbb      	adds	r3, r7, #2
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	221e      	movs	r2, #30
 80008fe:	217e      	movs	r1, #126	@ 0x7e
 8000900:	4899      	ldr	r0, [pc, #612]	@ (8000b68 <main+0x348>)
 8000902:	f002 fd97 	bl	8003434 <HAL_I2C_Mem_Write>
 8000906:	4603      	mov	r3, r0
 8000908:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d004      	beq.n	800091a <main+0xfa>
		printf("I2C communication error (%X).\n", status);
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	4619      	mov	r1, r3
 8000914:	4895      	ldr	r0, [pc, #596]	@ (8000b6c <main+0x34c>)
 8000916:	f006 fd47 	bl	80073a8 <iprintf>

	/* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
	data = 0xF0;
 800091a:	23f0      	movs	r3, #240	@ 0xf0
 800091c:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800091e:	23c8      	movs	r3, #200	@ 0xc8
 8000920:	9302      	str	r3, [sp, #8]
 8000922:	2301      	movs	r3, #1
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	1cbb      	adds	r3, r7, #2
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2301      	movs	r3, #1
 800092c:	220f      	movs	r2, #15
 800092e:	217e      	movs	r1, #126	@ 0x7e
 8000930:	488d      	ldr	r0, [pc, #564]	@ (8000b68 <main+0x348>)
 8000932:	f002 fd7f 	bl	8003434 <HAL_I2C_Mem_Write>
 8000936:	4603      	mov	r3, r0
 8000938:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d004      	beq.n	800094a <main+0x12a>
		printf("I2C communication error (%X).\n", status);
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	4619      	mov	r1, r3
 8000944:	4889      	ldr	r0, [pc, #548]	@ (8000b6c <main+0x34c>)
 8000946:	f006 fd2f 	bl	80073a8 <iprintf>

	/* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
	data = 0x0F;
 800094a:	230f      	movs	r3, #15
 800094c:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800094e:	23c8      	movs	r3, #200	@ 0xc8
 8000950:	9302      	str	r3, [sp, #8]
 8000952:	2301      	movs	r3, #1
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	1cbb      	adds	r3, r7, #2
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2301      	movs	r3, #1
 800095c:	220e      	movs	r2, #14
 800095e:	217e      	movs	r1, #126	@ 0x7e
 8000960:	4881      	ldr	r0, [pc, #516]	@ (8000b68 <main+0x348>)
 8000962:	f002 fd67 	bl	8003434 <HAL_I2C_Mem_Write>
 8000966:	4603      	mov	r3, r0
 8000968:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d004      	beq.n	800097a <main+0x15a>
		printf("I2C communication error (%X).\n", status);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	4619      	mov	r1, r3
 8000974:	487d      	ldr	r0, [pc, #500]	@ (8000b6c <main+0x34c>)
 8000976:	f006 fd17 	bl	80073a8 <iprintf>

	/* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
	data = 0x0F;
 800097a:	230f      	movs	r3, #15
 800097c:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 800097e:	23c8      	movs	r3, #200	@ 0xc8
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	2301      	movs	r3, #1
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	1cbb      	adds	r3, r7, #2
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2301      	movs	r3, #1
 800098c:	220b      	movs	r2, #11
 800098e:	217e      	movs	r1, #126	@ 0x7e
 8000990:	4875      	ldr	r0, [pc, #468]	@ (8000b68 <main+0x348>)
 8000992:	f002 fd4f 	bl	8003434 <HAL_I2C_Mem_Write>
 8000996:	4603      	mov	r3, r0
 8000998:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d004      	beq.n	80009aa <main+0x18a>
		printf("I2C communication error (%X).\n", status);
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4871      	ldr	r0, [pc, #452]	@ (8000b6c <main+0x34c>)
 80009a6:	f006 fcff 	bl	80073a8 <iprintf>

	/* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
	data = 0x0F;
 80009aa:	230f      	movs	r3, #15
 80009ac:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80009ae:	23c8      	movs	r3, #200	@ 0xc8
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	2301      	movs	r3, #1
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	1cbb      	adds	r3, r7, #2
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	2206      	movs	r2, #6
 80009be:	217e      	movs	r1, #126	@ 0x7e
 80009c0:	4869      	ldr	r0, [pc, #420]	@ (8000b68 <main+0x348>)
 80009c2:	f002 fd37 	bl	8003434 <HAL_I2C_Mem_Write>
 80009c6:	4603      	mov	r3, r0
 80009c8:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <main+0x1ba>
		printf("I2C communication error (%X).\n", status);
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4865      	ldr	r0, [pc, #404]	@ (8000b6c <main+0x34c>)
 80009d6:	f006 fce7 	bl	80073a8 <iprintf>

	/* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
	data = 0x0F;
 80009da:	230f      	movs	r3, #15
 80009dc:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 80009de:	23c8      	movs	r3, #200	@ 0xc8
 80009e0:	9302      	str	r3, [sp, #8]
 80009e2:	2301      	movs	r3, #1
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	1cbb      	adds	r3, r7, #2
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	2223      	movs	r2, #35	@ 0x23
 80009ee:	217e      	movs	r1, #126	@ 0x7e
 80009f0:	485d      	ldr	r0, [pc, #372]	@ (8000b68 <main+0x348>)
 80009f2:	f002 fd1f 	bl	8003434 <HAL_I2C_Mem_Write>
 80009f6:	4603      	mov	r3, r0
 80009f8:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <main+0x1ea>
		printf("I2C communication error (%X).\n", status);
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4859      	ldr	r0, [pc, #356]	@ (8000b6c <main+0x34c>)
 8000a06:	f006 fccf 	bl	80073a8 <iprintf>

	/* Set RegDebounceConfig to 0x05 (16ms debounce time) */
	data = 0x05;
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000a0e:	23c8      	movs	r3, #200	@ 0xc8
 8000a10:	9302      	str	r3, [sp, #8]
 8000a12:	2301      	movs	r3, #1
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	1cbb      	adds	r3, r7, #2
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	2222      	movs	r2, #34	@ 0x22
 8000a1e:	217e      	movs	r1, #126	@ 0x7e
 8000a20:	4851      	ldr	r0, [pc, #324]	@ (8000b68 <main+0x348>)
 8000a22:	f002 fd07 	bl	8003434 <HAL_I2C_Mem_Write>
 8000a26:	4603      	mov	r3, r0
 8000a28:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <main+0x21a>
		printf("I2C communication error (%X).\n", status);
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	4619      	mov	r1, r3
 8000a34:	484d      	ldr	r0, [pc, #308]	@ (8000b6c <main+0x34c>)
 8000a36:	f006 fcb7 	bl	80073a8 <iprintf>

	/* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
	data = 0x7D;
 8000a3a:	237d      	movs	r3, #125	@ 0x7d
 8000a3c:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000a3e:	23c8      	movs	r3, #200	@ 0xc8
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	1cbb      	adds	r3, r7, #2
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	2225      	movs	r2, #37	@ 0x25
 8000a4e:	217e      	movs	r1, #126	@ 0x7e
 8000a50:	4845      	ldr	r0, [pc, #276]	@ (8000b68 <main+0x348>)
 8000a52:	f002 fcef 	bl	8003434 <HAL_I2C_Mem_Write>
 8000a56:	4603      	mov	r3, r0
 8000a58:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d004      	beq.n	8000a6a <main+0x24a>
		printf("I2C communication error (%X).\n", status);
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4841      	ldr	r0, [pc, #260]	@ (8000b6c <main+0x34c>)
 8000a66:	f006 fc9f 	bl	80073a8 <iprintf>

	/* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
	data = 0x1B;
 8000a6a:	231b      	movs	r3, #27
 8000a6c:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 8000a6e:	23c8      	movs	r3, #200	@ 0xc8
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	1cbb      	adds	r3, r7, #2
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2226      	movs	r2, #38	@ 0x26
 8000a7e:	217e      	movs	r1, #126	@ 0x7e
 8000a80:	4839      	ldr	r0, [pc, #228]	@ (8000b68 <main+0x348>)
 8000a82:	f002 fcd7 	bl	8003434 <HAL_I2C_Mem_Write>
 8000a86:	4603      	mov	r3, r0
 8000a88:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d004      	beq.n	8000a9a <main+0x27a>
		printf("I2C communication error (%X).\n", status);
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4835      	ldr	r0, [pc, #212]	@ (8000b6c <main+0x34c>)
 8000a96:	f006 fc87 	bl	80073a8 <iprintf>

	/* Enable EXTI4_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	@ 0x64
 8000a9c:	f001 fe54 	bl	8002748 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f002 fa24 	bl	8002eee <HAL_NVIC_EnableIRQ>

	/* Disable EXTI2_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000aa6:	2008      	movs	r0, #8
 8000aa8:	f002 fa2f 	bl	8002f0a <HAL_NVIC_DisableIRQ>

	/* Software reset */
	data = 0x12;
 8000aac:	2312      	movs	r3, #18
 8000aae:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000ab0:	23c8      	movs	r3, #200	@ 0xc8
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	1cbb      	adds	r3, r7, #2
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	227d      	movs	r2, #125	@ 0x7d
 8000ac0:	217c      	movs	r1, #124	@ 0x7c
 8000ac2:	4829      	ldr	r0, [pc, #164]	@ (8000b68 <main+0x348>)
 8000ac4:	f002 fcb6 	bl	8003434 <HAL_I2C_Mem_Write>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d004      	beq.n	8000adc <main+0x2bc>
		printf("I2C communication error (%X).\n", status);
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <main+0x34c>)
 8000ad8:	f006 fc66 	bl	80073a8 <iprintf>

	data = 0x34;
 8000adc:	2334      	movs	r3, #52	@ 0x34
 8000ade:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000ae0:	23c8      	movs	r3, #200	@ 0xc8
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	1cbb      	adds	r3, r7, #2
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2301      	movs	r3, #1
 8000aee:	227d      	movs	r2, #125	@ 0x7d
 8000af0:	217c      	movs	r1, #124	@ 0x7c
 8000af2:	481d      	ldr	r0, [pc, #116]	@ (8000b68 <main+0x348>)
 8000af4:	f002 fc9e 	bl	8003434 <HAL_I2C_Mem_Write>
 8000af8:	4603      	mov	r3, r0
 8000afa:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <main+0x2ec>
		printf("I2C communication error (%X).\n", status);
 8000b02:	78fb      	ldrb	r3, [r7, #3]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <main+0x34c>)
 8000b08:	f006 fc4e 	bl	80073a8 <iprintf>

	HAL_Delay(100);
 8000b0c:	2064      	movs	r0, #100	@ 0x64
 8000b0e:	f001 fe1b 	bl	8002748 <HAL_Delay>

	/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000b12:	23ff      	movs	r3, #255	@ 0xff
 8000b14:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000b16:	23c8      	movs	r3, #200	@ 0xc8
 8000b18:	9302      	str	r3, [sp, #8]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	1cbb      	adds	r3, r7, #2
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	220f      	movs	r2, #15
 8000b26:	217c      	movs	r1, #124	@ 0x7c
 8000b28:	480f      	ldr	r0, [pc, #60]	@ (8000b68 <main+0x348>)
 8000b2a:	f002 fc83 	bl	8003434 <HAL_I2C_Mem_Write>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d004      	beq.n	8000b42 <main+0x322>
		printf("I2C communication error (%X).\n", status);
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <main+0x34c>)
 8000b3e:	f006 fc33 	bl	80073a8 <iprintf>

	/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000b42:	23ff      	movs	r3, #255	@ 0xff
 8000b44:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000b46:	23c8      	movs	r3, #200	@ 0xc8
 8000b48:	9302      	str	r3, [sp, #8]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	1cbb      	adds	r3, r7, #2
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	220e      	movs	r2, #14
 8000b56:	217c      	movs	r1, #124	@ 0x7c
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <main+0x348>)
 8000b5a:	f002 fc6b 	bl	8003434 <HAL_I2C_Mem_Write>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	70fb      	strb	r3, [r7, #3]
 8000b62:	e005      	b.n	8000b70 <main+0x350>
 8000b64:	40021000 	.word	0x40021000
 8000b68:	200000d0 	.word	0x200000d0
 8000b6c:	08008210 	.word	0x08008210
	if (status != HAL_OK)
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d004      	beq.n	8000b80 <main+0x360>
		printf("I2C communication error (%X).\n", status);
 8000b76:	78fb      	ldrb	r3, [r7, #3]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4845      	ldr	r0, [pc, #276]	@ (8000c90 <main+0x470>)
 8000b7c:	f006 fc14 	bl	80073a8 <iprintf>

	/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
	data = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000b84:	23c8      	movs	r3, #200	@ 0xc8
 8000b86:	9302      	str	r3, [sp, #8]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	1cbb      	adds	r3, r7, #2
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	2213      	movs	r2, #19
 8000b94:	217c      	movs	r1, #124	@ 0x7c
 8000b96:	483f      	ldr	r0, [pc, #252]	@ (8000c94 <main+0x474>)
 8000b98:	f002 fc4c 	bl	8003434 <HAL_I2C_Mem_Write>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <main+0x390>
		printf("I2C communication error (%X).\n", status);
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4839      	ldr	r0, [pc, #228]	@ (8000c90 <main+0x470>)
 8000bac:	f006 fbfc 	bl	80073a8 <iprintf>

	/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000bb0:	23aa      	movs	r3, #170	@ 0xaa
 8000bb2:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000bb4:	23c8      	movs	r3, #200	@ 0xc8
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	1cbb      	adds	r3, r7, #2
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	2216      	movs	r2, #22
 8000bc4:	217c      	movs	r1, #124	@ 0x7c
 8000bc6:	4833      	ldr	r0, [pc, #204]	@ (8000c94 <main+0x474>)
 8000bc8:	f002 fc34 	bl	8003434 <HAL_I2C_Mem_Write>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <main+0x3c0>
		printf("I2C communication error (%X).\n", status);
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482d      	ldr	r0, [pc, #180]	@ (8000c90 <main+0x470>)
 8000bdc:	f006 fbe4 	bl	80073a8 <iprintf>

	/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000be0:	23aa      	movs	r3, #170	@ 0xaa
 8000be2:	70bb      	strb	r3, [r7, #2]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000be4:	23c8      	movs	r3, #200	@ 0xc8
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	2301      	movs	r3, #1
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	1cbb      	adds	r3, r7, #2
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	2217      	movs	r2, #23
 8000bf4:	217c      	movs	r1, #124	@ 0x7c
 8000bf6:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <main+0x474>)
 8000bf8:	f002 fc1c 	bl	8003434 <HAL_I2C_Mem_Write>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	70fb      	strb	r3, [r7, #3]
	if (status != HAL_OK)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <main+0x3f0>
		printf("I2C communication error (%X).\n", status);
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4821      	ldr	r0, [pc, #132]	@ (8000c90 <main+0x470>)
 8000c0c:	f006 fbcc 	bl	80073a8 <iprintf>

	/* Enable EXTI2_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8000c10:	2064      	movs	r0, #100	@ 0x64
 8000c12:	f001 fd99 	bl	8002748 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c16:	2008      	movs	r0, #8
 8000c18:	f002 f969 	bl	8002eee <HAL_NVIC_EnableIRQ>


	printf("Ready\n");
 8000c1c:	481e      	ldr	r0, [pc, #120]	@ (8000c98 <main+0x478>)
 8000c1e:	f006 fc33 	bl	8007488 <puts>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint8_t sensor_data = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	707b      	strb	r3, [r7, #1]
		status =  HAL_I2C_Mem_Read(
 8000c26:	23c8      	movs	r3, #200	@ 0xc8
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	1c7b      	adds	r3, r7, #1
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	2210      	movs	r2, #16
 8000c36:	217c      	movs	r1, #124	@ 0x7c
 8000c38:	4816      	ldr	r0, [pc, #88]	@ (8000c94 <main+0x474>)
 8000c3a:	f002 fd0f 	bl	800365c <HAL_I2C_Mem_Read>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	70fb      	strb	r3, [r7, #3]
				REG_DATA_B,
				1,
				&sensor_data,
				1,
				I2C_TIMEOUT);
		if (status != HAL_OK)
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d004      	beq.n	8000c52 <main+0x432>
			printf("I2C communication error (%X).\n", status);
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4810      	ldr	r0, [pc, #64]	@ (8000c90 <main+0x470>)
 8000c4e:	f006 fbab 	bl	80073a8 <iprintf>

		printf("Line Sensor Data: ");
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <main+0x47c>)
 8000c54:	f006 fba8 	bl	80073a8 <iprintf>
		for(int i=7;i>=0;i--){
 8000c58:	2307      	movs	r3, #7
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	e00d      	b.n	8000c7a <main+0x45a>
			printf("%d", (sensor_data >> i) & 0x01);
 8000c5e:	787b      	ldrb	r3, [r7, #1]
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <main+0x480>)
 8000c70:	f006 fb9a 	bl	80073a8 <iprintf>
		for(int i=7;i>=0;i--){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	daee      	bge.n	8000c5e <main+0x43e>
		}
		printf("\n");
 8000c80:	200a      	movs	r0, #10
 8000c82:	f006 fba3 	bl	80073cc <putchar>

		HAL_Delay(200);
 8000c86:	20c8      	movs	r0, #200	@ 0xc8
 8000c88:	f001 fd5e 	bl	8002748 <HAL_Delay>
	{
 8000c8c:	e7c9      	b.n	8000c22 <main+0x402>
 8000c8e:	bf00      	nop
 8000c90:	08008210 	.word	0x08008210
 8000c94:	200000d0 	.word	0x200000d0
 8000c98:	08008230 	.word	0x08008230
 8000c9c:	08008238 	.word	0x08008238
 8000ca0:	0800824c 	.word	0x0800824c

08000ca4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
 8000ca8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2234      	movs	r2, #52	@ 0x34
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f006 fcc8 	bl	8007648 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000cc8:	f003 f93c 	bl	8003f44 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <SystemClock_Config+0xdc>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8000d80 <SystemClock_Config+0xdc>)
 8000cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd8:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <SystemClock_Config+0xdc>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ce4:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <SystemClock_Config+0xe0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cec:	4a25      	ldr	r2, [pc, #148]	@ (8000d84 <SystemClock_Config+0xe0>)
 8000cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <SystemClock_Config+0xe0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d04:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d08:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d12:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000d18:	2360      	movs	r3, #96	@ 0x60
 8000d1a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 f969 	bl	8004004 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000d38:	f000 fece 	bl	8001ad8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d3c:	f003 f912 	bl	8003f64 <HAL_PWREx_EnableOverDrive>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000d46:	f000 fec7 	bl	8001ad8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	2103      	movs	r1, #3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fbfa 	bl	8004560 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000d72:	f000 feb1 	bl	8001ad8 <Error_Handler>
	}
}
 8000d76:	bf00      	nop
 8000d78:	3750      	adds	r7, #80	@ 0x50
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000d9c:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <MX_ADC1_Init+0x9c>)
 8000d9e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000da2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000da6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000dca:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <MX_ADC1_Init+0xa0>)
 8000dcc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000dea:	f001 fcd1 	bl	8002790 <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8000df4:	f000 fe70 	bl	8001ad8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_ADC1_Init+0x98>)
 8000e0a:	f001 fd05 	bl	8002818 <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8000e14:	f000 fe60 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000088 	.word	0x20000088
 8000e24:	40012000 	.word	0x40012000
 8000e28:	0f000001 	.word	0x0f000001

08000e2c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_I2C1_Init+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <MX_I2C1_Init+0x7c>)
 8000e3a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e66:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e68:	f002 fa48 	bl	80032fc <HAL_I2C_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000e72:	f000 fe31 	bl	8001ad8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e7a:	f002 ffcb 	bl	8003e14 <HAL_I2CEx_ConfigAnalogFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000e84:	f000 fe28 	bl	8001ad8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_I2C1_Init+0x74>)
 8000e8c:	f003 f80d 	bl	8003eaa <HAL_I2CEx_ConfigDigitalFilter>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000e96:	f000 fe1f 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000d0 	.word	0x200000d0
 8000ea4:	40005400 	.word	0x40005400
 8000ea8:	20303e5d 	.word	0x20303e5d

08000eac <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <MX_I2C2_Init+0x78>)
 8000eb4:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <MX_I2C2_Init+0x7c>)
 8000eba:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ee6:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000ee8:	f002 fa08 	bl	80032fc <HAL_I2C_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8000ef2:	f000 fdf1 	bl	8001ad8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000efa:	f002 ff8b 	bl	8003e14 <HAL_I2CEx_ConfigAnalogFilter>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8000f04:	f000 fde8 	bl	8001ad8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_I2C2_Init+0x74>)
 8000f0c:	f002 ffcd 	bl	8003eaa <HAL_I2CEx_ConfigDigitalFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8000f16:	f000 fddf 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000124 	.word	0x20000124
 8000f24:	40005800 	.word	0x40005800
 8000f28:	20303e5d 	.word	0x20303e5d

08000f2c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <MX_SPI1_Init+0x78>)
 8000f34:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f46:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f4a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f5e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f86:	2208      	movs	r2, #8
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_SPI1_Init+0x74>)
 8000f8c:	f004 f936 	bl	80051fc <HAL_SPI_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8000f96:	f000 fd9f 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000178 	.word	0x20000178
 8000fa4:	40013000 	.word	0x40013000

08000fa8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b09a      	sub	sp, #104	@ 0x68
 8000fac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	222c      	movs	r2, #44	@ 0x2c
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f006 fb30 	bl	8007648 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000fe8:	4b55      	ldr	r3, [pc, #340]	@ (8001140 <MX_TIM1_Init+0x198>)
 8000fea:	4a56      	ldr	r2, [pc, #344]	@ (8001144 <MX_TIM1_Init+0x19c>)
 8000fec:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000fee:	4b54      	ldr	r3, [pc, #336]	@ (8001140 <MX_TIM1_Init+0x198>)
 8000ff0:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000ff4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b52      	ldr	r3, [pc, #328]	@ (8001140 <MX_TIM1_Init+0x198>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = TIM1_ARR_VALUE;
 8000ffc:	4b50      	ldr	r3, [pc, #320]	@ (8001140 <MX_TIM1_Init+0x198>)
 8000ffe:	22c8      	movs	r2, #200	@ 0xc8
 8001000:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b4f      	ldr	r3, [pc, #316]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001008:	4b4d      	ldr	r3, [pc, #308]	@ (8001140 <MX_TIM1_Init+0x198>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b4c      	ldr	r3, [pc, #304]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001014:	484a      	ldr	r0, [pc, #296]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001016:	f004 f99c 	bl	8005352 <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8001020:	f000 fd5a 	bl	8001ad8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800102e:	4619      	mov	r1, r3
 8001030:	4843      	ldr	r0, [pc, #268]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001032:	f004 fcfd 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 800103c:	f000 fd4c 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001040:	483f      	ldr	r0, [pc, #252]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001042:	f004 f9dd 	bl	8005400 <HAL_TIM_PWM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 800104c:	f000 fd44 	bl	8001ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001060:	4619      	mov	r1, r3
 8001062:	4837      	ldr	r0, [pc, #220]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001064:	f005 fa7c 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 800106e:	f000 fd33 	bl	8001ad8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	@ 0x60
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	482a      	ldr	r0, [pc, #168]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001098:	f004 fbb6 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 80010a2:	f000 fd19 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010aa:	2204      	movs	r2, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4824      	ldr	r0, [pc, #144]	@ (8001140 <MX_TIM1_Init+0x198>)
 80010b0:	f004 fbaa 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 80010ba:	f000 fd0d 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010be:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010c2:	2208      	movs	r2, #8
 80010c4:	4619      	mov	r1, r3
 80010c6:	481e      	ldr	r0, [pc, #120]	@ (8001140 <MX_TIM1_Init+0x198>)
 80010c8:	f004 fb9e 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 80010d2:	f000 fd01 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010da:	220c      	movs	r2, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	4818      	ldr	r0, [pc, #96]	@ (8001140 <MX_TIM1_Init+0x198>)
 80010e0:	f004 fb92 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x146>
	{
		Error_Handler();
 80010ea:	f000 fcf5 	bl	8001ad8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001106:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001124:	f005 faaa 	bl	800667c <HAL_TIMEx_ConfigBreakDeadTime>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x18a>
	{
		Error_Handler();
 800112e:	f000 fcd3 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001132:	4803      	ldr	r0, [pc, #12]	@ (8001140 <MX_TIM1_Init+0x198>)
 8001134:	f000 ff56 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 8001138:	bf00      	nop
 800113a:	3768      	adds	r7, #104	@ 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200001dc 	.word	0x200001dc
 8001144:	40010000 	.word	0x40010000

08001148 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b092      	sub	sp, #72	@ 0x48
 800114c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	615a      	str	r2, [r3, #20]
 800117a:	619a      	str	r2, [r3, #24]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001188:	4b3b      	ldr	r3, [pc, #236]	@ (8001278 <MX_TIM2_Init+0x130>)
 800118a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001190:	4b39      	ldr	r3, [pc, #228]	@ (8001278 <MX_TIM2_Init+0x130>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b38      	ldr	r3, [pc, #224]	@ (8001278 <MX_TIM2_Init+0x130>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800119c:	4b36      	ldr	r3, [pc, #216]	@ (8001278 <MX_TIM2_Init+0x130>)
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <MX_TIM2_Init+0x130>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b33      	ldr	r3, [pc, #204]	@ (8001278 <MX_TIM2_Init+0x130>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b0:	4831      	ldr	r0, [pc, #196]	@ (8001278 <MX_TIM2_Init+0x130>)
 80011b2:	f004 f8ce 	bl	8005352 <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 80011bc:	f000 fc8c 	bl	8001ad8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ca:	4619      	mov	r1, r3
 80011cc:	482a      	ldr	r0, [pc, #168]	@ (8001278 <MX_TIM2_Init+0x130>)
 80011ce:	f004 fc2f 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 80011d8:	f000 fc7e 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011dc:	4826      	ldr	r0, [pc, #152]	@ (8001278 <MX_TIM2_Init+0x130>)
 80011de:	f004 f90f 	bl	8005400 <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 80011e8:	f000 fc76 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011ec:	4822      	ldr	r0, [pc, #136]	@ (8001278 <MX_TIM2_Init+0x130>)
 80011ee:	f004 f968 	bl	80054c2 <HAL_TIM_IC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80011f8:	f000 fc6e 	bl	8001ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001204:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	481b      	ldr	r0, [pc, #108]	@ (8001278 <MX_TIM2_Init+0x130>)
 800120c:	f005 f9a8 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 8001216:	f000 fc5f 	bl	8001ad8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	@ 0x60
 800121c:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_TIM2_Init+0x130>)
 8001234:	f004 fae8 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0xfa>
	{
		Error_Handler();
 800123e:	f000 fc4b 	bl	8001ad8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001246:	2301      	movs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	2208      	movs	r2, #8
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	@ (8001278 <MX_TIM2_Init+0x130>)
 800125a:	f004 fa39 	bl	80056d0 <HAL_TIM_IC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x120>
	{
		Error_Handler();
 8001264:	f000 fc38 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <MX_TIM2_Init+0x130>)
 800126a:	f000 febb 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 800126e:	bf00      	nop
 8001270:	3748      	adds	r7, #72	@ 0x48
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000228 	.word	0x20000228

0800127c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2224      	movs	r2, #36	@ 0x24
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f006 f9dc 	bl	8007648 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <MX_TIM3_Init+0xa4>)
 800129c:	4a21      	ldr	r2, [pc, #132]	@ (8001324 <MX_TIM3_Init+0xa8>)
 800129e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <MX_TIM3_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <MX_TIM3_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <MX_TIM3_Init+0xa4>)
 80012ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012b2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <MX_TIM3_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <MX_TIM3_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	@ (8001320 <MX_TIM3_Init+0xa4>)
 80012ec:	f004 f94a 	bl	8005584 <HAL_TIM_Encoder_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 80012f6:	f000 fbef 	bl	8001ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	@ (8001320 <MX_TIM3_Init+0xa4>)
 8001308:	f005 f92a 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001312:	f000 fbe1 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3730      	adds	r7, #48	@ 0x30
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000274 	.word	0x20000274
 8001324:	40000400 	.word	0x40000400

08001328 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	@ 0x30
 800132c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2224      	movs	r2, #36	@ 0x24
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f006 f986 	bl	8007648 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	463b      	mov	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_TIM4_Init+0xa4>)
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <MX_TIM4_Init+0xa8>)
 800134a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_TIM4_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MX_TIM4_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_TIM4_Init+0xa4>)
 800135a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800135e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_TIM4_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_TIM4_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800136c:	2301      	movs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001384:	2301      	movs	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4619      	mov	r1, r3
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_TIM4_Init+0xa4>)
 8001398:	f004 f8f4 	bl	8005584 <HAL_TIM_Encoder_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 80013a2:	f000 fb99 	bl	8001ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	@ (80013cc <MX_TIM4_Init+0xa4>)
 80013b4:	f005 f8d4 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 80013be:	f000 fb8b 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002c0 	.word	0x200002c0
 80013d0:	40000800 	.word	0x40000800

080013d4 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	@ 0x38
 80013d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001406:	4b2d      	ldr	r3, [pc, #180]	@ (80014bc <MX_TIM5_Init+0xe8>)
 8001408:	4a2d      	ldr	r2, [pc, #180]	@ (80014c0 <MX_TIM5_Init+0xec>)
 800140a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <MX_TIM5_Init+0xe8>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <MX_TIM5_Init+0xe8>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <MX_TIM5_Init+0xe8>)
 800141a:	f04f 32ff 	mov.w	r2, #4294967295
 800141e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_TIM5_Init+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <MX_TIM5_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800142c:	4823      	ldr	r0, [pc, #140]	@ (80014bc <MX_TIM5_Init+0xe8>)
 800142e:	f003 ff90 	bl	8005352 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8001438:	f000 fb4e 	bl	8001ad8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001446:	4619      	mov	r1, r3
 8001448:	481c      	ldr	r0, [pc, #112]	@ (80014bc <MX_TIM5_Init+0xe8>)
 800144a:	f004 faf1 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001454:	f000 fb40 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001458:	4818      	ldr	r0, [pc, #96]	@ (80014bc <MX_TIM5_Init+0xe8>)
 800145a:	f003 ffd1 	bl	8005400 <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8001464:	f000 fb38 	bl	8001ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	@ (80014bc <MX_TIM5_Init+0xe8>)
 8001478:	f005 f872 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8001482:	f000 fb29 	bl	8001ad8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	@ 0x60
 8001488:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	@ (80014bc <MX_TIM5_Init+0xe8>)
 800149e:	f004 f9b3 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 80014a8:	f000 fb16 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <MX_TIM5_Init+0xe8>)
 80014ae:	f000 fd99 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 80014b2:	bf00      	nop
 80014b4:	3738      	adds	r7, #56	@ 0x38
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000030c 	.word	0x2000030c
 80014c0:	40000c00 	.word	0x40000c00

080014c4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09a      	sub	sp, #104	@ 0x68
 80014c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	222c      	movs	r2, #44	@ 0x2c
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 f8a2 	bl	8007648 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001504:	4b56      	ldr	r3, [pc, #344]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001506:	4a57      	ldr	r2, [pc, #348]	@ (8001664 <MX_TIM8_Init+0x1a0>)
 8001508:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800150a:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <MX_TIM8_Init+0x19c>)
 800150c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001510:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = TIM8_ARR_VALUE;
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <MX_TIM8_Init+0x19c>)
 800151a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800151e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001526:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b4c      	ldr	r3, [pc, #304]	@ (8001660 <MX_TIM8_Init+0x19c>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001532:	484b      	ldr	r0, [pc, #300]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001534:	f003 ff0d 	bl	8005352 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM8_Init+0x7e>
	{
		Error_Handler();
 800153e:	f000 facb 	bl	8001ad8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800154c:	4619      	mov	r1, r3
 800154e:	4844      	ldr	r0, [pc, #272]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001550:	f004 fa6e 	bl	8005a30 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM8_Init+0x9a>
	{
		Error_Handler();
 800155a:	f000 fabd 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800155e:	4840      	ldr	r0, [pc, #256]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001560:	f003 ff4e 	bl	8005400 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0xaa>
	{
		Error_Handler();
 800156a:	f000 fab5 	bl	8001ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800157a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800157e:	4619      	mov	r1, r3
 8001580:	4837      	ldr	r0, [pc, #220]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001582:	f004 ffed 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM8_Init+0xcc>
	{
		Error_Handler();
 800158c:	f000 faa4 	bl	8001ad8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001590:	2360      	movs	r3, #96	@ 0x60
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	482a      	ldr	r0, [pc, #168]	@ (8001660 <MX_TIM8_Init+0x19c>)
 80015b6:	f004 f927 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM8_Init+0x100>
	{
		Error_Handler();
 80015c0:	f000 fa8a 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015c8:	2204      	movs	r2, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4824      	ldr	r0, [pc, #144]	@ (8001660 <MX_TIM8_Init+0x19c>)
 80015ce:	f004 f91b 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM8_Init+0x118>
	{
		Error_Handler();
 80015d8:	f000 fa7e 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015e0:	2208      	movs	r2, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	481e      	ldr	r0, [pc, #120]	@ (8001660 <MX_TIM8_Init+0x19c>)
 80015e6:	f004 f90f 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM8_Init+0x130>
	{
		Error_Handler();
 80015f0:	f000 fa72 	bl	8001ad8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015f8:	220c      	movs	r2, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	4818      	ldr	r0, [pc, #96]	@ (8001660 <MX_TIM8_Init+0x19c>)
 80015fe:	f004 f903 	bl	8005808 <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM8_Init+0x148>
	{
		Error_Handler();
 8001608:	f000 fa66 	bl	8001ad8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001624:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001642:	f005 f81b 	bl	800667c <HAL_TIMEx_ConfigBreakDeadTime>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM8_Init+0x18c>
	{
		Error_Handler();
 800164c:	f000 fa44 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001650:	4803      	ldr	r0, [pc, #12]	@ (8001660 <MX_TIM8_Init+0x19c>)
 8001652:	f000 fcc7 	bl	8001fe4 <HAL_TIM_MspPostInit>

}
 8001656:	bf00      	nop
 8001658:	3768      	adds	r7, #104	@ 0x68
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000358 	.word	0x20000358
 8001664:	40010400 	.word	0x40010400

08001668 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800166c:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_UART4_Init+0x58>)
 800166e:	4a15      	ldr	r2, [pc, #84]	@ (80016c4 <MX_UART4_Init+0x5c>)
 8001670:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <MX_UART4_Init+0x58>)
 8001674:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001678:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_UART4_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_UART4_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_UART4_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_UART4_Init+0x58>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <MX_UART4_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_UART4_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <MX_UART4_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_UART4_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_UART4_Init+0x58>)
 80016ac:	f005 f864 	bl	8006778 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_UART4_Init+0x52>
	{
		Error_Handler();
 80016b6:	f000 fa0f 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200003a4 	.word	0x200003a4
 80016c4:	40004c00 	.word	0x40004c00

080016c8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_UART5_Init+0x58>)
 80016ce:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <MX_UART5_Init+0x5c>)
 80016d0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_UART5_Init+0x58>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_UART5_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_UART5_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_UART5_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_UART5_Init+0x58>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <MX_UART5_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_UART5_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <MX_UART5_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_UART5_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_UART5_Init+0x58>)
 800170c:	f005 f834 	bl	8006778 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_UART5_Init+0x52>
	{
		Error_Handler();
 8001716:	f000 f9df 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000042c 	.word	0x2000042c
 8001724:	40005000 	.word	0x40005000

08001728 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <MX_USART1_UART_Init+0x5c>)
 8001730:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_USART1_UART_Init+0x58>)
 800176c:	f005 f804 	bl	8006778 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8001776:	f000 f9af 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200004b4 	.word	0x200004b4
 8001784:	40011000 	.word	0x40011000

08001788 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 800178e:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <MX_USART2_UART_Init+0x5c>)
 8001790:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_USART2_UART_Init+0x58>)
 80017cc:	f004 ffd4 	bl	8006778 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80017d6:	f000 f97f 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000053c 	.word	0x2000053c
 80017e4:	40004400 	.word	0x40004400

080017e8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 80017ee:	4a15      	ldr	r2, [pc, #84]	@ (8001844 <MX_USART3_UART_Init+0x5c>)
 80017f0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 80017f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017f8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 800180e:	220c      	movs	r2, #12
 8001810:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_USART3_UART_Init+0x58>)
 800182c:	f004 ffa4 	bl	8006778 <HAL_UART_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8001836:	f000 f94f 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200005c4 	.word	0x200005c4
 8001844:	40004800 	.word	0x40004800

08001848 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	@ 0x38
 800184c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	4b97      	ldr	r3, [pc, #604]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a96      	ldr	r2, [pc, #600]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b94      	ldr	r3, [pc, #592]	@ (8001abc <MX_GPIO_Init+0x274>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b91      	ldr	r3, [pc, #580]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a90      	ldr	r2, [pc, #576]	@ (8001abc <MX_GPIO_Init+0x274>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b8e      	ldr	r3, [pc, #568]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800188e:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a8a      	ldr	r2, [pc, #552]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001894:	f043 0320 	orr.w	r3, r3, #32
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <MX_GPIO_Init+0x274>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a84      	ldr	r2, [pc, #528]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b82      	ldr	r3, [pc, #520]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b7f      	ldr	r3, [pc, #508]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a7e      	ldr	r2, [pc, #504]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b7c      	ldr	r3, [pc, #496]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b79      	ldr	r3, [pc, #484]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a78      	ldr	r2, [pc, #480]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a72      	ldr	r2, [pc, #456]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <MX_GPIO_Init+0x274>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001906:	4b6d      	ldr	r3, [pc, #436]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a6c      	ldr	r2, [pc, #432]	@ (8001abc <MX_GPIO_Init+0x274>)
 800190c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b6a      	ldr	r3, [pc, #424]	@ (8001abc <MX_GPIO_Init+0x274>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2178      	movs	r1, #120	@ 0x78
 8001922:	4867      	ldr	r0, [pc, #412]	@ (8001ac0 <MX_GPIO_Init+0x278>)
 8001924:	f001 fcb8 	bl	8003298 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800192e:	4865      	ldr	r0, [pc, #404]	@ (8001ac4 <MX_GPIO_Init+0x27c>)
 8001930:	f001 fcb2 	bl	8003298 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	2140      	movs	r1, #64	@ 0x40
 8001938:	4863      	ldr	r0, [pc, #396]	@ (8001ac8 <MX_GPIO_Init+0x280>)
 800193a:	f001 fcad 	bl	8003298 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6;
 800193e:	2378      	movs	r3, #120	@ 0x78
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	485a      	ldr	r0, [pc, #360]	@ (8001ac0 <MX_GPIO_Init+0x278>)
 8001956:	f001 faf3 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 800195a:	f643 7308 	movw	r3, #16136	@ 0x3f08
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001960:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4856      	ldr	r0, [pc, #344]	@ (8001acc <MX_GPIO_Init+0x284>)
 8001972:	f001 fae5 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 8001976:	2310      	movs	r3, #16
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800197e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4850      	ldr	r0, [pc, #320]	@ (8001acc <MX_GPIO_Init+0x284>)
 800198c:	f001 fad8 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001990:	2332      	movs	r3, #50	@ 0x32
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a0:	230b      	movs	r3, #11
 80019a2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4849      	ldr	r0, [pc, #292]	@ (8001ad0 <MX_GPIO_Init+0x288>)
 80019ac:	f001 fac8 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019b0:	2386      	movs	r3, #134	@ 0x86
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c0:	230b      	movs	r3, #11
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4842      	ldr	r0, [pc, #264]	@ (8001ad4 <MX_GPIO_Init+0x28c>)
 80019cc:	f001 fab8 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019d0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	4836      	ldr	r0, [pc, #216]	@ (8001ac4 <MX_GPIO_Init+0x27c>)
 80019ea:	f001 faa9 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a00:	230b      	movs	r3, #11
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a08:	4619      	mov	r1, r3
 8001a0a:	482e      	ldr	r0, [pc, #184]	@ (8001ac4 <MX_GPIO_Init+0x27c>)
 8001a0c:	f001 fa98 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a10:	2340      	movs	r3, #64	@ 0x40
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4828      	ldr	r0, [pc, #160]	@ (8001ac8 <MX_GPIO_Init+0x280>)
 8001a28:	f001 fa8a 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4822      	ldr	r0, [pc, #136]	@ (8001ac8 <MX_GPIO_Init+0x280>)
 8001a40:	f001 fa7e 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a44:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a56:	230a      	movs	r3, #10
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481c      	ldr	r0, [pc, #112]	@ (8001ad4 <MX_GPIO_Init+0x28c>)
 8001a62:	f001 fa6d 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4816      	ldr	r0, [pc, #88]	@ (8001ad4 <MX_GPIO_Init+0x28c>)
 8001a7c:	f001 fa60 	bl	8002f40 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a92:	230b      	movs	r3, #11
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480a      	ldr	r0, [pc, #40]	@ (8001ac8 <MX_GPIO_Init+0x280>)
 8001a9e:	f001 fa4f 	bl	8002f40 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	200a      	movs	r0, #10
 8001aa8:	f001 fa05 	bl	8002eb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001aac:	200a      	movs	r0, #10
 8001aae:	f001 fa1e 	bl	8002eee <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3738      	adds	r7, #56	@ 0x38
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <Error_Handler+0x8>

08001ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_MspInit+0x44>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <HAL_MspInit+0x44>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_MspInit+0x44>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <HAL_MspInit+0x44>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <HAL_MspInit+0x44>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <HAL_MspInit+0x44>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <HAL_ADC_MspInit+0x74>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d123      	bne.n	8001b96 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_ADC_MspInit+0x78>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <HAL_ADC_MspInit+0x78>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_ADC_MspInit+0x78>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <HAL_ADC_MspInit+0x78>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <HAL_ADC_MspInit+0x78>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <HAL_ADC_MspInit+0x78>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b82:	2303      	movs	r3, #3
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <HAL_ADC_MspInit+0x7c>)
 8001b92:	f001 f9d5 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	@ 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012000 	.word	0x40012000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0b0      	sub	sp, #192	@ 0xc0
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2290      	movs	r2, #144	@ 0x90
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fd3b 	bl	8007648 <memset>
  if(hi2c->Instance==I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a44      	ldr	r2, [pc, #272]	@ (8001ce8 <HAL_I2C_MspInit+0x13c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d13e      	bne.n	8001c5a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001be0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fedd 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001bf8:	f7ff ff6e 	bl	8001ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4a3a      	ldr	r2, [pc, #232]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c38:	4619      	mov	r1, r3
 8001c3a:	482d      	ldr	r0, [pc, #180]	@ (8001cf0 <HAL_I2C_MspInit+0x144>)
 8001c3c:	f001 f980 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c44:	4a29      	ldr	r2, [pc, #164]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4c:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c58:	e041      	b.n	8001cde <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a25      	ldr	r2, [pc, #148]	@ (8001cf4 <HAL_I2C_MspInit+0x148>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d13c      	bne.n	8001cde <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c68:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 fe99 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001c80:	f7ff ff2a 	bl	8001ad8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	4a18      	ldr	r2, [pc, #96]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c8a:	f043 0320 	orr.w	r3, r3, #32
 8001c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca2:	2312      	movs	r3, #18
 8001ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480d      	ldr	r0, [pc, #52]	@ (8001cf8 <HAL_I2C_MspInit+0x14c>)
 8001cc2:	f001 f93d 	bl	8002f40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001ccc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_I2C_MspInit+0x140>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	bf00      	nop
 8001ce0:	37c0      	adds	r7, #192	@ 0xc0
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40005800 	.word	0x40005800
 8001cf8:	40021400 	.word	0x40021400

08001cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a33      	ldr	r2, [pc, #204]	@ (8001de8 <HAL_SPI_MspInit+0xec>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d160      	bne.n	8001de0 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d1e:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a32      	ldr	r2, [pc, #200]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b30      	ldr	r3, [pc, #192]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a26      	ldr	r2, [pc, #152]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a20      	ldr	r2, [pc, #128]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <HAL_SPI_MspInit+0xf0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8e:	2305      	movs	r3, #5
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	4815      	ldr	r0, [pc, #84]	@ (8001df0 <HAL_SPI_MspInit+0xf4>)
 8001d9a:	f001 f8d1 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dae:	2305      	movs	r3, #5
 8001db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	480e      	ldr	r0, [pc, #56]	@ (8001df4 <HAL_SPI_MspInit+0xf8>)
 8001dba:	f001 f8c1 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <HAL_SPI_MspInit+0xfc>)
 8001ddc:	f001 f8b0 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001de0:	bf00      	nop
 8001de2:	3730      	adds	r7, #48	@ 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40013000 	.word	0x40013000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	40021800 	.word	0x40021800

08001dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	@ 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a32      	ldr	r2, [pc, #200]	@ (8001ee4 <HAL_TIM_Base_MspInit+0xe8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10c      	bne.n	8001e38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e36:	e051      	b.n	8001edc <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e40:	d129      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e84:	2301      	movs	r3, #1
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4817      	ldr	r0, [pc, #92]	@ (8001eec <HAL_TIM_Base_MspInit+0xf0>)
 8001e90:	f001 f856 	bl	8002f40 <HAL_GPIO_Init>
}
 8001e94:	e022      	b.n	8001edc <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <HAL_TIM_Base_MspInit+0xf4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d10c      	bne.n	8001eba <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	e010      	b.n	8001edc <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_TIM_Base_MspInit+0xf8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10b      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_TIM_Base_MspInit+0xec>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	@ 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08c      	sub	sp, #48	@ 0x30
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d128      	bne.n	8001f6c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001f4a:	2330      	movs	r3, #48	@ 0x30
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	481c      	ldr	r0, [pc, #112]	@ (8001fd8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f66:	f000 ffeb 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f6a:	e02d      	b.n	8001fc8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d128      	bne.n	8001fc8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f82:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8e:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a10      	ldr	r2, [pc, #64]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001fa6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fc4:	f000 ffbc 	bl	8002f40 <HAL_GPIO_Init>
}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	@ 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40020c00 	.word	0x40020c00

08001fe4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a45      	ldr	r2, [pc, #276]	@ (8002118 <HAL_TIM_MspPostInit+0x134>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d11d      	bne.n	8002042 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002006:	4b45      	ldr	r3, [pc, #276]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a44      	ldr	r2, [pc, #272]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b42      	ldr	r3, [pc, #264]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 800201e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002030:	2301      	movs	r3, #1
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4839      	ldr	r0, [pc, #228]	@ (8002120 <HAL_TIM_MspPostInit+0x13c>)
 800203c:	f000 ff80 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002040:	e066      	b.n	8002110 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204a:	d11d      	bne.n	8002088 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b33      	ldr	r3, [pc, #204]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a32      	ldr	r2, [pc, #200]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b30      	ldr	r3, [pc, #192]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002076:	2301      	movs	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4828      	ldr	r0, [pc, #160]	@ (8002124 <HAL_TIM_MspPostInit+0x140>)
 8002082:	f000 ff5d 	bl	8002f40 <HAL_GPIO_Init>
}
 8002086:	e043      	b.n	8002110 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a26      	ldr	r2, [pc, #152]	@ (8002128 <HAL_TIM_MspPostInit+0x144>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11c      	bne.n	80020cc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b22      	ldr	r3, [pc, #136]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a21      	ldr	r2, [pc, #132]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	4817      	ldr	r0, [pc, #92]	@ (8002124 <HAL_TIM_MspPostInit+0x140>)
 80020c6:	f000 ff3b 	bl	8002f40 <HAL_GPIO_Init>
}
 80020ca:	e021      	b.n	8002110 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM8)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a16      	ldr	r2, [pc, #88]	@ (800212c <HAL_TIM_MspPostInit+0x148>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d11c      	bne.n	8002110 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a10      	ldr	r2, [pc, #64]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_TIM_MspPostInit+0x138>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80020ee:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002100:	2303      	movs	r3, #3
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4619      	mov	r1, r3
 800210a:	4809      	ldr	r0, [pc, #36]	@ (8002130 <HAL_TIM_MspPostInit+0x14c>)
 800210c:	f000 ff18 	bl	8002f40 <HAL_GPIO_Init>
}
 8002110:	bf00      	nop
 8002112:	3730      	adds	r7, #48	@ 0x30
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010000 	.word	0x40010000
 800211c:	40023800 	.word	0x40023800
 8002120:	40021000 	.word	0x40021000
 8002124:	40020000 	.word	0x40020000
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40010400 	.word	0x40010400
 8002130:	40020800 	.word	0x40020800

08002134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0b6      	sub	sp, #216	@ 0xd8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800214c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002150:	2290      	movs	r2, #144	@ 0x90
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f005 fa77 	bl	8007648 <memset>
  if(huart->Instance==UART4)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4aa0      	ldr	r2, [pc, #640]	@ (80023e0 <HAL_UART_MspInit+0x2ac>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d13e      	bne.n	80021e2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002168:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002170:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fc19 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002180:	f7ff fcaa 	bl	8001ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002184:	4b97      	ldr	r3, [pc, #604]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	4a96      	ldr	r2, [pc, #600]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800218a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800218e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002190:	4b94      	ldr	r3, [pc, #592]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	4b91      	ldr	r3, [pc, #580]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a90      	ldr	r2, [pc, #576]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b8e      	ldr	r3, [pc, #568]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80021b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021ce:	2308      	movs	r3, #8
 80021d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80021d8:	4619      	mov	r1, r3
 80021da:	4883      	ldr	r0, [pc, #524]	@ (80023e8 <HAL_UART_MspInit+0x2b4>)
 80021dc:	f000 feb0 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021e0:	e151      	b.n	8002486 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a81      	ldr	r2, [pc, #516]	@ (80023ec <HAL_UART_MspInit+0x2b8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d160      	bne.n	80022ae <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80021ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fbd5 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002208:	f7ff fc66 	bl	8001ad8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800220c:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	4a74      	ldr	r2, [pc, #464]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002216:	6413      	str	r3, [r2, #64]	@ 0x40
 8002218:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002224:	4b6f      	ldr	r3, [pc, #444]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	4a6e      	ldr	r2, [pc, #440]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800222a:	f043 0302 	orr.w	r3, r3, #2
 800222e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002230:	4b6c      	ldr	r3, [pc, #432]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223c:	4b69      	ldr	r3, [pc, #420]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	4a68      	ldr	r2, [pc, #416]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6313      	str	r3, [r2, #48]	@ 0x30
 8002248:	4b66      	ldr	r3, [pc, #408]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800226e:	2308      	movs	r3, #8
 8002270:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002278:	4619      	mov	r1, r3
 800227a:	485d      	ldr	r0, [pc, #372]	@ (80023f0 <HAL_UART_MspInit+0x2bc>)
 800227c:	f000 fe60 	bl	8002f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800229a:	2308      	movs	r3, #8
 800229c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4850      	ldr	r0, [pc, #320]	@ (80023e8 <HAL_UART_MspInit+0x2b4>)
 80022a8:	f000 fe4a 	bl	8002f40 <HAL_GPIO_Init>
}
 80022ac:	e0eb      	b.n	8002486 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a50      	ldr	r2, [pc, #320]	@ (80023f4 <HAL_UART_MspInit+0x2c0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d151      	bne.n	800235c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022b8:	2340      	movs	r3, #64	@ 0x40
 80022ba:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022bc:	2300      	movs	r3, #0
 80022be:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fb71 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80022d0:	f7ff fc02 	bl	8001ad8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d4:	4b43      	ldr	r3, [pc, #268]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	4a42      	ldr	r2, [pc, #264]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e0:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f0:	4a3c      	ldr	r2, [pc, #240]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f8:	4b3a      	ldr	r3, [pc, #232]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002308:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002318:	2303      	movs	r3, #3
 800231a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800231e:	2304      	movs	r3, #4
 8002320:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002328:	4619      	mov	r1, r3
 800232a:	4831      	ldr	r0, [pc, #196]	@ (80023f0 <HAL_UART_MspInit+0x2bc>)
 800232c:	f000 fe08 	bl	8002f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002330:	2340      	movs	r3, #64	@ 0x40
 8002332:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002348:	2307      	movs	r3, #7
 800234a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002352:	4619      	mov	r1, r3
 8002354:	4826      	ldr	r0, [pc, #152]	@ (80023f0 <HAL_UART_MspInit+0x2bc>)
 8002356:	f000 fdf3 	bl	8002f40 <HAL_GPIO_Init>
}
 800235a:	e094      	b.n	8002486 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <HAL_UART_MspInit+0x2c4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d14c      	bne.n	8002400 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002366:	2380      	movs	r3, #128	@ 0x80
 8002368:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800236a:	2300      	movs	r3, #0
 800236c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fb1a 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800237e:	f7ff fbab 	bl	8001ad8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800239a:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_UART_MspInit+0x2b0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023b2:	2360      	movs	r3, #96	@ 0x60
 80023b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ca:	2307      	movs	r3, #7
 80023cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4809      	ldr	r0, [pc, #36]	@ (80023fc <HAL_UART_MspInit+0x2c8>)
 80023d8:	f000 fdb2 	bl	8002f40 <HAL_GPIO_Init>
}
 80023dc:	e053      	b.n	8002486 <HAL_UART_MspInit+0x352>
 80023de:	bf00      	nop
 80023e0:	40004c00 	.word	0x40004c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020800 	.word	0x40020800
 80023ec:	40005000 	.word	0x40005000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40004400 	.word	0x40004400
 80023fc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a22      	ldr	r2, [pc, #136]	@ (8002490 <HAL_UART_MspInit+0x35c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d13d      	bne.n	8002486 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800240a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002416:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800241a:	4618      	mov	r0, r3
 800241c:	f002 fac6 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002426:	f7ff fb57 	bl	8001ad8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <HAL_UART_MspInit+0x360>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	4a19      	ldr	r2, [pc, #100]	@ (8002494 <HAL_UART_MspInit+0x360>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002434:	6413      	str	r3, [r2, #64]	@ 0x40
 8002436:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_UART_MspInit+0x360>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002442:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_UART_MspInit+0x360>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_UART_MspInit+0x360>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_UART_MspInit+0x360>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800245a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800245e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002474:	2307      	movs	r3, #7
 8002476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002482:	f000 fd5d 	bl	8002f40 <HAL_GPIO_Init>
}
 8002486:	bf00      	nop
 8002488:	37d8      	adds	r7, #216	@ 0xd8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40004800 	.word	0x40004800
 8002494:	40023800 	.word	0x40023800
 8002498:	40020c00 	.word	0x40020c00

0800249c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <NMI_Handler+0x4>

080024a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <MemManage_Handler+0x4>

080024b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <BusFault_Handler+0x4>

080024bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <UsageFault_Handler+0x4>

080024c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f2:	f000 f909 	bl	8002708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}

080024fa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 80024fe:	2010      	movs	r0, #16
 8002500:	f000 fee4 	bl	80032cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e00a      	b.n	8002530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251a:	f3af 8000 	nop.w
 800251e:	4601      	mov	r1, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf0      	blt.n	800251a <_read+0x12>
  }

  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800256a:	605a      	str	r2, [r3, #4]
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f005 f882 	bl	80076e4 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	@ (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	@ (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20080000 	.word	0x20080000
 800260c:	00000400 	.word	0x00000400
 8002610:	20000658 	.word	0x20000658
 8002614:	200007b0 	.word	0x200007b0

08002618 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002640:	480d      	ldr	r0, [pc, #52]	@ (8002678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002642:	490e      	ldr	r1, [pc, #56]	@ (800267c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002644:	4a0e      	ldr	r2, [pc, #56]	@ (8002680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002658:	4c0b      	ldr	r4, [pc, #44]	@ (8002688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002666:	f7ff ffd7 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f005 f841 	bl	80076f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800266e:	f7fe f8d7 	bl	8000820 <main>
  bx  lr    
 8002672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002674:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002680:	080083bc 	.word	0x080083bc
  ldr r2, =_sbss
 8002684:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002688:	200007ac 	.word	0x200007ac

0800268c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC_IRQHandler>

0800268e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002692:	2003      	movs	r0, #3
 8002694:	f000 fc04 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002698:	2000      	movs	r0, #0
 800269a:	f000 f805 	bl	80026a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269e:	f7ff fa21 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_InitTick+0x54>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_InitTick+0x58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026be:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fc2d 	bl	8002f26 <HAL_SYSTICK_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00e      	b.n	80026f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d80a      	bhi.n	80026f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f000 fbe7 	bl	8002eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e8:	4a06      	ldr	r2, [pc, #24]	@ (8002704 <HAL_InitTick+0x5c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000008 	.word	0x20000008
 8002704:	20000004 	.word	0x20000004

08002708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_IncTick+0x20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_IncTick+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	@ (800272c <HAL_IncTick+0x24>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000008 	.word	0x20000008
 800272c:	2000065c 	.word	0x2000065c

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000065c 	.word	0x2000065c

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008

08002790 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e031      	b.n	800280a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f9bc 	bl	8001b2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_ADC_Init+0x84>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f970 	bl	8002ac4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027fa:	e001      	b.n	8002800 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	ffffeefd 	.word	0xffffeefd

08002818 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1c>
 8002830:	2302      	movs	r3, #2
 8002832:	e136      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x28a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b09      	cmp	r3, #9
 8002842:	d93a      	bls.n	80028ba <HAL_ADC_ConfigChannel+0xa2>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800284c:	d035      	beq.n	80028ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68d9      	ldr	r1, [r3, #12]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	3b1e      	subs	r3, #30
 8002864:	2207      	movs	r2, #7
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a8d      	ldr	r2, [pc, #564]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x298>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10a      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68d9      	ldr	r1, [r3, #12]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	061a      	lsls	r2, r3, #24
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002892:	e035      	b.n	8002900 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4403      	add	r3, r0
 80028ac:	3b1e      	subs	r3, #30
 80028ae:	409a      	lsls	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b8:	e022      	b.n	8002900 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	2207      	movs	r2, #7
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	400a      	ands	r2, r1
 80028dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6919      	ldr	r1, [r3, #16]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	4603      	mov	r3, r0
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4403      	add	r3, r0
 80028f6:	409a      	lsls	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b06      	cmp	r3, #6
 8002906:	d824      	bhi.n	8002952 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	3b05      	subs	r3, #5
 800291a:	221f      	movs	r2, #31
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43da      	mvns	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	400a      	ands	r2, r1
 8002928:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	4618      	mov	r0, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b05      	subs	r3, #5
 8002944:	fa00 f203 	lsl.w	r2, r0, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002950:	e04c      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d824      	bhi.n	80029a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b23      	subs	r3, #35	@ 0x23
 800296c:	221f      	movs	r2, #31
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	400a      	ands	r2, r1
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b23      	subs	r3, #35	@ 0x23
 8002996:	fa00 f203 	lsl.w	r2, r0, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80029a2:	e023      	b.n	80029ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b41      	subs	r3, #65	@ 0x41
 80029b6:	221f      	movs	r2, #31
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43da      	mvns	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	400a      	ands	r2, r1
 80029c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	3b41      	subs	r3, #65	@ 0x41
 80029e0:	fa00 f203 	lsl.w	r2, r0, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a30      	ldr	r2, [pc, #192]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x29c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10a      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1f4>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029fe:	d105      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a00:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a06:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a0a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a28      	ldr	r2, [pc, #160]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x29c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d10f      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x21e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	d10b      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a1e:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a25      	ldr	r2, [pc, #148]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a28:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a22      	ldr	r2, [pc, #136]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a34:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x29c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d12b      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x280>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x298>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d003      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x23a>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d122      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a52:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a18      	ldr	r2, [pc, #96]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a68:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a10      	ldr	r2, [pc, #64]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x298>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d111      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_ADC_ConfigChannel+0x2a4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a11      	ldr	r2, [pc, #68]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	0c9a      	lsrs	r2, r3, #18
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a8a:	e002      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f9      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	10000012 	.word	0x10000012
 8002ab4:	40012000 	.word	0x40012000
 8002ab8:	40012300 	.word	0x40012300
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	431bde83 	.word	0x431bde83

08002ac4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002acc:	4b78      	ldr	r3, [pc, #480]	@ (8002cb0 <ADC_Init+0x1ec>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a77      	ldr	r2, [pc, #476]	@ (8002cb0 <ADC_Init+0x1ec>)
 8002ad2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002ad6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ad8:	4b75      	ldr	r3, [pc, #468]	@ (8002cb0 <ADC_Init+0x1ec>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4973      	ldr	r1, [pc, #460]	@ (8002cb0 <ADC_Init+0x1ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	021a      	lsls	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <ADC_Init+0x1f0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	e00f      	b.n	8002bbe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0202 	bic.w	r2, r2, #2
 8002bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	005a      	lsls	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01b      	beq.n	8002c24 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	3b01      	subs	r3, #1
 8002c18:	035a      	lsls	r2, r3, #13
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	e007      	b.n	8002c34 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	051a      	lsls	r2, r3, #20
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6899      	ldr	r1, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c76:	025a      	lsls	r2, r3, #9
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6899      	ldr	r1, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	029a      	lsls	r2, r3, #10
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40012300 	.word	0x40012300
 8002cb4:	0f000001 	.word	0x0f000001

08002cb8 <__NVIC_SetPriorityGrouping>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00
 8002cfc:	05fa0000 	.word	0x05fa0000

08002d00 <__NVIC_GetPriorityGrouping>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <__NVIC_GetPriorityGrouping+0x18>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_EnableIRQ>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db0b      	blt.n	8002d46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4907      	ldr	r1, [pc, #28]	@ (8002d54 <__NVIC_EnableIRQ+0x38>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_DisableIRQ>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db12      	blt.n	8002d90 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	490a      	ldr	r1, [pc, #40]	@ (8002d9c <__NVIC_DisableIRQ+0x44>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	3320      	adds	r3, #32
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d84:	f3bf 8f4f 	dsb	sy
}
 8002d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d8a:	f3bf 8f6f 	isb	sy
}
 8002d8e:	bf00      	nop
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	@ (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	@ (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	@ 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	@ 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <SysTick_Config>:
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e6c:	d301      	bcc.n	8002e72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e72:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <SysTick_Config+0x40>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f7ff ff8e 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <SysTick_Config+0x40>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8a:	4b04      	ldr	r3, [pc, #16]	@ (8002e9c <SysTick_Config+0x40>)
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff05 	bl	8002cb8 <__NVIC_SetPriorityGrouping>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec8:	f7ff ff1a 	bl	8002d00 <__NVIC_GetPriorityGrouping>
 8002ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff8e 	bl	8002df4 <NVIC_EncodePriority>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5d 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff0d 	bl	8002d1c <__NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff1d 	bl	8002d58 <__NVIC_DisableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff94 	bl	8002e5c <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e175      	b.n	800324c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 8164 	bne.w	8003246 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d005      	beq.n	8002f96 <HAL_GPIO_Init+0x56>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d130      	bne.n	8002ff8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 0201 	and.w	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b03      	cmp	r3, #3
 8003002:	d017      	beq.n	8003034 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d123      	bne.n	8003088 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	220f      	movs	r2, #15
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80be 	beq.w	8003246 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	4b66      	ldr	r3, [pc, #408]	@ (8003264 <HAL_GPIO_Init+0x324>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	4a65      	ldr	r2, [pc, #404]	@ (8003264 <HAL_GPIO_Init+0x324>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d6:	4b63      	ldr	r3, [pc, #396]	@ (8003264 <HAL_GPIO_Init+0x324>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030e2:	4a61      	ldr	r2, [pc, #388]	@ (8003268 <HAL_GPIO_Init+0x328>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a58      	ldr	r2, [pc, #352]	@ (800326c <HAL_GPIO_Init+0x32c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d037      	beq.n	800317e <HAL_GPIO_Init+0x23e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a57      	ldr	r2, [pc, #348]	@ (8003270 <HAL_GPIO_Init+0x330>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d031      	beq.n	800317a <HAL_GPIO_Init+0x23a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <HAL_GPIO_Init+0x334>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02b      	beq.n	8003176 <HAL_GPIO_Init+0x236>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a55      	ldr	r2, [pc, #340]	@ (8003278 <HAL_GPIO_Init+0x338>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d025      	beq.n	8003172 <HAL_GPIO_Init+0x232>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a54      	ldr	r2, [pc, #336]	@ (800327c <HAL_GPIO_Init+0x33c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <HAL_GPIO_Init+0x22e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a53      	ldr	r2, [pc, #332]	@ (8003280 <HAL_GPIO_Init+0x340>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_GPIO_Init+0x22a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_GPIO_Init+0x344>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0x226>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a51      	ldr	r2, [pc, #324]	@ (8003288 <HAL_GPIO_Init+0x348>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x222>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a50      	ldr	r2, [pc, #320]	@ (800328c <HAL_GPIO_Init+0x34c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x21e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4f      	ldr	r2, [pc, #316]	@ (8003290 <HAL_GPIO_Init+0x350>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x21a>
 8003156:	2309      	movs	r3, #9
 8003158:	e012      	b.n	8003180 <HAL_GPIO_Init+0x240>
 800315a:	230a      	movs	r3, #10
 800315c:	e010      	b.n	8003180 <HAL_GPIO_Init+0x240>
 800315e:	2308      	movs	r3, #8
 8003160:	e00e      	b.n	8003180 <HAL_GPIO_Init+0x240>
 8003162:	2307      	movs	r3, #7
 8003164:	e00c      	b.n	8003180 <HAL_GPIO_Init+0x240>
 8003166:	2306      	movs	r3, #6
 8003168:	e00a      	b.n	8003180 <HAL_GPIO_Init+0x240>
 800316a:	2305      	movs	r3, #5
 800316c:	e008      	b.n	8003180 <HAL_GPIO_Init+0x240>
 800316e:	2304      	movs	r3, #4
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x240>
 8003172:	2303      	movs	r3, #3
 8003174:	e004      	b.n	8003180 <HAL_GPIO_Init+0x240>
 8003176:	2302      	movs	r3, #2
 8003178:	e002      	b.n	8003180 <HAL_GPIO_Init+0x240>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_GPIO_Init+0x240>
 800317e:	2300      	movs	r3, #0
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f002 0203 	and.w	r2, r2, #3
 8003186:	0092      	lsls	r2, r2, #2
 8003188:	4093      	lsls	r3, r2
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003190:	4935      	ldr	r1, [pc, #212]	@ (8003268 <HAL_GPIO_Init+0x328>)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319e:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_GPIO_Init+0x354>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c2:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <HAL_GPIO_Init+0x354>)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c8:	4b32      	ldr	r3, [pc, #200]	@ (8003294 <HAL_GPIO_Init+0x354>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ec:	4a29      	ldr	r2, [pc, #164]	@ (8003294 <HAL_GPIO_Init+0x354>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f2:	4b28      	ldr	r3, [pc, #160]	@ (8003294 <HAL_GPIO_Init+0x354>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003216:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <HAL_GPIO_Init+0x354>)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_GPIO_Init+0x354>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <HAL_GPIO_Init+0x354>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b0f      	cmp	r3, #15
 8003250:	f67f ae86 	bls.w	8002f60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800
 8003268:	40013800 	.word	0x40013800
 800326c:	40020000 	.word	0x40020000
 8003270:	40020400 	.word	0x40020400
 8003274:	40020800 	.word	0x40020800
 8003278:	40020c00 	.word	0x40020c00
 800327c:	40021000 	.word	0x40021000
 8003280:	40021400 	.word	0x40021400
 8003284:	40021800 	.word	0x40021800
 8003288:	40021c00 	.word	0x40021c00
 800328c:	40022000 	.word	0x40022000
 8003290:	40022400 	.word	0x40022400
 8003294:	40013c00 	.word	0x40013c00

08003298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
 80032a4:	4613      	mov	r3, r2
 80032a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032b4:	e003      	b.n	80032be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032d6:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032e2:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd fa8c 	bl	8000808 <HAL_GPIO_EXTI_Callback>
  }
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e08b      	b.n	8003426 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe fc42 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2224      	movs	r2, #36	@ 0x24
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800334c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800335c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	e006      	b.n	8003384 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003382:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d108      	bne.n	800339e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	e007      	b.n	80033ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003430 <HAL_I2C_Init+0x134>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69d9      	ldr	r1, [r3, #28]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	02008000 	.word	0x02008000

08003434 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	460b      	mov	r3, r1
 8003448:	813b      	strh	r3, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	f040 80f9 	bne.w	800364e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_I2C_Mem_Write+0x34>
 8003462:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0ed      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Mem_Write+0x4e>
 800347e:	2302      	movs	r3, #2
 8003480:	e0e6      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800348a:	f7ff f951 	bl	8002730 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2319      	movs	r3, #25
 8003496:	2201      	movs	r2, #1
 8003498:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fac3 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0d1      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2221      	movs	r2, #33	@ 0x21
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d4:	88f8      	ldrh	r0, [r7, #6]
 80034d6:	893a      	ldrh	r2, [r7, #8]
 80034d8:	8979      	ldrh	r1, [r7, #10]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	4603      	mov	r3, r0
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f9d3 	bl	8003890 <I2C_RequestMemoryWrite>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0a9      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	2bff      	cmp	r3, #255	@ 0xff
 8003504:	d90e      	bls.n	8003524 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	22ff      	movs	r2, #255	@ 0xff
 800350a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	b2da      	uxtb	r2, r3
 8003512:	8979      	ldrh	r1, [r7, #10]
 8003514:	2300      	movs	r3, #0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fc47 	bl	8003db0 <I2C_TransferConfig>
 8003522:	e00f      	b.n	8003544 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	b2da      	uxtb	r2, r3
 8003534:	8979      	ldrh	r1, [r7, #10]
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fc36 	bl	8003db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fac6 	bl	8003ada <I2C_WaitOnTXISFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e07b      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d034      	beq.n	80035fc <HAL_I2C_Mem_Write+0x1c8>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003596:	2b00      	cmp	r3, #0
 8003598:	d130      	bne.n	80035fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	2200      	movs	r2, #0
 80035a2:	2180      	movs	r1, #128	@ 0x80
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fa3f 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e04d      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2bff      	cmp	r3, #255	@ 0xff
 80035bc:	d90e      	bls.n	80035dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	22ff      	movs	r2, #255	@ 0xff
 80035c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	8979      	ldrh	r1, [r7, #10]
 80035cc:	2300      	movs	r3, #0
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fbeb 	bl	8003db0 <I2C_TransferConfig>
 80035da:	e00f      	b.n	80035fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	8979      	ldrh	r1, [r7, #10]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fbda 	bl	8003db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d19e      	bne.n	8003544 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 faac 	bl	8003b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e01a      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2220      	movs	r2, #32
 8003620:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <HAL_I2C_Mem_Write+0x224>)
 800362e:	400b      	ands	r3, r1
 8003630:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	fe00e800 	.word	0xfe00e800

0800365c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	817b      	strh	r3, [r7, #10]
 800366e:	460b      	mov	r3, r1
 8003670:	813b      	strh	r3, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	f040 80fd 	bne.w	800387e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_I2C_Mem_Read+0x34>
 800368a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003696:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0f1      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_I2C_Mem_Read+0x4e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0ea      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036b2:	f7ff f83d 	bl	8002730 <HAL_GetTick>
 80036b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2319      	movs	r3, #25
 80036be:	2201      	movs	r2, #1
 80036c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f9af 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0d5      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2222      	movs	r2, #34	@ 0x22
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2240      	movs	r2, #64	@ 0x40
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a3a      	ldr	r2, [r7, #32]
 80036ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036fc:	88f8      	ldrh	r0, [r7, #6]
 80036fe:	893a      	ldrh	r2, [r7, #8]
 8003700:	8979      	ldrh	r1, [r7, #10]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	4603      	mov	r3, r0
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f913 	bl	8003938 <I2C_RequestMemoryRead>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0ad      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2bff      	cmp	r3, #255	@ 0xff
 800372c:	d90e      	bls.n	800374c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	b2da      	uxtb	r2, r3
 800373a:	8979      	ldrh	r1, [r7, #10]
 800373c:	4b52      	ldr	r3, [pc, #328]	@ (8003888 <HAL_I2C_Mem_Read+0x22c>)
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb33 	bl	8003db0 <I2C_TransferConfig>
 800374a:	e00f      	b.n	800376c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375a:	b2da      	uxtb	r2, r3
 800375c:	8979      	ldrh	r1, [r7, #10]
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <HAL_I2C_Mem_Read+0x22c>)
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fb22 	bl	8003db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	2200      	movs	r2, #0
 8003774:	2104      	movs	r1, #4
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f956 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e07c      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d034      	beq.n	800382c <HAL_I2C_Mem_Read+0x1d0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d130      	bne.n	800382c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	@ 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f927 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e04d      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2bff      	cmp	r3, #255	@ 0xff
 80037ec:	d90e      	bls.n	800380c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fad3 	bl	8003db0 <I2C_TransferConfig>
 800380a:	e00f      	b.n	800382c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fac2 	bl	8003db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d19a      	bne.n	800376c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f994 	bl	8003b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e01a      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2220      	movs	r2, #32
 8003850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_I2C_Mem_Read+0x230>)
 800385e:	400b      	ands	r3, r1
 8003860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	80002400 	.word	0x80002400
 800388c:	fe00e800 	.word	0xfe00e800

08003890 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	8979      	ldrh	r1, [r7, #10]
 80038b0:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <I2C_RequestMemoryWrite+0xa4>)
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fa79 	bl	8003db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f909 	bl	8003ada <I2C_WaitOnTXISFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e02c      	b.n	800392c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038d8:	893b      	ldrh	r3, [r7, #8]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80038e2:	e015      	b.n	8003910 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038e4:	893b      	ldrh	r3, [r7, #8]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f8ef 	bl	8003ada <I2C_WaitOnTXISFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e012      	b.n	800392c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2200      	movs	r2, #0
 8003918:	2180      	movs	r1, #128	@ 0x80
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f884 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	80002000 	.word	0x80002000

08003938 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4603      	mov	r3, r0
 8003948:	817b      	strh	r3, [r7, #10]
 800394a:	460b      	mov	r3, r1
 800394c:	813b      	strh	r3, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	8979      	ldrh	r1, [r7, #10]
 8003958:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <I2C_RequestMemoryRead+0xa4>)
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa26 	bl	8003db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	69b9      	ldr	r1, [r7, #24]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f8b6 	bl	8003ada <I2C_WaitOnTXISFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e02c      	b.n	80039d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800397e:	893b      	ldrh	r3, [r7, #8]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	629a      	str	r2, [r3, #40]	@ 0x28
 8003988:	e015      	b.n	80039b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	b29b      	uxth	r3, r3
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f89c 	bl	8003ada <I2C_WaitOnTXISFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e012      	b.n	80039d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ac:	893b      	ldrh	r3, [r7, #8]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2200      	movs	r2, #0
 80039be:	2140      	movs	r1, #64	@ 0x40
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f831 	bl	8003a28 <I2C_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	80002000 	.word	0x80002000

080039e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d103      	bne.n	80039fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d007      	beq.n	8003a1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	619a      	str	r2, [r3, #24]
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a38:	e03b      	b.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f8d6 	bl	8003bf0 <I2C_IsErrorOccurred>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e041      	b.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d02d      	beq.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7fe fe6b 	bl	8002730 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d122      	bne.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4013      	ands	r3, r2
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d113      	bne.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	f043 0220 	orr.w	r2, r3, #32
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00f      	b.n	8003ad2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d0b4      	beq.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ae6:	e033      	b.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f87f 	bl	8003bf0 <I2C_IsErrorOccurred>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e031      	b.n	8003b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d025      	beq.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fe fe14 	bl	8002730 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11a      	bne.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d013      	beq.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e007      	b.n	8003b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d1c4      	bne.n	8003ae8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b74:	e02f      	b.n	8003bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f838 	bl	8003bf0 <I2C_IsErrorOccurred>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e02d      	b.n	8003be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fe fdd1 	bl	8002730 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11a      	bne.n	8003bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d013      	beq.n	8003bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e007      	b.n	8003be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d1c8      	bne.n	8003b76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d068      	beq.n	8003cee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2210      	movs	r2, #16
 8003c22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c24:	e049      	b.n	8003cba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d045      	beq.n	8003cba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe fd7f 	bl	8002730 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_IsErrorOccurred+0x54>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d13a      	bne.n	8003cba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c66:	d121      	bne.n	8003cac <I2C_IsErrorOccurred+0xbc>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c6e:	d01d      	beq.n	8003cac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d01a      	beq.n	8003cac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c86:	f7fe fd53 	bl	8002730 <HAL_GetTick>
 8003c8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c8c:	e00e      	b.n	8003cac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c8e:	f7fe fd4f 	bl	8002730 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b19      	cmp	r3, #25
 8003c9a:	d907      	bls.n	8003cac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f043 0320 	orr.w	r3, r3, #32
 8003ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003caa:	e006      	b.n	8003cba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d1e9      	bne.n	8003c8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d003      	beq.n	8003cd0 <I2C_IsErrorOccurred+0xe0>
 8003cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0aa      	beq.n	8003c26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f043 0308 	orr.w	r3, r3, #8
 8003d28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01c      	beq.n	8003d9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fe3b 	bl	80039e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <I2C_IsErrorOccurred+0x1bc>)
 8003d76:	400b      	ands	r3, r1
 8003d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3728      	adds	r7, #40	@ 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	fe00e800 	.word	0xfe00e800

08003db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	817b      	strh	r3, [r7, #10]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc2:	897b      	ldrh	r3, [r7, #10]
 8003dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc8:	7a7b      	ldrb	r3, [r7, #9]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	0d5b      	lsrs	r3, r3, #21
 8003dea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003dee:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <I2C_TransferConfig+0x60>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	43db      	mvns	r3, r3
 8003df4:	ea02 0103 	and.w	r1, r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	03ff63ff 	.word	0x03ff63ff

08003e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d138      	bne.n	8003e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e032      	b.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2224      	movs	r2, #36	@ 0x24
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6819      	ldr	r1, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d139      	bne.n	8003f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e033      	b.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2224      	movs	r2, #36	@ 0x24
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0201 	orr.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f48:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40007000 	.word	0x40007000

08003f64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	4a22      	ldr	r2, [pc, #136]	@ (8003ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7a:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f86:	4b1e      	ldr	r3, [pc, #120]	@ (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f92:	f7fe fbcd 	bl	8002730 <HAL_GetTick>
 8003f96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f98:	e009      	b.n	8003fae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f9a:	f7fe fbc9 	bl	8002730 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fa8:	d901      	bls.n	8003fae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e022      	b.n	8003ff4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fae:	4b14      	ldr	r3, [pc, #80]	@ (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fba:	d1ee      	bne.n	8003f9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fbc:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc8:	f7fe fbb2 	bl	8002730 <HAL_GetTick>
 8003fcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fce:	e009      	b.n	8003fe4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fd0:	f7fe fbae 	bl	8002730 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fde:	d901      	bls.n	8003fe4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e007      	b.n	8003ff4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fe4:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ff0:	d1ee      	bne.n	8003fd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e29b      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8087 	beq.w	8004136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004028:	4b96      	ldr	r3, [pc, #600]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b04      	cmp	r3, #4
 8004032:	d00c      	beq.n	800404e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004034:	4b93      	ldr	r3, [pc, #588]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d112      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
 8004040:	4b90      	ldr	r3, [pc, #576]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800404c:	d10b      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404e:	4b8d      	ldr	r3, [pc, #564]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d06c      	beq.n	8004134 <HAL_RCC_OscConfig+0x130>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d168      	bne.n	8004134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e275      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406e:	d106      	bne.n	800407e <HAL_RCC_OscConfig+0x7a>
 8004070:	4b84      	ldr	r3, [pc, #528]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a83      	ldr	r2, [pc, #524]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e02e      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x9c>
 8004086:	4b7f      	ldr	r3, [pc, #508]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7e      	ldr	r2, [pc, #504]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800408c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	4b7c      	ldr	r3, [pc, #496]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7b      	ldr	r2, [pc, #492]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0xc0>
 80040aa:	4b76      	ldr	r3, [pc, #472]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a75      	ldr	r2, [pc, #468]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b73      	ldr	r3, [pc, #460]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a72      	ldr	r2, [pc, #456]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xd8>
 80040c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe fb24 	bl	8002730 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fe fb20 	bl	8002730 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	@ 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e229      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xe8>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fe fb10 	bl	8002730 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004114:	f7fe fb0c 	bl	8002730 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	@ 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e215      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b57      	ldr	r3, [pc, #348]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x110>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d069      	beq.n	8004216 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004142:	4b50      	ldr	r3, [pc, #320]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b4d      	ldr	r3, [pc, #308]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x190>
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b47      	ldr	r3, [pc, #284]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x17a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1e9      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b41      	ldr	r3, [pc, #260]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	493d      	ldr	r1, [pc, #244]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e040      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a38      	ldr	r2, [pc, #224]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fe fac2 	bl	8002730 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fe fabe 	bl	8002730 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1c7      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b30      	ldr	r3, [pc, #192]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4929      	ldr	r1, [pc, #164]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
 80041e2:	e018      	b.n	8004216 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e4:	4b27      	ldr	r3, [pc, #156]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fe fa9e 	bl	8002730 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fe fa9a 	bl	8002730 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e1a3      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1e      	ldr	r3, [pc, #120]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d038      	beq.n	8004294 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d019      	beq.n	800425e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422e:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fe fa7b 	bl	8002730 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423e:	f7fe fa77 	bl	8002730 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e180      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004250:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x23a>
 800425c:	e01a      	b.n	8004294 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425e:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004262:	4a08      	ldr	r2, [pc, #32]	@ (8004284 <HAL_RCC_OscConfig+0x280>)
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fe fa61 	bl	8002730 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004272:	f7fe fa5d 	bl	8002730 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d903      	bls.n	8004288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e166      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
 8004284:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	4b92      	ldr	r3, [pc, #584]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80a4 	beq.w	80043ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b8c      	ldr	r3, [pc, #560]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10d      	bne.n	80042ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b89      	ldr	r3, [pc, #548]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	4a88      	ldr	r2, [pc, #544]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ba:	4b86      	ldr	r3, [pc, #536]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ca:	4b83      	ldr	r3, [pc, #524]	@ (80044d8 <HAL_RCC_OscConfig+0x4d4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042d6:	4b80      	ldr	r3, [pc, #512]	@ (80044d8 <HAL_RCC_OscConfig+0x4d4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7f      	ldr	r2, [pc, #508]	@ (80044d8 <HAL_RCC_OscConfig+0x4d4>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fe fa25 	bl	8002730 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fe fa21 	bl	8002730 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	@ 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e12a      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fc:	4b76      	ldr	r3, [pc, #472]	@ (80044d8 <HAL_RCC_OscConfig+0x4d4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x31a>
 8004310:	4b70      	ldr	r3, [pc, #448]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a6f      	ldr	r2, [pc, #444]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
 800431c:	e02d      	b.n	800437a <HAL_RCC_OscConfig+0x376>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x33c>
 8004326:	4b6b      	ldr	r3, [pc, #428]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	4a6a      	ldr	r2, [pc, #424]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	6713      	str	r3, [r2, #112]	@ 0x70
 8004332:	4b68      	ldr	r3, [pc, #416]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	4a67      	ldr	r2, [pc, #412]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	6713      	str	r3, [r2, #112]	@ 0x70
 800433e:	e01c      	b.n	800437a <HAL_RCC_OscConfig+0x376>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d10c      	bne.n	8004362 <HAL_RCC_OscConfig+0x35e>
 8004348:	4b62      	ldr	r3, [pc, #392]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	4a61      	ldr	r2, [pc, #388]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6713      	str	r3, [r2, #112]	@ 0x70
 8004354:	4b5f      	ldr	r3, [pc, #380]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004358:	4a5e      	ldr	r2, [pc, #376]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0x376>
 8004362:	4b5c      	ldr	r3, [pc, #368]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a5b      	ldr	r2, [pc, #364]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70
 800436e:	4b59      	ldr	r3, [pc, #356]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	4a58      	ldr	r2, [pc, #352]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d015      	beq.n	80043ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fe f9d5 	bl	8002730 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fe f9d1 	bl	8002730 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0d8      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a0:	4b4c      	ldr	r3, [pc, #304]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ee      	beq.n	800438a <HAL_RCC_OscConfig+0x386>
 80043ac:	e014      	b.n	80043d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fe f9bf 	bl	8002730 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe f9bb 	bl	8002730 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0c2      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043cc:	4b41      	ldr	r3, [pc, #260]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ee      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d105      	bne.n	80043ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043de:	4b3d      	ldr	r3, [pc, #244]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	4a3c      	ldr	r2, [pc, #240]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80ae 	beq.w	8004550 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f4:	4b37      	ldr	r3, [pc, #220]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d06d      	beq.n	80044dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d14b      	bne.n	80044a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004408:	4b32      	ldr	r3, [pc, #200]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a31      	ldr	r2, [pc, #196]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fe f98c 	bl	8002730 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe f988 	bl	8002730 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e091      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b29      	ldr	r3, [pc, #164]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	071b      	lsls	r3, r3, #28
 8004466:	491b      	ldr	r1, [pc, #108]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800446c:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe f95a 	bl	8002730 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe f956 	bl	8002730 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e05f      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x47c>
 800449e:	e057      	b.n	8004550 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a0:	4b0c      	ldr	r3, [pc, #48]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0b      	ldr	r2, [pc, #44]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80044a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe f940 	bl	8002730 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe f93c 	bl	8002730 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e045      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b03      	ldr	r3, [pc, #12]	@ (80044d4 <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x4b0>
 80044d2:	e03d      	b.n	8004550 <HAL_RCC_OscConfig+0x54c>
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044dc:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <HAL_RCC_OscConfig+0x558>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d030      	beq.n	800454c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d129      	bne.n	800454c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d122      	bne.n	800454c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004512:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004514:	4293      	cmp	r3, r2
 8004516:	d119      	bne.n	800454c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3b01      	subs	r3, #1
 8004526:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d10f      	bne.n	800454c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0d0      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b6a      	ldr	r3, [pc, #424]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d910      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b67      	ldr	r3, [pc, #412]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 020f 	bic.w	r2, r3, #15
 800458e:	4965      	ldr	r1, [pc, #404]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b63      	ldr	r3, [pc, #396]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b8      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c0:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a58      	ldr	r2, [pc, #352]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d8:	4b53      	ldr	r3, [pc, #332]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a52      	ldr	r2, [pc, #328]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b50      	ldr	r3, [pc, #320]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	494d      	ldr	r1, [pc, #308]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d040      	beq.n	8004684 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b47      	ldr	r3, [pc, #284]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d115      	bne.n	8004642 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e07f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d107      	bne.n	8004632 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004622:	4b41      	ldr	r3, [pc, #260]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e073      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004632:	4b3d      	ldr	r3, [pc, #244]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e06b      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004642:	4b39      	ldr	r3, [pc, #228]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f023 0203 	bic.w	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4936      	ldr	r1, [pc, #216]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fe f86c 	bl	8002730 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	e00a      	b.n	8004672 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465c:	f7fe f868 	bl	8002730 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e053      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004672:	4b2d      	ldr	r3, [pc, #180]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 020c 	and.w	r2, r3, #12
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	429a      	cmp	r2, r3
 8004682:	d1eb      	bne.n	800465c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004684:	4b27      	ldr	r3, [pc, #156]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d210      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004692:	4b24      	ldr	r3, [pc, #144]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 020f 	bic.w	r2, r3, #15
 800469a:	4922      	ldr	r1, [pc, #136]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	4313      	orrs	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b20      	ldr	r3, [pc, #128]	@ (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e032      	b.n	800471a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4916      	ldr	r1, [pc, #88]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490e      	ldr	r1, [pc, #56]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f2:	f000 f821 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	490a      	ldr	r1, [pc, #40]	@ (800472c <HAL_RCC_ClockConfig+0x1cc>)
 8004704:	5ccb      	ldrb	r3, [r1, r3]
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a09      	ldr	r2, [pc, #36]	@ (8004730 <HAL_RCC_ClockConfig+0x1d0>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x1d4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd ffc8 	bl	80026a8 <HAL_InitTick>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	08008260 	.word	0x08008260
 8004730:	20000000 	.word	0x20000000
 8004734:	20000004 	.word	0x20000004

08004738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800473c:	b094      	sub	sp, #80	@ 0x50
 800473e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	647b      	str	r3, [r7, #68]	@ 0x44
 8004744:	2300      	movs	r3, #0
 8004746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004748:	2300      	movs	r3, #0
 800474a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004750:	4b79      	ldr	r3, [pc, #484]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d00d      	beq.n	8004778 <HAL_RCC_GetSysClockFreq+0x40>
 800475c:	2b08      	cmp	r3, #8
 800475e:	f200 80e1 	bhi.w	8004924 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_RCC_GetSysClockFreq+0x34>
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_RCC_GetSysClockFreq+0x3a>
 800476a:	e0db      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b73      	ldr	r3, [pc, #460]	@ (800493c <HAL_RCC_GetSysClockFreq+0x204>)
 800476e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004770:	e0db      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004772:	4b73      	ldr	r3, [pc, #460]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x208>)
 8004774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004776:	e0d8      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004778:	4b6f      	ldr	r3, [pc, #444]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004780:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004782:	4b6d      	ldr	r3, [pc, #436]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d063      	beq.n	8004856 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478e:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	2200      	movs	r2, #0
 8004796:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004798:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	0159      	lsls	r1, r3, #5
 80047b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047bc:	0150      	lsls	r0, r2, #5
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4621      	mov	r1, r4
 80047c4:	1a51      	subs	r1, r2, r1
 80047c6:	6139      	str	r1, [r7, #16]
 80047c8:	4629      	mov	r1, r5
 80047ca:	eb63 0301 	sbc.w	r3, r3, r1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047dc:	4659      	mov	r1, fp
 80047de:	018b      	lsls	r3, r1, #6
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047e6:	4651      	mov	r1, sl
 80047e8:	018a      	lsls	r2, r1, #6
 80047ea:	4651      	mov	r1, sl
 80047ec:	ebb2 0801 	subs.w	r8, r2, r1
 80047f0:	4659      	mov	r1, fp
 80047f2:	eb63 0901 	sbc.w	r9, r3, r1
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004802:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004806:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480a:	4690      	mov	r8, r2
 800480c:	4699      	mov	r9, r3
 800480e:	4623      	mov	r3, r4
 8004810:	eb18 0303 	adds.w	r3, r8, r3
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	462b      	mov	r3, r5
 8004818:	eb49 0303 	adc.w	r3, r9, r3
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482a:	4629      	mov	r1, r5
 800482c:	024b      	lsls	r3, r1, #9
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004834:	4621      	mov	r1, r4
 8004836:	024a      	lsls	r2, r1, #9
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	2200      	movs	r2, #0
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004848:	f7fb fd4a 	bl	80002e0 <__aeabi_uldivmod>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4613      	mov	r3, r2
 8004852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004854:	e058      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004856:	4b38      	ldr	r3, [pc, #224]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	099b      	lsrs	r3, r3, #6
 800485c:	2200      	movs	r2, #0
 800485e:	4618      	mov	r0, r3
 8004860:	4611      	mov	r1, r2
 8004862:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
 800486c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004870:	4642      	mov	r2, r8
 8004872:	464b      	mov	r3, r9
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	0159      	lsls	r1, r3, #5
 800487e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004882:	0150      	lsls	r0, r2, #5
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4641      	mov	r1, r8
 800488a:	ebb2 0a01 	subs.w	sl, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb63 0b01 	sbc.w	fp, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048a8:	ebb2 040a 	subs.w	r4, r2, sl
 80048ac:	eb63 050b 	sbc.w	r5, r3, fp
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	00eb      	lsls	r3, r5, #3
 80048ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048be:	00e2      	lsls	r2, r4, #3
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	4643      	mov	r3, r8
 80048c6:	18e3      	adds	r3, r4, r3
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	464b      	mov	r3, r9
 80048cc:	eb45 0303 	adc.w	r3, r5, r3
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048de:	4629      	mov	r1, r5
 80048e0:	028b      	lsls	r3, r1, #10
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e8:	4621      	mov	r1, r4
 80048ea:	028a      	lsls	r2, r1, #10
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048f2:	2200      	movs	r2, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	61fa      	str	r2, [r7, #28]
 80048f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fc:	f7fb fcf0 	bl	80002e0 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x200>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	3301      	adds	r3, #1
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004918:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800491a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004922:	e002      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_GetSysClockFreq+0x204>)
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800492c:	4618      	mov	r0, r3
 800492e:	3750      	adds	r7, #80	@ 0x50
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	00f42400 	.word	0x00f42400
 8004940:	007a1200 	.word	0x007a1200

08004944 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004948:	4b03      	ldr	r3, [pc, #12]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004960:	f7ff fff0 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	0a9b      	lsrs	r3, r3, #10
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40023800 	.word	0x40023800
 8004980:	08008270 	.word	0x08008270

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004988:	f7ff ffdc 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	@ (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	08008270 	.word	0x08008270

080049ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049d4:	4b69      	ldr	r3, [pc, #420]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a68      	ldr	r2, [pc, #416]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049de:	6093      	str	r3, [r2, #8]
 80049e0:	4b66      	ldr	r3, [pc, #408]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e8:	4964      	ldr	r1, [pc, #400]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a06:	4b5d      	ldr	r3, [pc, #372]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	4959      	ldr	r1, [pc, #356]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d017      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a42:	4b4e      	ldr	r3, [pc, #312]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	494a      	ldr	r1, [pc, #296]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a60:	d101      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 808b 	beq.w	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b3a      	ldr	r3, [pc, #232]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	4a39      	ldr	r2, [pc, #228]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a9c:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aa8:	4b35      	ldr	r3, [pc, #212]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a34      	ldr	r2, [pc, #208]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fe3c 	bl	8002730 <HAL_GetTick>
 8004ab8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abc:	f7fd fe38 	bl	8002730 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e38f      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ace:	4b2c      	ldr	r3, [pc, #176]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ada:	4b28      	ldr	r3, [pc, #160]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d035      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d02e      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af8:	4b20      	ldr	r3, [pc, #128]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b02:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b06:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b12:	4a1a      	ldr	r2, [pc, #104]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b1a:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b20:	4b16      	ldr	r3, [pc, #88]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d114      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fe00 	bl	8002730 <HAL_GetTick>
 8004b30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fd fdfc 	bl	8002730 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e351      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ee      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b62:	d111      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	4901      	ldr	r1, [pc, #4]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40007000 	.word	0x40007000
 8004b84:	0ffffcff 	.word	0x0ffffcff
 8004b88:	4bac      	ldr	r3, [pc, #688]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4aab      	ldr	r2, [pc, #684]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b92:	6093      	str	r3, [r2, #8]
 8004b94:	4ba9      	ldr	r3, [pc, #676]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba0:	49a6      	ldr	r1, [pc, #664]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bb2:	4ba2      	ldr	r3, [pc, #648]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bb8:	4aa0      	ldr	r2, [pc, #640]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004bc2:	4b9e      	ldr	r3, [pc, #632]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	499b      	ldr	r1, [pc, #620]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be0:	4b96      	ldr	r3, [pc, #600]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bee:	4993      	ldr	r1, [pc, #588]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c02:	4b8e      	ldr	r3, [pc, #568]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c10:	498a      	ldr	r1, [pc, #552]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c24:	4b85      	ldr	r3, [pc, #532]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c32:	4982      	ldr	r1, [pc, #520]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c46:	4b7d      	ldr	r3, [pc, #500]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4979      	ldr	r1, [pc, #484]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c68:	4b74      	ldr	r3, [pc, #464]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	4971      	ldr	r1, [pc, #452]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f023 020c 	bic.w	r2, r3, #12
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c98:	4968      	ldr	r1, [pc, #416]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cac:	4b63      	ldr	r3, [pc, #396]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cba:	4960      	ldr	r1, [pc, #384]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cce:	4b5b      	ldr	r3, [pc, #364]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cdc:	4957      	ldr	r1, [pc, #348]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cf0:	4b52      	ldr	r3, [pc, #328]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfe:	494f      	ldr	r1, [pc, #316]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d20:	4946      	ldr	r1, [pc, #280]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d34:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	493e      	ldr	r1, [pc, #248]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d56:	4b39      	ldr	r3, [pc, #228]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d64:	4935      	ldr	r1, [pc, #212]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d78:	4b30      	ldr	r3, [pc, #192]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d86:	492d      	ldr	r1, [pc, #180]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d9a:	4b28      	ldr	r3, [pc, #160]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da8:	4924      	ldr	r1, [pc, #144]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dda:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de8:	4914      	ldr	r1, [pc, #80]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0c:	490b      	ldr	r1, [pc, #44]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00f      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e20:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e30:	4902      	ldr	r1, [pc, #8]	@ (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5c:	4986      	ldr	r1, [pc, #536]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e70:	4b81      	ldr	r3, [pc, #516]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e76:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e80:	497d      	ldr	r1, [pc, #500]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d006      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80d6 	beq.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e9c:	4b76      	ldr	r3, [pc, #472]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a75      	ldr	r2, [pc, #468]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fd fc42 	bl	8002730 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eb0:	f7fd fc3e 	bl	8002730 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	@ 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e195      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d021      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d11d      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ee2:	4b65      	ldr	r3, [pc, #404]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ef0:	4b61      	ldr	r3, [pc, #388]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef6:	0e1b      	lsrs	r3, r3, #24
 8004ef8:	f003 030f 	and.w	r3, r3, #15
 8004efc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	019a      	lsls	r2, r3, #6
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	071b      	lsls	r3, r3, #28
 8004f16:	4958      	ldr	r1, [pc, #352]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02e      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f48:	d129      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f58:	4b47      	ldr	r3, [pc, #284]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f5e:	0f1b      	lsrs	r3, r3, #28
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	019a      	lsls	r2, r3, #6
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	071b      	lsls	r3, r3, #28
 8004f7e:	493e      	ldr	r1, [pc, #248]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f86:	4b3c      	ldr	r3, [pc, #240]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8c:	f023 021f 	bic.w	r2, r3, #31
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	3b01      	subs	r3, #1
 8004f96:	4938      	ldr	r1, [pc, #224]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004faa:	4b33      	ldr	r3, [pc, #204]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb0:	0e1b      	lsrs	r3, r3, #24
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbe:	0f1b      	lsrs	r3, r3, #28
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	019a      	lsls	r2, r3, #6
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	071b      	lsls	r3, r3, #28
 8004fde:	4926      	ldr	r1, [pc, #152]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d011      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	019a      	lsls	r2, r3, #6
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	071b      	lsls	r3, r3, #28
 800500e:	491a      	ldr	r1, [pc, #104]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005016:	4b18      	ldr	r3, [pc, #96]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a17      	ldr	r2, [pc, #92]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fd fb85 	bl	8002730 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005028:	e008      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800502a:	f7fd fb81 	bl	8002730 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	@ 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0d8      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800503c:	4b0e      	ldr	r3, [pc, #56]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b01      	cmp	r3, #1
 800504c:	f040 80ce 	bne.w	80051ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005050:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800505a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800505c:	f7fd fb68 	bl	8002730 <HAL_GetTick>
 8005060:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005062:	e00b      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005064:	f7fd fb64 	bl	8002730 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	@ 0x64
 8005070:	d904      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0bb      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800507c:	4b5e      	ldr	r3, [pc, #376]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005088:	d0ec      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02e      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050b2:	4b51      	ldr	r3, [pc, #324]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050c0:	4b4d      	ldr	r3, [pc, #308]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	0f1b      	lsrs	r3, r3, #28
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	019a      	lsls	r2, r3, #6
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	061b      	lsls	r3, r3, #24
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	071b      	lsls	r3, r3, #28
 80050e6:	4944      	ldr	r1, [pc, #272]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050ee:	4b42      	ldr	r3, [pc, #264]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	493d      	ldr	r1, [pc, #244]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d022      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800511c:	d11d      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800511e:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	0e1b      	lsrs	r3, r3, #24
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800512c:	4b32      	ldr	r3, [pc, #200]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	0f1b      	lsrs	r3, r3, #28
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	019a      	lsls	r2, r3, #6
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	071b      	lsls	r3, r3, #28
 8005152:	4929      	ldr	r1, [pc, #164]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d028      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005166:	4b24      	ldr	r3, [pc, #144]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	0e1b      	lsrs	r3, r3, #24
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005174:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	0c1b      	lsrs	r3, r3, #16
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	019a      	lsls	r2, r3, #6
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	431a      	orrs	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	4917      	ldr	r1, [pc, #92]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051a2:	4b15      	ldr	r3, [pc, #84]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	4911      	ldr	r1, [pc, #68]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051b8:	4b0f      	ldr	r3, [pc, #60]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0e      	ldr	r2, [pc, #56]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c4:	f7fd fab4 	bl	8002730 <HAL_GetTick>
 80051c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051cc:	f7fd fab0 	bl	8002730 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	@ 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e007      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ea:	d1ef      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023800 	.word	0x40023800

080051fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e09d      	b.n	800534a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d108      	bne.n	8005228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800521e:	d009      	beq.n	8005234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	61da      	str	r2, [r3, #28]
 8005226:	e005      	b.n	8005234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc fd54 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005274:	d902      	bls.n	800527c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e002      	b.n	8005282 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800527c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005280:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800528a:	d007      	beq.n	800529c <HAL_SPI_Init+0xa0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005294:	d002      	beq.n	800529c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	ea42 0103 	orr.w	r1, r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	f003 0204 	and.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005318:	ea42 0103 	orr.w	r1, r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e049      	b.n	80053f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fc fd3f 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f000 fc17 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e049      	b.n	80054a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d106      	bne.n	800542c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f841 	bl	80054ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3304      	adds	r3, #4
 800543c:	4619      	mov	r1, r3
 800543e:	4610      	mov	r0, r2
 8005440:	f000 fbc0 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e049      	b.n	8005568 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f841 	bl	8005570 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f000 fb5f 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e08f      	b.n	80056b8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fc fca3 	bl	8001ef8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b3e      	ldr	r3, [pc, #248]	@ (80056c0 <HAL_TIM_Encoder_Init+0x13c>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f000 faf5 	bl	8005bc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4b31      	ldr	r3, [pc, #196]	@ (80056c4 <HAL_TIM_Encoder_Init+0x140>)
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	4313      	orrs	r3, r2
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4b2b      	ldr	r3, [pc, #172]	@ (80056c8 <HAL_TIM_Encoder_Init+0x144>)
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4b2a      	ldr	r3, [pc, #168]	@ (80056cc <HAL_TIM_Encoder_Init+0x148>)
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	4313      	orrs	r3, r2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	011a      	lsls	r2, r3, #4
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	031b      	lsls	r3, r3, #12
 8005644:	4313      	orrs	r3, r2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	4313      	orrs	r3, r2
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	fffebff8 	.word	0xfffebff8
 80056c4:	fffffcfc 	.word	0xfffffcfc
 80056c8:	fffff3f3 	.word	0xfffff3f3
 80056cc:	ffff0f0f 	.word	0xffff0f0f

080056d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e088      	b.n	8005800 <HAL_TIM_IC_ConfigChannel+0x130>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800570c:	f000 fd64 	bl	80061d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 020c 	bic.w	r2, r2, #12
 800571e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6999      	ldr	r1, [r3, #24]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	619a      	str	r2, [r3, #24]
 8005732:	e060      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d11c      	bne.n	8005774 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800574a:	f000 fde8 	bl	800631e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800575c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6999      	ldr	r1, [r3, #24]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	619a      	str	r2, [r3, #24]
 8005772:	e040      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d11b      	bne.n	80057b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800578a:	f000 fe35 	bl	80063f8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 020c 	bic.w	r2, r2, #12
 800579c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69d9      	ldr	r1, [r3, #28]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	61da      	str	r2, [r3, #28]
 80057b0:	e021      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b0c      	cmp	r3, #12
 80057b6:	d11c      	bne.n	80057f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80057c8:	f000 fe52 	bl	8006470 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69d9      	ldr	r1, [r3, #28]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	61da      	str	r2, [r3, #28]
 80057f0:	e001      	b.n	80057f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005822:	2302      	movs	r3, #2
 8005824:	e0ff      	b.n	8005a26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b14      	cmp	r3, #20
 8005832:	f200 80f0 	bhi.w	8005a16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005836:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005891 	.word	0x08005891
 8005840:	08005a17 	.word	0x08005a17
 8005844:	08005a17 	.word	0x08005a17
 8005848:	08005a17 	.word	0x08005a17
 800584c:	080058d1 	.word	0x080058d1
 8005850:	08005a17 	.word	0x08005a17
 8005854:	08005a17 	.word	0x08005a17
 8005858:	08005a17 	.word	0x08005a17
 800585c:	08005913 	.word	0x08005913
 8005860:	08005a17 	.word	0x08005a17
 8005864:	08005a17 	.word	0x08005a17
 8005868:	08005a17 	.word	0x08005a17
 800586c:	08005953 	.word	0x08005953
 8005870:	08005a17 	.word	0x08005a17
 8005874:	08005a17 	.word	0x08005a17
 8005878:	08005a17 	.word	0x08005a17
 800587c:	08005995 	.word	0x08005995
 8005880:	08005a17 	.word	0x08005a17
 8005884:	08005a17 	.word	0x08005a17
 8005888:	08005a17 	.word	0x08005a17
 800588c:	080059d5 	.word	0x080059d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fa40 	bl	8005d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0208 	orr.w	r2, r2, #8
 80058aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0204 	bic.w	r2, r2, #4
 80058ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6999      	ldr	r1, [r3, #24]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	619a      	str	r2, [r3, #24]
      break;
 80058ce:	e0a5      	b.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fa92 	bl	8005e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6999      	ldr	r1, [r3, #24]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	619a      	str	r2, [r3, #24]
      break;
 8005910:	e084      	b.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fae9 	bl	8005ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0208 	orr.w	r2, r2, #8
 800592c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0204 	bic.w	r2, r2, #4
 800593c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69d9      	ldr	r1, [r3, #28]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	61da      	str	r2, [r3, #28]
      break;
 8005950:	e064      	b.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fb3f 	bl	8005fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800596c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69d9      	ldr	r1, [r3, #28]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	021a      	lsls	r2, r3, #8
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	61da      	str	r2, [r3, #28]
      break;
 8005992:	e043      	b.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fb76 	bl	800608c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0208 	orr.w	r2, r2, #8
 80059ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0204 	bic.w	r2, r2, #4
 80059be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80059d2:	e023      	b.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fba8 	bl	8006130 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	021a      	lsls	r2, r3, #8
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a14:	e002      	b.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
      break;
 8005a1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop

08005a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_ConfigClockSource+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0b4      	b.n	8005bb6 <HAL_TIM_ConfigClockSource+0x186>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	4b56      	ldr	r3, [pc, #344]	@ (8005bc0 <HAL_TIM_ConfigClockSource+0x190>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a84:	d03e      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0xd4>
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a8a:	f200 8087 	bhi.w	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a92:	f000 8086 	beq.w	8005ba2 <HAL_TIM_ConfigClockSource+0x172>
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9a:	d87f      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b70      	cmp	r3, #112	@ 0x70
 8005a9e:	d01a      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8005aa0:	2b70      	cmp	r3, #112	@ 0x70
 8005aa2:	d87b      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b60      	cmp	r3, #96	@ 0x60
 8005aa6:	d050      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x11a>
 8005aa8:	2b60      	cmp	r3, #96	@ 0x60
 8005aaa:	d877      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b50      	cmp	r3, #80	@ 0x50
 8005aae:	d03c      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0xfa>
 8005ab0:	2b50      	cmp	r3, #80	@ 0x50
 8005ab2:	d873      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b40      	cmp	r3, #64	@ 0x40
 8005ab6:	d058      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x13a>
 8005ab8:	2b40      	cmp	r3, #64	@ 0x40
 8005aba:	d86f      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b30      	cmp	r3, #48	@ 0x30
 8005abe:	d064      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	2b30      	cmp	r3, #48	@ 0x30
 8005ac2:	d86b      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d060      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d867      	bhi.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d05c      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d05a      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ad4:	e062      	b.n	8005b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae6:	f000 fd1b 	bl	8006520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	609a      	str	r2, [r3, #8]
      break;
 8005b02:	e04f      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b14:	f000 fd04 	bl	8006520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b26:	609a      	str	r2, [r3, #8]
      break;
 8005b28:	e03c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 fbc2 	bl	80062c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2150      	movs	r1, #80	@ 0x50
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fcd1 	bl	80064ea <TIM_ITRx_SetConfig>
      break;
 8005b48:	e02c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 fc1e 	bl	8006398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2160      	movs	r1, #96	@ 0x60
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fcc1 	bl	80064ea <TIM_ITRx_SetConfig>
      break;
 8005b68:	e01c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	461a      	mov	r2, r3
 8005b78:	f000 fba2 	bl	80062c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2140      	movs	r1, #64	@ 0x40
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fcb1 	bl	80064ea <TIM_ITRx_SetConfig>
      break;
 8005b88:	e00c      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f000 fca8 	bl	80064ea <TIM_ITRx_SetConfig>
      break;
 8005b9a:	e003      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	fffeff88 	.word	0xfffeff88

08005bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a46      	ldr	r2, [pc, #280]	@ (8005cf0 <TIM_Base_SetConfig+0x12c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be2:	d00f      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a43      	ldr	r2, [pc, #268]	@ (8005cf4 <TIM_Base_SetConfig+0x130>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a42      	ldr	r2, [pc, #264]	@ (8005cf8 <TIM_Base_SetConfig+0x134>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a41      	ldr	r2, [pc, #260]	@ (8005cfc <TIM_Base_SetConfig+0x138>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	@ (8005d00 <TIM_Base_SetConfig+0x13c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d108      	bne.n	8005c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a35      	ldr	r2, [pc, #212]	@ (8005cf0 <TIM_Base_SetConfig+0x12c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c24:	d027      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a32      	ldr	r2, [pc, #200]	@ (8005cf4 <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d023      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a31      	ldr	r2, [pc, #196]	@ (8005cf8 <TIM_Base_SetConfig+0x134>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01f      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a30      	ldr	r2, [pc, #192]	@ (8005cfc <TIM_Base_SetConfig+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2f      	ldr	r2, [pc, #188]	@ (8005d00 <TIM_Base_SetConfig+0x13c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d017      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2e      	ldr	r2, [pc, #184]	@ (8005d04 <TIM_Base_SetConfig+0x140>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2d      	ldr	r2, [pc, #180]	@ (8005d08 <TIM_Base_SetConfig+0x144>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00f      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <TIM_Base_SetConfig+0x148>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2b      	ldr	r2, [pc, #172]	@ (8005d10 <TIM_Base_SetConfig+0x14c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <TIM_Base_SetConfig+0x150>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a29      	ldr	r2, [pc, #164]	@ (8005d18 <TIM_Base_SetConfig+0x154>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d108      	bne.n	8005c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a10      	ldr	r2, [pc, #64]	@ (8005cf0 <TIM_Base_SetConfig+0x12c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_Base_SetConfig+0xf8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a12      	ldr	r2, [pc, #72]	@ (8005d00 <TIM_Base_SetConfig+0x13c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	611a      	str	r2, [r3, #16]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	40001800 	.word	0x40001800
 8005d14:	40001c00 	.word	0x40001c00
 8005d18:	40002000 	.word	0x40002000

08005d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f023 0201 	bic.w	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <TIM_OC1_SetConfig+0xd8>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 0302 	bic.w	r3, r3, #2
 8005d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <TIM_OC1_SetConfig+0xdc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC1_SetConfig+0x64>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a20      	ldr	r2, [pc, #128]	@ (8005dfc <TIM_OC1_SetConfig+0xe0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10c      	bne.n	8005d9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f023 0308 	bic.w	r3, r3, #8
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 0304 	bic.w	r3, r3, #4
 8005d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a16      	ldr	r2, [pc, #88]	@ (8005df8 <TIM_OC1_SetConfig+0xdc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC1_SetConfig+0x8e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a15      	ldr	r2, [pc, #84]	@ (8005dfc <TIM_OC1_SetConfig+0xe0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	fffeff8f 	.word	0xfffeff8f
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400

08005e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0210 	bic.w	r2, r3, #16
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee4 <TIM_OC2_SetConfig+0xe4>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0320 	bic.w	r3, r3, #32
 8005e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a23      	ldr	r2, [pc, #140]	@ (8005ee8 <TIM_OC2_SetConfig+0xe8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_OC2_SetConfig+0x68>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a22      	ldr	r2, [pc, #136]	@ (8005eec <TIM_OC2_SetConfig+0xec>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10d      	bne.n	8005e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <TIM_OC2_SetConfig+0xe8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC2_SetConfig+0x94>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a17      	ldr	r2, [pc, #92]	@ (8005eec <TIM_OC2_SetConfig+0xec>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d113      	bne.n	8005ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	feff8fff 	.word	0xfeff8fff
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd0 <TIM_OC3_SetConfig+0xe0>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a22      	ldr	r2, [pc, #136]	@ (8005fd4 <TIM_OC3_SetConfig+0xe4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_OC3_SetConfig+0x66>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a21      	ldr	r2, [pc, #132]	@ (8005fd8 <TIM_OC3_SetConfig+0xe8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d10d      	bne.n	8005f72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a17      	ldr	r2, [pc, #92]	@ (8005fd4 <TIM_OC3_SetConfig+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC3_SetConfig+0x92>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a16      	ldr	r2, [pc, #88]	@ (8005fd8 <TIM_OC3_SetConfig+0xe8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d113      	bne.n	8005faa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	621a      	str	r2, [r3, #32]
}
 8005fc4:	bf00      	nop
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	fffeff8f 	.word	0xfffeff8f
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40010400 	.word	0x40010400

08005fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4b1e      	ldr	r3, [pc, #120]	@ (8006080 <TIM_OC4_SetConfig+0xa4>)
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	031b      	lsls	r3, r3, #12
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a13      	ldr	r2, [pc, #76]	@ (8006084 <TIM_OC4_SetConfig+0xa8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_OC4_SetConfig+0x68>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a12      	ldr	r2, [pc, #72]	@ (8006088 <TIM_OC4_SetConfig+0xac>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d109      	bne.n	8006058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800604a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	feff8fff 	.word	0xfeff8fff
 8006084:	40010000 	.word	0x40010000
 8006088:	40010400 	.word	0x40010400

0800608c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006124 <TIM_OC5_SetConfig+0x98>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a12      	ldr	r2, [pc, #72]	@ (8006128 <TIM_OC5_SetConfig+0x9c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_OC5_SetConfig+0x5e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a11      	ldr	r2, [pc, #68]	@ (800612c <TIM_OC5_SetConfig+0xa0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d109      	bne.n	80060fe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	621a      	str	r2, [r3, #32]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	fffeff8f 	.word	0xfffeff8f
 8006128:	40010000 	.word	0x40010000
 800612c:	40010400 	.word	0x40010400

08006130 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4b1c      	ldr	r3, [pc, #112]	@ (80061cc <TIM_OC6_SetConfig+0x9c>)
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	051b      	lsls	r3, r3, #20
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a13      	ldr	r2, [pc, #76]	@ (80061d0 <TIM_OC6_SetConfig+0xa0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC6_SetConfig+0x60>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a12      	ldr	r2, [pc, #72]	@ (80061d4 <TIM_OC6_SetConfig+0xa4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d109      	bne.n	80061a4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	feff8fff 	.word	0xfeff8fff
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0201 	bic.w	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4a28      	ldr	r2, [pc, #160]	@ (80062a4 <TIM_TI1_SetConfig+0xcc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01b      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620c:	d017      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a25      	ldr	r2, [pc, #148]	@ (80062a8 <TIM_TI1_SetConfig+0xd0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a24      	ldr	r2, [pc, #144]	@ (80062ac <TIM_TI1_SetConfig+0xd4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00f      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4a23      	ldr	r2, [pc, #140]	@ (80062b0 <TIM_TI1_SetConfig+0xd8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00b      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a22      	ldr	r2, [pc, #136]	@ (80062b4 <TIM_TI1_SetConfig+0xdc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a21      	ldr	r2, [pc, #132]	@ (80062b8 <TIM_TI1_SetConfig+0xe0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_TI1_SetConfig+0x66>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a20      	ldr	r2, [pc, #128]	@ (80062bc <TIM_TI1_SetConfig+0xe4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <TIM_TI1_SetConfig+0x6a>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <TIM_TI1_SetConfig+0x6c>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e003      	b.n	8006262 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	b2db      	uxtb	r3, r3
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f023 030a 	bic.w	r3, r3, #10
 800627c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f003 030a 	and.w	r3, r3, #10
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40010400 	.word	0x40010400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40001800 	.word	0x40001800

080062c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0201 	bic.w	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 030a 	bic.w	r3, r3, #10
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800631e:	b480      	push	{r7}
 8006320:	b087      	sub	sp, #28
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0210 	bic.w	r2, r3, #16
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800635c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	031b      	lsls	r3, r3, #12
 8006362:	b29b      	uxth	r3, r3
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006370:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	621a      	str	r2, [r3, #32]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0210 	bic.w	r2, r3, #16
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	031b      	lsls	r3, r3, #12
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f023 0303 	bic.w	r3, r3, #3
 8006424:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006434:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	b2db      	uxtb	r3, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006448:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	621a      	str	r2, [r3, #32]
}
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	031b      	lsls	r3, r3, #12
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80064c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	031b      	lsls	r3, r3, #12
 80064c8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	f043 0307 	orr.w	r3, r3, #7
 800650c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800653a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	431a      	orrs	r2, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4313      	orrs	r3, r2
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	609a      	str	r2, [r3, #8]
}
 8006554:	bf00      	nop
 8006556:	371c      	adds	r7, #28
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006574:	2302      	movs	r3, #2
 8006576:	e06d      	b.n	8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a30      	ldr	r2, [pc, #192]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006664 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d108      	bne.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a20      	ldr	r2, [pc, #128]	@ (8006660 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d022      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ea:	d01d      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d018      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1c      	ldr	r2, [pc, #112]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1a      	ldr	r2, [pc, #104]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00e      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a15      	ldr	r2, [pc, #84]	@ (8006664 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a16      	ldr	r2, [pc, #88]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10c      	bne.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800662e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40010000 	.word	0x40010000
 8006664:	40010400 	.word	0x40010400
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40014000 	.word	0x40014000
 8006678:	40001800 	.word	0x40001800

0800667c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006694:	2302      	movs	r3, #2
 8006696:	e065      	b.n	8006764 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a16      	ldr	r2, [pc, #88]	@ (8006770 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a14      	ldr	r2, [pc, #80]	@ (8006774 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d115      	bne.n	8006752 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006730:	051b      	lsls	r3, r3, #20
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40010000 	.word	0x40010000
 8006774:	40010400 	.word	0x40010400

08006778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e040      	b.n	800680c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb fcca 	bl	8002134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	@ 0x24
 80067a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa8c 	bl	8006cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f825 	bl	8006814 <UART_SetConfig>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e01b      	b.n	800680c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb0b 	bl	8006e20 <UART_CheckIdleState>
 800680a:	4603      	mov	r3, r0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ad8 <UART_SetConfig+0x2c4>)
 8006840:	4013      	ands	r3, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	6979      	ldr	r1, [r7, #20]
 8006848:	430b      	orrs	r3, r1
 800684a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	430a      	orrs	r2, r1
 8006884:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a94      	ldr	r2, [pc, #592]	@ (8006adc <UART_SetConfig+0x2c8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d120      	bne.n	80068d2 <UART_SetConfig+0xbe>
 8006890:	4b93      	ldr	r3, [pc, #588]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b03      	cmp	r3, #3
 800689c:	d816      	bhi.n	80068cc <UART_SetConfig+0xb8>
 800689e:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <UART_SetConfig+0x90>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c1 	.word	0x080068c1
 80068ac:	080068bb 	.word	0x080068bb
 80068b0:	080068c7 	.word	0x080068c7
 80068b4:	2301      	movs	r3, #1
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e150      	b.n	8006b5c <UART_SetConfig+0x348>
 80068ba:	2302      	movs	r3, #2
 80068bc:	77fb      	strb	r3, [r7, #31]
 80068be:	e14d      	b.n	8006b5c <UART_SetConfig+0x348>
 80068c0:	2304      	movs	r3, #4
 80068c2:	77fb      	strb	r3, [r7, #31]
 80068c4:	e14a      	b.n	8006b5c <UART_SetConfig+0x348>
 80068c6:	2308      	movs	r3, #8
 80068c8:	77fb      	strb	r3, [r7, #31]
 80068ca:	e147      	b.n	8006b5c <UART_SetConfig+0x348>
 80068cc:	2310      	movs	r3, #16
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e144      	b.n	8006b5c <UART_SetConfig+0x348>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a83      	ldr	r2, [pc, #524]	@ (8006ae4 <UART_SetConfig+0x2d0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d132      	bne.n	8006942 <UART_SetConfig+0x12e>
 80068dc:	4b80      	ldr	r3, [pc, #512]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b0c      	cmp	r3, #12
 80068e8:	d828      	bhi.n	800693c <UART_SetConfig+0x128>
 80068ea:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <UART_SetConfig+0xdc>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006925 	.word	0x08006925
 80068f4:	0800693d 	.word	0x0800693d
 80068f8:	0800693d 	.word	0x0800693d
 80068fc:	0800693d 	.word	0x0800693d
 8006900:	08006931 	.word	0x08006931
 8006904:	0800693d 	.word	0x0800693d
 8006908:	0800693d 	.word	0x0800693d
 800690c:	0800693d 	.word	0x0800693d
 8006910:	0800692b 	.word	0x0800692b
 8006914:	0800693d 	.word	0x0800693d
 8006918:	0800693d 	.word	0x0800693d
 800691c:	0800693d 	.word	0x0800693d
 8006920:	08006937 	.word	0x08006937
 8006924:	2300      	movs	r3, #0
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e118      	b.n	8006b5c <UART_SetConfig+0x348>
 800692a:	2302      	movs	r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e115      	b.n	8006b5c <UART_SetConfig+0x348>
 8006930:	2304      	movs	r3, #4
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e112      	b.n	8006b5c <UART_SetConfig+0x348>
 8006936:	2308      	movs	r3, #8
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e10f      	b.n	8006b5c <UART_SetConfig+0x348>
 800693c:	2310      	movs	r3, #16
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e10c      	b.n	8006b5c <UART_SetConfig+0x348>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a68      	ldr	r2, [pc, #416]	@ (8006ae8 <UART_SetConfig+0x2d4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d120      	bne.n	800698e <UART_SetConfig+0x17a>
 800694c:	4b64      	ldr	r3, [pc, #400]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006952:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006956:	2b30      	cmp	r3, #48	@ 0x30
 8006958:	d013      	beq.n	8006982 <UART_SetConfig+0x16e>
 800695a:	2b30      	cmp	r3, #48	@ 0x30
 800695c:	d814      	bhi.n	8006988 <UART_SetConfig+0x174>
 800695e:	2b20      	cmp	r3, #32
 8006960:	d009      	beq.n	8006976 <UART_SetConfig+0x162>
 8006962:	2b20      	cmp	r3, #32
 8006964:	d810      	bhi.n	8006988 <UART_SetConfig+0x174>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <UART_SetConfig+0x15c>
 800696a:	2b10      	cmp	r3, #16
 800696c:	d006      	beq.n	800697c <UART_SetConfig+0x168>
 800696e:	e00b      	b.n	8006988 <UART_SetConfig+0x174>
 8006970:	2300      	movs	r3, #0
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e0f2      	b.n	8006b5c <UART_SetConfig+0x348>
 8006976:	2302      	movs	r3, #2
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e0ef      	b.n	8006b5c <UART_SetConfig+0x348>
 800697c:	2304      	movs	r3, #4
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e0ec      	b.n	8006b5c <UART_SetConfig+0x348>
 8006982:	2308      	movs	r3, #8
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e0e9      	b.n	8006b5c <UART_SetConfig+0x348>
 8006988:	2310      	movs	r3, #16
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0e6      	b.n	8006b5c <UART_SetConfig+0x348>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a56      	ldr	r2, [pc, #344]	@ (8006aec <UART_SetConfig+0x2d8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d120      	bne.n	80069da <UART_SetConfig+0x1c6>
 8006998:	4b51      	ldr	r3, [pc, #324]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a4:	d013      	beq.n	80069ce <UART_SetConfig+0x1ba>
 80069a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80069a8:	d814      	bhi.n	80069d4 <UART_SetConfig+0x1c0>
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d009      	beq.n	80069c2 <UART_SetConfig+0x1ae>
 80069ae:	2b80      	cmp	r3, #128	@ 0x80
 80069b0:	d810      	bhi.n	80069d4 <UART_SetConfig+0x1c0>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <UART_SetConfig+0x1a8>
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d006      	beq.n	80069c8 <UART_SetConfig+0x1b4>
 80069ba:	e00b      	b.n	80069d4 <UART_SetConfig+0x1c0>
 80069bc:	2300      	movs	r3, #0
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e0cc      	b.n	8006b5c <UART_SetConfig+0x348>
 80069c2:	2302      	movs	r3, #2
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e0c9      	b.n	8006b5c <UART_SetConfig+0x348>
 80069c8:	2304      	movs	r3, #4
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e0c6      	b.n	8006b5c <UART_SetConfig+0x348>
 80069ce:	2308      	movs	r3, #8
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e0c3      	b.n	8006b5c <UART_SetConfig+0x348>
 80069d4:	2310      	movs	r3, #16
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e0c0      	b.n	8006b5c <UART_SetConfig+0x348>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a44      	ldr	r2, [pc, #272]	@ (8006af0 <UART_SetConfig+0x2dc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d125      	bne.n	8006a30 <UART_SetConfig+0x21c>
 80069e4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 80069e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f2:	d017      	beq.n	8006a24 <UART_SetConfig+0x210>
 80069f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f8:	d817      	bhi.n	8006a2a <UART_SetConfig+0x216>
 80069fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069fe:	d00b      	beq.n	8006a18 <UART_SetConfig+0x204>
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a04:	d811      	bhi.n	8006a2a <UART_SetConfig+0x216>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <UART_SetConfig+0x1fe>
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a0e:	d006      	beq.n	8006a1e <UART_SetConfig+0x20a>
 8006a10:	e00b      	b.n	8006a2a <UART_SetConfig+0x216>
 8006a12:	2300      	movs	r3, #0
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e0a1      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e09e      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a1e:	2304      	movs	r3, #4
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e09b      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a24:	2308      	movs	r3, #8
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e098      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a2a:	2310      	movs	r3, #16
 8006a2c:	77fb      	strb	r3, [r7, #31]
 8006a2e:	e095      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2f      	ldr	r2, [pc, #188]	@ (8006af4 <UART_SetConfig+0x2e0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d125      	bne.n	8006a86 <UART_SetConfig+0x272>
 8006a3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a48:	d017      	beq.n	8006a7a <UART_SetConfig+0x266>
 8006a4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a4e:	d817      	bhi.n	8006a80 <UART_SetConfig+0x26c>
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a54:	d00b      	beq.n	8006a6e <UART_SetConfig+0x25a>
 8006a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a5a:	d811      	bhi.n	8006a80 <UART_SetConfig+0x26c>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <UART_SetConfig+0x254>
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a64:	d006      	beq.n	8006a74 <UART_SetConfig+0x260>
 8006a66:	e00b      	b.n	8006a80 <UART_SetConfig+0x26c>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	e076      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e073      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a74:	2304      	movs	r3, #4
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e070      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e06d      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a80:	2310      	movs	r3, #16
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e06a      	b.n	8006b5c <UART_SetConfig+0x348>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <UART_SetConfig+0x2e4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d138      	bne.n	8006b02 <UART_SetConfig+0x2ee>
 8006a90:	4b13      	ldr	r3, [pc, #76]	@ (8006ae0 <UART_SetConfig+0x2cc>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006a9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a9e:	d017      	beq.n	8006ad0 <UART_SetConfig+0x2bc>
 8006aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006aa4:	d82a      	bhi.n	8006afc <UART_SetConfig+0x2e8>
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aaa:	d00b      	beq.n	8006ac4 <UART_SetConfig+0x2b0>
 8006aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab0:	d824      	bhi.n	8006afc <UART_SetConfig+0x2e8>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <UART_SetConfig+0x2aa>
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aba:	d006      	beq.n	8006aca <UART_SetConfig+0x2b6>
 8006abc:	e01e      	b.n	8006afc <UART_SetConfig+0x2e8>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e04b      	b.n	8006b5c <UART_SetConfig+0x348>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e048      	b.n	8006b5c <UART_SetConfig+0x348>
 8006aca:	2304      	movs	r3, #4
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e045      	b.n	8006b5c <UART_SetConfig+0x348>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e042      	b.n	8006b5c <UART_SetConfig+0x348>
 8006ad6:	bf00      	nop
 8006ad8:	efff69f3 	.word	0xefff69f3
 8006adc:	40011000 	.word	0x40011000
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	40004400 	.word	0x40004400
 8006ae8:	40004800 	.word	0x40004800
 8006aec:	40004c00 	.word	0x40004c00
 8006af0:	40005000 	.word	0x40005000
 8006af4:	40011400 	.word	0x40011400
 8006af8:	40007800 	.word	0x40007800
 8006afc:	2310      	movs	r3, #16
 8006afe:	77fb      	strb	r3, [r7, #31]
 8006b00:	e02c      	b.n	8006b5c <UART_SetConfig+0x348>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a72      	ldr	r2, [pc, #456]	@ (8006cd0 <UART_SetConfig+0x4bc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d125      	bne.n	8006b58 <UART_SetConfig+0x344>
 8006b0c:	4b71      	ldr	r3, [pc, #452]	@ (8006cd4 <UART_SetConfig+0x4c0>)
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b16:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b1a:	d017      	beq.n	8006b4c <UART_SetConfig+0x338>
 8006b1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006b20:	d817      	bhi.n	8006b52 <UART_SetConfig+0x33e>
 8006b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b26:	d00b      	beq.n	8006b40 <UART_SetConfig+0x32c>
 8006b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2c:	d811      	bhi.n	8006b52 <UART_SetConfig+0x33e>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <UART_SetConfig+0x326>
 8006b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b36:	d006      	beq.n	8006b46 <UART_SetConfig+0x332>
 8006b38:	e00b      	b.n	8006b52 <UART_SetConfig+0x33e>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	77fb      	strb	r3, [r7, #31]
 8006b3e:	e00d      	b.n	8006b5c <UART_SetConfig+0x348>
 8006b40:	2302      	movs	r3, #2
 8006b42:	77fb      	strb	r3, [r7, #31]
 8006b44:	e00a      	b.n	8006b5c <UART_SetConfig+0x348>
 8006b46:	2304      	movs	r3, #4
 8006b48:	77fb      	strb	r3, [r7, #31]
 8006b4a:	e007      	b.n	8006b5c <UART_SetConfig+0x348>
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	77fb      	strb	r3, [r7, #31]
 8006b50:	e004      	b.n	8006b5c <UART_SetConfig+0x348>
 8006b52:	2310      	movs	r3, #16
 8006b54:	77fb      	strb	r3, [r7, #31]
 8006b56:	e001      	b.n	8006b5c <UART_SetConfig+0x348>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b64:	d15b      	bne.n	8006c1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b66:	7ffb      	ldrb	r3, [r7, #31]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d828      	bhi.n	8006bbe <UART_SetConfig+0x3aa>
 8006b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b74 <UART_SetConfig+0x360>)
 8006b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b72:	bf00      	nop
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006ba9 	.word	0x08006ba9
 8006b80:	08006bbf 	.word	0x08006bbf
 8006b84:	08006baf 	.word	0x08006baf
 8006b88:	08006bbf 	.word	0x08006bbf
 8006b8c:	08006bbf 	.word	0x08006bbf
 8006b90:	08006bbf 	.word	0x08006bbf
 8006b94:	08006bb7 	.word	0x08006bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b98:	f7fd fee0 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8006b9c:	61b8      	str	r0, [r7, #24]
        break;
 8006b9e:	e013      	b.n	8006bc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba0:	f7fd fef0 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 8006ba4:	61b8      	str	r0, [r7, #24]
        break;
 8006ba6:	e00f      	b.n	8006bc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd8 <UART_SetConfig+0x4c4>)
 8006baa:	61bb      	str	r3, [r7, #24]
        break;
 8006bac:	e00c      	b.n	8006bc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bae:	f7fd fdc3 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 8006bb2:	61b8      	str	r0, [r7, #24]
        break;
 8006bb4:	e008      	b.n	8006bc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bba:	61bb      	str	r3, [r7, #24]
        break;
 8006bbc:	e004      	b.n	8006bc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8006bc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d074      	beq.n	8006cb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	005a      	lsls	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b0f      	cmp	r3, #15
 8006be8:	d916      	bls.n	8006c18 <UART_SetConfig+0x404>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf0:	d212      	bcs.n	8006c18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f023 030f 	bic.w	r3, r3, #15
 8006bfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	89fb      	ldrh	r3, [r7, #14]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	89fa      	ldrh	r2, [r7, #14]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	e04f      	b.n	8006cb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	77bb      	strb	r3, [r7, #30]
 8006c1c:	e04c      	b.n	8006cb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c1e:	7ffb      	ldrb	r3, [r7, #31]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d828      	bhi.n	8006c76 <UART_SetConfig+0x462>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <UART_SetConfig+0x418>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	08006c61 	.word	0x08006c61
 8006c38:	08006c77 	.word	0x08006c77
 8006c3c:	08006c67 	.word	0x08006c67
 8006c40:	08006c77 	.word	0x08006c77
 8006c44:	08006c77 	.word	0x08006c77
 8006c48:	08006c77 	.word	0x08006c77
 8006c4c:	08006c6f 	.word	0x08006c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fd fe84 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 8006c54:	61b8      	str	r0, [r7, #24]
        break;
 8006c56:	e013      	b.n	8006c80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c58:	f7fd fe94 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 8006c5c:	61b8      	str	r0, [r7, #24]
        break;
 8006c5e:	e00f      	b.n	8006c80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <UART_SetConfig+0x4c4>)
 8006c62:	61bb      	str	r3, [r7, #24]
        break;
 8006c64:	e00c      	b.n	8006c80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c66:	f7fd fd67 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 8006c6a:	61b8      	str	r0, [r7, #24]
        break;
 8006c6c:	e008      	b.n	8006c80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c72:	61bb      	str	r3, [r7, #24]
        break;
 8006c74:	e004      	b.n	8006c80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c7e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d018      	beq.n	8006cb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	085a      	lsrs	r2, r3, #1
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	441a      	add	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b0f      	cmp	r3, #15
 8006c9e:	d909      	bls.n	8006cb4 <UART_SetConfig+0x4a0>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca6:	d205      	bcs.n	8006cb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60da      	str	r2, [r3, #12]
 8006cb2:	e001      	b.n	8006cb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40007c00 	.word	0x40007c00
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	00f42400 	.word	0x00f42400

08006cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01a      	beq.n	8006df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dda:	d10a      	bne.n	8006df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	605a      	str	r2, [r3, #4]
  }
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b098      	sub	sp, #96	@ 0x60
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e30:	f7fb fc7e 	bl	8002730 <HAL_GetTick>
 8006e34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d12e      	bne.n	8006ea2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f88c 	bl	8006f70 <UART_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d021      	beq.n	8006ea2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e6      	bne.n	8006e5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e062      	b.n	8006f68 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d149      	bne.n	8006f44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f856 	bl	8006f70 <UART_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d03c      	beq.n	8006f44 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e6      	bne.n	8006eca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f1c:	61fa      	str	r2, [r7, #28]
 8006f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	69b9      	ldr	r1, [r7, #24]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	617b      	str	r3, [r7, #20]
   return(result);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e011      	b.n	8006f68 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3758      	adds	r7, #88	@ 0x58
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f80:	e04f      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d04b      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8a:	f7fb fbd1 	bl	8002730 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e04e      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d037      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b80      	cmp	r3, #128	@ 0x80
 8006fb6:	d034      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b40      	cmp	r3, #64	@ 0x40
 8006fbc:	d031      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d110      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f838 	bl	800704a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e029      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ffc:	d111      	bne.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f81e 	bl	800704a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e00f      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	429a      	cmp	r2, r3
 800703e:	d0a0      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704a:	b480      	push	{r7}
 800704c:	b095      	sub	sp, #84	@ 0x54
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007070:	643b      	str	r3, [r7, #64]	@ 0x40
 8007072:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	61fb      	str	r3, [r7, #28]
   return(result);
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d118      	bne.n	80070f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0310 	bic.w	r3, r3, #16
 80070d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007106:	bf00      	nop
 8007108:	3754      	adds	r7, #84	@ 0x54
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <atoi>:
 8007112:	220a      	movs	r2, #10
 8007114:	2100      	movs	r1, #0
 8007116:	f000 b87b 	b.w	8007210 <strtol>
	...

0800711c <_strtol_l.constprop.0>:
 800711c:	2b24      	cmp	r3, #36	@ 0x24
 800711e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007122:	4686      	mov	lr, r0
 8007124:	4690      	mov	r8, r2
 8007126:	d801      	bhi.n	800712c <_strtol_l.constprop.0+0x10>
 8007128:	2b01      	cmp	r3, #1
 800712a:	d106      	bne.n	800713a <_strtol_l.constprop.0+0x1e>
 800712c:	f000 fada 	bl	80076e4 <__errno>
 8007130:	2316      	movs	r3, #22
 8007132:	6003      	str	r3, [r0, #0]
 8007134:	2000      	movs	r0, #0
 8007136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713a:	4834      	ldr	r0, [pc, #208]	@ (800720c <_strtol_l.constprop.0+0xf0>)
 800713c:	460d      	mov	r5, r1
 800713e:	462a      	mov	r2, r5
 8007140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007144:	5d06      	ldrb	r6, [r0, r4]
 8007146:	f016 0608 	ands.w	r6, r6, #8
 800714a:	d1f8      	bne.n	800713e <_strtol_l.constprop.0+0x22>
 800714c:	2c2d      	cmp	r4, #45	@ 0x2d
 800714e:	d12d      	bne.n	80071ac <_strtol_l.constprop.0+0x90>
 8007150:	782c      	ldrb	r4, [r5, #0]
 8007152:	2601      	movs	r6, #1
 8007154:	1c95      	adds	r5, r2, #2
 8007156:	f033 0210 	bics.w	r2, r3, #16
 800715a:	d109      	bne.n	8007170 <_strtol_l.constprop.0+0x54>
 800715c:	2c30      	cmp	r4, #48	@ 0x30
 800715e:	d12a      	bne.n	80071b6 <_strtol_l.constprop.0+0x9a>
 8007160:	782a      	ldrb	r2, [r5, #0]
 8007162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007166:	2a58      	cmp	r2, #88	@ 0x58
 8007168:	d125      	bne.n	80071b6 <_strtol_l.constprop.0+0x9a>
 800716a:	786c      	ldrb	r4, [r5, #1]
 800716c:	2310      	movs	r3, #16
 800716e:	3502      	adds	r5, #2
 8007170:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007174:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007178:	2200      	movs	r2, #0
 800717a:	fbbc f9f3 	udiv	r9, ip, r3
 800717e:	4610      	mov	r0, r2
 8007180:	fb03 ca19 	mls	sl, r3, r9, ip
 8007184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007188:	2f09      	cmp	r7, #9
 800718a:	d81b      	bhi.n	80071c4 <_strtol_l.constprop.0+0xa8>
 800718c:	463c      	mov	r4, r7
 800718e:	42a3      	cmp	r3, r4
 8007190:	dd27      	ble.n	80071e2 <_strtol_l.constprop.0+0xc6>
 8007192:	1c57      	adds	r7, r2, #1
 8007194:	d007      	beq.n	80071a6 <_strtol_l.constprop.0+0x8a>
 8007196:	4581      	cmp	r9, r0
 8007198:	d320      	bcc.n	80071dc <_strtol_l.constprop.0+0xc0>
 800719a:	d101      	bne.n	80071a0 <_strtol_l.constprop.0+0x84>
 800719c:	45a2      	cmp	sl, r4
 800719e:	db1d      	blt.n	80071dc <_strtol_l.constprop.0+0xc0>
 80071a0:	fb00 4003 	mla	r0, r0, r3, r4
 80071a4:	2201      	movs	r2, #1
 80071a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071aa:	e7eb      	b.n	8007184 <_strtol_l.constprop.0+0x68>
 80071ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80071ae:	bf04      	itt	eq
 80071b0:	782c      	ldrbeq	r4, [r5, #0]
 80071b2:	1c95      	addeq	r5, r2, #2
 80071b4:	e7cf      	b.n	8007156 <_strtol_l.constprop.0+0x3a>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1da      	bne.n	8007170 <_strtol_l.constprop.0+0x54>
 80071ba:	2c30      	cmp	r4, #48	@ 0x30
 80071bc:	bf0c      	ite	eq
 80071be:	2308      	moveq	r3, #8
 80071c0:	230a      	movne	r3, #10
 80071c2:	e7d5      	b.n	8007170 <_strtol_l.constprop.0+0x54>
 80071c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80071c8:	2f19      	cmp	r7, #25
 80071ca:	d801      	bhi.n	80071d0 <_strtol_l.constprop.0+0xb4>
 80071cc:	3c37      	subs	r4, #55	@ 0x37
 80071ce:	e7de      	b.n	800718e <_strtol_l.constprop.0+0x72>
 80071d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80071d4:	2f19      	cmp	r7, #25
 80071d6:	d804      	bhi.n	80071e2 <_strtol_l.constprop.0+0xc6>
 80071d8:	3c57      	subs	r4, #87	@ 0x57
 80071da:	e7d8      	b.n	800718e <_strtol_l.constprop.0+0x72>
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	e7e1      	b.n	80071a6 <_strtol_l.constprop.0+0x8a>
 80071e2:	1c53      	adds	r3, r2, #1
 80071e4:	d108      	bne.n	80071f8 <_strtol_l.constprop.0+0xdc>
 80071e6:	2322      	movs	r3, #34	@ 0x22
 80071e8:	f8ce 3000 	str.w	r3, [lr]
 80071ec:	4660      	mov	r0, ip
 80071ee:	f1b8 0f00 	cmp.w	r8, #0
 80071f2:	d0a0      	beq.n	8007136 <_strtol_l.constprop.0+0x1a>
 80071f4:	1e69      	subs	r1, r5, #1
 80071f6:	e006      	b.n	8007206 <_strtol_l.constprop.0+0xea>
 80071f8:	b106      	cbz	r6, 80071fc <_strtol_l.constprop.0+0xe0>
 80071fa:	4240      	negs	r0, r0
 80071fc:	f1b8 0f00 	cmp.w	r8, #0
 8007200:	d099      	beq.n	8007136 <_strtol_l.constprop.0+0x1a>
 8007202:	2a00      	cmp	r2, #0
 8007204:	d1f6      	bne.n	80071f4 <_strtol_l.constprop.0+0xd8>
 8007206:	f8c8 1000 	str.w	r1, [r8]
 800720a:	e794      	b.n	8007136 <_strtol_l.constprop.0+0x1a>
 800720c:	08008279 	.word	0x08008279

08007210 <strtol>:
 8007210:	4613      	mov	r3, r2
 8007212:	460a      	mov	r2, r1
 8007214:	4601      	mov	r1, r0
 8007216:	4802      	ldr	r0, [pc, #8]	@ (8007220 <strtol+0x10>)
 8007218:	6800      	ldr	r0, [r0, #0]
 800721a:	f7ff bf7f 	b.w	800711c <_strtol_l.constprop.0>
 800721e:	bf00      	nop
 8007220:	20000018 	.word	0x20000018

08007224 <std>:
 8007224:	2300      	movs	r3, #0
 8007226:	b510      	push	{r4, lr}
 8007228:	4604      	mov	r4, r0
 800722a:	e9c0 3300 	strd	r3, r3, [r0]
 800722e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007232:	6083      	str	r3, [r0, #8]
 8007234:	8181      	strh	r1, [r0, #12]
 8007236:	6643      	str	r3, [r0, #100]	@ 0x64
 8007238:	81c2      	strh	r2, [r0, #14]
 800723a:	6183      	str	r3, [r0, #24]
 800723c:	4619      	mov	r1, r3
 800723e:	2208      	movs	r2, #8
 8007240:	305c      	adds	r0, #92	@ 0x5c
 8007242:	f000 fa01 	bl	8007648 <memset>
 8007246:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <std+0x58>)
 8007248:	6263      	str	r3, [r4, #36]	@ 0x24
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <std+0x5c>)
 800724c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <std+0x60>)
 8007250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007252:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <std+0x64>)
 8007254:	6323      	str	r3, [r4, #48]	@ 0x30
 8007256:	4b0d      	ldr	r3, [pc, #52]	@ (800728c <std+0x68>)
 8007258:	6224      	str	r4, [r4, #32]
 800725a:	429c      	cmp	r4, r3
 800725c:	d006      	beq.n	800726c <std+0x48>
 800725e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007262:	4294      	cmp	r4, r2
 8007264:	d002      	beq.n	800726c <std+0x48>
 8007266:	33d0      	adds	r3, #208	@ 0xd0
 8007268:	429c      	cmp	r4, r3
 800726a:	d105      	bne.n	8007278 <std+0x54>
 800726c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007274:	f000 ba60 	b.w	8007738 <__retarget_lock_init_recursive>
 8007278:	bd10      	pop	{r4, pc}
 800727a:	bf00      	nop
 800727c:	08007499 	.word	0x08007499
 8007280:	080074bb 	.word	0x080074bb
 8007284:	080074f3 	.word	0x080074f3
 8007288:	08007517 	.word	0x08007517
 800728c:	20000660 	.word	0x20000660

08007290 <stdio_exit_handler>:
 8007290:	4a02      	ldr	r2, [pc, #8]	@ (800729c <stdio_exit_handler+0xc>)
 8007292:	4903      	ldr	r1, [pc, #12]	@ (80072a0 <stdio_exit_handler+0x10>)
 8007294:	4803      	ldr	r0, [pc, #12]	@ (80072a4 <stdio_exit_handler+0x14>)
 8007296:	f000 b869 	b.w	800736c <_fwalk_sglue>
 800729a:	bf00      	nop
 800729c:	2000000c 	.word	0x2000000c
 80072a0:	08007fd9 	.word	0x08007fd9
 80072a4:	2000001c 	.word	0x2000001c

080072a8 <cleanup_stdio>:
 80072a8:	6841      	ldr	r1, [r0, #4]
 80072aa:	4b0c      	ldr	r3, [pc, #48]	@ (80072dc <cleanup_stdio+0x34>)
 80072ac:	4299      	cmp	r1, r3
 80072ae:	b510      	push	{r4, lr}
 80072b0:	4604      	mov	r4, r0
 80072b2:	d001      	beq.n	80072b8 <cleanup_stdio+0x10>
 80072b4:	f000 fe90 	bl	8007fd8 <_fflush_r>
 80072b8:	68a1      	ldr	r1, [r4, #8]
 80072ba:	4b09      	ldr	r3, [pc, #36]	@ (80072e0 <cleanup_stdio+0x38>)
 80072bc:	4299      	cmp	r1, r3
 80072be:	d002      	beq.n	80072c6 <cleanup_stdio+0x1e>
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fe89 	bl	8007fd8 <_fflush_r>
 80072c6:	68e1      	ldr	r1, [r4, #12]
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <cleanup_stdio+0x3c>)
 80072ca:	4299      	cmp	r1, r3
 80072cc:	d004      	beq.n	80072d8 <cleanup_stdio+0x30>
 80072ce:	4620      	mov	r0, r4
 80072d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d4:	f000 be80 	b.w	8007fd8 <_fflush_r>
 80072d8:	bd10      	pop	{r4, pc}
 80072da:	bf00      	nop
 80072dc:	20000660 	.word	0x20000660
 80072e0:	200006c8 	.word	0x200006c8
 80072e4:	20000730 	.word	0x20000730

080072e8 <global_stdio_init.part.0>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <global_stdio_init.part.0+0x30>)
 80072ec:	4c0b      	ldr	r4, [pc, #44]	@ (800731c <global_stdio_init.part.0+0x34>)
 80072ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007320 <global_stdio_init.part.0+0x38>)
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	4620      	mov	r0, r4
 80072f4:	2200      	movs	r2, #0
 80072f6:	2104      	movs	r1, #4
 80072f8:	f7ff ff94 	bl	8007224 <std>
 80072fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007300:	2201      	movs	r2, #1
 8007302:	2109      	movs	r1, #9
 8007304:	f7ff ff8e 	bl	8007224 <std>
 8007308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800730c:	2202      	movs	r2, #2
 800730e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007312:	2112      	movs	r1, #18
 8007314:	f7ff bf86 	b.w	8007224 <std>
 8007318:	20000798 	.word	0x20000798
 800731c:	20000660 	.word	0x20000660
 8007320:	08007291 	.word	0x08007291

08007324 <__sfp_lock_acquire>:
 8007324:	4801      	ldr	r0, [pc, #4]	@ (800732c <__sfp_lock_acquire+0x8>)
 8007326:	f000 ba08 	b.w	800773a <__retarget_lock_acquire_recursive>
 800732a:	bf00      	nop
 800732c:	200007a1 	.word	0x200007a1

08007330 <__sfp_lock_release>:
 8007330:	4801      	ldr	r0, [pc, #4]	@ (8007338 <__sfp_lock_release+0x8>)
 8007332:	f000 ba03 	b.w	800773c <__retarget_lock_release_recursive>
 8007336:	bf00      	nop
 8007338:	200007a1 	.word	0x200007a1

0800733c <__sinit>:
 800733c:	b510      	push	{r4, lr}
 800733e:	4604      	mov	r4, r0
 8007340:	f7ff fff0 	bl	8007324 <__sfp_lock_acquire>
 8007344:	6a23      	ldr	r3, [r4, #32]
 8007346:	b11b      	cbz	r3, 8007350 <__sinit+0x14>
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734c:	f7ff bff0 	b.w	8007330 <__sfp_lock_release>
 8007350:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <__sinit+0x28>)
 8007352:	6223      	str	r3, [r4, #32]
 8007354:	4b04      	ldr	r3, [pc, #16]	@ (8007368 <__sinit+0x2c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f5      	bne.n	8007348 <__sinit+0xc>
 800735c:	f7ff ffc4 	bl	80072e8 <global_stdio_init.part.0>
 8007360:	e7f2      	b.n	8007348 <__sinit+0xc>
 8007362:	bf00      	nop
 8007364:	080072a9 	.word	0x080072a9
 8007368:	20000798 	.word	0x20000798

0800736c <_fwalk_sglue>:
 800736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007370:	4607      	mov	r7, r0
 8007372:	4688      	mov	r8, r1
 8007374:	4614      	mov	r4, r2
 8007376:	2600      	movs	r6, #0
 8007378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800737c:	f1b9 0901 	subs.w	r9, r9, #1
 8007380:	d505      	bpl.n	800738e <_fwalk_sglue+0x22>
 8007382:	6824      	ldr	r4, [r4, #0]
 8007384:	2c00      	cmp	r4, #0
 8007386:	d1f7      	bne.n	8007378 <_fwalk_sglue+0xc>
 8007388:	4630      	mov	r0, r6
 800738a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d907      	bls.n	80073a4 <_fwalk_sglue+0x38>
 8007394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007398:	3301      	adds	r3, #1
 800739a:	d003      	beq.n	80073a4 <_fwalk_sglue+0x38>
 800739c:	4629      	mov	r1, r5
 800739e:	4638      	mov	r0, r7
 80073a0:	47c0      	blx	r8
 80073a2:	4306      	orrs	r6, r0
 80073a4:	3568      	adds	r5, #104	@ 0x68
 80073a6:	e7e9      	b.n	800737c <_fwalk_sglue+0x10>

080073a8 <iprintf>:
 80073a8:	b40f      	push	{r0, r1, r2, r3}
 80073aa:	b507      	push	{r0, r1, r2, lr}
 80073ac:	4906      	ldr	r1, [pc, #24]	@ (80073c8 <iprintf+0x20>)
 80073ae:	ab04      	add	r3, sp, #16
 80073b0:	6808      	ldr	r0, [r1, #0]
 80073b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b6:	6881      	ldr	r1, [r0, #8]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	f000 fae3 	bl	8007984 <_vfiprintf_r>
 80073be:	b003      	add	sp, #12
 80073c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c4:	b004      	add	sp, #16
 80073c6:	4770      	bx	lr
 80073c8:	20000018 	.word	0x20000018

080073cc <putchar>:
 80073cc:	4b02      	ldr	r3, [pc, #8]	@ (80073d8 <putchar+0xc>)
 80073ce:	4601      	mov	r1, r0
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	6882      	ldr	r2, [r0, #8]
 80073d4:	f000 be8a 	b.w	80080ec <_putc_r>
 80073d8:	20000018 	.word	0x20000018

080073dc <_puts_r>:
 80073dc:	6a03      	ldr	r3, [r0, #32]
 80073de:	b570      	push	{r4, r5, r6, lr}
 80073e0:	6884      	ldr	r4, [r0, #8]
 80073e2:	4605      	mov	r5, r0
 80073e4:	460e      	mov	r6, r1
 80073e6:	b90b      	cbnz	r3, 80073ec <_puts_r+0x10>
 80073e8:	f7ff ffa8 	bl	800733c <__sinit>
 80073ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073ee:	07db      	lsls	r3, r3, #31
 80073f0:	d405      	bmi.n	80073fe <_puts_r+0x22>
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	0598      	lsls	r0, r3, #22
 80073f6:	d402      	bmi.n	80073fe <_puts_r+0x22>
 80073f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073fa:	f000 f99e 	bl	800773a <__retarget_lock_acquire_recursive>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	0719      	lsls	r1, r3, #28
 8007402:	d502      	bpl.n	800740a <_puts_r+0x2e>
 8007404:	6923      	ldr	r3, [r4, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d135      	bne.n	8007476 <_puts_r+0x9a>
 800740a:	4621      	mov	r1, r4
 800740c:	4628      	mov	r0, r5
 800740e:	f000 f8c5 	bl	800759c <__swsetup_r>
 8007412:	b380      	cbz	r0, 8007476 <_puts_r+0x9a>
 8007414:	f04f 35ff 	mov.w	r5, #4294967295
 8007418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800741a:	07da      	lsls	r2, r3, #31
 800741c:	d405      	bmi.n	800742a <_puts_r+0x4e>
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	059b      	lsls	r3, r3, #22
 8007422:	d402      	bmi.n	800742a <_puts_r+0x4e>
 8007424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007426:	f000 f989 	bl	800773c <__retarget_lock_release_recursive>
 800742a:	4628      	mov	r0, r5
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	2b00      	cmp	r3, #0
 8007430:	da04      	bge.n	800743c <_puts_r+0x60>
 8007432:	69a2      	ldr	r2, [r4, #24]
 8007434:	429a      	cmp	r2, r3
 8007436:	dc17      	bgt.n	8007468 <_puts_r+0x8c>
 8007438:	290a      	cmp	r1, #10
 800743a:	d015      	beq.n	8007468 <_puts_r+0x8c>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	7019      	strb	r1, [r3, #0]
 8007444:	68a3      	ldr	r3, [r4, #8]
 8007446:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800744a:	3b01      	subs	r3, #1
 800744c:	60a3      	str	r3, [r4, #8]
 800744e:	2900      	cmp	r1, #0
 8007450:	d1ed      	bne.n	800742e <_puts_r+0x52>
 8007452:	2b00      	cmp	r3, #0
 8007454:	da11      	bge.n	800747a <_puts_r+0x9e>
 8007456:	4622      	mov	r2, r4
 8007458:	210a      	movs	r1, #10
 800745a:	4628      	mov	r0, r5
 800745c:	f000 f85f 	bl	800751e <__swbuf_r>
 8007460:	3001      	adds	r0, #1
 8007462:	d0d7      	beq.n	8007414 <_puts_r+0x38>
 8007464:	250a      	movs	r5, #10
 8007466:	e7d7      	b.n	8007418 <_puts_r+0x3c>
 8007468:	4622      	mov	r2, r4
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f857 	bl	800751e <__swbuf_r>
 8007470:	3001      	adds	r0, #1
 8007472:	d1e7      	bne.n	8007444 <_puts_r+0x68>
 8007474:	e7ce      	b.n	8007414 <_puts_r+0x38>
 8007476:	3e01      	subs	r6, #1
 8007478:	e7e4      	b.n	8007444 <_puts_r+0x68>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	220a      	movs	r2, #10
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e7ee      	b.n	8007464 <_puts_r+0x88>
	...

08007488 <puts>:
 8007488:	4b02      	ldr	r3, [pc, #8]	@ (8007494 <puts+0xc>)
 800748a:	4601      	mov	r1, r0
 800748c:	6818      	ldr	r0, [r3, #0]
 800748e:	f7ff bfa5 	b.w	80073dc <_puts_r>
 8007492:	bf00      	nop
 8007494:	20000018 	.word	0x20000018

08007498 <__sread>:
 8007498:	b510      	push	{r4, lr}
 800749a:	460c      	mov	r4, r1
 800749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a0:	f000 f8fc 	bl	800769c <_read_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	bfab      	itete	ge
 80074a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074aa:	89a3      	ldrhlt	r3, [r4, #12]
 80074ac:	181b      	addge	r3, r3, r0
 80074ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074b2:	bfac      	ite	ge
 80074b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074b6:	81a3      	strhlt	r3, [r4, #12]
 80074b8:	bd10      	pop	{r4, pc}

080074ba <__swrite>:
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	461f      	mov	r7, r3
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	05db      	lsls	r3, r3, #23
 80074c4:	4605      	mov	r5, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4616      	mov	r6, r2
 80074ca:	d505      	bpl.n	80074d8 <__swrite+0x1e>
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	2302      	movs	r3, #2
 80074d2:	2200      	movs	r2, #0
 80074d4:	f000 f8d0 	bl	8007678 <_lseek_r>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	4632      	mov	r2, r6
 80074e6:	463b      	mov	r3, r7
 80074e8:	4628      	mov	r0, r5
 80074ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	f000 b8e7 	b.w	80076c0 <_write_r>

080074f2 <__sseek>:
 80074f2:	b510      	push	{r4, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 f8bd 	bl	8007678 <_lseek_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	bf15      	itete	ne
 8007504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800750a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800750e:	81a3      	strheq	r3, [r4, #12]
 8007510:	bf18      	it	ne
 8007512:	81a3      	strhne	r3, [r4, #12]
 8007514:	bd10      	pop	{r4, pc}

08007516 <__sclose>:
 8007516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751a:	f000 b89d 	b.w	8007658 <_close_r>

0800751e <__swbuf_r>:
 800751e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007520:	460e      	mov	r6, r1
 8007522:	4614      	mov	r4, r2
 8007524:	4605      	mov	r5, r0
 8007526:	b118      	cbz	r0, 8007530 <__swbuf_r+0x12>
 8007528:	6a03      	ldr	r3, [r0, #32]
 800752a:	b90b      	cbnz	r3, 8007530 <__swbuf_r+0x12>
 800752c:	f7ff ff06 	bl	800733c <__sinit>
 8007530:	69a3      	ldr	r3, [r4, #24]
 8007532:	60a3      	str	r3, [r4, #8]
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	071a      	lsls	r2, r3, #28
 8007538:	d501      	bpl.n	800753e <__swbuf_r+0x20>
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	b943      	cbnz	r3, 8007550 <__swbuf_r+0x32>
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f000 f82b 	bl	800759c <__swsetup_r>
 8007546:	b118      	cbz	r0, 8007550 <__swbuf_r+0x32>
 8007548:	f04f 37ff 	mov.w	r7, #4294967295
 800754c:	4638      	mov	r0, r7
 800754e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	6922      	ldr	r2, [r4, #16]
 8007554:	1a98      	subs	r0, r3, r2
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	b2f6      	uxtb	r6, r6
 800755a:	4283      	cmp	r3, r0
 800755c:	4637      	mov	r7, r6
 800755e:	dc05      	bgt.n	800756c <__swbuf_r+0x4e>
 8007560:	4621      	mov	r1, r4
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fd38 	bl	8007fd8 <_fflush_r>
 8007568:	2800      	cmp	r0, #0
 800756a:	d1ed      	bne.n	8007548 <__swbuf_r+0x2a>
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	3b01      	subs	r3, #1
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	6022      	str	r2, [r4, #0]
 8007578:	701e      	strb	r6, [r3, #0]
 800757a:	6962      	ldr	r2, [r4, #20]
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	429a      	cmp	r2, r3
 8007580:	d004      	beq.n	800758c <__swbuf_r+0x6e>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	07db      	lsls	r3, r3, #31
 8007586:	d5e1      	bpl.n	800754c <__swbuf_r+0x2e>
 8007588:	2e0a      	cmp	r6, #10
 800758a:	d1df      	bne.n	800754c <__swbuf_r+0x2e>
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 fd22 	bl	8007fd8 <_fflush_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	d0d9      	beq.n	800754c <__swbuf_r+0x2e>
 8007598:	e7d6      	b.n	8007548 <__swbuf_r+0x2a>
	...

0800759c <__swsetup_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4b29      	ldr	r3, [pc, #164]	@ (8007644 <__swsetup_r+0xa8>)
 80075a0:	4605      	mov	r5, r0
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	460c      	mov	r4, r1
 80075a6:	b118      	cbz	r0, 80075b0 <__swsetup_r+0x14>
 80075a8:	6a03      	ldr	r3, [r0, #32]
 80075aa:	b90b      	cbnz	r3, 80075b0 <__swsetup_r+0x14>
 80075ac:	f7ff fec6 	bl	800733c <__sinit>
 80075b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b4:	0719      	lsls	r1, r3, #28
 80075b6:	d422      	bmi.n	80075fe <__swsetup_r+0x62>
 80075b8:	06da      	lsls	r2, r3, #27
 80075ba:	d407      	bmi.n	80075cc <__swsetup_r+0x30>
 80075bc:	2209      	movs	r2, #9
 80075be:	602a      	str	r2, [r5, #0]
 80075c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c4:	81a3      	strh	r3, [r4, #12]
 80075c6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ca:	e033      	b.n	8007634 <__swsetup_r+0x98>
 80075cc:	0758      	lsls	r0, r3, #29
 80075ce:	d512      	bpl.n	80075f6 <__swsetup_r+0x5a>
 80075d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075d2:	b141      	cbz	r1, 80075e6 <__swsetup_r+0x4a>
 80075d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d8:	4299      	cmp	r1, r3
 80075da:	d002      	beq.n	80075e2 <__swsetup_r+0x46>
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f8af 	bl	8007740 <_free_r>
 80075e2:	2300      	movs	r3, #0
 80075e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	2300      	movs	r3, #0
 80075f0:	6063      	str	r3, [r4, #4]
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f043 0308 	orr.w	r3, r3, #8
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	6923      	ldr	r3, [r4, #16]
 8007600:	b94b      	cbnz	r3, 8007616 <__swsetup_r+0x7a>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800760c:	d003      	beq.n	8007616 <__swsetup_r+0x7a>
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f000 fd2f 	bl	8008074 <__smakebuf_r>
 8007616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800761a:	f013 0201 	ands.w	r2, r3, #1
 800761e:	d00a      	beq.n	8007636 <__swsetup_r+0x9a>
 8007620:	2200      	movs	r2, #0
 8007622:	60a2      	str	r2, [r4, #8]
 8007624:	6962      	ldr	r2, [r4, #20]
 8007626:	4252      	negs	r2, r2
 8007628:	61a2      	str	r2, [r4, #24]
 800762a:	6922      	ldr	r2, [r4, #16]
 800762c:	b942      	cbnz	r2, 8007640 <__swsetup_r+0xa4>
 800762e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007632:	d1c5      	bne.n	80075c0 <__swsetup_r+0x24>
 8007634:	bd38      	pop	{r3, r4, r5, pc}
 8007636:	0799      	lsls	r1, r3, #30
 8007638:	bf58      	it	pl
 800763a:	6962      	ldrpl	r2, [r4, #20]
 800763c:	60a2      	str	r2, [r4, #8]
 800763e:	e7f4      	b.n	800762a <__swsetup_r+0x8e>
 8007640:	2000      	movs	r0, #0
 8007642:	e7f7      	b.n	8007634 <__swsetup_r+0x98>
 8007644:	20000018 	.word	0x20000018

08007648 <memset>:
 8007648:	4402      	add	r2, r0
 800764a:	4603      	mov	r3, r0
 800764c:	4293      	cmp	r3, r2
 800764e:	d100      	bne.n	8007652 <memset+0xa>
 8007650:	4770      	bx	lr
 8007652:	f803 1b01 	strb.w	r1, [r3], #1
 8007656:	e7f9      	b.n	800764c <memset+0x4>

08007658 <_close_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	@ (8007674 <_close_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa ff6d 	bl	8002542 <_close>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_close_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_close_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	2000079c 	.word	0x2000079c

08007678 <_lseek_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4d07      	ldr	r5, [pc, #28]	@ (8007698 <_lseek_r+0x20>)
 800767c:	4604      	mov	r4, r0
 800767e:	4608      	mov	r0, r1
 8007680:	4611      	mov	r1, r2
 8007682:	2200      	movs	r2, #0
 8007684:	602a      	str	r2, [r5, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	f7fa ff82 	bl	8002590 <_lseek>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_lseek_r+0x1e>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_lseek_r+0x1e>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	2000079c 	.word	0x2000079c

0800769c <_read_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	@ (80076bc <_read_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7fa ff2c 	bl	8002508 <_read>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_read_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_read_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	2000079c 	.word	0x2000079c

080076c0 <_write_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d07      	ldr	r5, [pc, #28]	@ (80076e0 <_write_r+0x20>)
 80076c4:	4604      	mov	r4, r0
 80076c6:	4608      	mov	r0, r1
 80076c8:	4611      	mov	r1, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	602a      	str	r2, [r5, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7f8 ffa5 	bl	800061e <_write>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_write_r+0x1e>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_write_r+0x1e>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	2000079c 	.word	0x2000079c

080076e4 <__errno>:
 80076e4:	4b01      	ldr	r3, [pc, #4]	@ (80076ec <__errno+0x8>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000018 	.word	0x20000018

080076f0 <__libc_init_array>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007728 <__libc_init_array+0x38>)
 80076f4:	4c0d      	ldr	r4, [pc, #52]	@ (800772c <__libc_init_array+0x3c>)
 80076f6:	1b64      	subs	r4, r4, r5
 80076f8:	10a4      	asrs	r4, r4, #2
 80076fa:	2600      	movs	r6, #0
 80076fc:	42a6      	cmp	r6, r4
 80076fe:	d109      	bne.n	8007714 <__libc_init_array+0x24>
 8007700:	4d0b      	ldr	r5, [pc, #44]	@ (8007730 <__libc_init_array+0x40>)
 8007702:	4c0c      	ldr	r4, [pc, #48]	@ (8007734 <__libc_init_array+0x44>)
 8007704:	f000 fd58 	bl	80081b8 <_init>
 8007708:	1b64      	subs	r4, r4, r5
 800770a:	10a4      	asrs	r4, r4, #2
 800770c:	2600      	movs	r6, #0
 800770e:	42a6      	cmp	r6, r4
 8007710:	d105      	bne.n	800771e <__libc_init_array+0x2e>
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	f855 3b04 	ldr.w	r3, [r5], #4
 8007718:	4798      	blx	r3
 800771a:	3601      	adds	r6, #1
 800771c:	e7ee      	b.n	80076fc <__libc_init_array+0xc>
 800771e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007722:	4798      	blx	r3
 8007724:	3601      	adds	r6, #1
 8007726:	e7f2      	b.n	800770e <__libc_init_array+0x1e>
 8007728:	080083b4 	.word	0x080083b4
 800772c:	080083b4 	.word	0x080083b4
 8007730:	080083b4 	.word	0x080083b4
 8007734:	080083b8 	.word	0x080083b8

08007738 <__retarget_lock_init_recursive>:
 8007738:	4770      	bx	lr

0800773a <__retarget_lock_acquire_recursive>:
 800773a:	4770      	bx	lr

0800773c <__retarget_lock_release_recursive>:
 800773c:	4770      	bx	lr
	...

08007740 <_free_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4605      	mov	r5, r0
 8007744:	2900      	cmp	r1, #0
 8007746:	d041      	beq.n	80077cc <_free_r+0x8c>
 8007748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800774c:	1f0c      	subs	r4, r1, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfb8      	it	lt
 8007752:	18e4      	addlt	r4, r4, r3
 8007754:	f000 f8e0 	bl	8007918 <__malloc_lock>
 8007758:	4a1d      	ldr	r2, [pc, #116]	@ (80077d0 <_free_r+0x90>)
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	b933      	cbnz	r3, 800776c <_free_r+0x2c>
 800775e:	6063      	str	r3, [r4, #4]
 8007760:	6014      	str	r4, [r2, #0]
 8007762:	4628      	mov	r0, r5
 8007764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007768:	f000 b8dc 	b.w	8007924 <__malloc_unlock>
 800776c:	42a3      	cmp	r3, r4
 800776e:	d908      	bls.n	8007782 <_free_r+0x42>
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	1821      	adds	r1, r4, r0
 8007774:	428b      	cmp	r3, r1
 8007776:	bf01      	itttt	eq
 8007778:	6819      	ldreq	r1, [r3, #0]
 800777a:	685b      	ldreq	r3, [r3, #4]
 800777c:	1809      	addeq	r1, r1, r0
 800777e:	6021      	streq	r1, [r4, #0]
 8007780:	e7ed      	b.n	800775e <_free_r+0x1e>
 8007782:	461a      	mov	r2, r3
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b10b      	cbz	r3, 800778c <_free_r+0x4c>
 8007788:	42a3      	cmp	r3, r4
 800778a:	d9fa      	bls.n	8007782 <_free_r+0x42>
 800778c:	6811      	ldr	r1, [r2, #0]
 800778e:	1850      	adds	r0, r2, r1
 8007790:	42a0      	cmp	r0, r4
 8007792:	d10b      	bne.n	80077ac <_free_r+0x6c>
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	4401      	add	r1, r0
 8007798:	1850      	adds	r0, r2, r1
 800779a:	4283      	cmp	r3, r0
 800779c:	6011      	str	r1, [r2, #0]
 800779e:	d1e0      	bne.n	8007762 <_free_r+0x22>
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6053      	str	r3, [r2, #4]
 80077a6:	4408      	add	r0, r1
 80077a8:	6010      	str	r0, [r2, #0]
 80077aa:	e7da      	b.n	8007762 <_free_r+0x22>
 80077ac:	d902      	bls.n	80077b4 <_free_r+0x74>
 80077ae:	230c      	movs	r3, #12
 80077b0:	602b      	str	r3, [r5, #0]
 80077b2:	e7d6      	b.n	8007762 <_free_r+0x22>
 80077b4:	6820      	ldr	r0, [r4, #0]
 80077b6:	1821      	adds	r1, r4, r0
 80077b8:	428b      	cmp	r3, r1
 80077ba:	bf04      	itt	eq
 80077bc:	6819      	ldreq	r1, [r3, #0]
 80077be:	685b      	ldreq	r3, [r3, #4]
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	bf04      	itt	eq
 80077c4:	1809      	addeq	r1, r1, r0
 80077c6:	6021      	streq	r1, [r4, #0]
 80077c8:	6054      	str	r4, [r2, #4]
 80077ca:	e7ca      	b.n	8007762 <_free_r+0x22>
 80077cc:	bd38      	pop	{r3, r4, r5, pc}
 80077ce:	bf00      	nop
 80077d0:	200007a8 	.word	0x200007a8

080077d4 <sbrk_aligned>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007814 <sbrk_aligned+0x40>)
 80077d8:	460c      	mov	r4, r1
 80077da:	6831      	ldr	r1, [r6, #0]
 80077dc:	4605      	mov	r5, r0
 80077de:	b911      	cbnz	r1, 80077e6 <sbrk_aligned+0x12>
 80077e0:	f000 fcda 	bl	8008198 <_sbrk_r>
 80077e4:	6030      	str	r0, [r6, #0]
 80077e6:	4621      	mov	r1, r4
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 fcd5 	bl	8008198 <_sbrk_r>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d103      	bne.n	80077fa <sbrk_aligned+0x26>
 80077f2:	f04f 34ff 	mov.w	r4, #4294967295
 80077f6:	4620      	mov	r0, r4
 80077f8:	bd70      	pop	{r4, r5, r6, pc}
 80077fa:	1cc4      	adds	r4, r0, #3
 80077fc:	f024 0403 	bic.w	r4, r4, #3
 8007800:	42a0      	cmp	r0, r4
 8007802:	d0f8      	beq.n	80077f6 <sbrk_aligned+0x22>
 8007804:	1a21      	subs	r1, r4, r0
 8007806:	4628      	mov	r0, r5
 8007808:	f000 fcc6 	bl	8008198 <_sbrk_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d1f2      	bne.n	80077f6 <sbrk_aligned+0x22>
 8007810:	e7ef      	b.n	80077f2 <sbrk_aligned+0x1e>
 8007812:	bf00      	nop
 8007814:	200007a4 	.word	0x200007a4

08007818 <_malloc_r>:
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	1ccd      	adds	r5, r1, #3
 800781e:	f025 0503 	bic.w	r5, r5, #3
 8007822:	3508      	adds	r5, #8
 8007824:	2d0c      	cmp	r5, #12
 8007826:	bf38      	it	cc
 8007828:	250c      	movcc	r5, #12
 800782a:	2d00      	cmp	r5, #0
 800782c:	4606      	mov	r6, r0
 800782e:	db01      	blt.n	8007834 <_malloc_r+0x1c>
 8007830:	42a9      	cmp	r1, r5
 8007832:	d904      	bls.n	800783e <_malloc_r+0x26>
 8007834:	230c      	movs	r3, #12
 8007836:	6033      	str	r3, [r6, #0]
 8007838:	2000      	movs	r0, #0
 800783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007914 <_malloc_r+0xfc>
 8007842:	f000 f869 	bl	8007918 <__malloc_lock>
 8007846:	f8d8 3000 	ldr.w	r3, [r8]
 800784a:	461c      	mov	r4, r3
 800784c:	bb44      	cbnz	r4, 80078a0 <_malloc_r+0x88>
 800784e:	4629      	mov	r1, r5
 8007850:	4630      	mov	r0, r6
 8007852:	f7ff ffbf 	bl	80077d4 <sbrk_aligned>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	4604      	mov	r4, r0
 800785a:	d158      	bne.n	800790e <_malloc_r+0xf6>
 800785c:	f8d8 4000 	ldr.w	r4, [r8]
 8007860:	4627      	mov	r7, r4
 8007862:	2f00      	cmp	r7, #0
 8007864:	d143      	bne.n	80078ee <_malloc_r+0xd6>
 8007866:	2c00      	cmp	r4, #0
 8007868:	d04b      	beq.n	8007902 <_malloc_r+0xea>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4639      	mov	r1, r7
 800786e:	4630      	mov	r0, r6
 8007870:	eb04 0903 	add.w	r9, r4, r3
 8007874:	f000 fc90 	bl	8008198 <_sbrk_r>
 8007878:	4581      	cmp	r9, r0
 800787a:	d142      	bne.n	8007902 <_malloc_r+0xea>
 800787c:	6821      	ldr	r1, [r4, #0]
 800787e:	1a6d      	subs	r5, r5, r1
 8007880:	4629      	mov	r1, r5
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff ffa6 	bl	80077d4 <sbrk_aligned>
 8007888:	3001      	adds	r0, #1
 800788a:	d03a      	beq.n	8007902 <_malloc_r+0xea>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	442b      	add	r3, r5
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	f8d8 3000 	ldr.w	r3, [r8]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	bb62      	cbnz	r2, 80078f4 <_malloc_r+0xdc>
 800789a:	f8c8 7000 	str.w	r7, [r8]
 800789e:	e00f      	b.n	80078c0 <_malloc_r+0xa8>
 80078a0:	6822      	ldr	r2, [r4, #0]
 80078a2:	1b52      	subs	r2, r2, r5
 80078a4:	d420      	bmi.n	80078e8 <_malloc_r+0xd0>
 80078a6:	2a0b      	cmp	r2, #11
 80078a8:	d917      	bls.n	80078da <_malloc_r+0xc2>
 80078aa:	1961      	adds	r1, r4, r5
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	6025      	str	r5, [r4, #0]
 80078b0:	bf18      	it	ne
 80078b2:	6059      	strne	r1, [r3, #4]
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	bf08      	it	eq
 80078b8:	f8c8 1000 	streq.w	r1, [r8]
 80078bc:	5162      	str	r2, [r4, r5]
 80078be:	604b      	str	r3, [r1, #4]
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 f82f 	bl	8007924 <__malloc_unlock>
 80078c6:	f104 000b 	add.w	r0, r4, #11
 80078ca:	1d23      	adds	r3, r4, #4
 80078cc:	f020 0007 	bic.w	r0, r0, #7
 80078d0:	1ac2      	subs	r2, r0, r3
 80078d2:	bf1c      	itt	ne
 80078d4:	1a1b      	subne	r3, r3, r0
 80078d6:	50a3      	strne	r3, [r4, r2]
 80078d8:	e7af      	b.n	800783a <_malloc_r+0x22>
 80078da:	6862      	ldr	r2, [r4, #4]
 80078dc:	42a3      	cmp	r3, r4
 80078de:	bf0c      	ite	eq
 80078e0:	f8c8 2000 	streq.w	r2, [r8]
 80078e4:	605a      	strne	r2, [r3, #4]
 80078e6:	e7eb      	b.n	80078c0 <_malloc_r+0xa8>
 80078e8:	4623      	mov	r3, r4
 80078ea:	6864      	ldr	r4, [r4, #4]
 80078ec:	e7ae      	b.n	800784c <_malloc_r+0x34>
 80078ee:	463c      	mov	r4, r7
 80078f0:	687f      	ldr	r7, [r7, #4]
 80078f2:	e7b6      	b.n	8007862 <_malloc_r+0x4a>
 80078f4:	461a      	mov	r2, r3
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	d1fb      	bne.n	80078f4 <_malloc_r+0xdc>
 80078fc:	2300      	movs	r3, #0
 80078fe:	6053      	str	r3, [r2, #4]
 8007900:	e7de      	b.n	80078c0 <_malloc_r+0xa8>
 8007902:	230c      	movs	r3, #12
 8007904:	6033      	str	r3, [r6, #0]
 8007906:	4630      	mov	r0, r6
 8007908:	f000 f80c 	bl	8007924 <__malloc_unlock>
 800790c:	e794      	b.n	8007838 <_malloc_r+0x20>
 800790e:	6005      	str	r5, [r0, #0]
 8007910:	e7d6      	b.n	80078c0 <_malloc_r+0xa8>
 8007912:	bf00      	nop
 8007914:	200007a8 	.word	0x200007a8

08007918 <__malloc_lock>:
 8007918:	4801      	ldr	r0, [pc, #4]	@ (8007920 <__malloc_lock+0x8>)
 800791a:	f7ff bf0e 	b.w	800773a <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	200007a0 	.word	0x200007a0

08007924 <__malloc_unlock>:
 8007924:	4801      	ldr	r0, [pc, #4]	@ (800792c <__malloc_unlock+0x8>)
 8007926:	f7ff bf09 	b.w	800773c <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	200007a0 	.word	0x200007a0

08007930 <__sfputc_r>:
 8007930:	6893      	ldr	r3, [r2, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	b410      	push	{r4}
 8007938:	6093      	str	r3, [r2, #8]
 800793a:	da08      	bge.n	800794e <__sfputc_r+0x1e>
 800793c:	6994      	ldr	r4, [r2, #24]
 800793e:	42a3      	cmp	r3, r4
 8007940:	db01      	blt.n	8007946 <__sfputc_r+0x16>
 8007942:	290a      	cmp	r1, #10
 8007944:	d103      	bne.n	800794e <__sfputc_r+0x1e>
 8007946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800794a:	f7ff bde8 	b.w	800751e <__swbuf_r>
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	1c58      	adds	r0, r3, #1
 8007952:	6010      	str	r0, [r2, #0]
 8007954:	7019      	strb	r1, [r3, #0]
 8007956:	4608      	mov	r0, r1
 8007958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800795c:	4770      	bx	lr

0800795e <__sfputs_r>:
 800795e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007960:	4606      	mov	r6, r0
 8007962:	460f      	mov	r7, r1
 8007964:	4614      	mov	r4, r2
 8007966:	18d5      	adds	r5, r2, r3
 8007968:	42ac      	cmp	r4, r5
 800796a:	d101      	bne.n	8007970 <__sfputs_r+0x12>
 800796c:	2000      	movs	r0, #0
 800796e:	e007      	b.n	8007980 <__sfputs_r+0x22>
 8007970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007974:	463a      	mov	r2, r7
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff ffda 	bl	8007930 <__sfputc_r>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d1f3      	bne.n	8007968 <__sfputs_r+0xa>
 8007980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007984 <_vfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	460d      	mov	r5, r1
 800798a:	b09d      	sub	sp, #116	@ 0x74
 800798c:	4614      	mov	r4, r2
 800798e:	4698      	mov	r8, r3
 8007990:	4606      	mov	r6, r0
 8007992:	b118      	cbz	r0, 800799c <_vfiprintf_r+0x18>
 8007994:	6a03      	ldr	r3, [r0, #32]
 8007996:	b90b      	cbnz	r3, 800799c <_vfiprintf_r+0x18>
 8007998:	f7ff fcd0 	bl	800733c <__sinit>
 800799c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800799e:	07d9      	lsls	r1, r3, #31
 80079a0:	d405      	bmi.n	80079ae <_vfiprintf_r+0x2a>
 80079a2:	89ab      	ldrh	r3, [r5, #12]
 80079a4:	059a      	lsls	r2, r3, #22
 80079a6:	d402      	bmi.n	80079ae <_vfiprintf_r+0x2a>
 80079a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079aa:	f7ff fec6 	bl	800773a <__retarget_lock_acquire_recursive>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	071b      	lsls	r3, r3, #28
 80079b2:	d501      	bpl.n	80079b8 <_vfiprintf_r+0x34>
 80079b4:	692b      	ldr	r3, [r5, #16]
 80079b6:	b99b      	cbnz	r3, 80079e0 <_vfiprintf_r+0x5c>
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff fdee 	bl	800759c <__swsetup_r>
 80079c0:	b170      	cbz	r0, 80079e0 <_vfiprintf_r+0x5c>
 80079c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079c4:	07dc      	lsls	r4, r3, #31
 80079c6:	d504      	bpl.n	80079d2 <_vfiprintf_r+0x4e>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	b01d      	add	sp, #116	@ 0x74
 80079ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	0598      	lsls	r0, r3, #22
 80079d6:	d4f7      	bmi.n	80079c8 <_vfiprintf_r+0x44>
 80079d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079da:	f7ff feaf 	bl	800773c <__retarget_lock_release_recursive>
 80079de:	e7f3      	b.n	80079c8 <_vfiprintf_r+0x44>
 80079e0:	2300      	movs	r3, #0
 80079e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e4:	2320      	movs	r3, #32
 80079e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ee:	2330      	movs	r3, #48	@ 0x30
 80079f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ba0 <_vfiprintf_r+0x21c>
 80079f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079f8:	f04f 0901 	mov.w	r9, #1
 80079fc:	4623      	mov	r3, r4
 80079fe:	469a      	mov	sl, r3
 8007a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a04:	b10a      	cbz	r2, 8007a0a <_vfiprintf_r+0x86>
 8007a06:	2a25      	cmp	r2, #37	@ 0x25
 8007a08:	d1f9      	bne.n	80079fe <_vfiprintf_r+0x7a>
 8007a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0e:	d00b      	beq.n	8007a28 <_vfiprintf_r+0xa4>
 8007a10:	465b      	mov	r3, fp
 8007a12:	4622      	mov	r2, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ffa1 	bl	800795e <__sfputs_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f000 80a7 	beq.w	8007b70 <_vfiprintf_r+0x1ec>
 8007a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a24:	445a      	add	r2, fp
 8007a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a28:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 809f 	beq.w	8007b70 <_vfiprintf_r+0x1ec>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f04f 32ff 	mov.w	r2, #4294967295
 8007a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3c:	f10a 0a01 	add.w	sl, sl, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a48:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a4a:	4654      	mov	r4, sl
 8007a4c:	2205      	movs	r2, #5
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4853      	ldr	r0, [pc, #332]	@ (8007ba0 <_vfiprintf_r+0x21c>)
 8007a54:	f7f8 fbf4 	bl	8000240 <memchr>
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	b9d8      	cbnz	r0, 8007a94 <_vfiprintf_r+0x110>
 8007a5c:	06d1      	lsls	r1, r2, #27
 8007a5e:	bf44      	itt	mi
 8007a60:	2320      	movmi	r3, #32
 8007a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a66:	0713      	lsls	r3, r2, #28
 8007a68:	bf44      	itt	mi
 8007a6a:	232b      	movmi	r3, #43	@ 0x2b
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a70:	f89a 3000 	ldrb.w	r3, [sl]
 8007a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a76:	d015      	beq.n	8007aa4 <_vfiprintf_r+0x120>
 8007a78:	9a07      	ldr	r2, [sp, #28]
 8007a7a:	4654      	mov	r4, sl
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f04f 0c0a 	mov.w	ip, #10
 8007a82:	4621      	mov	r1, r4
 8007a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a88:	3b30      	subs	r3, #48	@ 0x30
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	d94b      	bls.n	8007b26 <_vfiprintf_r+0x1a2>
 8007a8e:	b1b0      	cbz	r0, 8007abe <_vfiprintf_r+0x13a>
 8007a90:	9207      	str	r2, [sp, #28]
 8007a92:	e014      	b.n	8007abe <_vfiprintf_r+0x13a>
 8007a94:	eba0 0308 	sub.w	r3, r0, r8
 8007a98:	fa09 f303 	lsl.w	r3, r9, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	46a2      	mov	sl, r4
 8007aa2:	e7d2      	b.n	8007a4a <_vfiprintf_r+0xc6>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d19      	adds	r1, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9103      	str	r1, [sp, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfbb      	ittet	lt
 8007ab0:	425b      	neglt	r3, r3
 8007ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab6:	9307      	strge	r3, [sp, #28]
 8007ab8:	9307      	strlt	r3, [sp, #28]
 8007aba:	bfb8      	it	lt
 8007abc:	9204      	strlt	r2, [sp, #16]
 8007abe:	7823      	ldrb	r3, [r4, #0]
 8007ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac2:	d10a      	bne.n	8007ada <_vfiprintf_r+0x156>
 8007ac4:	7863      	ldrb	r3, [r4, #1]
 8007ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ac8:	d132      	bne.n	8007b30 <_vfiprintf_r+0x1ac>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	9203      	str	r2, [sp, #12]
 8007ad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ad6:	3402      	adds	r4, #2
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007bb0 <_vfiprintf_r+0x22c>
 8007ade:	7821      	ldrb	r1, [r4, #0]
 8007ae0:	2203      	movs	r2, #3
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	f7f8 fbac 	bl	8000240 <memchr>
 8007ae8:	b138      	cbz	r0, 8007afa <_vfiprintf_r+0x176>
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	eba0 000a 	sub.w	r0, r0, sl
 8007af0:	2240      	movs	r2, #64	@ 0x40
 8007af2:	4082      	lsls	r2, r0
 8007af4:	4313      	orrs	r3, r2
 8007af6:	3401      	adds	r4, #1
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007afe:	4829      	ldr	r0, [pc, #164]	@ (8007ba4 <_vfiprintf_r+0x220>)
 8007b00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b04:	2206      	movs	r2, #6
 8007b06:	f7f8 fb9b 	bl	8000240 <memchr>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d03f      	beq.n	8007b8e <_vfiprintf_r+0x20a>
 8007b0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ba8 <_vfiprintf_r+0x224>)
 8007b10:	bb1b      	cbnz	r3, 8007b5a <_vfiprintf_r+0x1d6>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	3307      	adds	r3, #7
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b20:	443b      	add	r3, r7
 8007b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b24:	e76a      	b.n	80079fc <_vfiprintf_r+0x78>
 8007b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	e7a8      	b.n	8007a82 <_vfiprintf_r+0xfe>
 8007b30:	2300      	movs	r3, #0
 8007b32:	3401      	adds	r4, #1
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	4619      	mov	r1, r3
 8007b38:	f04f 0c0a 	mov.w	ip, #10
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b42:	3a30      	subs	r2, #48	@ 0x30
 8007b44:	2a09      	cmp	r2, #9
 8007b46:	d903      	bls.n	8007b50 <_vfiprintf_r+0x1cc>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0c6      	beq.n	8007ada <_vfiprintf_r+0x156>
 8007b4c:	9105      	str	r1, [sp, #20]
 8007b4e:	e7c4      	b.n	8007ada <_vfiprintf_r+0x156>
 8007b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b54:	4604      	mov	r4, r0
 8007b56:	2301      	movs	r3, #1
 8007b58:	e7f0      	b.n	8007b3c <_vfiprintf_r+0x1b8>
 8007b5a:	ab03      	add	r3, sp, #12
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	462a      	mov	r2, r5
 8007b60:	4b12      	ldr	r3, [pc, #72]	@ (8007bac <_vfiprintf_r+0x228>)
 8007b62:	a904      	add	r1, sp, #16
 8007b64:	4630      	mov	r0, r6
 8007b66:	f3af 8000 	nop.w
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	1c78      	adds	r0, r7, #1
 8007b6e:	d1d6      	bne.n	8007b1e <_vfiprintf_r+0x19a>
 8007b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b72:	07d9      	lsls	r1, r3, #31
 8007b74:	d405      	bmi.n	8007b82 <_vfiprintf_r+0x1fe>
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	059a      	lsls	r2, r3, #22
 8007b7a:	d402      	bmi.n	8007b82 <_vfiprintf_r+0x1fe>
 8007b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b7e:	f7ff fddd 	bl	800773c <__retarget_lock_release_recursive>
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	065b      	lsls	r3, r3, #25
 8007b86:	f53f af1f 	bmi.w	80079c8 <_vfiprintf_r+0x44>
 8007b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b8c:	e71e      	b.n	80079cc <_vfiprintf_r+0x48>
 8007b8e:	ab03      	add	r3, sp, #12
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	462a      	mov	r2, r5
 8007b94:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <_vfiprintf_r+0x228>)
 8007b96:	a904      	add	r1, sp, #16
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 f879 	bl	8007c90 <_printf_i>
 8007b9e:	e7e4      	b.n	8007b6a <_vfiprintf_r+0x1e6>
 8007ba0:	08008379 	.word	0x08008379
 8007ba4:	08008383 	.word	0x08008383
 8007ba8:	00000000 	.word	0x00000000
 8007bac:	0800795f 	.word	0x0800795f
 8007bb0:	0800837f 	.word	0x0800837f

08007bb4 <_printf_common>:
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	4616      	mov	r6, r2
 8007bba:	4698      	mov	r8, r3
 8007bbc:	688a      	ldr	r2, [r1, #8]
 8007bbe:	690b      	ldr	r3, [r1, #16]
 8007bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bfb8      	it	lt
 8007bc8:	4613      	movlt	r3, r2
 8007bca:	6033      	str	r3, [r6, #0]
 8007bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	b10a      	cbz	r2, 8007bda <_printf_common+0x26>
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	6033      	str	r3, [r6, #0]
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	0699      	lsls	r1, r3, #26
 8007bde:	bf42      	ittt	mi
 8007be0:	6833      	ldrmi	r3, [r6, #0]
 8007be2:	3302      	addmi	r3, #2
 8007be4:	6033      	strmi	r3, [r6, #0]
 8007be6:	6825      	ldr	r5, [r4, #0]
 8007be8:	f015 0506 	ands.w	r5, r5, #6
 8007bec:	d106      	bne.n	8007bfc <_printf_common+0x48>
 8007bee:	f104 0a19 	add.w	sl, r4, #25
 8007bf2:	68e3      	ldr	r3, [r4, #12]
 8007bf4:	6832      	ldr	r2, [r6, #0]
 8007bf6:	1a9b      	subs	r3, r3, r2
 8007bf8:	42ab      	cmp	r3, r5
 8007bfa:	dc26      	bgt.n	8007c4a <_printf_common+0x96>
 8007bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c00:	6822      	ldr	r2, [r4, #0]
 8007c02:	3b00      	subs	r3, #0
 8007c04:	bf18      	it	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	0692      	lsls	r2, r2, #26
 8007c0a:	d42b      	bmi.n	8007c64 <_printf_common+0xb0>
 8007c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c10:	4641      	mov	r1, r8
 8007c12:	4638      	mov	r0, r7
 8007c14:	47c8      	blx	r9
 8007c16:	3001      	adds	r0, #1
 8007c18:	d01e      	beq.n	8007c58 <_printf_common+0xa4>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	f003 0306 	and.w	r3, r3, #6
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	bf02      	ittt	eq
 8007c26:	68e5      	ldreq	r5, [r4, #12]
 8007c28:	6833      	ldreq	r3, [r6, #0]
 8007c2a:	1aed      	subeq	r5, r5, r3
 8007c2c:	68a3      	ldr	r3, [r4, #8]
 8007c2e:	bf0c      	ite	eq
 8007c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c34:	2500      	movne	r5, #0
 8007c36:	4293      	cmp	r3, r2
 8007c38:	bfc4      	itt	gt
 8007c3a:	1a9b      	subgt	r3, r3, r2
 8007c3c:	18ed      	addgt	r5, r5, r3
 8007c3e:	2600      	movs	r6, #0
 8007c40:	341a      	adds	r4, #26
 8007c42:	42b5      	cmp	r5, r6
 8007c44:	d11a      	bne.n	8007c7c <_printf_common+0xc8>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e008      	b.n	8007c5c <_printf_common+0xa8>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	4641      	mov	r1, r8
 8007c50:	4638      	mov	r0, r7
 8007c52:	47c8      	blx	r9
 8007c54:	3001      	adds	r0, #1
 8007c56:	d103      	bne.n	8007c60 <_printf_common+0xac>
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c60:	3501      	adds	r5, #1
 8007c62:	e7c6      	b.n	8007bf2 <_printf_common+0x3e>
 8007c64:	18e1      	adds	r1, r4, r3
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	2030      	movs	r0, #48	@ 0x30
 8007c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c6e:	4422      	add	r2, r4
 8007c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c78:	3302      	adds	r3, #2
 8007c7a:	e7c7      	b.n	8007c0c <_printf_common+0x58>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4641      	mov	r1, r8
 8007c82:	4638      	mov	r0, r7
 8007c84:	47c8      	blx	r9
 8007c86:	3001      	adds	r0, #1
 8007c88:	d0e6      	beq.n	8007c58 <_printf_common+0xa4>
 8007c8a:	3601      	adds	r6, #1
 8007c8c:	e7d9      	b.n	8007c42 <_printf_common+0x8e>
	...

08007c90 <_printf_i>:
 8007c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c94:	7e0f      	ldrb	r7, [r1, #24]
 8007c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c98:	2f78      	cmp	r7, #120	@ 0x78
 8007c9a:	4691      	mov	r9, r2
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	469a      	mov	sl, r3
 8007ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ca6:	d807      	bhi.n	8007cb8 <_printf_i+0x28>
 8007ca8:	2f62      	cmp	r7, #98	@ 0x62
 8007caa:	d80a      	bhi.n	8007cc2 <_printf_i+0x32>
 8007cac:	2f00      	cmp	r7, #0
 8007cae:	f000 80d2 	beq.w	8007e56 <_printf_i+0x1c6>
 8007cb2:	2f58      	cmp	r7, #88	@ 0x58
 8007cb4:	f000 80b9 	beq.w	8007e2a <_printf_i+0x19a>
 8007cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cc0:	e03a      	b.n	8007d38 <_printf_i+0xa8>
 8007cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cc6:	2b15      	cmp	r3, #21
 8007cc8:	d8f6      	bhi.n	8007cb8 <_printf_i+0x28>
 8007cca:	a101      	add	r1, pc, #4	@ (adr r1, 8007cd0 <_printf_i+0x40>)
 8007ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd0:	08007d29 	.word	0x08007d29
 8007cd4:	08007d3d 	.word	0x08007d3d
 8007cd8:	08007cb9 	.word	0x08007cb9
 8007cdc:	08007cb9 	.word	0x08007cb9
 8007ce0:	08007cb9 	.word	0x08007cb9
 8007ce4:	08007cb9 	.word	0x08007cb9
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007cb9 	.word	0x08007cb9
 8007cf0:	08007cb9 	.word	0x08007cb9
 8007cf4:	08007cb9 	.word	0x08007cb9
 8007cf8:	08007cb9 	.word	0x08007cb9
 8007cfc:	08007e3d 	.word	0x08007e3d
 8007d00:	08007d67 	.word	0x08007d67
 8007d04:	08007df7 	.word	0x08007df7
 8007d08:	08007cb9 	.word	0x08007cb9
 8007d0c:	08007cb9 	.word	0x08007cb9
 8007d10:	08007e5f 	.word	0x08007e5f
 8007d14:	08007cb9 	.word	0x08007cb9
 8007d18:	08007d67 	.word	0x08007d67
 8007d1c:	08007cb9 	.word	0x08007cb9
 8007d20:	08007cb9 	.word	0x08007cb9
 8007d24:	08007dff 	.word	0x08007dff
 8007d28:	6833      	ldr	r3, [r6, #0]
 8007d2a:	1d1a      	adds	r2, r3, #4
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6032      	str	r2, [r6, #0]
 8007d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e09d      	b.n	8007e78 <_printf_i+0x1e8>
 8007d3c:	6833      	ldr	r3, [r6, #0]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	6031      	str	r1, [r6, #0]
 8007d44:	0606      	lsls	r6, r0, #24
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0xbc>
 8007d48:	681d      	ldr	r5, [r3, #0]
 8007d4a:	e003      	b.n	8007d54 <_printf_i+0xc4>
 8007d4c:	0645      	lsls	r5, r0, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0xb8>
 8007d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	da03      	bge.n	8007d60 <_printf_i+0xd0>
 8007d58:	232d      	movs	r3, #45	@ 0x2d
 8007d5a:	426d      	negs	r5, r5
 8007d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d60:	4859      	ldr	r0, [pc, #356]	@ (8007ec8 <_printf_i+0x238>)
 8007d62:	230a      	movs	r3, #10
 8007d64:	e011      	b.n	8007d8a <_printf_i+0xfa>
 8007d66:	6821      	ldr	r1, [r4, #0]
 8007d68:	6833      	ldr	r3, [r6, #0]
 8007d6a:	0608      	lsls	r0, r1, #24
 8007d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d70:	d402      	bmi.n	8007d78 <_printf_i+0xe8>
 8007d72:	0649      	lsls	r1, r1, #25
 8007d74:	bf48      	it	mi
 8007d76:	b2ad      	uxthmi	r5, r5
 8007d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d7a:	4853      	ldr	r0, [pc, #332]	@ (8007ec8 <_printf_i+0x238>)
 8007d7c:	6033      	str	r3, [r6, #0]
 8007d7e:	bf14      	ite	ne
 8007d80:	230a      	movne	r3, #10
 8007d82:	2308      	moveq	r3, #8
 8007d84:	2100      	movs	r1, #0
 8007d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d8a:	6866      	ldr	r6, [r4, #4]
 8007d8c:	60a6      	str	r6, [r4, #8]
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	bfa2      	ittt	ge
 8007d92:	6821      	ldrge	r1, [r4, #0]
 8007d94:	f021 0104 	bicge.w	r1, r1, #4
 8007d98:	6021      	strge	r1, [r4, #0]
 8007d9a:	b90d      	cbnz	r5, 8007da0 <_printf_i+0x110>
 8007d9c:	2e00      	cmp	r6, #0
 8007d9e:	d04b      	beq.n	8007e38 <_printf_i+0x1a8>
 8007da0:	4616      	mov	r6, r2
 8007da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007da6:	fb03 5711 	mls	r7, r3, r1, r5
 8007daa:	5dc7      	ldrb	r7, [r0, r7]
 8007dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007db0:	462f      	mov	r7, r5
 8007db2:	42bb      	cmp	r3, r7
 8007db4:	460d      	mov	r5, r1
 8007db6:	d9f4      	bls.n	8007da2 <_printf_i+0x112>
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d10b      	bne.n	8007dd4 <_printf_i+0x144>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	07df      	lsls	r7, r3, #31
 8007dc0:	d508      	bpl.n	8007dd4 <_printf_i+0x144>
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	6861      	ldr	r1, [r4, #4]
 8007dc6:	4299      	cmp	r1, r3
 8007dc8:	bfde      	ittt	le
 8007dca:	2330      	movle	r3, #48	@ 0x30
 8007dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dd4:	1b92      	subs	r2, r2, r6
 8007dd6:	6122      	str	r2, [r4, #16]
 8007dd8:	f8cd a000 	str.w	sl, [sp]
 8007ddc:	464b      	mov	r3, r9
 8007dde:	aa03      	add	r2, sp, #12
 8007de0:	4621      	mov	r1, r4
 8007de2:	4640      	mov	r0, r8
 8007de4:	f7ff fee6 	bl	8007bb4 <_printf_common>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d14a      	bne.n	8007e82 <_printf_i+0x1f2>
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	b004      	add	sp, #16
 8007df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	f043 0320 	orr.w	r3, r3, #32
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	4833      	ldr	r0, [pc, #204]	@ (8007ecc <_printf_i+0x23c>)
 8007e00:	2778      	movs	r7, #120	@ 0x78
 8007e02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	6831      	ldr	r1, [r6, #0]
 8007e0a:	061f      	lsls	r7, r3, #24
 8007e0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e10:	d402      	bmi.n	8007e18 <_printf_i+0x188>
 8007e12:	065f      	lsls	r7, r3, #25
 8007e14:	bf48      	it	mi
 8007e16:	b2ad      	uxthmi	r5, r5
 8007e18:	6031      	str	r1, [r6, #0]
 8007e1a:	07d9      	lsls	r1, r3, #31
 8007e1c:	bf44      	itt	mi
 8007e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e22:	6023      	strmi	r3, [r4, #0]
 8007e24:	b11d      	cbz	r5, 8007e2e <_printf_i+0x19e>
 8007e26:	2310      	movs	r3, #16
 8007e28:	e7ac      	b.n	8007d84 <_printf_i+0xf4>
 8007e2a:	4827      	ldr	r0, [pc, #156]	@ (8007ec8 <_printf_i+0x238>)
 8007e2c:	e7e9      	b.n	8007e02 <_printf_i+0x172>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	f023 0320 	bic.w	r3, r3, #32
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	e7f6      	b.n	8007e26 <_printf_i+0x196>
 8007e38:	4616      	mov	r6, r2
 8007e3a:	e7bd      	b.n	8007db8 <_printf_i+0x128>
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	6825      	ldr	r5, [r4, #0]
 8007e40:	6961      	ldr	r1, [r4, #20]
 8007e42:	1d18      	adds	r0, r3, #4
 8007e44:	6030      	str	r0, [r6, #0]
 8007e46:	062e      	lsls	r6, r5, #24
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	d501      	bpl.n	8007e50 <_printf_i+0x1c0>
 8007e4c:	6019      	str	r1, [r3, #0]
 8007e4e:	e002      	b.n	8007e56 <_printf_i+0x1c6>
 8007e50:	0668      	lsls	r0, r5, #25
 8007e52:	d5fb      	bpl.n	8007e4c <_printf_i+0x1bc>
 8007e54:	8019      	strh	r1, [r3, #0]
 8007e56:	2300      	movs	r3, #0
 8007e58:	6123      	str	r3, [r4, #16]
 8007e5a:	4616      	mov	r6, r2
 8007e5c:	e7bc      	b.n	8007dd8 <_printf_i+0x148>
 8007e5e:	6833      	ldr	r3, [r6, #0]
 8007e60:	1d1a      	adds	r2, r3, #4
 8007e62:	6032      	str	r2, [r6, #0]
 8007e64:	681e      	ldr	r6, [r3, #0]
 8007e66:	6862      	ldr	r2, [r4, #4]
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7f8 f9e8 	bl	8000240 <memchr>
 8007e70:	b108      	cbz	r0, 8007e76 <_printf_i+0x1e6>
 8007e72:	1b80      	subs	r0, r0, r6
 8007e74:	6060      	str	r0, [r4, #4]
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	6123      	str	r3, [r4, #16]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e80:	e7aa      	b.n	8007dd8 <_printf_i+0x148>
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	4632      	mov	r2, r6
 8007e86:	4649      	mov	r1, r9
 8007e88:	4640      	mov	r0, r8
 8007e8a:	47d0      	blx	sl
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d0ad      	beq.n	8007dec <_printf_i+0x15c>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	079b      	lsls	r3, r3, #30
 8007e94:	d413      	bmi.n	8007ebe <_printf_i+0x22e>
 8007e96:	68e0      	ldr	r0, [r4, #12]
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	4298      	cmp	r0, r3
 8007e9c:	bfb8      	it	lt
 8007e9e:	4618      	movlt	r0, r3
 8007ea0:	e7a6      	b.n	8007df0 <_printf_i+0x160>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	47d0      	blx	sl
 8007eac:	3001      	adds	r0, #1
 8007eae:	d09d      	beq.n	8007dec <_printf_i+0x15c>
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	68e3      	ldr	r3, [r4, #12]
 8007eb4:	9903      	ldr	r1, [sp, #12]
 8007eb6:	1a5b      	subs	r3, r3, r1
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	dcf2      	bgt.n	8007ea2 <_printf_i+0x212>
 8007ebc:	e7eb      	b.n	8007e96 <_printf_i+0x206>
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	f104 0619 	add.w	r6, r4, #25
 8007ec4:	e7f5      	b.n	8007eb2 <_printf_i+0x222>
 8007ec6:	bf00      	nop
 8007ec8:	0800838a 	.word	0x0800838a
 8007ecc:	0800839b 	.word	0x0800839b

08007ed0 <__sflush_r>:
 8007ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed8:	0716      	lsls	r6, r2, #28
 8007eda:	4605      	mov	r5, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	d454      	bmi.n	8007f8a <__sflush_r+0xba>
 8007ee0:	684b      	ldr	r3, [r1, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dc02      	bgt.n	8007eec <__sflush_r+0x1c>
 8007ee6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dd48      	ble.n	8007f7e <__sflush_r+0xae>
 8007eec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007eee:	2e00      	cmp	r6, #0
 8007ef0:	d045      	beq.n	8007f7e <__sflush_r+0xae>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ef8:	682f      	ldr	r7, [r5, #0]
 8007efa:	6a21      	ldr	r1, [r4, #32]
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	d030      	beq.n	8007f62 <__sflush_r+0x92>
 8007f00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	0759      	lsls	r1, r3, #29
 8007f06:	d505      	bpl.n	8007f14 <__sflush_r+0x44>
 8007f08:	6863      	ldr	r3, [r4, #4]
 8007f0a:	1ad2      	subs	r2, r2, r3
 8007f0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f0e:	b10b      	cbz	r3, 8007f14 <__sflush_r+0x44>
 8007f10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f18:	6a21      	ldr	r1, [r4, #32]
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	47b0      	blx	r6
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	d106      	bne.n	8007f32 <__sflush_r+0x62>
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	291d      	cmp	r1, #29
 8007f28:	d82b      	bhi.n	8007f82 <__sflush_r+0xb2>
 8007f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fd4 <__sflush_r+0x104>)
 8007f2c:	410a      	asrs	r2, r1
 8007f2e:	07d6      	lsls	r6, r2, #31
 8007f30:	d427      	bmi.n	8007f82 <__sflush_r+0xb2>
 8007f32:	2200      	movs	r2, #0
 8007f34:	6062      	str	r2, [r4, #4]
 8007f36:	04d9      	lsls	r1, r3, #19
 8007f38:	6922      	ldr	r2, [r4, #16]
 8007f3a:	6022      	str	r2, [r4, #0]
 8007f3c:	d504      	bpl.n	8007f48 <__sflush_r+0x78>
 8007f3e:	1c42      	adds	r2, r0, #1
 8007f40:	d101      	bne.n	8007f46 <__sflush_r+0x76>
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	b903      	cbnz	r3, 8007f48 <__sflush_r+0x78>
 8007f46:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f4a:	602f      	str	r7, [r5, #0]
 8007f4c:	b1b9      	cbz	r1, 8007f7e <__sflush_r+0xae>
 8007f4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f52:	4299      	cmp	r1, r3
 8007f54:	d002      	beq.n	8007f5c <__sflush_r+0x8c>
 8007f56:	4628      	mov	r0, r5
 8007f58:	f7ff fbf2 	bl	8007740 <_free_r>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f60:	e00d      	b.n	8007f7e <__sflush_r+0xae>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4628      	mov	r0, r5
 8007f66:	47b0      	blx	r6
 8007f68:	4602      	mov	r2, r0
 8007f6a:	1c50      	adds	r0, r2, #1
 8007f6c:	d1c9      	bne.n	8007f02 <__sflush_r+0x32>
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0c6      	beq.n	8007f02 <__sflush_r+0x32>
 8007f74:	2b1d      	cmp	r3, #29
 8007f76:	d001      	beq.n	8007f7c <__sflush_r+0xac>
 8007f78:	2b16      	cmp	r3, #22
 8007f7a:	d11e      	bne.n	8007fba <__sflush_r+0xea>
 8007f7c:	602f      	str	r7, [r5, #0]
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e022      	b.n	8007fc8 <__sflush_r+0xf8>
 8007f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f86:	b21b      	sxth	r3, r3
 8007f88:	e01b      	b.n	8007fc2 <__sflush_r+0xf2>
 8007f8a:	690f      	ldr	r7, [r1, #16]
 8007f8c:	2f00      	cmp	r7, #0
 8007f8e:	d0f6      	beq.n	8007f7e <__sflush_r+0xae>
 8007f90:	0793      	lsls	r3, r2, #30
 8007f92:	680e      	ldr	r6, [r1, #0]
 8007f94:	bf08      	it	eq
 8007f96:	694b      	ldreq	r3, [r1, #20]
 8007f98:	600f      	str	r7, [r1, #0]
 8007f9a:	bf18      	it	ne
 8007f9c:	2300      	movne	r3, #0
 8007f9e:	eba6 0807 	sub.w	r8, r6, r7
 8007fa2:	608b      	str	r3, [r1, #8]
 8007fa4:	f1b8 0f00 	cmp.w	r8, #0
 8007fa8:	dde9      	ble.n	8007f7e <__sflush_r+0xae>
 8007faa:	6a21      	ldr	r1, [r4, #32]
 8007fac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fae:	4643      	mov	r3, r8
 8007fb0:	463a      	mov	r2, r7
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b0      	blx	r6
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	dc08      	bgt.n	8007fcc <__sflush_r+0xfc>
 8007fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	4407      	add	r7, r0
 8007fce:	eba8 0800 	sub.w	r8, r8, r0
 8007fd2:	e7e7      	b.n	8007fa4 <__sflush_r+0xd4>
 8007fd4:	dfbffffe 	.word	0xdfbffffe

08007fd8 <_fflush_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	690b      	ldr	r3, [r1, #16]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	b913      	cbnz	r3, 8007fe8 <_fflush_r+0x10>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	b118      	cbz	r0, 8007ff2 <_fflush_r+0x1a>
 8007fea:	6a03      	ldr	r3, [r0, #32]
 8007fec:	b90b      	cbnz	r3, 8007ff2 <_fflush_r+0x1a>
 8007fee:	f7ff f9a5 	bl	800733c <__sinit>
 8007ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f3      	beq.n	8007fe2 <_fflush_r+0xa>
 8007ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ffc:	07d0      	lsls	r0, r2, #31
 8007ffe:	d404      	bmi.n	800800a <_fflush_r+0x32>
 8008000:	0599      	lsls	r1, r3, #22
 8008002:	d402      	bmi.n	800800a <_fflush_r+0x32>
 8008004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008006:	f7ff fb98 	bl	800773a <__retarget_lock_acquire_recursive>
 800800a:	4628      	mov	r0, r5
 800800c:	4621      	mov	r1, r4
 800800e:	f7ff ff5f 	bl	8007ed0 <__sflush_r>
 8008012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008014:	07da      	lsls	r2, r3, #31
 8008016:	4605      	mov	r5, r0
 8008018:	d4e4      	bmi.n	8007fe4 <_fflush_r+0xc>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	059b      	lsls	r3, r3, #22
 800801e:	d4e1      	bmi.n	8007fe4 <_fflush_r+0xc>
 8008020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008022:	f7ff fb8b 	bl	800773c <__retarget_lock_release_recursive>
 8008026:	e7dd      	b.n	8007fe4 <_fflush_r+0xc>

08008028 <__swhatbuf_r>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	460c      	mov	r4, r1
 800802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008030:	2900      	cmp	r1, #0
 8008032:	b096      	sub	sp, #88	@ 0x58
 8008034:	4615      	mov	r5, r2
 8008036:	461e      	mov	r6, r3
 8008038:	da0d      	bge.n	8008056 <__swhatbuf_r+0x2e>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008040:	f04f 0100 	mov.w	r1, #0
 8008044:	bf14      	ite	ne
 8008046:	2340      	movne	r3, #64	@ 0x40
 8008048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800804c:	2000      	movs	r0, #0
 800804e:	6031      	str	r1, [r6, #0]
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	b016      	add	sp, #88	@ 0x58
 8008054:	bd70      	pop	{r4, r5, r6, pc}
 8008056:	466a      	mov	r2, sp
 8008058:	f000 f87c 	bl	8008154 <_fstat_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	dbec      	blt.n	800803a <__swhatbuf_r+0x12>
 8008060:	9901      	ldr	r1, [sp, #4]
 8008062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800806a:	4259      	negs	r1, r3
 800806c:	4159      	adcs	r1, r3
 800806e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008072:	e7eb      	b.n	800804c <__swhatbuf_r+0x24>

08008074 <__smakebuf_r>:
 8008074:	898b      	ldrh	r3, [r1, #12]
 8008076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008078:	079d      	lsls	r5, r3, #30
 800807a:	4606      	mov	r6, r0
 800807c:	460c      	mov	r4, r1
 800807e:	d507      	bpl.n	8008090 <__smakebuf_r+0x1c>
 8008080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	6123      	str	r3, [r4, #16]
 8008088:	2301      	movs	r3, #1
 800808a:	6163      	str	r3, [r4, #20]
 800808c:	b003      	add	sp, #12
 800808e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008090:	ab01      	add	r3, sp, #4
 8008092:	466a      	mov	r2, sp
 8008094:	f7ff ffc8 	bl	8008028 <__swhatbuf_r>
 8008098:	9f00      	ldr	r7, [sp, #0]
 800809a:	4605      	mov	r5, r0
 800809c:	4639      	mov	r1, r7
 800809e:	4630      	mov	r0, r6
 80080a0:	f7ff fbba 	bl	8007818 <_malloc_r>
 80080a4:	b948      	cbnz	r0, 80080ba <__smakebuf_r+0x46>
 80080a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080aa:	059a      	lsls	r2, r3, #22
 80080ac:	d4ee      	bmi.n	800808c <__smakebuf_r+0x18>
 80080ae:	f023 0303 	bic.w	r3, r3, #3
 80080b2:	f043 0302 	orr.w	r3, r3, #2
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	e7e2      	b.n	8008080 <__smakebuf_r+0xc>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	6020      	str	r0, [r4, #0]
 80080be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	9b01      	ldr	r3, [sp, #4]
 80080c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080ca:	b15b      	cbz	r3, 80080e4 <__smakebuf_r+0x70>
 80080cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 f851 	bl	8008178 <_isatty_r>
 80080d6:	b128      	cbz	r0, 80080e4 <__smakebuf_r+0x70>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f023 0303 	bic.w	r3, r3, #3
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	431d      	orrs	r5, r3
 80080e8:	81a5      	strh	r5, [r4, #12]
 80080ea:	e7cf      	b.n	800808c <__smakebuf_r+0x18>

080080ec <_putc_r>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	460d      	mov	r5, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	4606      	mov	r6, r0
 80080f4:	b118      	cbz	r0, 80080fe <_putc_r+0x12>
 80080f6:	6a03      	ldr	r3, [r0, #32]
 80080f8:	b90b      	cbnz	r3, 80080fe <_putc_r+0x12>
 80080fa:	f7ff f91f 	bl	800733c <__sinit>
 80080fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008100:	07d8      	lsls	r0, r3, #31
 8008102:	d405      	bmi.n	8008110 <_putc_r+0x24>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	0599      	lsls	r1, r3, #22
 8008108:	d402      	bmi.n	8008110 <_putc_r+0x24>
 800810a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800810c:	f7ff fb15 	bl	800773a <__retarget_lock_acquire_recursive>
 8008110:	68a3      	ldr	r3, [r4, #8]
 8008112:	3b01      	subs	r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	da05      	bge.n	8008126 <_putc_r+0x3a>
 800811a:	69a2      	ldr	r2, [r4, #24]
 800811c:	4293      	cmp	r3, r2
 800811e:	db12      	blt.n	8008146 <_putc_r+0x5a>
 8008120:	b2eb      	uxtb	r3, r5
 8008122:	2b0a      	cmp	r3, #10
 8008124:	d00f      	beq.n	8008146 <_putc_r+0x5a>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	701d      	strb	r5, [r3, #0]
 800812e:	b2ed      	uxtb	r5, r5
 8008130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008132:	07da      	lsls	r2, r3, #31
 8008134:	d405      	bmi.n	8008142 <_putc_r+0x56>
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	059b      	lsls	r3, r3, #22
 800813a:	d402      	bmi.n	8008142 <_putc_r+0x56>
 800813c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800813e:	f7ff fafd 	bl	800773c <__retarget_lock_release_recursive>
 8008142:	4628      	mov	r0, r5
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	4629      	mov	r1, r5
 8008148:	4622      	mov	r2, r4
 800814a:	4630      	mov	r0, r6
 800814c:	f7ff f9e7 	bl	800751e <__swbuf_r>
 8008150:	4605      	mov	r5, r0
 8008152:	e7ed      	b.n	8008130 <_putc_r+0x44>

08008154 <_fstat_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	@ (8008174 <_fstat_r+0x20>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	4611      	mov	r1, r2
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	f7fa f9fa 	bl	800255a <_fstat>
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d102      	bne.n	8008170 <_fstat_r+0x1c>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	b103      	cbz	r3, 8008170 <_fstat_r+0x1c>
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	bd38      	pop	{r3, r4, r5, pc}
 8008172:	bf00      	nop
 8008174:	2000079c 	.word	0x2000079c

08008178 <_isatty_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d06      	ldr	r5, [pc, #24]	@ (8008194 <_isatty_r+0x1c>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	602b      	str	r3, [r5, #0]
 8008184:	f7fa f9f9 	bl	800257a <_isatty>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_isatty_r+0x1a>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_isatty_r+0x1a>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	2000079c 	.word	0x2000079c

08008198 <_sbrk_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4d06      	ldr	r5, [pc, #24]	@ (80081b4 <_sbrk_r+0x1c>)
 800819c:	2300      	movs	r3, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	602b      	str	r3, [r5, #0]
 80081a4:	f7fa fa02 	bl	80025ac <_sbrk>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_sbrk_r+0x1a>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_sbrk_r+0x1a>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	2000079c 	.word	0x2000079c

080081b8 <_init>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr

080081c4 <_fini>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	bf00      	nop
 80081c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ca:	bc08      	pop	{r3}
 80081cc:	469e      	mov	lr, r3
 80081ce:	4770      	bx	lr
