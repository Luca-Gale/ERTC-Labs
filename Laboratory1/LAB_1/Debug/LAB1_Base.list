
LAB1_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce8  08007ce8  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ce8  08007ce8  00008ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf0  08007cf0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cf4  08007cf4  00008cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007cf8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000068  08007d60  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007d60  000097e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163a8  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a61  00000000  00000000  0001f43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001035  00000000  00000000  00023338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5e0  00000000  00000000  0002436d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019550  00000000  00000000  0004e94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010734f  00000000  00000000  00067e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f1ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb4  00000000  00000000  0016f230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001751e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08007c1c 	.word	0x08007c1c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08007c1c 	.word	0x08007c1c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000614:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000618:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d013      	beq.n	800064c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000624:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000628:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800062c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00b      	beq.n	800064c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000634:	e000      	b.n	8000638 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000636:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000638:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000642:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e009      	b.n	8000680 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	60ba      	str	r2, [r7, #8]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffc9 	bl	800060c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf1      	blt.n	800066c <_write+0x12>
	}
	return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 ff80 	bl	800259e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 fa05 	bl	8000aac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f001 f825 	bl	80016f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 fff3 	bl	8001690 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80006aa:	f000 fa71 	bl	8000b90 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006ae:	f000 fac1 	bl	8000c34 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006b2:	f000 faff 	bl	8000cb4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80006b6:	f000 fb3d 	bl	8000d34 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006ba:	f000 fb79 	bl	8000db0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006be:	f000 fc47 	bl	8000f50 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006c2:	f000 fcdf 	bl	8001084 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006c6:	f000 fd33 	bl	8001130 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006ca:	f000 fd87 	bl	80011dc <MX_TIM5_Init>
  MX_TIM8_Init();
 80006ce:	f000 fdfd 	bl	80012cc <MX_TIM8_Init>
  MX_UART4_Init();
 80006d2:	f000 ff1d 	bl	8001510 <MX_UART4_Init>
  MX_UART5_Init();
 80006d6:	f000 ff4b 	bl	8001570 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80006da:	f000 ff79 	bl	80015d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006de:	f000 ffa7 	bl	8001630 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80006e2:	f000 fec5 	bl	8001470 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	48bc      	ldr	r0, [pc, #752]	@ (80009dc <main+0x348>)
 80006ec:	f002 fd5c 	bl	80031a8 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80006f0:	200a      	movs	r0, #10
 80006f2:	f002 fb92 	bl	8002e1a <HAL_NVIC_DisableIRQ>

  ITM_SendChar('h');
 80006f6:	2068      	movs	r0, #104	@ 0x68
 80006f8:	f7ff ff88 	bl	800060c <ITM_SendChar>

  /* Software reset */
  data = 0x12;
 80006fc:	2312      	movs	r3, #18
 80006fe:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000700:	23c8      	movs	r3, #200	@ 0xc8
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	227d      	movs	r2, #125	@ 0x7d
 8000710:	217e      	movs	r1, #126	@ 0x7e
 8000712:	48b3      	ldr	r0, [pc, #716]	@ (80009e0 <main+0x34c>)
 8000714:	f002 fdfe 	bl	8003314 <HAL_I2C_Mem_Write>
 8000718:	4603      	mov	r3, r0
 800071a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x98>
    printf("I2C communication error (%X).\n", status);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4619      	mov	r1, r3
 8000726:	48af      	ldr	r0, [pc, #700]	@ (80009e4 <main+0x350>)
 8000728:	f006 fbae 	bl	8006e88 <iprintf>

  data = 0x34;
 800072c:	2334      	movs	r3, #52	@ 0x34
 800072e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000730:	23c8      	movs	r3, #200	@ 0xc8
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	227d      	movs	r2, #125	@ 0x7d
 8000740:	217e      	movs	r1, #126	@ 0x7e
 8000742:	48a7      	ldr	r0, [pc, #668]	@ (80009e0 <main+0x34c>)
 8000744:	f002 fde6 	bl	8003314 <HAL_I2C_Mem_Write>
 8000748:	4603      	mov	r3, r0
 800074a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d004      	beq.n	800075c <main+0xc8>
    printf("I2C communication error (%X).\n", status);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4619      	mov	r1, r3
 8000756:	48a3      	ldr	r0, [pc, #652]	@ (80009e4 <main+0x350>)
 8000758:	f006 fb96 	bl	8006e88 <iprintf>

  HAL_Delay(100);
 800075c:	2064      	movs	r0, #100	@ 0x64
 800075e:	f001 ff7b 	bl	8002658 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000762:	2340      	movs	r3, #64	@ 0x40
 8000764:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000766:	23c8      	movs	r3, #200	@ 0xc8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2301      	movs	r3, #1
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2301      	movs	r3, #1
 8000774:	221e      	movs	r2, #30
 8000776:	217e      	movs	r1, #126	@ 0x7e
 8000778:	4899      	ldr	r0, [pc, #612]	@ (80009e0 <main+0x34c>)
 800077a:	f002 fdcb 	bl	8003314 <HAL_I2C_Mem_Write>
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <main+0xfe>
    printf("I2C communication error (%X).\n", status);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4619      	mov	r1, r3
 800078c:	4895      	ldr	r0, [pc, #596]	@ (80009e4 <main+0x350>)
 800078e:	f006 fb7b 	bl	8006e88 <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000792:	23f0      	movs	r3, #240	@ 0xf0
 8000794:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000796:	23c8      	movs	r3, #200	@ 0xc8
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	2301      	movs	r3, #1
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	1dbb      	adds	r3, r7, #6
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	220f      	movs	r2, #15
 80007a6:	217e      	movs	r1, #126	@ 0x7e
 80007a8:	488d      	ldr	r0, [pc, #564]	@ (80009e0 <main+0x34c>)
 80007aa:	f002 fdb3 	bl	8003314 <HAL_I2C_Mem_Write>
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d004      	beq.n	80007c2 <main+0x12e>
    printf("I2C communication error (%X).\n", status);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4889      	ldr	r0, [pc, #548]	@ (80009e4 <main+0x350>)
 80007be:	f006 fb63 	bl	8006e88 <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 80007c2:	230f      	movs	r3, #15
 80007c4:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 80007c6:	23c8      	movs	r3, #200	@ 0xc8
 80007c8:	9302      	str	r3, [sp, #8]
 80007ca:	2301      	movs	r3, #1
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	1dbb      	adds	r3, r7, #6
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2301      	movs	r3, #1
 80007d4:	220e      	movs	r2, #14
 80007d6:	217e      	movs	r1, #126	@ 0x7e
 80007d8:	4881      	ldr	r0, [pc, #516]	@ (80009e0 <main+0x34c>)
 80007da:	f002 fd9b 	bl	8003314 <HAL_I2C_Mem_Write>
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d004      	beq.n	80007f2 <main+0x15e>
    printf("I2C communication error (%X).\n", status);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4619      	mov	r1, r3
 80007ec:	487d      	ldr	r0, [pc, #500]	@ (80009e4 <main+0x350>)
 80007ee:	f006 fb4b 	bl	8006e88 <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80007f2:	230f      	movs	r3, #15
 80007f4:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80007f6:	23c8      	movs	r3, #200	@ 0xc8
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2301      	movs	r3, #1
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	1dbb      	adds	r3, r7, #6
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	220b      	movs	r2, #11
 8000806:	217e      	movs	r1, #126	@ 0x7e
 8000808:	4875      	ldr	r0, [pc, #468]	@ (80009e0 <main+0x34c>)
 800080a:	f002 fd83 	bl	8003314 <HAL_I2C_Mem_Write>
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <main+0x18e>
    printf("I2C communication error (%X).\n", status);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4619      	mov	r1, r3
 800081c:	4871      	ldr	r0, [pc, #452]	@ (80009e4 <main+0x350>)
 800081e:	f006 fb33 	bl	8006e88 <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 8000822:	230f      	movs	r3, #15
 8000824:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000826:	23c8      	movs	r3, #200	@ 0xc8
 8000828:	9302      	str	r3, [sp, #8]
 800082a:	2301      	movs	r3, #1
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	1dbb      	adds	r3, r7, #6
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	2206      	movs	r2, #6
 8000836:	217e      	movs	r1, #126	@ 0x7e
 8000838:	4869      	ldr	r0, [pc, #420]	@ (80009e0 <main+0x34c>)
 800083a:	f002 fd6b 	bl	8003314 <HAL_I2C_Mem_Write>
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d004      	beq.n	8000852 <main+0x1be>
    printf("I2C communication error (%X).\n", status);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4619      	mov	r1, r3
 800084c:	4865      	ldr	r0, [pc, #404]	@ (80009e4 <main+0x350>)
 800084e:	f006 fb1b 	bl	8006e88 <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000852:	230f      	movs	r3, #15
 8000854:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000856:	23c8      	movs	r3, #200	@ 0xc8
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2301      	movs	r3, #1
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	1dbb      	adds	r3, r7, #6
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2301      	movs	r3, #1
 8000864:	2223      	movs	r2, #35	@ 0x23
 8000866:	217e      	movs	r1, #126	@ 0x7e
 8000868:	485d      	ldr	r0, [pc, #372]	@ (80009e0 <main+0x34c>)
 800086a:	f002 fd53 	bl	8003314 <HAL_I2C_Mem_Write>
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d004      	beq.n	8000882 <main+0x1ee>
    printf("I2C communication error (%X).\n", status);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	4619      	mov	r1, r3
 800087c:	4859      	ldr	r0, [pc, #356]	@ (80009e4 <main+0x350>)
 800087e:	f006 fb03 	bl	8006e88 <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000882:	2305      	movs	r3, #5
 8000884:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000886:	23c8      	movs	r3, #200	@ 0xc8
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	2301      	movs	r3, #1
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	1dbb      	adds	r3, r7, #6
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	2222      	movs	r2, #34	@ 0x22
 8000896:	217e      	movs	r1, #126	@ 0x7e
 8000898:	4851      	ldr	r0, [pc, #324]	@ (80009e0 <main+0x34c>)
 800089a:	f002 fd3b 	bl	8003314 <HAL_I2C_Mem_Write>
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d004      	beq.n	80008b2 <main+0x21e>
    printf("I2C communication error (%X).\n", status);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4619      	mov	r1, r3
 80008ac:	484d      	ldr	r0, [pc, #308]	@ (80009e4 <main+0x350>)
 80008ae:	f006 faeb 	bl	8006e88 <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 80008b2:	237d      	movs	r3, #125	@ 0x7d
 80008b4:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 80008b6:	23c8      	movs	r3, #200	@ 0xc8
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	2301      	movs	r3, #1
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2301      	movs	r3, #1
 80008c4:	2225      	movs	r2, #37	@ 0x25
 80008c6:	217e      	movs	r1, #126	@ 0x7e
 80008c8:	4845      	ldr	r0, [pc, #276]	@ (80009e0 <main+0x34c>)
 80008ca:	f002 fd23 	bl	8003314 <HAL_I2C_Mem_Write>
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d004      	beq.n	80008e2 <main+0x24e>
    printf("I2C communication error (%X).\n", status);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4619      	mov	r1, r3
 80008dc:	4841      	ldr	r0, [pc, #260]	@ (80009e4 <main+0x350>)
 80008de:	f006 fad3 	bl	8006e88 <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80008e2:	231b      	movs	r3, #27
 80008e4:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80008e6:	23c8      	movs	r3, #200	@ 0xc8
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	2226      	movs	r2, #38	@ 0x26
 80008f6:	217e      	movs	r1, #126	@ 0x7e
 80008f8:	4839      	ldr	r0, [pc, #228]	@ (80009e0 <main+0x34c>)
 80008fa:	f002 fd0b 	bl	8003314 <HAL_I2C_Mem_Write>
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d004      	beq.n	8000912 <main+0x27e>
    printf("I2C communication error (%X).\n", status);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4619      	mov	r1, r3
 800090c:	4835      	ldr	r0, [pc, #212]	@ (80009e4 <main+0x350>)
 800090e:	f006 fabb 	bl	8006e88 <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000912:	2064      	movs	r0, #100	@ 0x64
 8000914:	f001 fea0 	bl	8002658 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000918:	200a      	movs	r0, #10
 800091a:	f002 fa70 	bl	8002dfe <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800091e:	2008      	movs	r0, #8
 8000920:	f002 fa7b 	bl	8002e1a <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 8000924:	2312      	movs	r3, #18
 8000926:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000928:	23c8      	movs	r3, #200	@ 0xc8
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	227d      	movs	r2, #125	@ 0x7d
 8000938:	217c      	movs	r1, #124	@ 0x7c
 800093a:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <main+0x34c>)
 800093c:	f002 fcea 	bl	8003314 <HAL_I2C_Mem_Write>
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x2c0>
    printf("I2C communication error (%X).\n", status);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4619      	mov	r1, r3
 800094e:	4825      	ldr	r0, [pc, #148]	@ (80009e4 <main+0x350>)
 8000950:	f006 fa9a 	bl	8006e88 <iprintf>

  data = 0x34;
 8000954:	2334      	movs	r3, #52	@ 0x34
 8000956:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000958:	23c8      	movs	r3, #200	@ 0xc8
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	227d      	movs	r2, #125	@ 0x7d
 8000968:	217c      	movs	r1, #124	@ 0x7c
 800096a:	481d      	ldr	r0, [pc, #116]	@ (80009e0 <main+0x34c>)
 800096c:	f002 fcd2 	bl	8003314 <HAL_I2C_Mem_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <main+0x2f0>
    printf("I2C communication error (%X).\n", status);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4619      	mov	r1, r3
 800097e:	4819      	ldr	r0, [pc, #100]	@ (80009e4 <main+0x350>)
 8000980:	f006 fa82 	bl	8006e88 <iprintf>

  HAL_Delay(100);
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f001 fe67 	bl	8002658 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 800098a:	23ff      	movs	r3, #255	@ 0xff
 800098c:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800098e:	23c8      	movs	r3, #200	@ 0xc8
 8000990:	9302      	str	r3, [sp, #8]
 8000992:	2301      	movs	r3, #1
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	220f      	movs	r2, #15
 800099e:	217c      	movs	r1, #124	@ 0x7c
 80009a0:	480f      	ldr	r0, [pc, #60]	@ (80009e0 <main+0x34c>)
 80009a2:	f002 fcb7 	bl	8003314 <HAL_I2C_Mem_Write>
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d004      	beq.n	80009ba <main+0x326>
    printf("I2C communication error (%X).\n", status);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <main+0x350>)
 80009b6:	f006 fa67 	bl	8006e88 <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 80009ba:	23ff      	movs	r3, #255	@ 0xff
 80009bc:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 80009be:	23c8      	movs	r3, #200	@ 0xc8
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	2301      	movs	r3, #1
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	1dbb      	adds	r3, r7, #6
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	220e      	movs	r2, #14
 80009ce:	217c      	movs	r1, #124	@ 0x7c
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <main+0x34c>)
 80009d2:	f002 fc9f 	bl	8003314 <HAL_I2C_Mem_Write>
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	e005      	b.n	80009e8 <main+0x354>
 80009dc:	40021000 	.word	0x40021000
 80009e0:	200000cc 	.word	0x200000cc
 80009e4:	08007c4c 	.word	0x08007c4c
  if (status != HAL_OK)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <main+0x364>
    printf("I2C communication error (%X).\n", status);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4619      	mov	r1, r3
 80009f2:	482b      	ldr	r0, [pc, #172]	@ (8000aa0 <main+0x40c>)
 80009f4:	f006 fa48 	bl	8006e88 <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 80009fc:	23c8      	movs	r3, #200	@ 0xc8
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	2301      	movs	r3, #1
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2213      	movs	r2, #19
 8000a0c:	217c      	movs	r1, #124	@ 0x7c
 8000a0e:	4825      	ldr	r0, [pc, #148]	@ (8000aa4 <main+0x410>)
 8000a10:	f002 fc80 	bl	8003314 <HAL_I2C_Mem_Write>
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <main+0x394>
    printf("I2C communication error (%X).\n", status);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4619      	mov	r1, r3
 8000a22:	481f      	ldr	r0, [pc, #124]	@ (8000aa0 <main+0x40c>)
 8000a24:	f006 fa30 	bl	8006e88 <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000a28:	23aa      	movs	r3, #170	@ 0xaa
 8000a2a:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000a2c:	23c8      	movs	r3, #200	@ 0xc8
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	2301      	movs	r3, #1
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	1dbb      	adds	r3, r7, #6
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	2216      	movs	r2, #22
 8000a3c:	217c      	movs	r1, #124	@ 0x7c
 8000a3e:	4819      	ldr	r0, [pc, #100]	@ (8000aa4 <main+0x410>)
 8000a40:	f002 fc68 	bl	8003314 <HAL_I2C_Mem_Write>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d004      	beq.n	8000a58 <main+0x3c4>
    printf("I2C communication error (%X).\n", status);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <main+0x40c>)
 8000a54:	f006 fa18 	bl	8006e88 <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000a58:	23aa      	movs	r3, #170	@ 0xaa
 8000a5a:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000a5c:	23c8      	movs	r3, #200	@ 0xc8
 8000a5e:	9302      	str	r3, [sp, #8]
 8000a60:	2301      	movs	r3, #1
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	2217      	movs	r2, #23
 8000a6c:	217c      	movs	r1, #124	@ 0x7c
 8000a6e:	480d      	ldr	r0, [pc, #52]	@ (8000aa4 <main+0x410>)
 8000a70:	f002 fc50 	bl	8003314 <HAL_I2C_Mem_Write>
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <main+0x3f4>
    printf("I2C communication error (%X).\n", status);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <main+0x40c>)
 8000a84:	f006 fa00 	bl	8006e88 <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f001 fde5 	bl	8002658 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a8e:	2008      	movs	r0, #8
 8000a90:	f002 f9b5 	bl	8002dfe <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <main+0x414>)
 8000a96:	f006 fa5f 	bl	8006f58 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9a:	bf00      	nop
 8000a9c:	e7fd      	b.n	8000a9a <main+0x406>
 8000a9e:	bf00      	nop
 8000aa0:	08007c4c 	.word	0x08007c4c
 8000aa4:	200000cc 	.word	0x200000cc
 8000aa8:	08007c94 	.word	0x08007c94

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	@ 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2234      	movs	r2, #52	@ 0x34
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 fb2c 	bl	8007118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad0:	f003 f83a 	bl	8003b48 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <SystemClock_Config+0xdc>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	4a2b      	ldr	r2, [pc, #172]	@ (8000b88 <SystemClock_Config+0xdc>)
 8000ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae0:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <SystemClock_Config+0xdc>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aec:	4b27      	ldr	r3, [pc, #156]	@ (8000b8c <SystemClock_Config+0xe0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af4:	4a25      	ldr	r2, [pc, #148]	@ (8000b8c <SystemClock_Config+0xe0>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b23      	ldr	r3, [pc, #140]	@ (8000b8c <SystemClock_Config+0xe0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b0c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b10:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b20:	2360      	movs	r3, #96	@ 0x60
 8000b22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 f867 	bl	8003c08 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b40:	f000 ff16 	bl	8001970 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b44:	f003 f810 	bl	8003b68 <HAL_PWREx_EnableOverDrive>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b4e:	f000 ff0f 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2302      	movs	r3, #2
 8000b58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 faf8 	bl	8004164 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b7a:	f000 fef9 	bl	8001970 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	@ 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000ba4:	4a21      	ldr	r2, [pc, #132]	@ (8000c2c <MX_ADC1_Init+0x9c>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000baa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <MX_ADC1_Init+0xa0>)
 8000bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf0:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000bf2:	f001 fd55 	bl	80026a0 <HAL_ADC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bfc:	f000 feb8 	bl	8001970 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c00:	2303      	movs	r3, #3
 8000c02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_ADC1_Init+0x98>)
 8000c12:	f001 fd89 	bl	8002728 <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f000 fea8 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000084 	.word	0x20000084
 8000c2c:	40012000 	.word	0x40012000
 8000c30:	0f000001 	.word	0x0f000001

08000c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <MX_I2C1_Init+0x78>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x7c>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6e:	480e      	ldr	r0, [pc, #56]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c70:	f002 fab4 	bl	80031dc <HAL_I2C_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7a:	f000 fe79 	bl	8001970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c82:	f002 fec9 	bl	8003a18 <HAL_I2CEx_ConfigAnalogFilter>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fe70 	bl	8001970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c94:	f002 ff0b 	bl	8003aae <HAL_I2CEx_ConfigDigitalFilter>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 fe67 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200000cc 	.word	0x200000cc
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	20303e5d 	.word	0x20303e5d

08000cb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <MX_I2C2_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <MX_I2C2_Init+0x7c>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cee:	480e      	ldr	r0, [pc, #56]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cf0:	f002 fa74 	bl	80031dc <HAL_I2C_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cfa:	f000 fe39 	bl	8001970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000d02:	f002 fe89 	bl	8003a18 <HAL_I2CEx_ConfigAnalogFilter>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 fe30 	bl	8001970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000d14:	f002 fecb 	bl	8003aae <HAL_I2CEx_ConfigDigitalFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 fe27 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000120 	.word	0x20000120
 8000d2c:	40005800 	.word	0x40005800
 8000d30:	20303e5d 	.word	0x20303e5d

08000d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <MX_SPI1_Init+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d4e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d82:	2207      	movs	r2, #7
 8000d84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_SPI1_Init+0x74>)
 8000d94:	f004 f834 	bl	8004e00 <HAL_SPI_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fde7 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000174 	.word	0x20000174
 8000dac:	40013000 	.word	0x40013000

08000db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09a      	sub	sp, #104	@ 0x68
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]
 8000de2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	222c      	movs	r2, #44	@ 0x2c
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f006 f994 	bl	8007118 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df0:	4b55      	ldr	r3, [pc, #340]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000df2:	4a56      	ldr	r2, [pc, #344]	@ (8000f4c <MX_TIM1_Init+0x19c>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000df6:	4b54      	ldr	r3, [pc, #336]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000df8:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b52      	ldr	r3, [pc, #328]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000e04:	4b50      	ldr	r3, [pc, #320]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e06:	22c8      	movs	r2, #200	@ 0xc8
 8000e08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e10:	4b4d      	ldr	r3, [pc, #308]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b4c      	ldr	r3, [pc, #304]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e1c:	484a      	ldr	r0, [pc, #296]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e1e:	f004 f89a 	bl	8004f56 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e28:	f000 fda2 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e36:	4619      	mov	r1, r3
 8000e38:	4843      	ldr	r0, [pc, #268]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e3a:	f004 fbf1 	bl	8005620 <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e44:	f000 fd94 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e48:	483f      	ldr	r0, [pc, #252]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e4a:	f004 f8db 	bl	8005004 <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e54:	f000 fd8c 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4837      	ldr	r0, [pc, #220]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000e6c:	f005 f970 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e76:	f000 fd7b 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	@ 0x60
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482a      	ldr	r0, [pc, #168]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000ea0:	f004 faaa 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000eaa:	f000 fd61 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4824      	ldr	r0, [pc, #144]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000eb8:	f004 fa9e 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000ec2:	f000 fd55 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eca:	2208      	movs	r2, #8
 8000ecc:	4619      	mov	r1, r3
 8000ece:	481e      	ldr	r0, [pc, #120]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000ed0:	f004 fa92 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000eda:	f000 fd49 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ede:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000ee8:	f004 fa86 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000ef2:	f000 fd3d 	bl	8001970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000f2c:	f005 f99e 	bl	800626c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000f36:	f000 fd1b 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f3a:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <MX_TIM1_Init+0x198>)
 8000f3c:	f000 ffbe 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8000f40:	bf00      	nop
 8000f42:	3768      	adds	r7, #104	@ 0x68
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001d8 	.word	0x200001d8
 8000f4c:	40010000 	.word	0x40010000

08000f50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b092      	sub	sp, #72	@ 0x48
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f90:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f98:	4b39      	ldr	r3, [pc, #228]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000fa4:	4b36      	ldr	r3, [pc, #216]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8000faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb8:	4831      	ldr	r0, [pc, #196]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fba:	f003 ffcc 	bl	8004f56 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fc4:	f000 fcd4 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482a      	ldr	r0, [pc, #168]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fd6:	f004 fb23 	bl	8005620 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fe0:	f000 fcc6 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fe4:	4826      	ldr	r0, [pc, #152]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000fe6:	f004 f80d 	bl	8005004 <HAL_TIM_PWM_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000ff0:	f000 fcbe 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ff4:	4822      	ldr	r0, [pc, #136]	@ (8001080 <MX_TIM2_Init+0x130>)
 8000ff6:	f004 f85c 	bl	80050b2 <HAL_TIM_IC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001000:	f000 fcb6 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	481b      	ldr	r0, [pc, #108]	@ (8001080 <MX_TIM2_Init+0x130>)
 8001014:	f005 f89c 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800101e:	f000 fca7 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001022:	2360      	movs	r3, #96	@ 0x60
 8001024:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4811      	ldr	r0, [pc, #68]	@ (8001080 <MX_TIM2_Init+0x130>)
 800103c:	f004 f9dc 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001046:	f000 fc93 	bl	8001970 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800104e:	2301      	movs	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2208      	movs	r2, #8
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	@ (8001080 <MX_TIM2_Init+0x130>)
 8001062:	f004 f92d 	bl	80052c0 <HAL_TIM_IC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800106c:	f000 fc80 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001070:	4803      	ldr	r0, [pc, #12]	@ (8001080 <MX_TIM2_Init+0x130>)
 8001072:	f000 ff23 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001076:	bf00      	nop
 8001078:	3748      	adds	r7, #72	@ 0x48
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000224 	.word	0x20000224

08001084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2224      	movs	r2, #36	@ 0x24
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f006 f840 	bl	8007118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010a4:	4a21      	ldr	r2, [pc, #132]	@ (800112c <MX_TIM3_Init+0xa8>)
 80010a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d0:	2301      	movs	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e0:	2301      	movs	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <MX_TIM3_Init+0xa4>)
 80010f4:	f004 f83e 	bl	8005174 <HAL_TIM_Encoder_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010fe:	f000 fc37 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	@ (8001128 <MX_TIM3_Init+0xa4>)
 8001110:	f005 f81e 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800111a:	f000 fc29 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	@ 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000270 	.word	0x20000270
 800112c:	40000400 	.word	0x40000400

08001130 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2224      	movs	r2, #36	@ 0x24
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f005 ffea 	bl	8007118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 8001150:	4a21      	ldr	r2, [pc, #132]	@ (80011d8 <MX_TIM4_Init+0xa8>)
 8001152:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 8001162:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001166:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001174:	2301      	movs	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800117c:	2301      	movs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 80011a0:	f003 ffe8 	bl	8005174 <HAL_TIM_Encoder_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011aa:	f000 fbe1 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <MX_TIM4_Init+0xa4>)
 80011bc:	f004 ffc8 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011c6:	f000 fbd3 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3730      	adds	r7, #48	@ 0x30
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200002bc 	.word	0x200002bc
 80011d8:	40000800 	.word	0x40000800

080011dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	@ 0x38
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001210:	4a2d      	ldr	r2, [pc, #180]	@ (80012c8 <MX_TIM5_Init+0xec>)
 8001212:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001234:	4823      	ldr	r0, [pc, #140]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001236:	f003 fe8e 	bl	8004f56 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001240:	f000 fb96 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124e:	4619      	mov	r1, r3
 8001250:	481c      	ldr	r0, [pc, #112]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001252:	f004 f9e5 	bl	8005620 <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800125c:	f000 fb88 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001260:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001262:	f003 fecf 	bl	8005004 <HAL_TIM_PWM_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800126c:	f000 fb80 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 8001280:	f004 ff66 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800128a:	f000 fb71 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128e:	2360      	movs	r3, #96	@ 0x60
 8001290:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 80012a6:	f004 f8a7 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80012b0:	f000 fb5e 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM5_Init+0xe8>)
 80012b6:	f000 fe01 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 80012ba:	bf00      	nop
 80012bc:	3738      	adds	r7, #56	@ 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000308 	.word	0x20000308
 80012c8:	40000c00 	.word	0x40000c00

080012cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09a      	sub	sp, #104	@ 0x68
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	615a      	str	r2, [r3, #20]
 80012fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	222c      	movs	r2, #44	@ 0x2c
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f005 ff06 	bl	8007118 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800130c:	4b56      	ldr	r3, [pc, #344]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800130e:	4a57      	ldr	r2, [pc, #348]	@ (800146c <MX_TIM8_Init+0x1a0>)
 8001310:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001312:	4b55      	ldr	r3, [pc, #340]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001314:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001318:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b53      	ldr	r3, [pc, #332]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001320:	4b51      	ldr	r3, [pc, #324]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001322:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001326:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800132e:	4b4e      	ldr	r3, [pc, #312]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b4c      	ldr	r3, [pc, #304]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800133a:	484b      	ldr	r0, [pc, #300]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800133c:	f003 fe0b 	bl	8004f56 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001346:	f000 fb13 	bl	8001970 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001354:	4619      	mov	r1, r3
 8001356:	4844      	ldr	r0, [pc, #272]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001358:	f004 f962 	bl	8005620 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001362:	f000 fb05 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001366:	4840      	ldr	r0, [pc, #256]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001368:	f003 fe4c 	bl	8005004 <HAL_TIM_PWM_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001372:	f000 fafd 	bl	8001970 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001382:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001386:	4619      	mov	r1, r3
 8001388:	4837      	ldr	r0, [pc, #220]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800138a:	f004 fee1 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001394:	f000 faec 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001398:	2360      	movs	r3, #96	@ 0x60
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a0:	2300      	movs	r3, #0
 80013a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	482a      	ldr	r0, [pc, #168]	@ (8001468 <MX_TIM8_Init+0x19c>)
 80013be:	f004 f81b 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80013c8:	f000 fad2 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013d0:	2204      	movs	r2, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4824      	ldr	r0, [pc, #144]	@ (8001468 <MX_TIM8_Init+0x19c>)
 80013d6:	f004 f80f 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80013e0:	f000 fac6 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013e8:	2208      	movs	r2, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	481e      	ldr	r0, [pc, #120]	@ (8001468 <MX_TIM8_Init+0x19c>)
 80013ee:	f004 f803 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80013f8:	f000 faba 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001400:	220c      	movs	r2, #12
 8001402:	4619      	mov	r1, r3
 8001404:	4818      	ldr	r0, [pc, #96]	@ (8001468 <MX_TIM8_Init+0x19c>)
 8001406:	f003 fff7 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001410:	f000 faae 	bl	8001970 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800144a:	f004 ff0f 	bl	800626c <HAL_TIMEx_ConfigBreakDeadTime>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001454:	f000 fa8c 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <MX_TIM8_Init+0x19c>)
 800145a:	f000 fd2f 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3768      	adds	r7, #104	@ 0x68
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000354 	.word	0x20000354
 800146c:	40010400 	.word	0x40010400

08001470 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_TIM9_Init+0x98>)
 800148a:	4a20      	ldr	r2, [pc, #128]	@ (800150c <MX_TIM9_Init+0x9c>)
 800148c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <MX_TIM9_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_TIM9_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_TIM9_Init+0x98>)
 800149c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014a0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_TIM9_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_TIM9_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80014ae:	4816      	ldr	r0, [pc, #88]	@ (8001508 <MX_TIM9_Init+0x98>)
 80014b0:	f003 fda8 	bl	8005004 <HAL_TIM_PWM_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80014ba:	f000 fa59 	bl	8001970 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014be:	2360      	movs	r3, #96	@ 0x60
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	480c      	ldr	r0, [pc, #48]	@ (8001508 <MX_TIM9_Init+0x98>)
 80014d6:	f003 ff8f 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80014e0:	f000 fa46 	bl	8001970 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2204      	movs	r2, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	@ (8001508 <MX_TIM9_Init+0x98>)
 80014ec:	f003 ff84 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80014f6:	f000 fa3b 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_TIM9_Init+0x98>)
 80014fc:	f000 fcde 	bl	8001ebc <HAL_TIM_MspPostInit>

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200003a0 	.word	0x200003a0
 800150c:	40014000 	.word	0x40014000

08001510 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_UART4_Init+0x58>)
 8001516:	4a15      	ldr	r2, [pc, #84]	@ (800156c <MX_UART4_Init+0x5c>)
 8001518:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_UART4_Init+0x58>)
 800151c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001520:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_UART4_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <MX_UART4_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_UART4_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_UART4_Init+0x58>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_UART4_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_UART4_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_UART4_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_UART4_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_UART4_Init+0x58>)
 8001554:	f004 ff08 	bl	8006368 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 fa07 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003ec 	.word	0x200003ec
 800156c:	40004c00 	.word	0x40004c00

08001570 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <MX_UART5_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_UART5_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_UART5_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_UART5_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_UART5_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_UART5_Init+0x58>)
 80015b4:	f004 fed8 	bl	8006368 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 f9d7 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000474 	.word	0x20000474
 80015cc:	40005000 	.word	0x40005000

080015d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015d6:	4a15      	ldr	r2, [pc, #84]	@ (800162c <MX_USART1_UART_Init+0x5c>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART1_UART_Init+0x58>)
 8001614:	f004 fea8 	bl	8006368 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800161e:	f000 f9a7 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200004fc 	.word	0x200004fc
 800162c:	40011000 	.word	0x40011000

08001630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <MX_USART2_UART_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_USART2_UART_Init+0x58>)
 8001674:	f004 fe78 	bl	8006368 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 f977 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000584 	.word	0x20000584
 800168c:	40004400 	.word	0x40004400

08001690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 8001696:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <MX_USART3_UART_Init+0x5c>)
 8001698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_USART3_UART_Init+0x58>)
 80016d4:	f004 fe48 	bl	8006368 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016de:	f000 f947 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000060c 	.word	0x2000060c
 80016ec:	40004800 	.word	0x40004800

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	@ 0x38
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	4b93      	ldr	r3, [pc, #588]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a92      	ldr	r2, [pc, #584]	@ (8001954 <MX_GPIO_Init+0x264>)
 800170c:	f043 0310 	orr.w	r3, r3, #16
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b90      	ldr	r3, [pc, #576]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b8d      	ldr	r3, [pc, #564]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a8c      	ldr	r2, [pc, #560]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b8a      	ldr	r3, [pc, #552]	@ (8001954 <MX_GPIO_Init+0x264>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001736:	4b87      	ldr	r3, [pc, #540]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a86      	ldr	r2, [pc, #536]	@ (8001954 <MX_GPIO_Init+0x264>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	4b81      	ldr	r3, [pc, #516]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a80      	ldr	r2, [pc, #512]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b7e      	ldr	r3, [pc, #504]	@ (8001954 <MX_GPIO_Init+0x264>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b7b      	ldr	r3, [pc, #492]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a7a      	ldr	r2, [pc, #488]	@ (8001954 <MX_GPIO_Init+0x264>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b78      	ldr	r3, [pc, #480]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b75      	ldr	r3, [pc, #468]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a74      	ldr	r2, [pc, #464]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b72      	ldr	r3, [pc, #456]	@ (8001954 <MX_GPIO_Init+0x264>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001796:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <MX_GPIO_Init+0x264>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a6e      	ldr	r2, [pc, #440]	@ (8001954 <MX_GPIO_Init+0x264>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001954 <MX_GPIO_Init+0x264>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ae:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <MX_GPIO_Init+0x264>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a68      	ldr	r2, [pc, #416]	@ (8001954 <MX_GPIO_Init+0x264>)
 80017b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b66      	ldr	r3, [pc, #408]	@ (8001954 <MX_GPIO_Init+0x264>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2118      	movs	r1, #24
 80017ca:	4863      	ldr	r0, [pc, #396]	@ (8001958 <MX_GPIO_Init+0x268>)
 80017cc:	f001 fcec 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f244 0181 	movw	r1, #16513	@ 0x4081
 80017d6:	4861      	ldr	r0, [pc, #388]	@ (800195c <MX_GPIO_Init+0x26c>)
 80017d8:	f001 fce6 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2140      	movs	r1, #64	@ 0x40
 80017e0:	485f      	ldr	r0, [pc, #380]	@ (8001960 <MX_GPIO_Init+0x270>)
 80017e2:	f001 fce1 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80017e6:	2318      	movs	r3, #24
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4856      	ldr	r0, [pc, #344]	@ (8001958 <MX_GPIO_Init+0x268>)
 80017fe:	f001 fb27 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 8001802:	f643 7308 	movw	r3, #16136	@ 0x3f08
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001808:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001816:	4619      	mov	r1, r3
 8001818:	4852      	ldr	r0, [pc, #328]	@ (8001964 <MX_GPIO_Init+0x274>)
 800181a:	f001 fb19 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800181e:	2310      	movs	r3, #16
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001822:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001830:	4619      	mov	r1, r3
 8001832:	484c      	ldr	r0, [pc, #304]	@ (8001964 <MX_GPIO_Init+0x274>)
 8001834:	f001 fb0c 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001838:	2332      	movs	r3, #50	@ 0x32
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001848:	230b      	movs	r3, #11
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4845      	ldr	r0, [pc, #276]	@ (8001968 <MX_GPIO_Init+0x278>)
 8001854:	f001 fafc 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001858:	2386      	movs	r3, #134	@ 0x86
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001868:	230b      	movs	r3, #11
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	483e      	ldr	r0, [pc, #248]	@ (800196c <MX_GPIO_Init+0x27c>)
 8001874:	f001 faec 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001878:	f244 0381 	movw	r3, #16513	@ 0x4081
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188e:	4619      	mov	r1, r3
 8001890:	4832      	ldr	r0, [pc, #200]	@ (800195c <MX_GPIO_Init+0x26c>)
 8001892:	f001 fadd 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a8:	230b      	movs	r3, #11
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b0:	4619      	mov	r1, r3
 80018b2:	482a      	ldr	r0, [pc, #168]	@ (800195c <MX_GPIO_Init+0x26c>)
 80018b4:	f001 facc 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018b8:	2340      	movs	r3, #64	@ 0x40
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4824      	ldr	r0, [pc, #144]	@ (8001960 <MX_GPIO_Init+0x270>)
 80018d0:	f001 fabe 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	481e      	ldr	r0, [pc, #120]	@ (8001960 <MX_GPIO_Init+0x270>)
 80018e8:	f001 fab2 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018fe:	230a      	movs	r3, #10
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4818      	ldr	r0, [pc, #96]	@ (800196c <MX_GPIO_Init+0x27c>)
 800190a:	f001 faa1 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800190e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001920:	4619      	mov	r1, r3
 8001922:	4812      	ldr	r0, [pc, #72]	@ (800196c <MX_GPIO_Init+0x27c>)
 8001924:	f001 fa94 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001928:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800193a:	230b      	movs	r3, #11
 800193c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4806      	ldr	r0, [pc, #24]	@ (8001960 <MX_GPIO_Init+0x270>)
 8001946:	f001 fa83 	bl	8002e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800194a:	bf00      	nop
 800194c:	3738      	adds	r7, #56	@ 0x38
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40021000 	.word	0x40021000
 800195c:	40020400 	.word	0x40020400
 8001960:	40021800 	.word	0x40021800
 8001964:	40021400 	.word	0x40021400
 8001968:	40020800 	.word	0x40020800
 800196c:	40020000 	.word	0x40020000

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <Error_Handler+0x8>

0800197c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_MspInit+0x44>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_MspInit+0x44>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_MspInit+0x44>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <HAL_ADC_MspInit+0x74>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d123      	bne.n	8001a2e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_ADC_MspInit+0x78>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <HAL_ADC_MspInit+0x78>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <HAL_ADC_MspInit+0x78>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_ADC_MspInit+0x78>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_ADC_MspInit+0x78>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_ADC_MspInit+0x78>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001a16:	2308      	movs	r3, #8
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <HAL_ADC_MspInit+0x7c>)
 8001a2a:	f001 fa11 	bl	8002e50 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	@ 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b0      	sub	sp, #192	@ 0xc0
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	2290      	movs	r2, #144	@ 0x90
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fb57 	bl	8007118 <memset>
  if(hi2c->Instance==I2C1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a44      	ldr	r2, [pc, #272]	@ (8001b80 <HAL_I2C_MspInit+0x13c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13e      	bne.n	8001af2 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fd93 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a90:	f7ff ff6e 	bl	8001970 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b3b      	ldr	r3, [pc, #236]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a98:	4a3a      	ldr	r2, [pc, #232]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa0:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab4:	2312      	movs	r3, #18
 8001ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	482d      	ldr	r0, [pc, #180]	@ (8001b88 <HAL_I2C_MspInit+0x144>)
 8001ad4:	f001 f9bc 	bl	8002e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001ade:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae4:	4b27      	ldr	r3, [pc, #156]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001af0:	e041      	b.n	8001b76 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a25      	ldr	r2, [pc, #148]	@ (8001b8c <HAL_I2C_MspInit+0x148>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d13c      	bne.n	8001b76 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001afc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fd4f 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001b18:	f7ff ff2a 	bl	8001970 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001b22:	f043 0320 	orr.w	r3, r3, #32
 8001b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b28:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3a:	2312      	movs	r3, #18
 8001b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b52:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b56:	4619      	mov	r1, r3
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <HAL_I2C_MspInit+0x14c>)
 8001b5a:	f001 f979 	bl	8002e50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001b64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_I2C_MspInit+0x140>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	37c0      	adds	r7, #192	@ 0xc0
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40005800 	.word	0x40005800
 8001b90:	40021400 	.word	0x40021400

08001b94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a33      	ldr	r2, [pc, #204]	@ (8001c80 <HAL_SPI_MspInit+0xec>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d160      	bne.n	8001c78 <HAL_SPI_MspInit+0xe4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb6:	4b33      	ldr	r3, [pc, #204]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a32      	ldr	r2, [pc, #200]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b30      	ldr	r3, [pc, #192]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a26      	ldr	r2, [pc, #152]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bfe:	4b21      	ldr	r3, [pc, #132]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a20      	ldr	r2, [pc, #128]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_SPI_MspInit+0xf0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c16:	2320      	movs	r3, #32
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4815      	ldr	r0, [pc, #84]	@ (8001c88 <HAL_SPI_MspInit+0xf4>)
 8001c32:	f001 f90d 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c46:	2305      	movs	r3, #5
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480e      	ldr	r0, [pc, #56]	@ (8001c8c <HAL_SPI_MspInit+0xf8>)
 8001c52:	f001 f8fd 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c68:	2305      	movs	r3, #5
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <HAL_SPI_MspInit+0xfc>)
 8001c74:	f001 f8ec 	bl	8002e50 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	@ 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40013000 	.word	0x40013000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021800 	.word	0x40021800

08001c94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	@ 0x30
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a32      	ldr	r2, [pc, #200]	@ (8001d7c <HAL_TIM_Base_MspInit+0xe8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb6:	4b32      	ldr	r3, [pc, #200]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001cce:	e051      	b.n	8001d74 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd8:	d129      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cda:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a28      	ldr	r2, [pc, #160]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a22      	ldr	r2, [pc, #136]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b20      	ldr	r3, [pc, #128]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4817      	ldr	r0, [pc, #92]	@ (8001d84 <HAL_TIM_Base_MspInit+0xf0>)
 8001d28:	f001 f892 	bl	8002e50 <HAL_GPIO_Init>
}
 8001d2c:	e022      	b.n	8001d74 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <HAL_TIM_Base_MspInit+0xf4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10c      	bne.n	8001d52 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	e010      	b.n	8001d74 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <HAL_TIM_Base_MspInit+0xf8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d10b      	bne.n	8001d74 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_TIM_Base_MspInit+0xec>)
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
}
 8001d74:	bf00      	nop
 8001d76:	3730      	adds	r7, #48	@ 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	40010400 	.word	0x40010400

08001d90 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	@ 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2e      	ldr	r2, [pc, #184]	@ (8001e68 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d128      	bne.n	8001e04 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001db2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001de2:	2330      	movs	r3, #48	@ 0x30
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df2:	2302      	movs	r3, #2
 8001df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481c      	ldr	r0, [pc, #112]	@ (8001e70 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dfe:	f001 f827 	bl	8002e50 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e02:	e02d      	b.n	8001e60 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1a      	ldr	r2, [pc, #104]	@ (8001e74 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d128      	bne.n	8001e60 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a16      	ldr	r2, [pc, #88]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001e3e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4807      	ldr	r0, [pc, #28]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e5c:	f000 fff8 	bl	8002e50 <HAL_GPIO_Init>
}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	@ 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40000800 	.word	0x40000800
 8001e78:	40020c00 	.word	0x40020c00

08001e7c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <HAL_TIM_PWM_MspInit+0x38>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a09      	ldr	r2, [pc, #36]	@ (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	@ 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <HAL_TIM_MspPostInit+0x178>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d11d      	bne.n	8001f1a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ede:	4b56      	ldr	r3, [pc, #344]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a55      	ldr	r2, [pc, #340]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001ef6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	484a      	ldr	r0, [pc, #296]	@ (800203c <HAL_TIM_MspPostInit+0x180>)
 8001f14:	f000 ff9c 	bl	8002e50 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001f18:	e088      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f22:	d11d      	bne.n	8001f60 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	4b44      	ldr	r3, [pc, #272]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	4a43      	ldr	r2, [pc, #268]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f30:	4b41      	ldr	r3, [pc, #260]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001f3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4839      	ldr	r0, [pc, #228]	@ (8002040 <HAL_TIM_MspPostInit+0x184>)
 8001f5a:	f000 ff79 	bl	8002e50 <HAL_GPIO_Init>
}
 8001f5e:	e065      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <HAL_TIM_MspPostInit+0x188>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d11c      	bne.n	8001fa4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b33      	ldr	r3, [pc, #204]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a32      	ldr	r2, [pc, #200]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f92:	2302      	movs	r3, #2
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4828      	ldr	r0, [pc, #160]	@ (8002040 <HAL_TIM_MspPostInit+0x184>)
 8001f9e:	f000 ff57 	bl	8002e50 <HAL_GPIO_Init>
}
 8001fa2:	e043      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	@ (8002048 <HAL_TIM_MspPostInit+0x18c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d11d      	bne.n	8001fea <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001fc6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481a      	ldr	r0, [pc, #104]	@ (800204c <HAL_TIM_MspPostInit+0x190>)
 8001fe4:	f000 ff34 	bl	8002e50 <HAL_GPIO_Init>
}
 8001fe8:	e020      	b.n	800202c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_TIM_MspPostInit+0x194>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff4:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8001ffa:	f043 0310 	orr.w	r3, r3, #16
 8001ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002000:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_TIM_MspPostInit+0x17c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 800200c:	2360      	movs	r3, #96	@ 0x60
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800201c:	2303      	movs	r3, #3
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <HAL_TIM_MspPostInit+0x180>)
 8002028:	f000 ff12 	bl	8002e50 <HAL_GPIO_Init>
}
 800202c:	bf00      	nop
 800202e:	3730      	adds	r7, #48	@ 0x30
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010000 	.word	0x40010000
 8002038:	40023800 	.word	0x40023800
 800203c:	40021000 	.word	0x40021000
 8002040:	40020000 	.word	0x40020000
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40010400 	.word	0x40010400
 800204c:	40020800 	.word	0x40020800
 8002050:	40014000 	.word	0x40014000

08002054 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0b6      	sub	sp, #216	@ 0xd8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002070:	2290      	movs	r2, #144	@ 0x90
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f005 f84f 	bl	8007118 <memset>
  if(huart->Instance==UART4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4aa0      	ldr	r2, [pc, #640]	@ (8002300 <HAL_UART_MspInit+0x2ac>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d13e      	bne.n	8002102 <HAL_UART_MspInit+0xae>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002088:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002090:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fa8b 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80020a0:	f7ff fc66 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020a4:	4b97      	ldr	r3, [pc, #604]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a96      	ldr	r2, [pc, #600]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80020aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b94      	ldr	r3, [pc, #592]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	4b91      	ldr	r3, [pc, #580]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	4a90      	ldr	r2, [pc, #576]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80020d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020ee:	2308      	movs	r3, #8
 80020f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4883      	ldr	r0, [pc, #524]	@ (8002308 <HAL_UART_MspInit+0x2b4>)
 80020fc:	f000 fea8 	bl	8002e50 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002100:	e151      	b.n	80023a6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a81      	ldr	r2, [pc, #516]	@ (800230c <HAL_UART_MspInit+0x2b8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d160      	bne.n	80021ce <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800210c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002110:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002118:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fa47 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002128:	f7ff fc22 	bl	8001970 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800212c:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4a74      	ldr	r2, [pc, #464]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002136:	6413      	str	r3, [r2, #64]	@ 0x40
 8002138:	4b72      	ldr	r3, [pc, #456]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b6f      	ldr	r3, [pc, #444]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4a6e      	ldr	r2, [pc, #440]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002150:	4b6c      	ldr	r3, [pc, #432]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215c:	4b69      	ldr	r3, [pc, #420]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a68      	ldr	r2, [pc, #416]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002178:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800218e:	2308      	movs	r3, #8
 8002190:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002198:	4619      	mov	r1, r3
 800219a:	485d      	ldr	r0, [pc, #372]	@ (8002310 <HAL_UART_MspInit+0x2bc>)
 800219c:	f000 fe58 	bl	8002e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b4:	2303      	movs	r3, #3
 80021b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021ba:	2308      	movs	r3, #8
 80021bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4850      	ldr	r0, [pc, #320]	@ (8002308 <HAL_UART_MspInit+0x2b4>)
 80021c8:	f000 fe42 	bl	8002e50 <HAL_GPIO_Init>
}
 80021cc:	e0eb      	b.n	80023a6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a50      	ldr	r2, [pc, #320]	@ (8002314 <HAL_UART_MspInit+0x2c0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d151      	bne.n	800227c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d8:	2340      	movs	r3, #64	@ 0x40
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021dc:	2300      	movs	r3, #0
 80021de:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 f9e3 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80021f0:	f7ff fbbe 	bl	8001970 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	4b43      	ldr	r3, [pc, #268]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	4a42      	ldr	r2, [pc, #264]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80021fa:	f043 0310 	orr.w	r3, r3, #16
 80021fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002200:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4a3c      	ldr	r2, [pc, #240]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	6313      	str	r3, [r2, #48]	@ 0x30
 8002218:	4b3a      	ldr	r3, [pc, #232]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800223e:	2304      	movs	r3, #4
 8002240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002248:	4619      	mov	r1, r3
 800224a:	4831      	ldr	r0, [pc, #196]	@ (8002310 <HAL_UART_MspInit+0x2bc>)
 800224c:	f000 fe00 	bl	8002e50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002250:	2340      	movs	r3, #64	@ 0x40
 8002252:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002268:	2307      	movs	r3, #7
 800226a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002272:	4619      	mov	r1, r3
 8002274:	4826      	ldr	r0, [pc, #152]	@ (8002310 <HAL_UART_MspInit+0x2bc>)
 8002276:	f000 fdeb 	bl	8002e50 <HAL_GPIO_Init>
}
 800227a:	e094      	b.n	80023a6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a25      	ldr	r2, [pc, #148]	@ (8002318 <HAL_UART_MspInit+0x2c4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d14c      	bne.n	8002320 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800228a:	2300      	movs	r3, #0
 800228c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002292:	4618      	mov	r0, r3
 8002294:	f002 f98c 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800229e:	f7ff fb67 	bl	8001970 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a2:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a17      	ldr	r2, [pc, #92]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ba:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a11      	ldr	r2, [pc, #68]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_UART_MspInit+0x2b0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022d2:	2360      	movs	r3, #96	@ 0x60
 80022d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ea:	2307      	movs	r3, #7
 80022ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4809      	ldr	r0, [pc, #36]	@ (800231c <HAL_UART_MspInit+0x2c8>)
 80022f8:	f000 fdaa 	bl	8002e50 <HAL_GPIO_Init>
}
 80022fc:	e053      	b.n	80023a6 <HAL_UART_MspInit+0x352>
 80022fe:	bf00      	nop
 8002300:	40004c00 	.word	0x40004c00
 8002304:	40023800 	.word	0x40023800
 8002308:	40020800 	.word	0x40020800
 800230c:	40005000 	.word	0x40005000
 8002310:	40020400 	.word	0x40020400
 8002314:	40011000 	.word	0x40011000
 8002318:	40004400 	.word	0x40004400
 800231c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <HAL_UART_MspInit+0x35c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d13d      	bne.n	80023a6 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800232a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800232e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002336:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800233a:	4618      	mov	r0, r3
 800233c:	f002 f938 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002346:	f7ff fb13 	bl	8001970 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_UART_MspInit+0x360>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_UART_MspInit+0x360>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002354:	6413      	str	r3, [r2, #64]	@ 0x40
 8002356:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <HAL_UART_MspInit+0x360>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_UART_MspInit+0x360>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <HAL_UART_MspInit+0x360>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_UART_MspInit+0x360>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800237a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800237e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002394:	2307      	movs	r3, #7
 8002396:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800239a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <HAL_UART_MspInit+0x364>)
 80023a2:	f000 fd55 	bl	8002e50 <HAL_GPIO_Init>
}
 80023a6:	bf00      	nop
 80023a8:	37d8      	adds	r7, #216	@ 0xd8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40004800 	.word	0x40004800
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020c00 	.word	0x40020c00

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <NMI_Handler+0x4>

080023c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <MemManage_Handler+0x4>

080023d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002412:	f000 f901 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e00a      	b.n	8002442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800242c:	f3af 8000 	nop.w
 8002430:	4601      	mov	r1, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	60ba      	str	r2, [r7, #8]
 8002438:	b2ca      	uxtb	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbf0      	blt.n	800242c <_read+0x12>
  }

  return len;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	605a      	str	r2, [r3, #4]
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_isatty>:

int _isatty(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f004 fe62 	bl	80071b4 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20080000 	.word	0x20080000
 800251c:	00000400 	.word	0x00000400
 8002520:	20000694 	.word	0x20000694
 8002524:	200007e8 	.word	0x200007e8

08002528 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <SystemInit+0x20>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <SystemInit+0x20>)
 8002534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002550:	480d      	ldr	r0, [pc, #52]	@ (8002588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002552:	490e      	ldr	r1, [pc, #56]	@ (800258c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002568:	4c0b      	ldr	r4, [pc, #44]	@ (8002598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002576:	f7ff ffd7 	bl	8002528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257a:	f004 fe21 	bl	80071c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7fe f889 	bl	8000694 <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002584:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002590:	08007cf8 	.word	0x08007cf8
  ldr r2, =_sbss
 8002594:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002598:	200007e8 	.word	0x200007e8

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>

0800259e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a2:	2003      	movs	r0, #3
 80025a4:	f000 fc04 	bl	8002db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f000 f805 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ae:	f7ff f9e5 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c0:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_InitTick+0x54>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_InitTick+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fc2d 	bl	8002e36 <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d80a      	bhi.n	8002602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f000 fbe7 	bl	8002dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4a06      	ldr	r2, [pc, #24]	@ (8002614 <HAL_InitTick+0x5c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000
 8002610:	20000008 	.word	0x20000008
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_IncTick+0x20>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_IncTick+0x24>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	@ (800263c <HAL_IncTick+0x24>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008
 800263c:	20000698 	.word	0x20000698

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_GetTick+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000698 	.word	0x20000698

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff ffee 	bl	8002640 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffde 	bl	8002640 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e031      	b.n	800271a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff f980 	bl	80019c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_ADC_Init+0x84>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	f043 0202 	orr.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f970 	bl	80029d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
 800270a:	e001      	b.n	8002710 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	ffffeefd 	.word	0xffffeefd

08002728 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x1c>
 8002740:	2302      	movs	r3, #2
 8002742:	e136      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x28a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b09      	cmp	r3, #9
 8002752:	d93a      	bls.n	80027ca <HAL_ADC_ConfigChannel+0xa2>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800275c:	d035      	beq.n	80027ca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68d9      	ldr	r1, [r3, #12]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	3b1e      	subs	r3, #30
 8002774:	2207      	movs	r2, #7
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a8d      	ldr	r2, [pc, #564]	@ (80029c0 <HAL_ADC_ConfigChannel+0x298>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10a      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68d9      	ldr	r1, [r3, #12]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	061a      	lsls	r2, r3, #24
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a2:	e035      	b.n	8002810 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4403      	add	r3, r0
 80027bc:	3b1e      	subs	r3, #30
 80027be:	409a      	lsls	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c8:	e022      	b.n	8002810 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6919      	ldr	r1, [r3, #16]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	2207      	movs	r2, #7
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43da      	mvns	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	400a      	ands	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6919      	ldr	r1, [r3, #16]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	4618      	mov	r0, r3
 8002800:	4603      	mov	r3, r0
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4403      	add	r3, r0
 8002806:	409a      	lsls	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d824      	bhi.n	8002862 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b05      	subs	r3, #5
 800282a:	221f      	movs	r2, #31
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43da      	mvns	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	400a      	ands	r2, r1
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b05      	subs	r3, #5
 8002854:	fa00 f203 	lsl.w	r2, r0, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002860:	e04c      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d824      	bhi.n	80028b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3b23      	subs	r3, #35	@ 0x23
 800287c:	221f      	movs	r2, #31
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b23      	subs	r3, #35	@ 0x23
 80028a6:	fa00 f203 	lsl.w	r2, r0, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b2:	e023      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b41      	subs	r3, #65	@ 0x41
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43da      	mvns	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	400a      	ands	r2, r1
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b41      	subs	r3, #65	@ 0x41
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a30      	ldr	r2, [pc, #192]	@ (80029c4 <HAL_ADC_ConfigChannel+0x29c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1f4>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800290e:	d105      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a2c      	ldr	r2, [pc, #176]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002916:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800291a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <HAL_ADC_ConfigChannel+0x29c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10f      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x21e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b12      	cmp	r3, #18
 800292c:	d10b      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002934:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002938:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002944:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_ADC_ConfigChannel+0x29c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d12b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x280>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_ADC_ConfigChannel+0x298>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x23a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b11      	cmp	r3, #17
 8002960:	d122      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002968:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800296c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002978:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a10      	ldr	r2, [pc, #64]	@ (80029c0 <HAL_ADC_ConfigChannel+0x298>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_ADC_ConfigChannel+0x2a4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a11      	ldr	r2, [pc, #68]	@ (80029d0 <HAL_ADC_ConfigChannel+0x2a8>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9a      	lsrs	r2, r3, #18
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	10000012 	.word	0x10000012
 80029c4:	40012000 	.word	0x40012000
 80029c8:	40012300 	.word	0x40012300
 80029cc:	20000000 	.word	0x20000000
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029dc:	4b78      	ldr	r3, [pc, #480]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a77      	ldr	r2, [pc, #476]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80029e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029e8:	4b75      	ldr	r3, [pc, #468]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4973      	ldr	r1, [pc, #460]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	021a      	lsls	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <ADC_Init+0x1f0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	e00f      	b.n	8002ace <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0202 	bic.w	r2, r2, #2
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	005a      	lsls	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	3b01      	subs	r3, #1
 8002b28:	035a      	lsls	r2, r3, #13
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e007      	b.n	8002b44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	051a      	lsls	r2, r3, #20
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b86:	025a      	lsls	r2, r3, #9
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	029a      	lsls	r2, r3, #10
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012300 	.word	0x40012300
 8002bc4:	0f000001 	.word	0x0f000001

08002bc8 <__NVIC_SetPriorityGrouping>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x40>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <__NVIC_SetPriorityGrouping+0x40>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00
 8002c0c:	05fa0000 	.word	0x05fa0000

08002c10 <__NVIC_GetPriorityGrouping>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <__NVIC_GetPriorityGrouping+0x18>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 0307 	and.w	r3, r3, #7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_EnableIRQ>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0b      	blt.n	8002c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	@ (8002c64 <__NVIC_EnableIRQ+0x38>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_DisableIRQ>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db12      	blt.n	8002ca0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	490a      	ldr	r1, [pc, #40]	@ (8002cac <__NVIC_DisableIRQ+0x44>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	3320      	adds	r3, #32
 8002c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c94:	f3bf 8f4f 	dsb	sy
}
 8002c98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c9a:	f3bf 8f6f 	isb	sy
}
 8002c9e:	bf00      	nop
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	@ (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	@ (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	@ 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <SysTick_Config>:
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d7c:	d301      	bcc.n	8002d82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00f      	b.n	8002da2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d82:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <SysTick_Config+0x40>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f7ff ff8e 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <SysTick_Config+0x40>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <SysTick_Config+0x40>)
 8002d9c:	2207      	movs	r2, #7
 8002d9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff05 	bl	8002bc8 <__NVIC_SetPriorityGrouping>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd8:	f7ff ff1a 	bl	8002c10 <__NVIC_GetPriorityGrouping>
 8002ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	6978      	ldr	r0, [r7, #20]
 8002de4:	f7ff ff8e 	bl	8002d04 <NVIC_EncodePriority>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff5d 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df6:	bf00      	nop
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff0d 	bl	8002c2c <__NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff1d 	bl	8002c68 <__NVIC_DisableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff94 	bl	8002d6c <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e175      	b.n	800315c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f040 8164 	bne.w	8003156 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_GPIO_Init+0x56>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d130      	bne.n	8002f08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0201 	and.w	r2, r3, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d017      	beq.n	8002f44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d123      	bne.n	8002f98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	08da      	lsrs	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3208      	adds	r2, #8
 8002f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80be 	beq.w	8003156 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	4b66      	ldr	r3, [pc, #408]	@ (8003174 <HAL_GPIO_Init+0x324>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	4a65      	ldr	r2, [pc, #404]	@ (8003174 <HAL_GPIO_Init+0x324>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe6:	4b63      	ldr	r3, [pc, #396]	@ (8003174 <HAL_GPIO_Init+0x324>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ff2:	4a61      	ldr	r2, [pc, #388]	@ (8003178 <HAL_GPIO_Init+0x328>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a58      	ldr	r2, [pc, #352]	@ (800317c <HAL_GPIO_Init+0x32c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d037      	beq.n	800308e <HAL_GPIO_Init+0x23e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a57      	ldr	r2, [pc, #348]	@ (8003180 <HAL_GPIO_Init+0x330>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <HAL_GPIO_Init+0x23a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a56      	ldr	r2, [pc, #344]	@ (8003184 <HAL_GPIO_Init+0x334>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d02b      	beq.n	8003086 <HAL_GPIO_Init+0x236>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a55      	ldr	r2, [pc, #340]	@ (8003188 <HAL_GPIO_Init+0x338>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d025      	beq.n	8003082 <HAL_GPIO_Init+0x232>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a54      	ldr	r2, [pc, #336]	@ (800318c <HAL_GPIO_Init+0x33c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01f      	beq.n	800307e <HAL_GPIO_Init+0x22e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a53      	ldr	r2, [pc, #332]	@ (8003190 <HAL_GPIO_Init+0x340>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d019      	beq.n	800307a <HAL_GPIO_Init+0x22a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_GPIO_Init+0x344>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_GPIO_Init+0x226>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a51      	ldr	r2, [pc, #324]	@ (8003198 <HAL_GPIO_Init+0x348>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00d      	beq.n	8003072 <HAL_GPIO_Init+0x222>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a50      	ldr	r2, [pc, #320]	@ (800319c <HAL_GPIO_Init+0x34c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <HAL_GPIO_Init+0x21e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4f      	ldr	r2, [pc, #316]	@ (80031a0 <HAL_GPIO_Init+0x350>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_GPIO_Init+0x21a>
 8003066:	2309      	movs	r3, #9
 8003068:	e012      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800306a:	230a      	movs	r3, #10
 800306c:	e010      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800306e:	2308      	movs	r3, #8
 8003070:	e00e      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003072:	2307      	movs	r3, #7
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003076:	2306      	movs	r3, #6
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800308e:	2300      	movs	r3, #0
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030a0:	4935      	ldr	r1, [pc, #212]	@ (8003178 <HAL_GPIO_Init+0x328>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	4b3d      	ldr	r3, [pc, #244]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d2:	4a34      	ldr	r2, [pc, #208]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d8:	4b32      	ldr	r3, [pc, #200]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030fc:	4a29      	ldr	r2, [pc, #164]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003102:	4b28      	ldr	r3, [pc, #160]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003126:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003150:	4a14      	ldr	r2, [pc, #80]	@ (80031a4 <HAL_GPIO_Init+0x354>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3301      	adds	r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	f67f ae86 	bls.w	8002e70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3724      	adds	r7, #36	@ 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40013800 	.word	0x40013800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	40020800 	.word	0x40020800
 8003188:	40020c00 	.word	0x40020c00
 800318c:	40021000 	.word	0x40021000
 8003190:	40021400 	.word	0x40021400
 8003194:	40021800 	.word	0x40021800
 8003198:	40021c00 	.word	0x40021c00
 800319c:	40022000 	.word	0x40022000
 80031a0:	40022400 	.word	0x40022400
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
 80031b4:	4613      	mov	r3, r2
 80031b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031c4:	e003      	b.n	80031ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	041a      	lsls	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	619a      	str	r2, [r3, #24]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e08b      	b.n	8003306 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe fc1e 	bl	8001a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	@ 0x24
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800322c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800323c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d107      	bne.n	8003256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	e006      	b.n	8003264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d108      	bne.n	800327e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	e007      	b.n	800328e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_I2C_Init+0x134>)
 800329a:	430b      	orrs	r3, r1
 800329c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69d9      	ldr	r1, [r3, #28]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	02008000 	.word	0x02008000

08003314 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 80f9 	bne.w	800352e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_I2C_Mem_Write+0x34>
 8003342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0ed      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Mem_Write+0x4e>
 800335e:	2302      	movs	r3, #2
 8003360:	e0e6      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800336a:	f7ff f969 	bl	8002640 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2319      	movs	r3, #25
 8003376:	2201      	movs	r2, #1
 8003378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f955 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0d1      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2221      	movs	r2, #33	@ 0x21
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2240      	movs	r2, #64	@ 0x40
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033b4:	88f8      	ldrh	r0, [r7, #6]
 80033b6:	893a      	ldrh	r2, [r7, #8]
 80033b8:	8979      	ldrh	r1, [r7, #10]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4603      	mov	r3, r0
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f8b9 	bl	800353c <I2C_RequestMemoryWrite>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0a9      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2bff      	cmp	r3, #255	@ 0xff
 80033e4:	d90e      	bls.n	8003404 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	22ff      	movs	r2, #255	@ 0xff
 80033ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	8979      	ldrh	r1, [r7, #10]
 80033f4:	2300      	movs	r3, #0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fad9 	bl	80039b4 <I2C_TransferConfig>
 8003402:	e00f      	b.n	8003424 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003412:	b2da      	uxtb	r2, r3
 8003414:	8979      	ldrh	r1, [r7, #10]
 8003416:	2300      	movs	r3, #0
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fac8 	bl	80039b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f958 	bl	80036de <I2C_WaitOnTXISFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e07b      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	781a      	ldrb	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d034      	beq.n	80034dc <HAL_I2C_Mem_Write+0x1c8>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	2b00      	cmp	r3, #0
 8003478:	d130      	bne.n	80034dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003480:	2200      	movs	r2, #0
 8003482:	2180      	movs	r1, #128	@ 0x80
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f8d1 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e04d      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2bff      	cmp	r3, #255	@ 0xff
 800349c:	d90e      	bls.n	80034bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22ff      	movs	r2, #255	@ 0xff
 80034a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	2300      	movs	r3, #0
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fa7d 	bl	80039b4 <I2C_TransferConfig>
 80034ba:	e00f      	b.n	80034dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	8979      	ldrh	r1, [r7, #10]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fa6c 	bl	80039b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d19e      	bne.n	8003424 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f93e 	bl	800376c <I2C_WaitOnSTOPFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e01a      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_I2C_Mem_Write+0x224>)
 800350e:	400b      	ands	r3, r1
 8003510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	fe00e800 	.word	0xfe00e800

0800353c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	4608      	mov	r0, r1
 8003546:	4611      	mov	r1, r2
 8003548:	461a      	mov	r2, r3
 800354a:	4603      	mov	r3, r0
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	460b      	mov	r3, r1
 8003550:	813b      	strh	r3, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <I2C_RequestMemoryWrite+0xa4>)
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fa25 	bl	80039b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	69b9      	ldr	r1, [r7, #24]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8b5 	bl	80036de <I2C_WaitOnTXISFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e02c      	b.n	80035d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003584:	893b      	ldrh	r3, [r7, #8]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	629a      	str	r2, [r3, #40]	@ 0x28
 800358e:	e015      	b.n	80035bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	b29b      	uxth	r3, r3
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f89b 	bl	80036de <I2C_WaitOnTXISFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e012      	b.n	80035d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b2:	893b      	ldrh	r3, [r7, #8]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2200      	movs	r2, #0
 80035c4:	2180      	movs	r1, #128	@ 0x80
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f830 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	80002000 	.word	0x80002000

080035e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d103      	bne.n	8003602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d007      	beq.n	8003620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	619a      	str	r2, [r3, #24]
  }
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363c:	e03b      	b.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f8d6 	bl	80037f4 <I2C_IsErrorOccurred>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d02d      	beq.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fe fff1 	bl	8002640 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnFlagUntilTimeout+0x44>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d122      	bne.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	4013      	ands	r3, r2
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	429a      	cmp	r2, r3
 800368c:	d113      	bne.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	bf0c      	ite	eq
 80036c6:	2301      	moveq	r3, #1
 80036c8:	2300      	movne	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d0b4      	beq.n	800363e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ea:	e033      	b.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f87f 	bl	80037f4 <I2C_IsErrorOccurred>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e031      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d025      	beq.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003708:	f7fe ff9a 	bl	8002640 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	429a      	cmp	r2, r3
 8003716:	d302      	bcc.n	800371e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11a      	bne.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d013      	beq.n	8003754 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d1c4      	bne.n	80036ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003778:	e02f      	b.n	80037da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f838 	bl	80037f4 <I2C_IsErrorOccurred>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e02d      	b.n	80037ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378e:	f7fe ff57 	bl	8002640 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d302      	bcc.n	80037a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11a      	bne.n	80037da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d013      	beq.n	80037da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e007      	b.n	80037ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d1c8      	bne.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	@ 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d068      	beq.n	80038f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2210      	movs	r2, #16
 8003826:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003828:	e049      	b.n	80038be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d045      	beq.n	80038be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe ff05 	bl	8002640 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_IsErrorOccurred+0x54>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d13a      	bne.n	80038be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003852:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003866:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386a:	d121      	bne.n	80038b0 <I2C_IsErrorOccurred+0xbc>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003872:	d01d      	beq.n	80038b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	2b20      	cmp	r3, #32
 8003878:	d01a      	beq.n	80038b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003888:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800388a:	f7fe fed9 	bl	8002640 <HAL_GetTick>
 800388e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003890:	e00e      	b.n	80038b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003892:	f7fe fed5 	bl	8002640 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b19      	cmp	r3, #25
 800389e:	d907      	bls.n	80038b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f043 0320 	orr.w	r3, r3, #32
 80038a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038ae:	e006      	b.n	80038be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d1e9      	bne.n	8003892 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d003      	beq.n	80038d4 <I2C_IsErrorOccurred+0xe0>
 80038cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0aa      	beq.n	800382a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2220      	movs	r2, #32
 80038e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003914:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f043 0308 	orr.w	r3, r3, #8
 800392c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003936:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	f043 0302 	orr.w	r3, r3, #2
 800394e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff fe3b 	bl	80035e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <I2C_IsErrorOccurred+0x1bc>)
 800397a:	400b      	ands	r3, r1
 800397c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3728      	adds	r7, #40	@ 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	fe00e800 	.word	0xfe00e800

080039b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	817b      	strh	r3, [r7, #10]
 80039c2:	4613      	mov	r3, r2
 80039c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039cc:	7a7b      	ldrb	r3, [r7, #9]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	4313      	orrs	r3, r2
 80039de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	0d5b      	lsrs	r3, r3, #21
 80039ee:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <I2C_TransferConfig+0x60>)
 80039f4:	430b      	orrs	r3, r1
 80039f6:	43db      	mvns	r3, r3
 80039f8:	ea02 0103 	and.w	r1, r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	03ff63ff 	.word	0x03ff63ff

08003a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d138      	bne.n	8003aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e032      	b.n	8003aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	@ 0x24
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d139      	bne.n	8003b38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e033      	b.n	8003b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	@ 0x24
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b56:	6013      	str	r3, [r2, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40007000 	.word	0x40007000

08003b68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	4b23      	ldr	r3, [pc, #140]	@ (8003c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b96:	f7fe fd53 	bl	8002640 <HAL_GetTick>
 8003b9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b9c:	e009      	b.n	8003bb2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b9e:	f7fe fd4f 	bl	8002640 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bac:	d901      	bls.n	8003bb2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e022      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bb2:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bbe:	d1ee      	bne.n	8003b9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bc0:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bcc:	f7fe fd38 	bl	8002640 <HAL_GetTick>
 8003bd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bd2:	e009      	b.n	8003be8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bd4:	f7fe fd34 	bl	8002640 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003be2:	d901      	bls.n	8003be8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e007      	b.n	8003bf8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40007000 	.word	0x40007000

08003c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e29b      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8087 	beq.w	8003d3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c2c:	4b96      	ldr	r3, [pc, #600]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d00c      	beq.n	8003c52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c38:	4b93      	ldr	r3, [pc, #588]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d112      	bne.n	8003c6a <HAL_RCC_OscConfig+0x62>
 8003c44:	4b90      	ldr	r3, [pc, #576]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c50:	d10b      	bne.n	8003c6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c52:	4b8d      	ldr	r3, [pc, #564]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d06c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x130>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d168      	bne.n	8003d38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e275      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x7a>
 8003c74:	4b84      	ldr	r3, [pc, #528]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a83      	ldr	r2, [pc, #524]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	e02e      	b.n	8003ce0 <HAL_RCC_OscConfig+0xd8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x9c>
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b7c      	ldr	r3, [pc, #496]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xd8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xc0>
 8003cae:	4b76      	ldr	r3, [pc, #472]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a75      	ldr	r2, [pc, #468]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b73      	ldr	r3, [pc, #460]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a72      	ldr	r2, [pc, #456]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xd8>
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fcaa 	bl	8002640 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe fca6 	bl	8002640 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e229      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b61      	ldr	r3, [pc, #388]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe8>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fe fc96 	bl	8002640 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fe fc92 	bl	8002640 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e215      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b57      	ldr	r3, [pc, #348]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x110>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d069      	beq.n	8003e1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d46:	4b50      	ldr	r3, [pc, #320]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b4d      	ldr	r3, [pc, #308]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x190>
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x17a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1e9      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	493d      	ldr	r1, [pc, #244]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	e040      	b.n	8003e1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d023      	beq.n	8003de8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a38      	ldr	r2, [pc, #224]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fc48 	bl	8002640 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe fc44 	bl	8002640 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e1c7      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc6:	4b30      	ldr	r3, [pc, #192]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4929      	ldr	r1, [pc, #164]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
 8003de6:	e018      	b.n	8003e1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de8:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a26      	ldr	r2, [pc, #152]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe fc24 	bl	8002640 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fe fc20 	bl	8002640 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1a3      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d038      	beq.n	8003e98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d019      	beq.n	8003e62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2e:	4b16      	ldr	r3, [pc, #88]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e32:	4a15      	ldr	r2, [pc, #84]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fc01 	bl	8002640 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fe fbfd 	bl	8002640 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e180      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e54:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x23a>
 8003e60:	e01a      	b.n	8003e98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e62:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e66:	4a08      	ldr	r2, [pc, #32]	@ (8003e88 <HAL_RCC_OscConfig+0x280>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fbe7 	bl	8002640 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e76:	f7fe fbe3 	bl	8002640 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d903      	bls.n	8003e8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e166      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
 8003e88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	4b92      	ldr	r3, [pc, #584]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ee      	bne.n	8003e76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 80a4 	beq.w	8003fee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea6:	4b8c      	ldr	r3, [pc, #560]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10d      	bne.n	8003ece <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4b89      	ldr	r3, [pc, #548]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	4a88      	ldr	r2, [pc, #544]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ebe:	4b86      	ldr	r3, [pc, #536]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ece:	4b83      	ldr	r3, [pc, #524]	@ (80040dc <HAL_RCC_OscConfig+0x4d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d118      	bne.n	8003f0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eda:	4b80      	ldr	r3, [pc, #512]	@ (80040dc <HAL_RCC_OscConfig+0x4d4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7f      	ldr	r2, [pc, #508]	@ (80040dc <HAL_RCC_OscConfig+0x4d4>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee6:	f7fe fbab 	bl	8002640 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eee:	f7fe fba7 	bl	8002640 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	@ 0x64
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e12a      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f00:	4b76      	ldr	r3, [pc, #472]	@ (80040dc <HAL_RCC_OscConfig+0x4d4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d106      	bne.n	8003f22 <HAL_RCC_OscConfig+0x31a>
 8003f14:	4b70      	ldr	r3, [pc, #448]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	4a6f      	ldr	r2, [pc, #444]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f20:	e02d      	b.n	8003f7e <HAL_RCC_OscConfig+0x376>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x33c>
 8003f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2e:	4a6a      	ldr	r2, [pc, #424]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f36:	4b68      	ldr	r3, [pc, #416]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3a:	4a67      	ldr	r2, [pc, #412]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f42:	e01c      	b.n	8003f7e <HAL_RCC_OscConfig+0x376>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x35e>
 8003f4c:	4b62      	ldr	r3, [pc, #392]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	4a61      	ldr	r2, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f58:	4b5f      	ldr	r3, [pc, #380]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	e00b      	b.n	8003f7e <HAL_RCC_OscConfig+0x376>
 8003f66:	4b5c      	ldr	r3, [pc, #368]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f72:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	f023 0304 	bic.w	r3, r3, #4
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f86:	f7fe fb5b 	bl	8002640 <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fe fb57 	bl	8002640 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0d8      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCC_OscConfig+0x386>
 8003fb0:	e014      	b.n	8003fdc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fe fb45 	bl	8002640 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fba:	f7fe fb41 	bl	8002640 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0c2      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1ee      	bne.n	8003fba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d105      	bne.n	8003fee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	4a3c      	ldr	r2, [pc, #240]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80ae 	beq.w	8004154 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff8:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d06d      	beq.n	80040e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b02      	cmp	r3, #2
 800400a:	d14b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400c:	4b32      	ldr	r3, [pc, #200]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a31      	ldr	r2, [pc, #196]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fb12 	bl	8002640 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe fb0e 	bl	8002640 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e091      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	4b29      	ldr	r3, [pc, #164]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	3b01      	subs	r3, #1
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	061b      	lsls	r3, r3, #24
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	491b      	ldr	r1, [pc, #108]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe fae0 	bl	8002640 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fadc 	bl	8002640 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e05f      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004096:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x47c>
 80040a2:	e057      	b.n	8004154 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0b      	ldr	r2, [pc, #44]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 80040aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fac6 	bl	8002640 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe fac2 	bl	8002640 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e045      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4b0>
 80040d6:	e03d      	b.n	8004154 <HAL_RCC_OscConfig+0x54c>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <HAL_RCC_OscConfig+0x558>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d030      	beq.n	8004150 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d129      	bne.n	8004150 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d122      	bne.n	8004150 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004110:	4013      	ands	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004116:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004118:	4293      	cmp	r3, r2
 800411a:	d119      	bne.n	8004150 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	3b01      	subs	r3, #1
 800412a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d10f      	bne.n	8004150 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0d0      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b6a      	ldr	r3, [pc, #424]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d910      	bls.n	80041ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b67      	ldr	r3, [pc, #412]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 020f 	bic.w	r2, r3, #15
 8004192:	4965      	ldr	r1, [pc, #404]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b63      	ldr	r3, [pc, #396]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0b8      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c4:	4b59      	ldr	r3, [pc, #356]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4a58      	ldr	r2, [pc, #352]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80041ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041dc:	4b53      	ldr	r3, [pc, #332]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	4a52      	ldr	r2, [pc, #328]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80041e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b50      	ldr	r3, [pc, #320]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	494d      	ldr	r1, [pc, #308]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d040      	beq.n	8004288 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d115      	bne.n	8004246 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e07f      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4b41      	ldr	r3, [pc, #260]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e073      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b3d      	ldr	r3, [pc, #244]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06b      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004246:	4b39      	ldr	r3, [pc, #228]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4936      	ldr	r1, [pc, #216]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fe f9f2 	bl	8002640 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fe f9ee 	bl	8002640 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e053      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b2d      	ldr	r3, [pc, #180]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 020c 	and.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	429a      	cmp	r2, r3
 8004286:	d1eb      	bne.n	8004260 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d210      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 020f 	bic.w	r2, r3, #15
 800429e:	4922      	ldr	r1, [pc, #136]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b20      	ldr	r3, [pc, #128]	@ (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e032      	b.n	800431e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4916      	ldr	r1, [pc, #88]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	490e      	ldr	r1, [pc, #56]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f6:	f000 f821 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	490a      	ldr	r1, [pc, #40]	@ (8004330 <HAL_RCC_ClockConfig+0x1cc>)
 8004308:	5ccb      	ldrb	r3, [r1, r3]
 800430a:	fa22 f303 	lsr.w	r3, r2, r3
 800430e:	4a09      	ldr	r2, [pc, #36]	@ (8004334 <HAL_RCC_ClockConfig+0x1d0>)
 8004310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004312:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <HAL_RCC_ClockConfig+0x1d4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe f94e 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40023c00 	.word	0x40023c00
 800432c:	40023800 	.word	0x40023800
 8004330:	08007c9c 	.word	0x08007c9c
 8004334:	20000000 	.word	0x20000000
 8004338:	20000004 	.word	0x20000004

0800433c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b094      	sub	sp, #80	@ 0x50
 8004342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	647b      	str	r3, [r7, #68]	@ 0x44
 8004348:	2300      	movs	r3, #0
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434c:	2300      	movs	r3, #0
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004354:	4b79      	ldr	r3, [pc, #484]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b08      	cmp	r3, #8
 800435e:	d00d      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x40>
 8004360:	2b08      	cmp	r3, #8
 8004362:	f200 80e1 	bhi.w	8004528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x34>
 800436a:	2b04      	cmp	r3, #4
 800436c:	d003      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0x3a>
 800436e:	e0db      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x204>)
 8004372:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004374:	e0db      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004376:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x208>)
 8004378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800437a:	e0d8      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800437c:	4b6f      	ldr	r3, [pc, #444]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004384:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004386:	4b6d      	ldr	r3, [pc, #436]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004392:	4b6a      	ldr	r3, [pc, #424]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	2200      	movs	r2, #0
 800439a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800439c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a6:	2300      	movs	r3, #0
 80043a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	0159      	lsls	r1, r3, #5
 80043bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c0:	0150      	lsls	r0, r2, #5
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4621      	mov	r1, r4
 80043c8:	1a51      	subs	r1, r2, r1
 80043ca:	6139      	str	r1, [r7, #16]
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb63 0301 	sbc.w	r3, r3, r1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e0:	4659      	mov	r1, fp
 80043e2:	018b      	lsls	r3, r1, #6
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ea:	4651      	mov	r1, sl
 80043ec:	018a      	lsls	r2, r1, #6
 80043ee:	4651      	mov	r1, sl
 80043f0:	ebb2 0801 	subs.w	r8, r2, r1
 80043f4:	4659      	mov	r1, fp
 80043f6:	eb63 0901 	sbc.w	r9, r3, r1
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440e:	4690      	mov	r8, r2
 8004410:	4699      	mov	r9, r3
 8004412:	4623      	mov	r3, r4
 8004414:	eb18 0303 	adds.w	r3, r8, r3
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	462b      	mov	r3, r5
 800441c:	eb49 0303 	adc.w	r3, r9, r3
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800442e:	4629      	mov	r1, r5
 8004430:	024b      	lsls	r3, r1, #9
 8004432:	4621      	mov	r1, r4
 8004434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004438:	4621      	mov	r1, r4
 800443a:	024a      	lsls	r2, r1, #9
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004442:	2200      	movs	r2, #0
 8004444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800444c:	f7fb ff48 	bl	80002e0 <__aeabi_uldivmod>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4613      	mov	r3, r2
 8004456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004458:	e058      	b.n	800450c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445a:	4b38      	ldr	r3, [pc, #224]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	2200      	movs	r2, #0
 8004462:	4618      	mov	r0, r3
 8004464:	4611      	mov	r1, r2
 8004466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	f04f 0000 	mov.w	r0, #0
 800447c:	f04f 0100 	mov.w	r1, #0
 8004480:	0159      	lsls	r1, r3, #5
 8004482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004486:	0150      	lsls	r0, r2, #5
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4641      	mov	r1, r8
 800448e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004492:	4649      	mov	r1, r9
 8004494:	eb63 0b01 	sbc.w	fp, r3, r1
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044ac:	ebb2 040a 	subs.w	r4, r2, sl
 80044b0:	eb63 050b 	sbc.w	r5, r3, fp
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	00eb      	lsls	r3, r5, #3
 80044be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c2:	00e2      	lsls	r2, r4, #3
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	18e3      	adds	r3, r4, r3
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	464b      	mov	r3, r9
 80044d0:	eb45 0303 	adc.w	r3, r5, r3
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e2:	4629      	mov	r1, r5
 80044e4:	028b      	lsls	r3, r1, #10
 80044e6:	4621      	mov	r1, r4
 80044e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044ec:	4621      	mov	r1, r4
 80044ee:	028a      	lsls	r2, r1, #10
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f6:	2200      	movs	r2, #0
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	61fa      	str	r2, [r7, #28]
 80044fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004500:	f7fb feee 	bl	80002e0 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <HAL_RCC_GetSysClockFreq+0x200>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	3301      	adds	r3, #1
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800451c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800451e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004526:	e002      	b.n	800452e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x204>)
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004530:	4618      	mov	r0, r3
 8004532:	3750      	adds	r7, #80	@ 0x50
 8004534:	46bd      	mov	sp, r7
 8004536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	00f42400 	.word	0x00f42400
 8004544:	007a1200 	.word	0x007a1200

08004548 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_RCC_GetHCLKFreq+0x14>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000000 	.word	0x20000000

08004560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004564:	f7ff fff0 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	0a9b      	lsrs	r3, r3, #10
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4903      	ldr	r1, [pc, #12]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40023800 	.word	0x40023800
 8004584:	08007cac 	.word	0x08007cac

08004588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800458c:	f7ff ffdc 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0b5b      	lsrs	r3, r3, #13
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4903      	ldr	r1, [pc, #12]	@ (80045ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	08007cac 	.word	0x08007cac

080045b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d012      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045d8:	4b69      	ldr	r3, [pc, #420]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a68      	ldr	r2, [pc, #416]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045e2:	6093      	str	r3, [r2, #8]
 80045e4:	4b66      	ldr	r3, [pc, #408]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ec:	4964      	ldr	r1, [pc, #400]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d017      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800460a:	4b5d      	ldr	r3, [pc, #372]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004610:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	4959      	ldr	r1, [pc, #356]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004636:	2301      	movs	r3, #1
 8004638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d017      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004646:	4b4e      	ldr	r3, [pc, #312]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800464c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	494a      	ldr	r1, [pc, #296]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 808b 	beq.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004694:	4b3a      	ldr	r3, [pc, #232]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	4a39      	ldr	r2, [pc, #228]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469e:	6413      	str	r3, [r2, #64]	@ 0x40
 80046a0:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046ac:	4b35      	ldr	r3, [pc, #212]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a34      	ldr	r2, [pc, #208]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b8:	f7fd ffc2 	bl	8002640 <HAL_GetTick>
 80046bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fd ffbe 	bl	8002640 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	@ 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e38f      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046de:	4b28      	ldr	r3, [pc, #160]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d035      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d02e      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046fc:	4b20      	ldr	r3, [pc, #128]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004706:	4b1e      	ldr	r3, [pc, #120]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	4a1d      	ldr	r2, [pc, #116]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	4a1a      	ldr	r2, [pc, #104]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800471e:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d114      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd ff86 	bl	8002640 <HAL_GetTick>
 8004734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004736:	e00a      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fd ff82 	bl	8002640 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e351      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ee      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004766:	d111      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004776:	400b      	ands	r3, r1
 8004778:	4901      	ldr	r1, [pc, #4]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
 800477e:	e00b      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004780:	40023800 	.word	0x40023800
 8004784:	40007000 	.word	0x40007000
 8004788:	0ffffcff 	.word	0x0ffffcff
 800478c:	4bac      	ldr	r3, [pc, #688]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4aab      	ldr	r2, [pc, #684]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004792:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004796:	6093      	str	r3, [r2, #8]
 8004798:	4ba9      	ldr	r3, [pc, #676]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a4:	49a6      	ldr	r1, [pc, #664]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d010      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047b6:	4ba2      	ldr	r3, [pc, #648]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047bc:	4aa0      	ldr	r2, [pc, #640]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047c6:	4b9e      	ldr	r3, [pc, #632]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	499b      	ldr	r1, [pc, #620]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047e4:	4b96      	ldr	r3, [pc, #600]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047f2:	4993      	ldr	r1, [pc, #588]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004806:	4b8e      	ldr	r3, [pc, #568]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004814:	498a      	ldr	r1, [pc, #552]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004828:	4b85      	ldr	r3, [pc, #532]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004836:	4982      	ldr	r1, [pc, #520]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800484a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004858:	4979      	ldr	r1, [pc, #484]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800486c:	4b74      	ldr	r3, [pc, #464]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	f023 0203 	bic.w	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487a:	4971      	ldr	r1, [pc, #452]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800488e:	4b6c      	ldr	r3, [pc, #432]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	f023 020c 	bic.w	r2, r3, #12
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489c:	4968      	ldr	r1, [pc, #416]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048b0:	4b63      	ldr	r3, [pc, #396]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	4960      	ldr	r1, [pc, #384]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e0:	4957      	ldr	r1, [pc, #348]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048f4:	4b52      	ldr	r3, [pc, #328]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	494f      	ldr	r1, [pc, #316]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004916:	4b4a      	ldr	r3, [pc, #296]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	4946      	ldr	r1, [pc, #280]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004938:	4b41      	ldr	r3, [pc, #260]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	493e      	ldr	r1, [pc, #248]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800495a:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004960:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004968:	4935      	ldr	r1, [pc, #212]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800497c:	4b30      	ldr	r3, [pc, #192]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004982:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800498a:	492d      	ldr	r1, [pc, #180]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d011      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800499e:	4b28      	ldr	r3, [pc, #160]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ac:	4924      	ldr	r1, [pc, #144]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049bc:	d101      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049de:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ec:	4914      	ldr	r1, [pc, #80]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a00:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a10:	490b      	ldr	r1, [pc, #44]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a24:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a34:	4902      	ldr	r1, [pc, #8]	@ (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a3c:	e002      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a50:	4b8a      	ldr	r3, [pc, #552]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	4986      	ldr	r1, [pc, #536]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a74:	4b81      	ldr	r3, [pc, #516]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a7a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a84:	497d      	ldr	r1, [pc, #500]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d006      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80d6 	beq.w	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aa0:	4b76      	ldr	r3, [pc, #472]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a75      	ldr	r2, [pc, #468]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aac:	f7fd fdc8 	bl	8002640 <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ab4:	f7fd fdc4 	bl	8002640 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	@ 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e195      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d021      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ae6:	4b65      	ldr	r3, [pc, #404]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af4:	4b61      	ldr	r3, [pc, #388]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004afa:	0e1b      	lsrs	r3, r3, #24
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	019a      	lsls	r2, r3, #6
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	071b      	lsls	r3, r3, #28
 8004b1a:	4958      	ldr	r1, [pc, #352]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02e      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b4c:	d129      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b5c:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b62:	0f1b      	lsrs	r3, r3, #28
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	019a      	lsls	r2, r3, #6
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	493e      	ldr	r1, [pc, #248]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b90:	f023 021f 	bic.w	r2, r3, #31
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	4938      	ldr	r1, [pc, #224]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01d      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bae:	4b33      	ldr	r3, [pc, #204]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb4:	0e1b      	lsrs	r3, r3, #24
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc2:	0f1b      	lsrs	r3, r3, #28
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	019a      	lsls	r2, r3, #6
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	071b      	lsls	r3, r3, #28
 8004be2:	4926      	ldr	r1, [pc, #152]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d011      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	041b      	lsls	r3, r3, #16
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	491a      	ldr	r1, [pc, #104]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c1a:	4b18      	ldr	r3, [pc, #96]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fd fd0b 	bl	8002640 <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c2e:	f7fd fd07 	bl	8002640 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b64      	cmp	r3, #100	@ 0x64
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0d8      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c40:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	f040 80ce 	bne.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c60:	f7fd fcee 	bl	8002640 <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c66:	e00b      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c68:	f7fd fcea 	bl	8002640 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	@ 0x64
 8004c74:	d904      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0bb      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c80:	4b5e      	ldr	r3, [pc, #376]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c8c:	d0ec      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d02e      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d12a      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cb6:	4b51      	ldr	r3, [pc, #324]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cca:	0f1b      	lsrs	r3, r3, #28
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	019a      	lsls	r2, r3, #6
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	061b      	lsls	r3, r3, #24
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	4944      	ldr	r1, [pc, #272]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cf2:	4b42      	ldr	r3, [pc, #264]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	493d      	ldr	r1, [pc, #244]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d022      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d20:	d11d      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d22:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	0e1b      	lsrs	r3, r3, #24
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d30:	4b32      	ldr	r3, [pc, #200]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	019a      	lsls	r2, r3, #6
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	071b      	lsls	r3, r3, #28
 8004d56:	4929      	ldr	r1, [pc, #164]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d028      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d6a:	4b24      	ldr	r3, [pc, #144]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	0e1b      	lsrs	r3, r3, #24
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d78:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	0c1b      	lsrs	r3, r3, #16
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	4917      	ldr	r1, [pc, #92]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	4911      	ldr	r1, [pc, #68]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fd fc3a 	bl	8002640 <HAL_GetTick>
 8004dcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dd0:	f7fd fc36 	bl	8002640 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	@ 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e007      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dee:	d1ef      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800

08004e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e09d      	b.n	8004f4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d108      	bne.n	8004e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e22:	d009      	beq.n	8004e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	61da      	str	r2, [r3, #28]
 8004e2a:	e005      	b.n	8004e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fe9e 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e78:	d902      	bls.n	8004e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e002      	b.n	8004e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e8e:	d007      	beq.n	8004ea0 <HAL_SPI_Init+0xa0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e98:	d002      	beq.n	8004ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee2:	ea42 0103 	orr.w	r1, r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f003 0204 	and.w	r2, r3, #4
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f1c:	ea42 0103 	orr.w	r1, r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e049      	b.n	8004ffc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc fe89 	bl	8001c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f000 fc0d 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e049      	b.n	80050aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc ff26 	bl	8001e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fbb6 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e049      	b.n	8005158 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f841 	bl	8005160 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 fb5f 	bl	80057b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e08f      	b.n	80052a8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fc fdf7 	bl	8001d90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6899      	ldr	r1, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b3e      	ldr	r3, [pc, #248]	@ (80052b0 <HAL_TIM_Encoder_Init+0x13c>)
 80051b6:	400b      	ands	r3, r1
 80051b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f000 faf5 	bl	80057b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_TIM_Encoder_Init+0x140>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	4313      	orrs	r3, r2
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_TIM_Encoder_Init+0x144>)
 800520a:	4013      	ands	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4b2a      	ldr	r3, [pc, #168]	@ (80052bc <HAL_TIM_Encoder_Init+0x148>)
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	4313      	orrs	r3, r2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	011a      	lsls	r2, r3, #4
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	031b      	lsls	r3, r3, #12
 8005234:	4313      	orrs	r3, r2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	4313      	orrs	r3, r2
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	fffebff8 	.word	0xfffebff8
 80052b4:	fffffcfc 	.word	0xfffffcfc
 80052b8:	fffff3f3 	.word	0xfffff3f3
 80052bc:	ffff0f0f 	.word	0xffff0f0f

080052c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_TIM_IC_ConfigChannel+0x1e>
 80052da:	2302      	movs	r3, #2
 80052dc:	e088      	b.n	80053f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11b      	bne.n	8005324 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80052fc:	f000 fd64 	bl	8005dc8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 020c 	bic.w	r2, r2, #12
 800530e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6999      	ldr	r1, [r3, #24]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	619a      	str	r2, [r3, #24]
 8005322:	e060      	b.n	80053e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b04      	cmp	r3, #4
 8005328:	d11c      	bne.n	8005364 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800533a:	f000 fde8 	bl	8005f0e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800534c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6999      	ldr	r1, [r3, #24]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	021a      	lsls	r2, r3, #8
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	619a      	str	r2, [r3, #24]
 8005362:	e040      	b.n	80053e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b08      	cmp	r3, #8
 8005368:	d11b      	bne.n	80053a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800537a:	f000 fe35 	bl	8005fe8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 020c 	bic.w	r2, r2, #12
 800538c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69d9      	ldr	r1, [r3, #28]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	61da      	str	r2, [r3, #28]
 80053a0:	e021      	b.n	80053e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d11c      	bne.n	80053e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80053b8:	f000 fe52 	bl	8006060 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80053ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69d9      	ldr	r1, [r3, #28]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	021a      	lsls	r2, r3, #8
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	61da      	str	r2, [r3, #28]
 80053e0:	e001      	b.n	80053e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005412:	2302      	movs	r3, #2
 8005414:	e0ff      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b14      	cmp	r3, #20
 8005422:	f200 80f0 	bhi.w	8005606 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005481 	.word	0x08005481
 8005430:	08005607 	.word	0x08005607
 8005434:	08005607 	.word	0x08005607
 8005438:	08005607 	.word	0x08005607
 800543c:	080054c1 	.word	0x080054c1
 8005440:	08005607 	.word	0x08005607
 8005444:	08005607 	.word	0x08005607
 8005448:	08005607 	.word	0x08005607
 800544c:	08005503 	.word	0x08005503
 8005450:	08005607 	.word	0x08005607
 8005454:	08005607 	.word	0x08005607
 8005458:	08005607 	.word	0x08005607
 800545c:	08005543 	.word	0x08005543
 8005460:	08005607 	.word	0x08005607
 8005464:	08005607 	.word	0x08005607
 8005468:	08005607 	.word	0x08005607
 800546c:	08005585 	.word	0x08005585
 8005470:	08005607 	.word	0x08005607
 8005474:	08005607 	.word	0x08005607
 8005478:	08005607 	.word	0x08005607
 800547c:	080055c5 	.word	0x080055c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fa40 	bl	800590c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0208 	orr.w	r2, r2, #8
 800549a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0204 	bic.w	r2, r2, #4
 80054aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	619a      	str	r2, [r3, #24]
      break;
 80054be:	e0a5      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa92 	bl	80059f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	619a      	str	r2, [r3, #24]
      break;
 8005500:	e084      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fae9 	bl	8005ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0208 	orr.w	r2, r2, #8
 800551c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0204 	bic.w	r2, r2, #4
 800552c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69d9      	ldr	r1, [r3, #28]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
      break;
 8005540:	e064      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fb3f 	bl	8005bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	021a      	lsls	r2, r3, #8
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	61da      	str	r2, [r3, #28]
      break;
 8005582:	e043      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fb76 	bl	8005c7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0208 	orr.w	r2, r2, #8
 800559e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0204 	bic.w	r2, r2, #4
 80055ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055c2:	e023      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fba8 	bl	8005d20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005604:	e002      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop

08005620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_TIM_ConfigClockSource+0x1c>
 8005638:	2302      	movs	r3, #2
 800563a:	e0b4      	b.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	4b56      	ldr	r3, [pc, #344]	@ (80057b0 <HAL_TIM_ConfigClockSource+0x190>)
 8005658:	4013      	ands	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005674:	d03e      	beq.n	80056f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567a:	f200 8087 	bhi.w	800578c <HAL_TIM_ConfigClockSource+0x16c>
 800567e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005682:	f000 8086 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x172>
 8005686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568a:	d87f      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 800568c:	2b70      	cmp	r3, #112	@ 0x70
 800568e:	d01a      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005690:	2b70      	cmp	r3, #112	@ 0x70
 8005692:	d87b      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 8005694:	2b60      	cmp	r3, #96	@ 0x60
 8005696:	d050      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x11a>
 8005698:	2b60      	cmp	r3, #96	@ 0x60
 800569a:	d877      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 800569c:	2b50      	cmp	r3, #80	@ 0x50
 800569e:	d03c      	beq.n	800571a <HAL_TIM_ConfigClockSource+0xfa>
 80056a0:	2b50      	cmp	r3, #80	@ 0x50
 80056a2:	d873      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b40      	cmp	r3, #64	@ 0x40
 80056a6:	d058      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x13a>
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	d86f      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b30      	cmp	r3, #48	@ 0x30
 80056ae:	d064      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15a>
 80056b0:	2b30      	cmp	r3, #48	@ 0x30
 80056b2:	d86b      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d060      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15a>
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d867      	bhi.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05c      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15a>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d05a      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x15a>
 80056c4:	e062      	b.n	800578c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056d6:	f000 fd1b 	bl	8006110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	609a      	str	r2, [r3, #8]
      break;
 80056f2:	e04f      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005704:	f000 fd04 	bl	8006110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005716:	609a      	str	r2, [r3, #8]
      break;
 8005718:	e03c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fbc2 	bl	8005eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2150      	movs	r1, #80	@ 0x50
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fcd1 	bl	80060da <TIM_ITRx_SetConfig>
      break;
 8005738:	e02c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005746:	461a      	mov	r2, r3
 8005748:	f000 fc1e 	bl	8005f88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2160      	movs	r1, #96	@ 0x60
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fcc1 	bl	80060da <TIM_ITRx_SetConfig>
      break;
 8005758:	e01c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005766:	461a      	mov	r2, r3
 8005768:	f000 fba2 	bl	8005eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2140      	movs	r1, #64	@ 0x40
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fcb1 	bl	80060da <TIM_ITRx_SetConfig>
      break;
 8005778:	e00c      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f000 fca8 	bl	80060da <TIM_ITRx_SetConfig>
      break;
 800578a:	e003      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e000      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	fffeff88 	.word	0xfffeff88

080057b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a46      	ldr	r2, [pc, #280]	@ (80058e0 <TIM_Base_SetConfig+0x12c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d013      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d2:	d00f      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a43      	ldr	r2, [pc, #268]	@ (80058e4 <TIM_Base_SetConfig+0x130>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a42      	ldr	r2, [pc, #264]	@ (80058e8 <TIM_Base_SetConfig+0x134>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a41      	ldr	r2, [pc, #260]	@ (80058ec <TIM_Base_SetConfig+0x138>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a40      	ldr	r2, [pc, #256]	@ (80058f0 <TIM_Base_SetConfig+0x13c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a35      	ldr	r2, [pc, #212]	@ (80058e0 <TIM_Base_SetConfig+0x12c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d02b      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005814:	d027      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a32      	ldr	r2, [pc, #200]	@ (80058e4 <TIM_Base_SetConfig+0x130>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d023      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a31      	ldr	r2, [pc, #196]	@ (80058e8 <TIM_Base_SetConfig+0x134>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a30      	ldr	r2, [pc, #192]	@ (80058ec <TIM_Base_SetConfig+0x138>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d01b      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2f      	ldr	r2, [pc, #188]	@ (80058f0 <TIM_Base_SetConfig+0x13c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d017      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2e      	ldr	r2, [pc, #184]	@ (80058f4 <TIM_Base_SetConfig+0x140>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <TIM_Base_SetConfig+0x144>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00f      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <TIM_Base_SetConfig+0x148>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00b      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2b      	ldr	r2, [pc, #172]	@ (8005900 <TIM_Base_SetConfig+0x14c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2a      	ldr	r2, [pc, #168]	@ (8005904 <TIM_Base_SetConfig+0x150>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a29      	ldr	r2, [pc, #164]	@ (8005908 <TIM_Base_SetConfig+0x154>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d108      	bne.n	8005878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a10      	ldr	r2, [pc, #64]	@ (80058e0 <TIM_Base_SetConfig+0x12c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_Base_SetConfig+0xf8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a12      	ldr	r2, [pc, #72]	@ (80058f0 <TIM_Base_SetConfig+0x13c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d103      	bne.n	80058b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f023 0201 	bic.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	611a      	str	r2, [r3, #16]
  }
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40010400 	.word	0x40010400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800
 8005900:	40001800 	.word	0x40001800
 8005904:	40001c00 	.word	0x40001c00
 8005908:	40002000 	.word	0x40002000

0800590c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f023 0201 	bic.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4b2b      	ldr	r3, [pc, #172]	@ (80059e4 <TIM_OC1_SetConfig+0xd8>)
 8005938:	4013      	ands	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0302 	bic.w	r3, r3, #2
 8005954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a21      	ldr	r2, [pc, #132]	@ (80059e8 <TIM_OC1_SetConfig+0xdc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_OC1_SetConfig+0x64>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a20      	ldr	r2, [pc, #128]	@ (80059ec <TIM_OC1_SetConfig+0xe0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10c      	bne.n	800598a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0308 	bic.w	r3, r3, #8
 8005976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <TIM_OC1_SetConfig+0xdc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_OC1_SetConfig+0x8e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <TIM_OC1_SetConfig+0xe0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d111      	bne.n	80059be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	fffeff8f 	.word	0xfffeff8f
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400

080059f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f023 0210 	bic.w	r2, r3, #16
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8005ad4 <TIM_OC2_SetConfig+0xe4>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0320 	bic.w	r3, r3, #32
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a23      	ldr	r2, [pc, #140]	@ (8005ad8 <TIM_OC2_SetConfig+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_OC2_SetConfig+0x68>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a22      	ldr	r2, [pc, #136]	@ (8005adc <TIM_OC2_SetConfig+0xec>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d10d      	bne.n	8005a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a18      	ldr	r2, [pc, #96]	@ (8005ad8 <TIM_OC2_SetConfig+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC2_SetConfig+0x94>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a17      	ldr	r2, [pc, #92]	@ (8005adc <TIM_OC2_SetConfig+0xec>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d113      	bne.n	8005aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	feff8fff 	.word	0xfeff8fff
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40010400 	.word	0x40010400

08005ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc0 <TIM_OC3_SetConfig+0xe0>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a22      	ldr	r2, [pc, #136]	@ (8005bc4 <TIM_OC3_SetConfig+0xe4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0x66>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <TIM_OC3_SetConfig+0xe8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10d      	bne.n	8005b62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <TIM_OC3_SetConfig+0xe4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_OC3_SetConfig+0x92>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a16      	ldr	r2, [pc, #88]	@ (8005bc8 <TIM_OC3_SetConfig+0xe8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d113      	bne.n	8005b9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	621a      	str	r2, [r3, #32]
}
 8005bb4:	bf00      	nop
 8005bb6:	371c      	adds	r7, #28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	fffeff8f 	.word	0xfffeff8f
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010400 	.word	0x40010400

08005bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c70 <TIM_OC4_SetConfig+0xa4>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	031b      	lsls	r3, r3, #12
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <TIM_OC4_SetConfig+0xa8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC4_SetConfig+0x68>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	@ (8005c78 <TIM_OC4_SetConfig+0xac>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d109      	bne.n	8005c48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	019b      	lsls	r3, r3, #6
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	feff8fff 	.word	0xfeff8fff
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d14 <TIM_OC5_SetConfig+0x98>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a12      	ldr	r2, [pc, #72]	@ (8005d18 <TIM_OC5_SetConfig+0x9c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC5_SetConfig+0x5e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a11      	ldr	r2, [pc, #68]	@ (8005d1c <TIM_OC5_SetConfig+0xa0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d109      	bne.n	8005cee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	fffeff8f 	.word	0xfffeff8f
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40010400 	.word	0x40010400

08005d20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dbc <TIM_OC6_SetConfig+0x9c>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a13      	ldr	r2, [pc, #76]	@ (8005dc0 <TIM_OC6_SetConfig+0xa0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC6_SetConfig+0x60>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a12      	ldr	r2, [pc, #72]	@ (8005dc4 <TIM_OC6_SetConfig+0xa4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d109      	bne.n	8005d94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	feff8fff 	.word	0xfeff8fff
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40010400 	.word	0x40010400

08005dc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f023 0201 	bic.w	r2, r3, #1
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a28      	ldr	r2, [pc, #160]	@ (8005e94 <TIM_TI1_SetConfig+0xcc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01b      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfc:	d017      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a25      	ldr	r2, [pc, #148]	@ (8005e98 <TIM_TI1_SetConfig+0xd0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a24      	ldr	r2, [pc, #144]	@ (8005e9c <TIM_TI1_SetConfig+0xd4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00f      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a23      	ldr	r2, [pc, #140]	@ (8005ea0 <TIM_TI1_SetConfig+0xd8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a22      	ldr	r2, [pc, #136]	@ (8005ea4 <TIM_TI1_SetConfig+0xdc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a21      	ldr	r2, [pc, #132]	@ (8005ea8 <TIM_TI1_SetConfig+0xe0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_TI1_SetConfig+0x66>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a20      	ldr	r2, [pc, #128]	@ (8005eac <TIM_TI1_SetConfig+0xe4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d101      	bne.n	8005e32 <TIM_TI1_SetConfig+0x6a>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <TIM_TI1_SetConfig+0x6c>
 8005e32:	2300      	movs	r3, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e003      	b.n	8005e52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f023 030a 	bic.w	r3, r3, #10
 8005e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f003 030a 	and.w	r3, r3, #10
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40000c00 	.word	0x40000c00
 8005ea4:	40010400 	.word	0x40010400
 8005ea8:	40014000 	.word	0x40014000
 8005eac:	40001800 	.word	0x40001800

08005eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0201 	bic.w	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 030a 	bic.w	r3, r3, #10
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b087      	sub	sp, #28
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0210 	bic.w	r2, r3, #16
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	621a      	str	r2, [r3, #32]
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0210 	bic.w	r2, r3, #16
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	031b      	lsls	r3, r3, #12
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f023 0303 	bic.w	r3, r3, #3
 8006014:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006024:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	b2db      	uxtb	r3, r3
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006038:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800609e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	031b      	lsls	r3, r3, #12
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	031b      	lsls	r3, r3, #12
 80060b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f043 0307 	orr.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800612a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	431a      	orrs	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	609a      	str	r2, [r3, #8]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e06d      	b.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a30      	ldr	r2, [pc, #192]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2f      	ldr	r2, [pc, #188]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d108      	bne.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a20      	ldr	r2, [pc, #128]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d022      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061da:	d01d      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a15      	ldr	r2, [pc, #84]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a15      	ldr	r2, [pc, #84]	@ (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10c      	bne.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800621e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40014000 	.word	0x40014000
 8006268:	40001800 	.word	0x40001800

0800626c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006284:	2302      	movs	r3, #2
 8006286:	e065      	b.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a14      	ldr	r2, [pc, #80]	@ (8006364 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d115      	bne.n	8006342 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	051b      	lsls	r3, r3, #20
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40010000 	.word	0x40010000
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e040      	b.n	80063fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fb fe62 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2224      	movs	r2, #36	@ 0x24
 8006394:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa8c 	bl	80068cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f825 	bl	8006404 <UART_SetConfig>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e01b      	b.n	80063fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fb0b 	bl	8006a10 <UART_CheckIdleState>
 80063fa:	4603      	mov	r3, r0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4ba6      	ldr	r3, [pc, #664]	@ (80066c8 <UART_SetConfig+0x2c4>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	6979      	ldr	r1, [r7, #20]
 8006438:	430b      	orrs	r3, r1
 800643a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a94      	ldr	r2, [pc, #592]	@ (80066cc <UART_SetConfig+0x2c8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d120      	bne.n	80064c2 <UART_SetConfig+0xbe>
 8006480:	4b93      	ldr	r3, [pc, #588]	@ (80066d0 <UART_SetConfig+0x2cc>)
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	2b03      	cmp	r3, #3
 800648c:	d816      	bhi.n	80064bc <UART_SetConfig+0xb8>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0x90>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064b1 	.word	0x080064b1
 800649c:	080064ab 	.word	0x080064ab
 80064a0:	080064b7 	.word	0x080064b7
 80064a4:	2301      	movs	r3, #1
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e150      	b.n	800674c <UART_SetConfig+0x348>
 80064aa:	2302      	movs	r3, #2
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e14d      	b.n	800674c <UART_SetConfig+0x348>
 80064b0:	2304      	movs	r3, #4
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e14a      	b.n	800674c <UART_SetConfig+0x348>
 80064b6:	2308      	movs	r3, #8
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e147      	b.n	800674c <UART_SetConfig+0x348>
 80064bc:	2310      	movs	r3, #16
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e144      	b.n	800674c <UART_SetConfig+0x348>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a83      	ldr	r2, [pc, #524]	@ (80066d4 <UART_SetConfig+0x2d0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d132      	bne.n	8006532 <UART_SetConfig+0x12e>
 80064cc:	4b80      	ldr	r3, [pc, #512]	@ (80066d0 <UART_SetConfig+0x2cc>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	2b0c      	cmp	r3, #12
 80064d8:	d828      	bhi.n	800652c <UART_SetConfig+0x128>
 80064da:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <UART_SetConfig+0xdc>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006515 	.word	0x08006515
 80064e4:	0800652d 	.word	0x0800652d
 80064e8:	0800652d 	.word	0x0800652d
 80064ec:	0800652d 	.word	0x0800652d
 80064f0:	08006521 	.word	0x08006521
 80064f4:	0800652d 	.word	0x0800652d
 80064f8:	0800652d 	.word	0x0800652d
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	0800651b 	.word	0x0800651b
 8006504:	0800652d 	.word	0x0800652d
 8006508:	0800652d 	.word	0x0800652d
 800650c:	0800652d 	.word	0x0800652d
 8006510:	08006527 	.word	0x08006527
 8006514:	2300      	movs	r3, #0
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e118      	b.n	800674c <UART_SetConfig+0x348>
 800651a:	2302      	movs	r3, #2
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e115      	b.n	800674c <UART_SetConfig+0x348>
 8006520:	2304      	movs	r3, #4
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e112      	b.n	800674c <UART_SetConfig+0x348>
 8006526:	2308      	movs	r3, #8
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e10f      	b.n	800674c <UART_SetConfig+0x348>
 800652c:	2310      	movs	r3, #16
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e10c      	b.n	800674c <UART_SetConfig+0x348>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a68      	ldr	r2, [pc, #416]	@ (80066d8 <UART_SetConfig+0x2d4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d120      	bne.n	800657e <UART_SetConfig+0x17a>
 800653c:	4b64      	ldr	r3, [pc, #400]	@ (80066d0 <UART_SetConfig+0x2cc>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006542:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006546:	2b30      	cmp	r3, #48	@ 0x30
 8006548:	d013      	beq.n	8006572 <UART_SetConfig+0x16e>
 800654a:	2b30      	cmp	r3, #48	@ 0x30
 800654c:	d814      	bhi.n	8006578 <UART_SetConfig+0x174>
 800654e:	2b20      	cmp	r3, #32
 8006550:	d009      	beq.n	8006566 <UART_SetConfig+0x162>
 8006552:	2b20      	cmp	r3, #32
 8006554:	d810      	bhi.n	8006578 <UART_SetConfig+0x174>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <UART_SetConfig+0x15c>
 800655a:	2b10      	cmp	r3, #16
 800655c:	d006      	beq.n	800656c <UART_SetConfig+0x168>
 800655e:	e00b      	b.n	8006578 <UART_SetConfig+0x174>
 8006560:	2300      	movs	r3, #0
 8006562:	77fb      	strb	r3, [r7, #31]
 8006564:	e0f2      	b.n	800674c <UART_SetConfig+0x348>
 8006566:	2302      	movs	r3, #2
 8006568:	77fb      	strb	r3, [r7, #31]
 800656a:	e0ef      	b.n	800674c <UART_SetConfig+0x348>
 800656c:	2304      	movs	r3, #4
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e0ec      	b.n	800674c <UART_SetConfig+0x348>
 8006572:	2308      	movs	r3, #8
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e0e9      	b.n	800674c <UART_SetConfig+0x348>
 8006578:	2310      	movs	r3, #16
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e0e6      	b.n	800674c <UART_SetConfig+0x348>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a56      	ldr	r2, [pc, #344]	@ (80066dc <UART_SetConfig+0x2d8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d120      	bne.n	80065ca <UART_SetConfig+0x1c6>
 8006588:	4b51      	ldr	r3, [pc, #324]	@ (80066d0 <UART_SetConfig+0x2cc>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006592:	2bc0      	cmp	r3, #192	@ 0xc0
 8006594:	d013      	beq.n	80065be <UART_SetConfig+0x1ba>
 8006596:	2bc0      	cmp	r3, #192	@ 0xc0
 8006598:	d814      	bhi.n	80065c4 <UART_SetConfig+0x1c0>
 800659a:	2b80      	cmp	r3, #128	@ 0x80
 800659c:	d009      	beq.n	80065b2 <UART_SetConfig+0x1ae>
 800659e:	2b80      	cmp	r3, #128	@ 0x80
 80065a0:	d810      	bhi.n	80065c4 <UART_SetConfig+0x1c0>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <UART_SetConfig+0x1a8>
 80065a6:	2b40      	cmp	r3, #64	@ 0x40
 80065a8:	d006      	beq.n	80065b8 <UART_SetConfig+0x1b4>
 80065aa:	e00b      	b.n	80065c4 <UART_SetConfig+0x1c0>
 80065ac:	2300      	movs	r3, #0
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e0cc      	b.n	800674c <UART_SetConfig+0x348>
 80065b2:	2302      	movs	r3, #2
 80065b4:	77fb      	strb	r3, [r7, #31]
 80065b6:	e0c9      	b.n	800674c <UART_SetConfig+0x348>
 80065b8:	2304      	movs	r3, #4
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	e0c6      	b.n	800674c <UART_SetConfig+0x348>
 80065be:	2308      	movs	r3, #8
 80065c0:	77fb      	strb	r3, [r7, #31]
 80065c2:	e0c3      	b.n	800674c <UART_SetConfig+0x348>
 80065c4:	2310      	movs	r3, #16
 80065c6:	77fb      	strb	r3, [r7, #31]
 80065c8:	e0c0      	b.n	800674c <UART_SetConfig+0x348>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a44      	ldr	r2, [pc, #272]	@ (80066e0 <UART_SetConfig+0x2dc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d125      	bne.n	8006620 <UART_SetConfig+0x21c>
 80065d4:	4b3e      	ldr	r3, [pc, #248]	@ (80066d0 <UART_SetConfig+0x2cc>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e2:	d017      	beq.n	8006614 <UART_SetConfig+0x210>
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e8:	d817      	bhi.n	800661a <UART_SetConfig+0x216>
 80065ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ee:	d00b      	beq.n	8006608 <UART_SetConfig+0x204>
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065f4:	d811      	bhi.n	800661a <UART_SetConfig+0x216>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <UART_SetConfig+0x1fe>
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065fe:	d006      	beq.n	800660e <UART_SetConfig+0x20a>
 8006600:	e00b      	b.n	800661a <UART_SetConfig+0x216>
 8006602:	2300      	movs	r3, #0
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e0a1      	b.n	800674c <UART_SetConfig+0x348>
 8006608:	2302      	movs	r3, #2
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e09e      	b.n	800674c <UART_SetConfig+0x348>
 800660e:	2304      	movs	r3, #4
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e09b      	b.n	800674c <UART_SetConfig+0x348>
 8006614:	2308      	movs	r3, #8
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e098      	b.n	800674c <UART_SetConfig+0x348>
 800661a:	2310      	movs	r3, #16
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e095      	b.n	800674c <UART_SetConfig+0x348>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2f      	ldr	r2, [pc, #188]	@ (80066e4 <UART_SetConfig+0x2e0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d125      	bne.n	8006676 <UART_SetConfig+0x272>
 800662a:	4b29      	ldr	r3, [pc, #164]	@ (80066d0 <UART_SetConfig+0x2cc>)
 800662c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006630:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006634:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006638:	d017      	beq.n	800666a <UART_SetConfig+0x266>
 800663a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800663e:	d817      	bhi.n	8006670 <UART_SetConfig+0x26c>
 8006640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006644:	d00b      	beq.n	800665e <UART_SetConfig+0x25a>
 8006646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800664a:	d811      	bhi.n	8006670 <UART_SetConfig+0x26c>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <UART_SetConfig+0x254>
 8006650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006654:	d006      	beq.n	8006664 <UART_SetConfig+0x260>
 8006656:	e00b      	b.n	8006670 <UART_SetConfig+0x26c>
 8006658:	2301      	movs	r3, #1
 800665a:	77fb      	strb	r3, [r7, #31]
 800665c:	e076      	b.n	800674c <UART_SetConfig+0x348>
 800665e:	2302      	movs	r3, #2
 8006660:	77fb      	strb	r3, [r7, #31]
 8006662:	e073      	b.n	800674c <UART_SetConfig+0x348>
 8006664:	2304      	movs	r3, #4
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e070      	b.n	800674c <UART_SetConfig+0x348>
 800666a:	2308      	movs	r3, #8
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e06d      	b.n	800674c <UART_SetConfig+0x348>
 8006670:	2310      	movs	r3, #16
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e06a      	b.n	800674c <UART_SetConfig+0x348>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1b      	ldr	r2, [pc, #108]	@ (80066e8 <UART_SetConfig+0x2e4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d138      	bne.n	80066f2 <UART_SetConfig+0x2ee>
 8006680:	4b13      	ldr	r3, [pc, #76]	@ (80066d0 <UART_SetConfig+0x2cc>)
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800668a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800668e:	d017      	beq.n	80066c0 <UART_SetConfig+0x2bc>
 8006690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006694:	d82a      	bhi.n	80066ec <UART_SetConfig+0x2e8>
 8006696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800669a:	d00b      	beq.n	80066b4 <UART_SetConfig+0x2b0>
 800669c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066a0:	d824      	bhi.n	80066ec <UART_SetConfig+0x2e8>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <UART_SetConfig+0x2aa>
 80066a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066aa:	d006      	beq.n	80066ba <UART_SetConfig+0x2b6>
 80066ac:	e01e      	b.n	80066ec <UART_SetConfig+0x2e8>
 80066ae:	2300      	movs	r3, #0
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e04b      	b.n	800674c <UART_SetConfig+0x348>
 80066b4:	2302      	movs	r3, #2
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e048      	b.n	800674c <UART_SetConfig+0x348>
 80066ba:	2304      	movs	r3, #4
 80066bc:	77fb      	strb	r3, [r7, #31]
 80066be:	e045      	b.n	800674c <UART_SetConfig+0x348>
 80066c0:	2308      	movs	r3, #8
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e042      	b.n	800674c <UART_SetConfig+0x348>
 80066c6:	bf00      	nop
 80066c8:	efff69f3 	.word	0xefff69f3
 80066cc:	40011000 	.word	0x40011000
 80066d0:	40023800 	.word	0x40023800
 80066d4:	40004400 	.word	0x40004400
 80066d8:	40004800 	.word	0x40004800
 80066dc:	40004c00 	.word	0x40004c00
 80066e0:	40005000 	.word	0x40005000
 80066e4:	40011400 	.word	0x40011400
 80066e8:	40007800 	.word	0x40007800
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e02c      	b.n	800674c <UART_SetConfig+0x348>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a72      	ldr	r2, [pc, #456]	@ (80068c0 <UART_SetConfig+0x4bc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d125      	bne.n	8006748 <UART_SetConfig+0x344>
 80066fc:	4b71      	ldr	r3, [pc, #452]	@ (80068c4 <UART_SetConfig+0x4c0>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006702:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006706:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800670a:	d017      	beq.n	800673c <UART_SetConfig+0x338>
 800670c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006710:	d817      	bhi.n	8006742 <UART_SetConfig+0x33e>
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006716:	d00b      	beq.n	8006730 <UART_SetConfig+0x32c>
 8006718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800671c:	d811      	bhi.n	8006742 <UART_SetConfig+0x33e>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <UART_SetConfig+0x326>
 8006722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006726:	d006      	beq.n	8006736 <UART_SetConfig+0x332>
 8006728:	e00b      	b.n	8006742 <UART_SetConfig+0x33e>
 800672a:	2300      	movs	r3, #0
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e00d      	b.n	800674c <UART_SetConfig+0x348>
 8006730:	2302      	movs	r3, #2
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e00a      	b.n	800674c <UART_SetConfig+0x348>
 8006736:	2304      	movs	r3, #4
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e007      	b.n	800674c <UART_SetConfig+0x348>
 800673c:	2308      	movs	r3, #8
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e004      	b.n	800674c <UART_SetConfig+0x348>
 8006742:	2310      	movs	r3, #16
 8006744:	77fb      	strb	r3, [r7, #31]
 8006746:	e001      	b.n	800674c <UART_SetConfig+0x348>
 8006748:	2310      	movs	r3, #16
 800674a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006754:	d15b      	bne.n	800680e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006756:	7ffb      	ldrb	r3, [r7, #31]
 8006758:	2b08      	cmp	r3, #8
 800675a:	d828      	bhi.n	80067ae <UART_SetConfig+0x3aa>
 800675c:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <UART_SetConfig+0x360>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006789 	.word	0x08006789
 8006768:	08006791 	.word	0x08006791
 800676c:	08006799 	.word	0x08006799
 8006770:	080067af 	.word	0x080067af
 8006774:	0800679f 	.word	0x0800679f
 8006778:	080067af 	.word	0x080067af
 800677c:	080067af 	.word	0x080067af
 8006780:	080067af 	.word	0x080067af
 8006784:	080067a7 	.word	0x080067a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006788:	f7fd feea 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 800678c:	61b8      	str	r0, [r7, #24]
        break;
 800678e:	e013      	b.n	80067b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006790:	f7fd fefa 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 8006794:	61b8      	str	r0, [r7, #24]
        break;
 8006796:	e00f      	b.n	80067b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006798:	4b4b      	ldr	r3, [pc, #300]	@ (80068c8 <UART_SetConfig+0x4c4>)
 800679a:	61bb      	str	r3, [r7, #24]
        break;
 800679c:	e00c      	b.n	80067b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800679e:	f7fd fdcd 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80067a2:	61b8      	str	r0, [r7, #24]
        break;
 80067a4:	e008      	b.n	80067b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067aa:	61bb      	str	r3, [r7, #24]
        break;
 80067ac:	e004      	b.n	80067b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	77bb      	strb	r3, [r7, #30]
        break;
 80067b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d074      	beq.n	80068a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	005a      	lsls	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	441a      	add	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d916      	bls.n	8006808 <UART_SetConfig+0x404>
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e0:	d212      	bcs.n	8006808 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f023 030f 	bic.w	r3, r3, #15
 80067ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	89fb      	ldrh	r3, [r7, #14]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	89fa      	ldrh	r2, [r7, #14]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e04f      	b.n	80068a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	77bb      	strb	r3, [r7, #30]
 800680c:	e04c      	b.n	80068a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d828      	bhi.n	8006866 <UART_SetConfig+0x462>
 8006814:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <UART_SetConfig+0x418>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	08006867 	.word	0x08006867
 800682c:	08006857 	.word	0x08006857
 8006830:	08006867 	.word	0x08006867
 8006834:	08006867 	.word	0x08006867
 8006838:	08006867 	.word	0x08006867
 800683c:	0800685f 	.word	0x0800685f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fd fe8e 	bl	8004560 <HAL_RCC_GetPCLK1Freq>
 8006844:	61b8      	str	r0, [r7, #24]
        break;
 8006846:	e013      	b.n	8006870 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006848:	f7fd fe9e 	bl	8004588 <HAL_RCC_GetPCLK2Freq>
 800684c:	61b8      	str	r0, [r7, #24]
        break;
 800684e:	e00f      	b.n	8006870 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006850:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <UART_SetConfig+0x4c4>)
 8006852:	61bb      	str	r3, [r7, #24]
        break;
 8006854:	e00c      	b.n	8006870 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006856:	f7fd fd71 	bl	800433c <HAL_RCC_GetSysClockFreq>
 800685a:	61b8      	str	r0, [r7, #24]
        break;
 800685c:	e008      	b.n	8006870 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006862:	61bb      	str	r3, [r7, #24]
        break;
 8006864:	e004      	b.n	8006870 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	77bb      	strb	r3, [r7, #30]
        break;
 800686e:	bf00      	nop
    }

    if (pclk != 0U)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d018      	beq.n	80068a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085a      	lsrs	r2, r3, #1
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	441a      	add	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	fbb2 f3f3 	udiv	r3, r2, r3
 8006888:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b0f      	cmp	r3, #15
 800688e:	d909      	bls.n	80068a4 <UART_SetConfig+0x4a0>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006896:	d205      	bcs.n	80068a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e001      	b.n	80068a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40007c00 	.word	0x40007c00
 80068c4:	40023800 	.word	0x40023800
 80068c8:	00f42400 	.word	0x00f42400

080068cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01a      	beq.n	80069e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d10a      	bne.n	80069e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b098      	sub	sp, #96	@ 0x60
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a20:	f7fb fe0e 	bl	8002640 <HAL_GetTick>
 8006a24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d12e      	bne.n	8006a92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f88c 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d021      	beq.n	8006a92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e6      	bne.n	8006a4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e062      	b.n	8006b58 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d149      	bne.n	8006b34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f856 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d03c      	beq.n	8006b34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0301 	bic.w	r3, r3, #1
 8006b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b0c:	61fa      	str	r2, [r7, #28]
 8006b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	69b9      	ldr	r1, [r7, #24]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e011      	b.n	8006b58 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3758      	adds	r7, #88	@ 0x58
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b70:	e04f      	b.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d04b      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7a:	f7fb fd61 	bl	8002640 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e04e      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d037      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b80      	cmp	r3, #128	@ 0x80
 8006ba6:	d034      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b40      	cmp	r3, #64	@ 0x40
 8006bac:	d031      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d110      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f838 	bl	8006c3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e029      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bec:	d111      	bne.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f81e 	bl	8006c3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e00f      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d0a0      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b095      	sub	sp, #84	@ 0x54
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3308      	adds	r3, #8
 8006c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d118      	bne.n	8006ce2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 0310 	bic.w	r3, r3, #16
 8006cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	613b      	str	r3, [r7, #16]
   return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e6      	bne.n	8006cb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cf6:	bf00      	nop
 8006cf8:	3754      	adds	r7, #84	@ 0x54
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <std>:
 8006d04:	2300      	movs	r3, #0
 8006d06:	b510      	push	{r4, lr}
 8006d08:	4604      	mov	r4, r0
 8006d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d12:	6083      	str	r3, [r0, #8]
 8006d14:	8181      	strh	r1, [r0, #12]
 8006d16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d18:	81c2      	strh	r2, [r0, #14]
 8006d1a:	6183      	str	r3, [r0, #24]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	2208      	movs	r2, #8
 8006d20:	305c      	adds	r0, #92	@ 0x5c
 8006d22:	f000 f9f9 	bl	8007118 <memset>
 8006d26:	4b0d      	ldr	r3, [pc, #52]	@ (8006d5c <std+0x58>)
 8006d28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <std+0x5c>)
 8006d2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x60>)
 8006d30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x64>)
 8006d34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x68>)
 8006d38:	6224      	str	r4, [r4, #32]
 8006d3a:	429c      	cmp	r4, r3
 8006d3c:	d006      	beq.n	8006d4c <std+0x48>
 8006d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d42:	4294      	cmp	r4, r2
 8006d44:	d002      	beq.n	8006d4c <std+0x48>
 8006d46:	33d0      	adds	r3, #208	@ 0xd0
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	d105      	bne.n	8006d58 <std+0x54>
 8006d4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d54:	f000 ba58 	b.w	8007208 <__retarget_lock_init_recursive>
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	bf00      	nop
 8006d5c:	08006f69 	.word	0x08006f69
 8006d60:	08006f8b 	.word	0x08006f8b
 8006d64:	08006fc3 	.word	0x08006fc3
 8006d68:	08006fe7 	.word	0x08006fe7
 8006d6c:	2000069c 	.word	0x2000069c

08006d70 <stdio_exit_handler>:
 8006d70:	4a02      	ldr	r2, [pc, #8]	@ (8006d7c <stdio_exit_handler+0xc>)
 8006d72:	4903      	ldr	r1, [pc, #12]	@ (8006d80 <stdio_exit_handler+0x10>)
 8006d74:	4803      	ldr	r0, [pc, #12]	@ (8006d84 <stdio_exit_handler+0x14>)
 8006d76:	f000 b869 	b.w	8006e4c <_fwalk_sglue>
 8006d7a:	bf00      	nop
 8006d7c:	2000000c 	.word	0x2000000c
 8006d80:	08007aa5 	.word	0x08007aa5
 8006d84:	2000001c 	.word	0x2000001c

08006d88 <cleanup_stdio>:
 8006d88:	6841      	ldr	r1, [r0, #4]
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <cleanup_stdio+0x34>)
 8006d8c:	4299      	cmp	r1, r3
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	4604      	mov	r4, r0
 8006d92:	d001      	beq.n	8006d98 <cleanup_stdio+0x10>
 8006d94:	f000 fe86 	bl	8007aa4 <_fflush_r>
 8006d98:	68a1      	ldr	r1, [r4, #8]
 8006d9a:	4b09      	ldr	r3, [pc, #36]	@ (8006dc0 <cleanup_stdio+0x38>)
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	d002      	beq.n	8006da6 <cleanup_stdio+0x1e>
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fe7f 	bl	8007aa4 <_fflush_r>
 8006da6:	68e1      	ldr	r1, [r4, #12]
 8006da8:	4b06      	ldr	r3, [pc, #24]	@ (8006dc4 <cleanup_stdio+0x3c>)
 8006daa:	4299      	cmp	r1, r3
 8006dac:	d004      	beq.n	8006db8 <cleanup_stdio+0x30>
 8006dae:	4620      	mov	r0, r4
 8006db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db4:	f000 be76 	b.w	8007aa4 <_fflush_r>
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	bf00      	nop
 8006dbc:	2000069c 	.word	0x2000069c
 8006dc0:	20000704 	.word	0x20000704
 8006dc4:	2000076c 	.word	0x2000076c

08006dc8 <global_stdio_init.part.0>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	4b0b      	ldr	r3, [pc, #44]	@ (8006df8 <global_stdio_init.part.0+0x30>)
 8006dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8006dfc <global_stdio_init.part.0+0x34>)
 8006dce:	4a0c      	ldr	r2, [pc, #48]	@ (8006e00 <global_stdio_init.part.0+0x38>)
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	f7ff ff94 	bl	8006d04 <std>
 8006ddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de0:	2201      	movs	r2, #1
 8006de2:	2109      	movs	r1, #9
 8006de4:	f7ff ff8e 	bl	8006d04 <std>
 8006de8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dec:	2202      	movs	r2, #2
 8006dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df2:	2112      	movs	r1, #18
 8006df4:	f7ff bf86 	b.w	8006d04 <std>
 8006df8:	200007d4 	.word	0x200007d4
 8006dfc:	2000069c 	.word	0x2000069c
 8006e00:	08006d71 	.word	0x08006d71

08006e04 <__sfp_lock_acquire>:
 8006e04:	4801      	ldr	r0, [pc, #4]	@ (8006e0c <__sfp_lock_acquire+0x8>)
 8006e06:	f000 ba00 	b.w	800720a <__retarget_lock_acquire_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	200007dd 	.word	0x200007dd

08006e10 <__sfp_lock_release>:
 8006e10:	4801      	ldr	r0, [pc, #4]	@ (8006e18 <__sfp_lock_release+0x8>)
 8006e12:	f000 b9fb 	b.w	800720c <__retarget_lock_release_recursive>
 8006e16:	bf00      	nop
 8006e18:	200007dd 	.word	0x200007dd

08006e1c <__sinit>:
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	4604      	mov	r4, r0
 8006e20:	f7ff fff0 	bl	8006e04 <__sfp_lock_acquire>
 8006e24:	6a23      	ldr	r3, [r4, #32]
 8006e26:	b11b      	cbz	r3, 8006e30 <__sinit+0x14>
 8006e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e2c:	f7ff bff0 	b.w	8006e10 <__sfp_lock_release>
 8006e30:	4b04      	ldr	r3, [pc, #16]	@ (8006e44 <__sinit+0x28>)
 8006e32:	6223      	str	r3, [r4, #32]
 8006e34:	4b04      	ldr	r3, [pc, #16]	@ (8006e48 <__sinit+0x2c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1f5      	bne.n	8006e28 <__sinit+0xc>
 8006e3c:	f7ff ffc4 	bl	8006dc8 <global_stdio_init.part.0>
 8006e40:	e7f2      	b.n	8006e28 <__sinit+0xc>
 8006e42:	bf00      	nop
 8006e44:	08006d89 	.word	0x08006d89
 8006e48:	200007d4 	.word	0x200007d4

08006e4c <_fwalk_sglue>:
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	4607      	mov	r7, r0
 8006e52:	4688      	mov	r8, r1
 8006e54:	4614      	mov	r4, r2
 8006e56:	2600      	movs	r6, #0
 8006e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e60:	d505      	bpl.n	8006e6e <_fwalk_sglue+0x22>
 8006e62:	6824      	ldr	r4, [r4, #0]
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	d1f7      	bne.n	8006e58 <_fwalk_sglue+0xc>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d907      	bls.n	8006e84 <_fwalk_sglue+0x38>
 8006e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	d003      	beq.n	8006e84 <_fwalk_sglue+0x38>
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4638      	mov	r0, r7
 8006e80:	47c0      	blx	r8
 8006e82:	4306      	orrs	r6, r0
 8006e84:	3568      	adds	r5, #104	@ 0x68
 8006e86:	e7e9      	b.n	8006e5c <_fwalk_sglue+0x10>

08006e88 <iprintf>:
 8006e88:	b40f      	push	{r0, r1, r2, r3}
 8006e8a:	b507      	push	{r0, r1, r2, lr}
 8006e8c:	4906      	ldr	r1, [pc, #24]	@ (8006ea8 <iprintf+0x20>)
 8006e8e:	ab04      	add	r3, sp, #16
 8006e90:	6808      	ldr	r0, [r1, #0]
 8006e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e96:	6881      	ldr	r1, [r0, #8]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	f000 fadb 	bl	8007454 <_vfiprintf_r>
 8006e9e:	b003      	add	sp, #12
 8006ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ea4:	b004      	add	sp, #16
 8006ea6:	4770      	bx	lr
 8006ea8:	20000018 	.word	0x20000018

08006eac <_puts_r>:
 8006eac:	6a03      	ldr	r3, [r0, #32]
 8006eae:	b570      	push	{r4, r5, r6, lr}
 8006eb0:	6884      	ldr	r4, [r0, #8]
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	460e      	mov	r6, r1
 8006eb6:	b90b      	cbnz	r3, 8006ebc <_puts_r+0x10>
 8006eb8:	f7ff ffb0 	bl	8006e1c <__sinit>
 8006ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ebe:	07db      	lsls	r3, r3, #31
 8006ec0:	d405      	bmi.n	8006ece <_puts_r+0x22>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0598      	lsls	r0, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_puts_r+0x22>
 8006ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eca:	f000 f99e 	bl	800720a <__retarget_lock_acquire_recursive>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	0719      	lsls	r1, r3, #28
 8006ed2:	d502      	bpl.n	8006eda <_puts_r+0x2e>
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d135      	bne.n	8006f46 <_puts_r+0x9a>
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f8c5 	bl	800706c <__swsetup_r>
 8006ee2:	b380      	cbz	r0, 8006f46 <_puts_r+0x9a>
 8006ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eea:	07da      	lsls	r2, r3, #31
 8006eec:	d405      	bmi.n	8006efa <_puts_r+0x4e>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	d402      	bmi.n	8006efa <_puts_r+0x4e>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ef6:	f000 f989 	bl	800720c <__retarget_lock_release_recursive>
 8006efa:	4628      	mov	r0, r5
 8006efc:	bd70      	pop	{r4, r5, r6, pc}
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	da04      	bge.n	8006f0c <_puts_r+0x60>
 8006f02:	69a2      	ldr	r2, [r4, #24]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	dc17      	bgt.n	8006f38 <_puts_r+0x8c>
 8006f08:	290a      	cmp	r1, #10
 8006f0a:	d015      	beq.n	8006f38 <_puts_r+0x8c>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	6022      	str	r2, [r4, #0]
 8006f12:	7019      	strb	r1, [r3, #0]
 8006f14:	68a3      	ldr	r3, [r4, #8]
 8006f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	d1ed      	bne.n	8006efe <_puts_r+0x52>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da11      	bge.n	8006f4a <_puts_r+0x9e>
 8006f26:	4622      	mov	r2, r4
 8006f28:	210a      	movs	r1, #10
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f85f 	bl	8006fee <__swbuf_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d0d7      	beq.n	8006ee4 <_puts_r+0x38>
 8006f34:	250a      	movs	r5, #10
 8006f36:	e7d7      	b.n	8006ee8 <_puts_r+0x3c>
 8006f38:	4622      	mov	r2, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 f857 	bl	8006fee <__swbuf_r>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1e7      	bne.n	8006f14 <_puts_r+0x68>
 8006f44:	e7ce      	b.n	8006ee4 <_puts_r+0x38>
 8006f46:	3e01      	subs	r6, #1
 8006f48:	e7e4      	b.n	8006f14 <_puts_r+0x68>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	220a      	movs	r2, #10
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	e7ee      	b.n	8006f34 <_puts_r+0x88>
	...

08006f58 <puts>:
 8006f58:	4b02      	ldr	r3, [pc, #8]	@ (8006f64 <puts+0xc>)
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	f7ff bfa5 	b.w	8006eac <_puts_r>
 8006f62:	bf00      	nop
 8006f64:	20000018 	.word	0x20000018

08006f68 <__sread>:
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	f000 f8fc 	bl	800716c <_read_r>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	bfab      	itete	ge
 8006f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f7c:	181b      	addge	r3, r3, r0
 8006f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f82:	bfac      	ite	ge
 8006f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f86:	81a3      	strhlt	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__swrite>:
 8006f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	461f      	mov	r7, r3
 8006f90:	898b      	ldrh	r3, [r1, #12]
 8006f92:	05db      	lsls	r3, r3, #23
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4616      	mov	r6, r2
 8006f9a:	d505      	bpl.n	8006fa8 <__swrite+0x1e>
 8006f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f000 f8d0 	bl	8007148 <_lseek_r>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	f000 b8e7 	b.w	8007190 <_write_r>

08006fc2 <__sseek>:
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fca:	f000 f8bd 	bl	8007148 <_lseek_r>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	bf15      	itete	ne
 8006fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fde:	81a3      	strheq	r3, [r4, #12]
 8006fe0:	bf18      	it	ne
 8006fe2:	81a3      	strhne	r3, [r4, #12]
 8006fe4:	bd10      	pop	{r4, pc}

08006fe6 <__sclose>:
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 b89d 	b.w	8007128 <_close_r>

08006fee <__swbuf_r>:
 8006fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff0:	460e      	mov	r6, r1
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	b118      	cbz	r0, 8007000 <__swbuf_r+0x12>
 8006ff8:	6a03      	ldr	r3, [r0, #32]
 8006ffa:	b90b      	cbnz	r3, 8007000 <__swbuf_r+0x12>
 8006ffc:	f7ff ff0e 	bl	8006e1c <__sinit>
 8007000:	69a3      	ldr	r3, [r4, #24]
 8007002:	60a3      	str	r3, [r4, #8]
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	071a      	lsls	r2, r3, #28
 8007008:	d501      	bpl.n	800700e <__swbuf_r+0x20>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	b943      	cbnz	r3, 8007020 <__swbuf_r+0x32>
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 f82b 	bl	800706c <__swsetup_r>
 8007016:	b118      	cbz	r0, 8007020 <__swbuf_r+0x32>
 8007018:	f04f 37ff 	mov.w	r7, #4294967295
 800701c:	4638      	mov	r0, r7
 800701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	6922      	ldr	r2, [r4, #16]
 8007024:	1a98      	subs	r0, r3, r2
 8007026:	6963      	ldr	r3, [r4, #20]
 8007028:	b2f6      	uxtb	r6, r6
 800702a:	4283      	cmp	r3, r0
 800702c:	4637      	mov	r7, r6
 800702e:	dc05      	bgt.n	800703c <__swbuf_r+0x4e>
 8007030:	4621      	mov	r1, r4
 8007032:	4628      	mov	r0, r5
 8007034:	f000 fd36 	bl	8007aa4 <_fflush_r>
 8007038:	2800      	cmp	r0, #0
 800703a:	d1ed      	bne.n	8007018 <__swbuf_r+0x2a>
 800703c:	68a3      	ldr	r3, [r4, #8]
 800703e:	3b01      	subs	r3, #1
 8007040:	60a3      	str	r3, [r4, #8]
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	701e      	strb	r6, [r3, #0]
 800704a:	6962      	ldr	r2, [r4, #20]
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	429a      	cmp	r2, r3
 8007050:	d004      	beq.n	800705c <__swbuf_r+0x6e>
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	07db      	lsls	r3, r3, #31
 8007056:	d5e1      	bpl.n	800701c <__swbuf_r+0x2e>
 8007058:	2e0a      	cmp	r6, #10
 800705a:	d1df      	bne.n	800701c <__swbuf_r+0x2e>
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 fd20 	bl	8007aa4 <_fflush_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	d0d9      	beq.n	800701c <__swbuf_r+0x2e>
 8007068:	e7d6      	b.n	8007018 <__swbuf_r+0x2a>
	...

0800706c <__swsetup_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4b29      	ldr	r3, [pc, #164]	@ (8007114 <__swsetup_r+0xa8>)
 8007070:	4605      	mov	r5, r0
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	460c      	mov	r4, r1
 8007076:	b118      	cbz	r0, 8007080 <__swsetup_r+0x14>
 8007078:	6a03      	ldr	r3, [r0, #32]
 800707a:	b90b      	cbnz	r3, 8007080 <__swsetup_r+0x14>
 800707c:	f7ff fece 	bl	8006e1c <__sinit>
 8007080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007084:	0719      	lsls	r1, r3, #28
 8007086:	d422      	bmi.n	80070ce <__swsetup_r+0x62>
 8007088:	06da      	lsls	r2, r3, #27
 800708a:	d407      	bmi.n	800709c <__swsetup_r+0x30>
 800708c:	2209      	movs	r2, #9
 800708e:	602a      	str	r2, [r5, #0]
 8007090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	e033      	b.n	8007104 <__swsetup_r+0x98>
 800709c:	0758      	lsls	r0, r3, #29
 800709e:	d512      	bpl.n	80070c6 <__swsetup_r+0x5a>
 80070a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070a2:	b141      	cbz	r1, 80070b6 <__swsetup_r+0x4a>
 80070a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070a8:	4299      	cmp	r1, r3
 80070aa:	d002      	beq.n	80070b2 <__swsetup_r+0x46>
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f8af 	bl	8007210 <_free_r>
 80070b2:	2300      	movs	r3, #0
 80070b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	2300      	movs	r3, #0
 80070c0:	6063      	str	r3, [r4, #4]
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	6023      	str	r3, [r4, #0]
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f043 0308 	orr.w	r3, r3, #8
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	b94b      	cbnz	r3, 80070e6 <__swsetup_r+0x7a>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070dc:	d003      	beq.n	80070e6 <__swsetup_r+0x7a>
 80070de:	4621      	mov	r1, r4
 80070e0:	4628      	mov	r0, r5
 80070e2:	f000 fd2d 	bl	8007b40 <__smakebuf_r>
 80070e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ea:	f013 0201 	ands.w	r2, r3, #1
 80070ee:	d00a      	beq.n	8007106 <__swsetup_r+0x9a>
 80070f0:	2200      	movs	r2, #0
 80070f2:	60a2      	str	r2, [r4, #8]
 80070f4:	6962      	ldr	r2, [r4, #20]
 80070f6:	4252      	negs	r2, r2
 80070f8:	61a2      	str	r2, [r4, #24]
 80070fa:	6922      	ldr	r2, [r4, #16]
 80070fc:	b942      	cbnz	r2, 8007110 <__swsetup_r+0xa4>
 80070fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007102:	d1c5      	bne.n	8007090 <__swsetup_r+0x24>
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	0799      	lsls	r1, r3, #30
 8007108:	bf58      	it	pl
 800710a:	6962      	ldrpl	r2, [r4, #20]
 800710c:	60a2      	str	r2, [r4, #8]
 800710e:	e7f4      	b.n	80070fa <__swsetup_r+0x8e>
 8007110:	2000      	movs	r0, #0
 8007112:	e7f7      	b.n	8007104 <__swsetup_r+0x98>
 8007114:	20000018 	.word	0x20000018

08007118 <memset>:
 8007118:	4402      	add	r2, r0
 800711a:	4603      	mov	r3, r0
 800711c:	4293      	cmp	r3, r2
 800711e:	d100      	bne.n	8007122 <memset+0xa>
 8007120:	4770      	bx	lr
 8007122:	f803 1b01 	strb.w	r1, [r3], #1
 8007126:	e7f9      	b.n	800711c <memset+0x4>

08007128 <_close_r>:
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	4d06      	ldr	r5, [pc, #24]	@ (8007144 <_close_r+0x1c>)
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	4608      	mov	r0, r1
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	f7fb f98e 	bl	8002454 <_close>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_close_r+0x1a>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_close_r+0x1a>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200007d8 	.word	0x200007d8

08007148 <_lseek_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	@ (8007168 <_lseek_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7fb f9a3 	bl	80024a2 <_lseek>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_lseek_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_lseek_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	200007d8 	.word	0x200007d8

0800716c <_read_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	@ (800718c <_read_r+0x20>)
 8007170:	4604      	mov	r4, r0
 8007172:	4608      	mov	r0, r1
 8007174:	4611      	mov	r1, r2
 8007176:	2200      	movs	r2, #0
 8007178:	602a      	str	r2, [r5, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	f7fb f94d 	bl	800241a <_read>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d102      	bne.n	800718a <_read_r+0x1e>
 8007184:	682b      	ldr	r3, [r5, #0]
 8007186:	b103      	cbz	r3, 800718a <_read_r+0x1e>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd38      	pop	{r3, r4, r5, pc}
 800718c:	200007d8 	.word	0x200007d8

08007190 <_write_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d07      	ldr	r5, [pc, #28]	@ (80071b0 <_write_r+0x20>)
 8007194:	4604      	mov	r4, r0
 8007196:	4608      	mov	r0, r1
 8007198:	4611      	mov	r1, r2
 800719a:	2200      	movs	r2, #0
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7f9 fa5b 	bl	800065a <_write>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_write_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_write_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	200007d8 	.word	0x200007d8

080071b4 <__errno>:
 80071b4:	4b01      	ldr	r3, [pc, #4]	@ (80071bc <__errno+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000018 	.word	0x20000018

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4d0d      	ldr	r5, [pc, #52]	@ (80071f8 <__libc_init_array+0x38>)
 80071c4:	4c0d      	ldr	r4, [pc, #52]	@ (80071fc <__libc_init_array+0x3c>)
 80071c6:	1b64      	subs	r4, r4, r5
 80071c8:	10a4      	asrs	r4, r4, #2
 80071ca:	2600      	movs	r6, #0
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007200 <__libc_init_array+0x40>)
 80071d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007204 <__libc_init_array+0x44>)
 80071d4:	f000 fd22 	bl	8007c1c <_init>
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	2600      	movs	r6, #0
 80071de:	42a6      	cmp	r6, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e8:	4798      	blx	r3
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f2:	4798      	blx	r3
 80071f4:	3601      	adds	r6, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	08007cf0 	.word	0x08007cf0
 80071fc:	08007cf0 	.word	0x08007cf0
 8007200:	08007cf0 	.word	0x08007cf0
 8007204:	08007cf4 	.word	0x08007cf4

08007208 <__retarget_lock_init_recursive>:
 8007208:	4770      	bx	lr

0800720a <__retarget_lock_acquire_recursive>:
 800720a:	4770      	bx	lr

0800720c <__retarget_lock_release_recursive>:
 800720c:	4770      	bx	lr
	...

08007210 <_free_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4605      	mov	r5, r0
 8007214:	2900      	cmp	r1, #0
 8007216:	d041      	beq.n	800729c <_free_r+0x8c>
 8007218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800721c:	1f0c      	subs	r4, r1, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	bfb8      	it	lt
 8007222:	18e4      	addlt	r4, r4, r3
 8007224:	f000 f8e0 	bl	80073e8 <__malloc_lock>
 8007228:	4a1d      	ldr	r2, [pc, #116]	@ (80072a0 <_free_r+0x90>)
 800722a:	6813      	ldr	r3, [r2, #0]
 800722c:	b933      	cbnz	r3, 800723c <_free_r+0x2c>
 800722e:	6063      	str	r3, [r4, #4]
 8007230:	6014      	str	r4, [r2, #0]
 8007232:	4628      	mov	r0, r5
 8007234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007238:	f000 b8dc 	b.w	80073f4 <__malloc_unlock>
 800723c:	42a3      	cmp	r3, r4
 800723e:	d908      	bls.n	8007252 <_free_r+0x42>
 8007240:	6820      	ldr	r0, [r4, #0]
 8007242:	1821      	adds	r1, r4, r0
 8007244:	428b      	cmp	r3, r1
 8007246:	bf01      	itttt	eq
 8007248:	6819      	ldreq	r1, [r3, #0]
 800724a:	685b      	ldreq	r3, [r3, #4]
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	e7ed      	b.n	800722e <_free_r+0x1e>
 8007252:	461a      	mov	r2, r3
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	b10b      	cbz	r3, 800725c <_free_r+0x4c>
 8007258:	42a3      	cmp	r3, r4
 800725a:	d9fa      	bls.n	8007252 <_free_r+0x42>
 800725c:	6811      	ldr	r1, [r2, #0]
 800725e:	1850      	adds	r0, r2, r1
 8007260:	42a0      	cmp	r0, r4
 8007262:	d10b      	bne.n	800727c <_free_r+0x6c>
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	4401      	add	r1, r0
 8007268:	1850      	adds	r0, r2, r1
 800726a:	4283      	cmp	r3, r0
 800726c:	6011      	str	r1, [r2, #0]
 800726e:	d1e0      	bne.n	8007232 <_free_r+0x22>
 8007270:	6818      	ldr	r0, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	6053      	str	r3, [r2, #4]
 8007276:	4408      	add	r0, r1
 8007278:	6010      	str	r0, [r2, #0]
 800727a:	e7da      	b.n	8007232 <_free_r+0x22>
 800727c:	d902      	bls.n	8007284 <_free_r+0x74>
 800727e:	230c      	movs	r3, #12
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	e7d6      	b.n	8007232 <_free_r+0x22>
 8007284:	6820      	ldr	r0, [r4, #0]
 8007286:	1821      	adds	r1, r4, r0
 8007288:	428b      	cmp	r3, r1
 800728a:	bf04      	itt	eq
 800728c:	6819      	ldreq	r1, [r3, #0]
 800728e:	685b      	ldreq	r3, [r3, #4]
 8007290:	6063      	str	r3, [r4, #4]
 8007292:	bf04      	itt	eq
 8007294:	1809      	addeq	r1, r1, r0
 8007296:	6021      	streq	r1, [r4, #0]
 8007298:	6054      	str	r4, [r2, #4]
 800729a:	e7ca      	b.n	8007232 <_free_r+0x22>
 800729c:	bd38      	pop	{r3, r4, r5, pc}
 800729e:	bf00      	nop
 80072a0:	200007e4 	.word	0x200007e4

080072a4 <sbrk_aligned>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4e0f      	ldr	r6, [pc, #60]	@ (80072e4 <sbrk_aligned+0x40>)
 80072a8:	460c      	mov	r4, r1
 80072aa:	6831      	ldr	r1, [r6, #0]
 80072ac:	4605      	mov	r5, r0
 80072ae:	b911      	cbnz	r1, 80072b6 <sbrk_aligned+0x12>
 80072b0:	f000 fca4 	bl	8007bfc <_sbrk_r>
 80072b4:	6030      	str	r0, [r6, #0]
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 fc9f 	bl	8007bfc <_sbrk_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d103      	bne.n	80072ca <sbrk_aligned+0x26>
 80072c2:	f04f 34ff 	mov.w	r4, #4294967295
 80072c6:	4620      	mov	r0, r4
 80072c8:	bd70      	pop	{r4, r5, r6, pc}
 80072ca:	1cc4      	adds	r4, r0, #3
 80072cc:	f024 0403 	bic.w	r4, r4, #3
 80072d0:	42a0      	cmp	r0, r4
 80072d2:	d0f8      	beq.n	80072c6 <sbrk_aligned+0x22>
 80072d4:	1a21      	subs	r1, r4, r0
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 fc90 	bl	8007bfc <_sbrk_r>
 80072dc:	3001      	adds	r0, #1
 80072de:	d1f2      	bne.n	80072c6 <sbrk_aligned+0x22>
 80072e0:	e7ef      	b.n	80072c2 <sbrk_aligned+0x1e>
 80072e2:	bf00      	nop
 80072e4:	200007e0 	.word	0x200007e0

080072e8 <_malloc_r>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	1ccd      	adds	r5, r1, #3
 80072ee:	f025 0503 	bic.w	r5, r5, #3
 80072f2:	3508      	adds	r5, #8
 80072f4:	2d0c      	cmp	r5, #12
 80072f6:	bf38      	it	cc
 80072f8:	250c      	movcc	r5, #12
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	4606      	mov	r6, r0
 80072fe:	db01      	blt.n	8007304 <_malloc_r+0x1c>
 8007300:	42a9      	cmp	r1, r5
 8007302:	d904      	bls.n	800730e <_malloc_r+0x26>
 8007304:	230c      	movs	r3, #12
 8007306:	6033      	str	r3, [r6, #0]
 8007308:	2000      	movs	r0, #0
 800730a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073e4 <_malloc_r+0xfc>
 8007312:	f000 f869 	bl	80073e8 <__malloc_lock>
 8007316:	f8d8 3000 	ldr.w	r3, [r8]
 800731a:	461c      	mov	r4, r3
 800731c:	bb44      	cbnz	r4, 8007370 <_malloc_r+0x88>
 800731e:	4629      	mov	r1, r5
 8007320:	4630      	mov	r0, r6
 8007322:	f7ff ffbf 	bl	80072a4 <sbrk_aligned>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	4604      	mov	r4, r0
 800732a:	d158      	bne.n	80073de <_malloc_r+0xf6>
 800732c:	f8d8 4000 	ldr.w	r4, [r8]
 8007330:	4627      	mov	r7, r4
 8007332:	2f00      	cmp	r7, #0
 8007334:	d143      	bne.n	80073be <_malloc_r+0xd6>
 8007336:	2c00      	cmp	r4, #0
 8007338:	d04b      	beq.n	80073d2 <_malloc_r+0xea>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	4639      	mov	r1, r7
 800733e:	4630      	mov	r0, r6
 8007340:	eb04 0903 	add.w	r9, r4, r3
 8007344:	f000 fc5a 	bl	8007bfc <_sbrk_r>
 8007348:	4581      	cmp	r9, r0
 800734a:	d142      	bne.n	80073d2 <_malloc_r+0xea>
 800734c:	6821      	ldr	r1, [r4, #0]
 800734e:	1a6d      	subs	r5, r5, r1
 8007350:	4629      	mov	r1, r5
 8007352:	4630      	mov	r0, r6
 8007354:	f7ff ffa6 	bl	80072a4 <sbrk_aligned>
 8007358:	3001      	adds	r0, #1
 800735a:	d03a      	beq.n	80073d2 <_malloc_r+0xea>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	442b      	add	r3, r5
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	f8d8 3000 	ldr.w	r3, [r8]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	bb62      	cbnz	r2, 80073c4 <_malloc_r+0xdc>
 800736a:	f8c8 7000 	str.w	r7, [r8]
 800736e:	e00f      	b.n	8007390 <_malloc_r+0xa8>
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	1b52      	subs	r2, r2, r5
 8007374:	d420      	bmi.n	80073b8 <_malloc_r+0xd0>
 8007376:	2a0b      	cmp	r2, #11
 8007378:	d917      	bls.n	80073aa <_malloc_r+0xc2>
 800737a:	1961      	adds	r1, r4, r5
 800737c:	42a3      	cmp	r3, r4
 800737e:	6025      	str	r5, [r4, #0]
 8007380:	bf18      	it	ne
 8007382:	6059      	strne	r1, [r3, #4]
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	bf08      	it	eq
 8007388:	f8c8 1000 	streq.w	r1, [r8]
 800738c:	5162      	str	r2, [r4, r5]
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f82f 	bl	80073f4 <__malloc_unlock>
 8007396:	f104 000b 	add.w	r0, r4, #11
 800739a:	1d23      	adds	r3, r4, #4
 800739c:	f020 0007 	bic.w	r0, r0, #7
 80073a0:	1ac2      	subs	r2, r0, r3
 80073a2:	bf1c      	itt	ne
 80073a4:	1a1b      	subne	r3, r3, r0
 80073a6:	50a3      	strne	r3, [r4, r2]
 80073a8:	e7af      	b.n	800730a <_malloc_r+0x22>
 80073aa:	6862      	ldr	r2, [r4, #4]
 80073ac:	42a3      	cmp	r3, r4
 80073ae:	bf0c      	ite	eq
 80073b0:	f8c8 2000 	streq.w	r2, [r8]
 80073b4:	605a      	strne	r2, [r3, #4]
 80073b6:	e7eb      	b.n	8007390 <_malloc_r+0xa8>
 80073b8:	4623      	mov	r3, r4
 80073ba:	6864      	ldr	r4, [r4, #4]
 80073bc:	e7ae      	b.n	800731c <_malloc_r+0x34>
 80073be:	463c      	mov	r4, r7
 80073c0:	687f      	ldr	r7, [r7, #4]
 80073c2:	e7b6      	b.n	8007332 <_malloc_r+0x4a>
 80073c4:	461a      	mov	r2, r3
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d1fb      	bne.n	80073c4 <_malloc_r+0xdc>
 80073cc:	2300      	movs	r3, #0
 80073ce:	6053      	str	r3, [r2, #4]
 80073d0:	e7de      	b.n	8007390 <_malloc_r+0xa8>
 80073d2:	230c      	movs	r3, #12
 80073d4:	6033      	str	r3, [r6, #0]
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 f80c 	bl	80073f4 <__malloc_unlock>
 80073dc:	e794      	b.n	8007308 <_malloc_r+0x20>
 80073de:	6005      	str	r5, [r0, #0]
 80073e0:	e7d6      	b.n	8007390 <_malloc_r+0xa8>
 80073e2:	bf00      	nop
 80073e4:	200007e4 	.word	0x200007e4

080073e8 <__malloc_lock>:
 80073e8:	4801      	ldr	r0, [pc, #4]	@ (80073f0 <__malloc_lock+0x8>)
 80073ea:	f7ff bf0e 	b.w	800720a <__retarget_lock_acquire_recursive>
 80073ee:	bf00      	nop
 80073f0:	200007dc 	.word	0x200007dc

080073f4 <__malloc_unlock>:
 80073f4:	4801      	ldr	r0, [pc, #4]	@ (80073fc <__malloc_unlock+0x8>)
 80073f6:	f7ff bf09 	b.w	800720c <__retarget_lock_release_recursive>
 80073fa:	bf00      	nop
 80073fc:	200007dc 	.word	0x200007dc

08007400 <__sfputc_r>:
 8007400:	6893      	ldr	r3, [r2, #8]
 8007402:	3b01      	subs	r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	b410      	push	{r4}
 8007408:	6093      	str	r3, [r2, #8]
 800740a:	da08      	bge.n	800741e <__sfputc_r+0x1e>
 800740c:	6994      	ldr	r4, [r2, #24]
 800740e:	42a3      	cmp	r3, r4
 8007410:	db01      	blt.n	8007416 <__sfputc_r+0x16>
 8007412:	290a      	cmp	r1, #10
 8007414:	d103      	bne.n	800741e <__sfputc_r+0x1e>
 8007416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800741a:	f7ff bde8 	b.w	8006fee <__swbuf_r>
 800741e:	6813      	ldr	r3, [r2, #0]
 8007420:	1c58      	adds	r0, r3, #1
 8007422:	6010      	str	r0, [r2, #0]
 8007424:	7019      	strb	r1, [r3, #0]
 8007426:	4608      	mov	r0, r1
 8007428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800742c:	4770      	bx	lr

0800742e <__sfputs_r>:
 800742e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007430:	4606      	mov	r6, r0
 8007432:	460f      	mov	r7, r1
 8007434:	4614      	mov	r4, r2
 8007436:	18d5      	adds	r5, r2, r3
 8007438:	42ac      	cmp	r4, r5
 800743a:	d101      	bne.n	8007440 <__sfputs_r+0x12>
 800743c:	2000      	movs	r0, #0
 800743e:	e007      	b.n	8007450 <__sfputs_r+0x22>
 8007440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007444:	463a      	mov	r2, r7
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ffda 	bl	8007400 <__sfputc_r>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d1f3      	bne.n	8007438 <__sfputs_r+0xa>
 8007450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007454 <_vfiprintf_r>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	460d      	mov	r5, r1
 800745a:	b09d      	sub	sp, #116	@ 0x74
 800745c:	4614      	mov	r4, r2
 800745e:	4698      	mov	r8, r3
 8007460:	4606      	mov	r6, r0
 8007462:	b118      	cbz	r0, 800746c <_vfiprintf_r+0x18>
 8007464:	6a03      	ldr	r3, [r0, #32]
 8007466:	b90b      	cbnz	r3, 800746c <_vfiprintf_r+0x18>
 8007468:	f7ff fcd8 	bl	8006e1c <__sinit>
 800746c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	d405      	bmi.n	800747e <_vfiprintf_r+0x2a>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	059a      	lsls	r2, r3, #22
 8007476:	d402      	bmi.n	800747e <_vfiprintf_r+0x2a>
 8007478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800747a:	f7ff fec6 	bl	800720a <__retarget_lock_acquire_recursive>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	071b      	lsls	r3, r3, #28
 8007482:	d501      	bpl.n	8007488 <_vfiprintf_r+0x34>
 8007484:	692b      	ldr	r3, [r5, #16]
 8007486:	b99b      	cbnz	r3, 80074b0 <_vfiprintf_r+0x5c>
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff fdee 	bl	800706c <__swsetup_r>
 8007490:	b170      	cbz	r0, 80074b0 <_vfiprintf_r+0x5c>
 8007492:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007494:	07dc      	lsls	r4, r3, #31
 8007496:	d504      	bpl.n	80074a2 <_vfiprintf_r+0x4e>
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	b01d      	add	sp, #116	@ 0x74
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	0598      	lsls	r0, r3, #22
 80074a6:	d4f7      	bmi.n	8007498 <_vfiprintf_r+0x44>
 80074a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074aa:	f7ff feaf 	bl	800720c <__retarget_lock_release_recursive>
 80074ae:	e7f3      	b.n	8007498 <_vfiprintf_r+0x44>
 80074b0:	2300      	movs	r3, #0
 80074b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b4:	2320      	movs	r3, #32
 80074b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80074be:	2330      	movs	r3, #48	@ 0x30
 80074c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007670 <_vfiprintf_r+0x21c>
 80074c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074c8:	f04f 0901 	mov.w	r9, #1
 80074cc:	4623      	mov	r3, r4
 80074ce:	469a      	mov	sl, r3
 80074d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d4:	b10a      	cbz	r2, 80074da <_vfiprintf_r+0x86>
 80074d6:	2a25      	cmp	r2, #37	@ 0x25
 80074d8:	d1f9      	bne.n	80074ce <_vfiprintf_r+0x7a>
 80074da:	ebba 0b04 	subs.w	fp, sl, r4
 80074de:	d00b      	beq.n	80074f8 <_vfiprintf_r+0xa4>
 80074e0:	465b      	mov	r3, fp
 80074e2:	4622      	mov	r2, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7ff ffa1 	bl	800742e <__sfputs_r>
 80074ec:	3001      	adds	r0, #1
 80074ee:	f000 80a7 	beq.w	8007640 <_vfiprintf_r+0x1ec>
 80074f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f4:	445a      	add	r2, fp
 80074f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80074f8:	f89a 3000 	ldrb.w	r3, [sl]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 809f 	beq.w	8007640 <_vfiprintf_r+0x1ec>
 8007502:	2300      	movs	r3, #0
 8007504:	f04f 32ff 	mov.w	r2, #4294967295
 8007508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800750c:	f10a 0a01 	add.w	sl, sl, #1
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	9307      	str	r3, [sp, #28]
 8007514:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007518:	931a      	str	r3, [sp, #104]	@ 0x68
 800751a:	4654      	mov	r4, sl
 800751c:	2205      	movs	r2, #5
 800751e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007522:	4853      	ldr	r0, [pc, #332]	@ (8007670 <_vfiprintf_r+0x21c>)
 8007524:	f7f8 fe8c 	bl	8000240 <memchr>
 8007528:	9a04      	ldr	r2, [sp, #16]
 800752a:	b9d8      	cbnz	r0, 8007564 <_vfiprintf_r+0x110>
 800752c:	06d1      	lsls	r1, r2, #27
 800752e:	bf44      	itt	mi
 8007530:	2320      	movmi	r3, #32
 8007532:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007536:	0713      	lsls	r3, r2, #28
 8007538:	bf44      	itt	mi
 800753a:	232b      	movmi	r3, #43	@ 0x2b
 800753c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007540:	f89a 3000 	ldrb.w	r3, [sl]
 8007544:	2b2a      	cmp	r3, #42	@ 0x2a
 8007546:	d015      	beq.n	8007574 <_vfiprintf_r+0x120>
 8007548:	9a07      	ldr	r2, [sp, #28]
 800754a:	4654      	mov	r4, sl
 800754c:	2000      	movs	r0, #0
 800754e:	f04f 0c0a 	mov.w	ip, #10
 8007552:	4621      	mov	r1, r4
 8007554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007558:	3b30      	subs	r3, #48	@ 0x30
 800755a:	2b09      	cmp	r3, #9
 800755c:	d94b      	bls.n	80075f6 <_vfiprintf_r+0x1a2>
 800755e:	b1b0      	cbz	r0, 800758e <_vfiprintf_r+0x13a>
 8007560:	9207      	str	r2, [sp, #28]
 8007562:	e014      	b.n	800758e <_vfiprintf_r+0x13a>
 8007564:	eba0 0308 	sub.w	r3, r0, r8
 8007568:	fa09 f303 	lsl.w	r3, r9, r3
 800756c:	4313      	orrs	r3, r2
 800756e:	9304      	str	r3, [sp, #16]
 8007570:	46a2      	mov	sl, r4
 8007572:	e7d2      	b.n	800751a <_vfiprintf_r+0xc6>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	1d19      	adds	r1, r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	9103      	str	r1, [sp, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	bfbb      	ittet	lt
 8007580:	425b      	neglt	r3, r3
 8007582:	f042 0202 	orrlt.w	r2, r2, #2
 8007586:	9307      	strge	r3, [sp, #28]
 8007588:	9307      	strlt	r3, [sp, #28]
 800758a:	bfb8      	it	lt
 800758c:	9204      	strlt	r2, [sp, #16]
 800758e:	7823      	ldrb	r3, [r4, #0]
 8007590:	2b2e      	cmp	r3, #46	@ 0x2e
 8007592:	d10a      	bne.n	80075aa <_vfiprintf_r+0x156>
 8007594:	7863      	ldrb	r3, [r4, #1]
 8007596:	2b2a      	cmp	r3, #42	@ 0x2a
 8007598:	d132      	bne.n	8007600 <_vfiprintf_r+0x1ac>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	9203      	str	r2, [sp, #12]
 80075a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075a6:	3402      	adds	r4, #2
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007680 <_vfiprintf_r+0x22c>
 80075ae:	7821      	ldrb	r1, [r4, #0]
 80075b0:	2203      	movs	r2, #3
 80075b2:	4650      	mov	r0, sl
 80075b4:	f7f8 fe44 	bl	8000240 <memchr>
 80075b8:	b138      	cbz	r0, 80075ca <_vfiprintf_r+0x176>
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	eba0 000a 	sub.w	r0, r0, sl
 80075c0:	2240      	movs	r2, #64	@ 0x40
 80075c2:	4082      	lsls	r2, r0
 80075c4:	4313      	orrs	r3, r2
 80075c6:	3401      	adds	r4, #1
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ce:	4829      	ldr	r0, [pc, #164]	@ (8007674 <_vfiprintf_r+0x220>)
 80075d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075d4:	2206      	movs	r2, #6
 80075d6:	f7f8 fe33 	bl	8000240 <memchr>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d03f      	beq.n	800765e <_vfiprintf_r+0x20a>
 80075de:	4b26      	ldr	r3, [pc, #152]	@ (8007678 <_vfiprintf_r+0x224>)
 80075e0:	bb1b      	cbnz	r3, 800762a <_vfiprintf_r+0x1d6>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	3307      	adds	r3, #7
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	3308      	adds	r3, #8
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f0:	443b      	add	r3, r7
 80075f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f4:	e76a      	b.n	80074cc <_vfiprintf_r+0x78>
 80075f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fa:	460c      	mov	r4, r1
 80075fc:	2001      	movs	r0, #1
 80075fe:	e7a8      	b.n	8007552 <_vfiprintf_r+0xfe>
 8007600:	2300      	movs	r3, #0
 8007602:	3401      	adds	r4, #1
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	4619      	mov	r1, r3
 8007608:	f04f 0c0a 	mov.w	ip, #10
 800760c:	4620      	mov	r0, r4
 800760e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007612:	3a30      	subs	r2, #48	@ 0x30
 8007614:	2a09      	cmp	r2, #9
 8007616:	d903      	bls.n	8007620 <_vfiprintf_r+0x1cc>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0c6      	beq.n	80075aa <_vfiprintf_r+0x156>
 800761c:	9105      	str	r1, [sp, #20]
 800761e:	e7c4      	b.n	80075aa <_vfiprintf_r+0x156>
 8007620:	fb0c 2101 	mla	r1, ip, r1, r2
 8007624:	4604      	mov	r4, r0
 8007626:	2301      	movs	r3, #1
 8007628:	e7f0      	b.n	800760c <_vfiprintf_r+0x1b8>
 800762a:	ab03      	add	r3, sp, #12
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	462a      	mov	r2, r5
 8007630:	4b12      	ldr	r3, [pc, #72]	@ (800767c <_vfiprintf_r+0x228>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	4630      	mov	r0, r6
 8007636:	f3af 8000 	nop.w
 800763a:	4607      	mov	r7, r0
 800763c:	1c78      	adds	r0, r7, #1
 800763e:	d1d6      	bne.n	80075ee <_vfiprintf_r+0x19a>
 8007640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007642:	07d9      	lsls	r1, r3, #31
 8007644:	d405      	bmi.n	8007652 <_vfiprintf_r+0x1fe>
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	059a      	lsls	r2, r3, #22
 800764a:	d402      	bmi.n	8007652 <_vfiprintf_r+0x1fe>
 800764c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800764e:	f7ff fddd 	bl	800720c <__retarget_lock_release_recursive>
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	065b      	lsls	r3, r3, #25
 8007656:	f53f af1f 	bmi.w	8007498 <_vfiprintf_r+0x44>
 800765a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800765c:	e71e      	b.n	800749c <_vfiprintf_r+0x48>
 800765e:	ab03      	add	r3, sp, #12
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462a      	mov	r2, r5
 8007664:	4b05      	ldr	r3, [pc, #20]	@ (800767c <_vfiprintf_r+0x228>)
 8007666:	a904      	add	r1, sp, #16
 8007668:	4630      	mov	r0, r6
 800766a:	f000 f879 	bl	8007760 <_printf_i>
 800766e:	e7e4      	b.n	800763a <_vfiprintf_r+0x1e6>
 8007670:	08007cb4 	.word	0x08007cb4
 8007674:	08007cbe 	.word	0x08007cbe
 8007678:	00000000 	.word	0x00000000
 800767c:	0800742f 	.word	0x0800742f
 8007680:	08007cba 	.word	0x08007cba

08007684 <_printf_common>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	4616      	mov	r6, r2
 800768a:	4698      	mov	r8, r3
 800768c:	688a      	ldr	r2, [r1, #8]
 800768e:	690b      	ldr	r3, [r1, #16]
 8007690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007694:	4293      	cmp	r3, r2
 8007696:	bfb8      	it	lt
 8007698:	4613      	movlt	r3, r2
 800769a:	6033      	str	r3, [r6, #0]
 800769c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076a0:	4607      	mov	r7, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	b10a      	cbz	r2, 80076aa <_printf_common+0x26>
 80076a6:	3301      	adds	r3, #1
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	0699      	lsls	r1, r3, #26
 80076ae:	bf42      	ittt	mi
 80076b0:	6833      	ldrmi	r3, [r6, #0]
 80076b2:	3302      	addmi	r3, #2
 80076b4:	6033      	strmi	r3, [r6, #0]
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	f015 0506 	ands.w	r5, r5, #6
 80076bc:	d106      	bne.n	80076cc <_printf_common+0x48>
 80076be:	f104 0a19 	add.w	sl, r4, #25
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	dc26      	bgt.n	800771a <_printf_common+0x96>
 80076cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076d0:	6822      	ldr	r2, [r4, #0]
 80076d2:	3b00      	subs	r3, #0
 80076d4:	bf18      	it	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	0692      	lsls	r2, r2, #26
 80076da:	d42b      	bmi.n	8007734 <_printf_common+0xb0>
 80076dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076e0:	4641      	mov	r1, r8
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c8      	blx	r9
 80076e6:	3001      	adds	r0, #1
 80076e8:	d01e      	beq.n	8007728 <_printf_common+0xa4>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	f003 0306 	and.w	r3, r3, #6
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	bf02      	ittt	eq
 80076f6:	68e5      	ldreq	r5, [r4, #12]
 80076f8:	6833      	ldreq	r3, [r6, #0]
 80076fa:	1aed      	subeq	r5, r5, r3
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	bf0c      	ite	eq
 8007700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007704:	2500      	movne	r5, #0
 8007706:	4293      	cmp	r3, r2
 8007708:	bfc4      	itt	gt
 800770a:	1a9b      	subgt	r3, r3, r2
 800770c:	18ed      	addgt	r5, r5, r3
 800770e:	2600      	movs	r6, #0
 8007710:	341a      	adds	r4, #26
 8007712:	42b5      	cmp	r5, r6
 8007714:	d11a      	bne.n	800774c <_printf_common+0xc8>
 8007716:	2000      	movs	r0, #0
 8007718:	e008      	b.n	800772c <_printf_common+0xa8>
 800771a:	2301      	movs	r3, #1
 800771c:	4652      	mov	r2, sl
 800771e:	4641      	mov	r1, r8
 8007720:	4638      	mov	r0, r7
 8007722:	47c8      	blx	r9
 8007724:	3001      	adds	r0, #1
 8007726:	d103      	bne.n	8007730 <_printf_common+0xac>
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007730:	3501      	adds	r5, #1
 8007732:	e7c6      	b.n	80076c2 <_printf_common+0x3e>
 8007734:	18e1      	adds	r1, r4, r3
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	2030      	movs	r0, #48	@ 0x30
 800773a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800773e:	4422      	add	r2, r4
 8007740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007748:	3302      	adds	r3, #2
 800774a:	e7c7      	b.n	80076dc <_printf_common+0x58>
 800774c:	2301      	movs	r3, #1
 800774e:	4622      	mov	r2, r4
 8007750:	4641      	mov	r1, r8
 8007752:	4638      	mov	r0, r7
 8007754:	47c8      	blx	r9
 8007756:	3001      	adds	r0, #1
 8007758:	d0e6      	beq.n	8007728 <_printf_common+0xa4>
 800775a:	3601      	adds	r6, #1
 800775c:	e7d9      	b.n	8007712 <_printf_common+0x8e>
	...

08007760 <_printf_i>:
 8007760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	7e0f      	ldrb	r7, [r1, #24]
 8007766:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007768:	2f78      	cmp	r7, #120	@ 0x78
 800776a:	4691      	mov	r9, r2
 800776c:	4680      	mov	r8, r0
 800776e:	460c      	mov	r4, r1
 8007770:	469a      	mov	sl, r3
 8007772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007776:	d807      	bhi.n	8007788 <_printf_i+0x28>
 8007778:	2f62      	cmp	r7, #98	@ 0x62
 800777a:	d80a      	bhi.n	8007792 <_printf_i+0x32>
 800777c:	2f00      	cmp	r7, #0
 800777e:	f000 80d1 	beq.w	8007924 <_printf_i+0x1c4>
 8007782:	2f58      	cmp	r7, #88	@ 0x58
 8007784:	f000 80b8 	beq.w	80078f8 <_printf_i+0x198>
 8007788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800778c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007790:	e03a      	b.n	8007808 <_printf_i+0xa8>
 8007792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007796:	2b15      	cmp	r3, #21
 8007798:	d8f6      	bhi.n	8007788 <_printf_i+0x28>
 800779a:	a101      	add	r1, pc, #4	@ (adr r1, 80077a0 <_printf_i+0x40>)
 800779c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077a0:	080077f9 	.word	0x080077f9
 80077a4:	0800780d 	.word	0x0800780d
 80077a8:	08007789 	.word	0x08007789
 80077ac:	08007789 	.word	0x08007789
 80077b0:	08007789 	.word	0x08007789
 80077b4:	08007789 	.word	0x08007789
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007789 	.word	0x08007789
 80077c0:	08007789 	.word	0x08007789
 80077c4:	08007789 	.word	0x08007789
 80077c8:	08007789 	.word	0x08007789
 80077cc:	0800790b 	.word	0x0800790b
 80077d0:	08007837 	.word	0x08007837
 80077d4:	080078c5 	.word	0x080078c5
 80077d8:	08007789 	.word	0x08007789
 80077dc:	08007789 	.word	0x08007789
 80077e0:	0800792d 	.word	0x0800792d
 80077e4:	08007789 	.word	0x08007789
 80077e8:	08007837 	.word	0x08007837
 80077ec:	08007789 	.word	0x08007789
 80077f0:	08007789 	.word	0x08007789
 80077f4:	080078cd 	.word	0x080078cd
 80077f8:	6833      	ldr	r3, [r6, #0]
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6032      	str	r2, [r6, #0]
 8007800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007808:	2301      	movs	r3, #1
 800780a:	e09c      	b.n	8007946 <_printf_i+0x1e6>
 800780c:	6833      	ldr	r3, [r6, #0]
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1d19      	adds	r1, r3, #4
 8007812:	6031      	str	r1, [r6, #0]
 8007814:	0606      	lsls	r6, r0, #24
 8007816:	d501      	bpl.n	800781c <_printf_i+0xbc>
 8007818:	681d      	ldr	r5, [r3, #0]
 800781a:	e003      	b.n	8007824 <_printf_i+0xc4>
 800781c:	0645      	lsls	r5, r0, #25
 800781e:	d5fb      	bpl.n	8007818 <_printf_i+0xb8>
 8007820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007824:	2d00      	cmp	r5, #0
 8007826:	da03      	bge.n	8007830 <_printf_i+0xd0>
 8007828:	232d      	movs	r3, #45	@ 0x2d
 800782a:	426d      	negs	r5, r5
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007830:	4858      	ldr	r0, [pc, #352]	@ (8007994 <_printf_i+0x234>)
 8007832:	230a      	movs	r3, #10
 8007834:	e011      	b.n	800785a <_printf_i+0xfa>
 8007836:	6821      	ldr	r1, [r4, #0]
 8007838:	6833      	ldr	r3, [r6, #0]
 800783a:	0608      	lsls	r0, r1, #24
 800783c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007840:	d402      	bmi.n	8007848 <_printf_i+0xe8>
 8007842:	0649      	lsls	r1, r1, #25
 8007844:	bf48      	it	mi
 8007846:	b2ad      	uxthmi	r5, r5
 8007848:	2f6f      	cmp	r7, #111	@ 0x6f
 800784a:	4852      	ldr	r0, [pc, #328]	@ (8007994 <_printf_i+0x234>)
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	bf14      	ite	ne
 8007850:	230a      	movne	r3, #10
 8007852:	2308      	moveq	r3, #8
 8007854:	2100      	movs	r1, #0
 8007856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800785a:	6866      	ldr	r6, [r4, #4]
 800785c:	60a6      	str	r6, [r4, #8]
 800785e:	2e00      	cmp	r6, #0
 8007860:	db05      	blt.n	800786e <_printf_i+0x10e>
 8007862:	6821      	ldr	r1, [r4, #0]
 8007864:	432e      	orrs	r6, r5
 8007866:	f021 0104 	bic.w	r1, r1, #4
 800786a:	6021      	str	r1, [r4, #0]
 800786c:	d04b      	beq.n	8007906 <_printf_i+0x1a6>
 800786e:	4616      	mov	r6, r2
 8007870:	fbb5 f1f3 	udiv	r1, r5, r3
 8007874:	fb03 5711 	mls	r7, r3, r1, r5
 8007878:	5dc7      	ldrb	r7, [r0, r7]
 800787a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800787e:	462f      	mov	r7, r5
 8007880:	42bb      	cmp	r3, r7
 8007882:	460d      	mov	r5, r1
 8007884:	d9f4      	bls.n	8007870 <_printf_i+0x110>
 8007886:	2b08      	cmp	r3, #8
 8007888:	d10b      	bne.n	80078a2 <_printf_i+0x142>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	07df      	lsls	r7, r3, #31
 800788e:	d508      	bpl.n	80078a2 <_printf_i+0x142>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6861      	ldr	r1, [r4, #4]
 8007894:	4299      	cmp	r1, r3
 8007896:	bfde      	ittt	le
 8007898:	2330      	movle	r3, #48	@ 0x30
 800789a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800789e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078a2:	1b92      	subs	r2, r2, r6
 80078a4:	6122      	str	r2, [r4, #16]
 80078a6:	f8cd a000 	str.w	sl, [sp]
 80078aa:	464b      	mov	r3, r9
 80078ac:	aa03      	add	r2, sp, #12
 80078ae:	4621      	mov	r1, r4
 80078b0:	4640      	mov	r0, r8
 80078b2:	f7ff fee7 	bl	8007684 <_printf_common>
 80078b6:	3001      	adds	r0, #1
 80078b8:	d14a      	bne.n	8007950 <_printf_i+0x1f0>
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	b004      	add	sp, #16
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	f043 0320 	orr.w	r3, r3, #32
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	4832      	ldr	r0, [pc, #200]	@ (8007998 <_printf_i+0x238>)
 80078ce:	2778      	movs	r7, #120	@ 0x78
 80078d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	6831      	ldr	r1, [r6, #0]
 80078d8:	061f      	lsls	r7, r3, #24
 80078da:	f851 5b04 	ldr.w	r5, [r1], #4
 80078de:	d402      	bmi.n	80078e6 <_printf_i+0x186>
 80078e0:	065f      	lsls	r7, r3, #25
 80078e2:	bf48      	it	mi
 80078e4:	b2ad      	uxthmi	r5, r5
 80078e6:	6031      	str	r1, [r6, #0]
 80078e8:	07d9      	lsls	r1, r3, #31
 80078ea:	bf44      	itt	mi
 80078ec:	f043 0320 	orrmi.w	r3, r3, #32
 80078f0:	6023      	strmi	r3, [r4, #0]
 80078f2:	b11d      	cbz	r5, 80078fc <_printf_i+0x19c>
 80078f4:	2310      	movs	r3, #16
 80078f6:	e7ad      	b.n	8007854 <_printf_i+0xf4>
 80078f8:	4826      	ldr	r0, [pc, #152]	@ (8007994 <_printf_i+0x234>)
 80078fa:	e7e9      	b.n	80078d0 <_printf_i+0x170>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	f023 0320 	bic.w	r3, r3, #32
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	e7f6      	b.n	80078f4 <_printf_i+0x194>
 8007906:	4616      	mov	r6, r2
 8007908:	e7bd      	b.n	8007886 <_printf_i+0x126>
 800790a:	6833      	ldr	r3, [r6, #0]
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	6961      	ldr	r1, [r4, #20]
 8007910:	1d18      	adds	r0, r3, #4
 8007912:	6030      	str	r0, [r6, #0]
 8007914:	062e      	lsls	r6, r5, #24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	d501      	bpl.n	800791e <_printf_i+0x1be>
 800791a:	6019      	str	r1, [r3, #0]
 800791c:	e002      	b.n	8007924 <_printf_i+0x1c4>
 800791e:	0668      	lsls	r0, r5, #25
 8007920:	d5fb      	bpl.n	800791a <_printf_i+0x1ba>
 8007922:	8019      	strh	r1, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	6123      	str	r3, [r4, #16]
 8007928:	4616      	mov	r6, r2
 800792a:	e7bc      	b.n	80078a6 <_printf_i+0x146>
 800792c:	6833      	ldr	r3, [r6, #0]
 800792e:	1d1a      	adds	r2, r3, #4
 8007930:	6032      	str	r2, [r6, #0]
 8007932:	681e      	ldr	r6, [r3, #0]
 8007934:	6862      	ldr	r2, [r4, #4]
 8007936:	2100      	movs	r1, #0
 8007938:	4630      	mov	r0, r6
 800793a:	f7f8 fc81 	bl	8000240 <memchr>
 800793e:	b108      	cbz	r0, 8007944 <_printf_i+0x1e4>
 8007940:	1b80      	subs	r0, r0, r6
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800794e:	e7aa      	b.n	80078a6 <_printf_i+0x146>
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	4632      	mov	r2, r6
 8007954:	4649      	mov	r1, r9
 8007956:	4640      	mov	r0, r8
 8007958:	47d0      	blx	sl
 800795a:	3001      	adds	r0, #1
 800795c:	d0ad      	beq.n	80078ba <_printf_i+0x15a>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	079b      	lsls	r3, r3, #30
 8007962:	d413      	bmi.n	800798c <_printf_i+0x22c>
 8007964:	68e0      	ldr	r0, [r4, #12]
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	4298      	cmp	r0, r3
 800796a:	bfb8      	it	lt
 800796c:	4618      	movlt	r0, r3
 800796e:	e7a6      	b.n	80078be <_printf_i+0x15e>
 8007970:	2301      	movs	r3, #1
 8007972:	4632      	mov	r2, r6
 8007974:	4649      	mov	r1, r9
 8007976:	4640      	mov	r0, r8
 8007978:	47d0      	blx	sl
 800797a:	3001      	adds	r0, #1
 800797c:	d09d      	beq.n	80078ba <_printf_i+0x15a>
 800797e:	3501      	adds	r5, #1
 8007980:	68e3      	ldr	r3, [r4, #12]
 8007982:	9903      	ldr	r1, [sp, #12]
 8007984:	1a5b      	subs	r3, r3, r1
 8007986:	42ab      	cmp	r3, r5
 8007988:	dcf2      	bgt.n	8007970 <_printf_i+0x210>
 800798a:	e7eb      	b.n	8007964 <_printf_i+0x204>
 800798c:	2500      	movs	r5, #0
 800798e:	f104 0619 	add.w	r6, r4, #25
 8007992:	e7f5      	b.n	8007980 <_printf_i+0x220>
 8007994:	08007cc5 	.word	0x08007cc5
 8007998:	08007cd6 	.word	0x08007cd6

0800799c <__sflush_r>:
 800799c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	0716      	lsls	r6, r2, #28
 80079a6:	4605      	mov	r5, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	d454      	bmi.n	8007a56 <__sflush_r+0xba>
 80079ac:	684b      	ldr	r3, [r1, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dc02      	bgt.n	80079b8 <__sflush_r+0x1c>
 80079b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dd48      	ble.n	8007a4a <__sflush_r+0xae>
 80079b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	d045      	beq.n	8007a4a <__sflush_r+0xae>
 80079be:	2300      	movs	r3, #0
 80079c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079c4:	682f      	ldr	r7, [r5, #0]
 80079c6:	6a21      	ldr	r1, [r4, #32]
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	d030      	beq.n	8007a2e <__sflush_r+0x92>
 80079cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	0759      	lsls	r1, r3, #29
 80079d2:	d505      	bpl.n	80079e0 <__sflush_r+0x44>
 80079d4:	6863      	ldr	r3, [r4, #4]
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079da:	b10b      	cbz	r3, 80079e0 <__sflush_r+0x44>
 80079dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079de:	1ad2      	subs	r2, r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079e4:	6a21      	ldr	r1, [r4, #32]
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b0      	blx	r6
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	d106      	bne.n	80079fe <__sflush_r+0x62>
 80079f0:	6829      	ldr	r1, [r5, #0]
 80079f2:	291d      	cmp	r1, #29
 80079f4:	d82b      	bhi.n	8007a4e <__sflush_r+0xb2>
 80079f6:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <__sflush_r+0x104>)
 80079f8:	40ca      	lsrs	r2, r1
 80079fa:	07d6      	lsls	r6, r2, #31
 80079fc:	d527      	bpl.n	8007a4e <__sflush_r+0xb2>
 80079fe:	2200      	movs	r2, #0
 8007a00:	6062      	str	r2, [r4, #4]
 8007a02:	04d9      	lsls	r1, r3, #19
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	d504      	bpl.n	8007a14 <__sflush_r+0x78>
 8007a0a:	1c42      	adds	r2, r0, #1
 8007a0c:	d101      	bne.n	8007a12 <__sflush_r+0x76>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	b903      	cbnz	r3, 8007a14 <__sflush_r+0x78>
 8007a12:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a16:	602f      	str	r7, [r5, #0]
 8007a18:	b1b9      	cbz	r1, 8007a4a <__sflush_r+0xae>
 8007a1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a1e:	4299      	cmp	r1, r3
 8007a20:	d002      	beq.n	8007a28 <__sflush_r+0x8c>
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7ff fbf4 	bl	8007210 <_free_r>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a2c:	e00d      	b.n	8007a4a <__sflush_r+0xae>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b0      	blx	r6
 8007a34:	4602      	mov	r2, r0
 8007a36:	1c50      	adds	r0, r2, #1
 8007a38:	d1c9      	bne.n	80079ce <__sflush_r+0x32>
 8007a3a:	682b      	ldr	r3, [r5, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0c6      	beq.n	80079ce <__sflush_r+0x32>
 8007a40:	2b1d      	cmp	r3, #29
 8007a42:	d001      	beq.n	8007a48 <__sflush_r+0xac>
 8007a44:	2b16      	cmp	r3, #22
 8007a46:	d11e      	bne.n	8007a86 <__sflush_r+0xea>
 8007a48:	602f      	str	r7, [r5, #0]
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e022      	b.n	8007a94 <__sflush_r+0xf8>
 8007a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a52:	b21b      	sxth	r3, r3
 8007a54:	e01b      	b.n	8007a8e <__sflush_r+0xf2>
 8007a56:	690f      	ldr	r7, [r1, #16]
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	d0f6      	beq.n	8007a4a <__sflush_r+0xae>
 8007a5c:	0793      	lsls	r3, r2, #30
 8007a5e:	680e      	ldr	r6, [r1, #0]
 8007a60:	bf08      	it	eq
 8007a62:	694b      	ldreq	r3, [r1, #20]
 8007a64:	600f      	str	r7, [r1, #0]
 8007a66:	bf18      	it	ne
 8007a68:	2300      	movne	r3, #0
 8007a6a:	eba6 0807 	sub.w	r8, r6, r7
 8007a6e:	608b      	str	r3, [r1, #8]
 8007a70:	f1b8 0f00 	cmp.w	r8, #0
 8007a74:	dde9      	ble.n	8007a4a <__sflush_r+0xae>
 8007a76:	6a21      	ldr	r1, [r4, #32]
 8007a78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a7a:	4643      	mov	r3, r8
 8007a7c:	463a      	mov	r2, r7
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b0      	blx	r6
 8007a82:	2800      	cmp	r0, #0
 8007a84:	dc08      	bgt.n	8007a98 <__sflush_r+0xfc>
 8007a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a98:	4407      	add	r7, r0
 8007a9a:	eba8 0800 	sub.w	r8, r8, r0
 8007a9e:	e7e7      	b.n	8007a70 <__sflush_r+0xd4>
 8007aa0:	20400001 	.word	0x20400001

08007aa4 <_fflush_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b913      	cbnz	r3, 8007ab4 <_fflush_r+0x10>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	b118      	cbz	r0, 8007abe <_fflush_r+0x1a>
 8007ab6:	6a03      	ldr	r3, [r0, #32]
 8007ab8:	b90b      	cbnz	r3, 8007abe <_fflush_r+0x1a>
 8007aba:	f7ff f9af 	bl	8006e1c <__sinit>
 8007abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f3      	beq.n	8007aae <_fflush_r+0xa>
 8007ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ac8:	07d0      	lsls	r0, r2, #31
 8007aca:	d404      	bmi.n	8007ad6 <_fflush_r+0x32>
 8007acc:	0599      	lsls	r1, r3, #22
 8007ace:	d402      	bmi.n	8007ad6 <_fflush_r+0x32>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ad2:	f7ff fb9a 	bl	800720a <__retarget_lock_acquire_recursive>
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	4621      	mov	r1, r4
 8007ada:	f7ff ff5f 	bl	800799c <__sflush_r>
 8007ade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ae0:	07da      	lsls	r2, r3, #31
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	d4e4      	bmi.n	8007ab0 <_fflush_r+0xc>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	059b      	lsls	r3, r3, #22
 8007aea:	d4e1      	bmi.n	8007ab0 <_fflush_r+0xc>
 8007aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aee:	f7ff fb8d 	bl	800720c <__retarget_lock_release_recursive>
 8007af2:	e7dd      	b.n	8007ab0 <_fflush_r+0xc>

08007af4 <__swhatbuf_r>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	460c      	mov	r4, r1
 8007af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afc:	2900      	cmp	r1, #0
 8007afe:	b096      	sub	sp, #88	@ 0x58
 8007b00:	4615      	mov	r5, r2
 8007b02:	461e      	mov	r6, r3
 8007b04:	da0d      	bge.n	8007b22 <__swhatbuf_r+0x2e>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b0c:	f04f 0100 	mov.w	r1, #0
 8007b10:	bf14      	ite	ne
 8007b12:	2340      	movne	r3, #64	@ 0x40
 8007b14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b18:	2000      	movs	r0, #0
 8007b1a:	6031      	str	r1, [r6, #0]
 8007b1c:	602b      	str	r3, [r5, #0]
 8007b1e:	b016      	add	sp, #88	@ 0x58
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	466a      	mov	r2, sp
 8007b24:	f000 f848 	bl	8007bb8 <_fstat_r>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	dbec      	blt.n	8007b06 <__swhatbuf_r+0x12>
 8007b2c:	9901      	ldr	r1, [sp, #4]
 8007b2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b36:	4259      	negs	r1, r3
 8007b38:	4159      	adcs	r1, r3
 8007b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b3e:	e7eb      	b.n	8007b18 <__swhatbuf_r+0x24>

08007b40 <__smakebuf_r>:
 8007b40:	898b      	ldrh	r3, [r1, #12]
 8007b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b44:	079d      	lsls	r5, r3, #30
 8007b46:	4606      	mov	r6, r0
 8007b48:	460c      	mov	r4, r1
 8007b4a:	d507      	bpl.n	8007b5c <__smakebuf_r+0x1c>
 8007b4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	2301      	movs	r3, #1
 8007b56:	6163      	str	r3, [r4, #20]
 8007b58:	b003      	add	sp, #12
 8007b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b5c:	ab01      	add	r3, sp, #4
 8007b5e:	466a      	mov	r2, sp
 8007b60:	f7ff ffc8 	bl	8007af4 <__swhatbuf_r>
 8007b64:	9f00      	ldr	r7, [sp, #0]
 8007b66:	4605      	mov	r5, r0
 8007b68:	4639      	mov	r1, r7
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7ff fbbc 	bl	80072e8 <_malloc_r>
 8007b70:	b948      	cbnz	r0, 8007b86 <__smakebuf_r+0x46>
 8007b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b76:	059a      	lsls	r2, r3, #22
 8007b78:	d4ee      	bmi.n	8007b58 <__smakebuf_r+0x18>
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	f043 0302 	orr.w	r3, r3, #2
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	e7e2      	b.n	8007b4c <__smakebuf_r+0xc>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	6020      	str	r0, [r4, #0]
 8007b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b96:	b15b      	cbz	r3, 8007bb0 <__smakebuf_r+0x70>
 8007b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 f81d 	bl	8007bdc <_isatty_r>
 8007ba2:	b128      	cbz	r0, 8007bb0 <__smakebuf_r+0x70>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	431d      	orrs	r5, r3
 8007bb4:	81a5      	strh	r5, [r4, #12]
 8007bb6:	e7cf      	b.n	8007b58 <__smakebuf_r+0x18>

08007bb8 <_fstat_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	@ (8007bd8 <_fstat_r+0x20>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	602b      	str	r3, [r5, #0]
 8007bc6:	f7fa fc51 	bl	800246c <_fstat>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	d102      	bne.n	8007bd4 <_fstat_r+0x1c>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	b103      	cbz	r3, 8007bd4 <_fstat_r+0x1c>
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200007d8 	.word	0x200007d8

08007bdc <_isatty_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	@ (8007bf8 <_isatty_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7fa fc50 	bl	800248c <_isatty>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_isatty_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_isatty_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	200007d8 	.word	0x200007d8

08007bfc <_sbrk_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d06      	ldr	r5, [pc, #24]	@ (8007c18 <_sbrk_r+0x1c>)
 8007c00:	2300      	movs	r3, #0
 8007c02:	4604      	mov	r4, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	602b      	str	r3, [r5, #0]
 8007c08:	f7fa fc58 	bl	80024bc <_sbrk>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_sbrk_r+0x1a>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_sbrk_r+0x1a>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	200007d8 	.word	0x200007d8

08007c1c <_init>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	bf00      	nop
 8007c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c22:	bc08      	pop	{r3}
 8007c24:	469e      	mov	lr, r3
 8007c26:	4770      	bx	lr

08007c28 <_fini>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr
