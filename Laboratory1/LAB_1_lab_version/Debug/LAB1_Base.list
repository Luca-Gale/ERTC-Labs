
LAB1_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079fc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007bfc  08007bfc  00008bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb8  08007cb8  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb8  08007cb8  00008cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cbc  08007cbc  00008cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007cc0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000068  08007d28  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007d28  000097e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001637e  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  0001f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001035  00000000  00000000  000232e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a57f  00000000  00000000  0002431d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ded  00000000  00000000  0004e89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001071fb  00000000  00000000  00068689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb4  00000000  00000000  0016f8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0017587c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08007be4 	.word	0x08007be4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08007be4 	.word	0x08007be4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d013      	beq.n	8000610 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005f8:	e000      	b.n	80005fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000606:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffc9 	bl	80005d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf1      	blt.n	8000630 <_write+0x12>
	}
	return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f001 ff80 	bl	8002562 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 fa05 	bl	8000a70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f001 f825 	bl	80016b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800066a:	f000 fff3 	bl	8001654 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800066e:	f000 fa71 	bl	8000b54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000672:	f000 fac1 	bl	8000bf8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000676:	f000 faff 	bl	8000c78 <MX_I2C2_Init>
  MX_SPI1_Init();
 800067a:	f000 fb3d 	bl	8000cf8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800067e:	f000 fb79 	bl	8000d74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000682:	f000 fc47 	bl	8000f14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000686:	f000 fcdf 	bl	8001048 <MX_TIM3_Init>
  MX_TIM4_Init();
 800068a:	f000 fd33 	bl	80010f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800068e:	f000 fd87 	bl	80011a0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000692:	f000 fdfd 	bl	8001290 <MX_TIM8_Init>
  MX_UART4_Init();
 8000696:	f000 ff1d 	bl	80014d4 <MX_UART4_Init>
  MX_UART5_Init();
 800069a:	f000 ff4b 	bl	8001534 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800069e:	f000 ff79 	bl	8001594 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 ffa7 	bl	80015f4 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80006a6:	f000 fec5 	bl	8001434 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	48bc      	ldr	r0, [pc, #752]	@ (80009a0 <main+0x348>)
 80006b0:	f002 fd5c 	bl	800316c <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f002 fb92 	bl	8002dde <HAL_NVIC_DisableIRQ>

  ITM_SendChar('h');
 80006ba:	2068      	movs	r0, #104	@ 0x68
 80006bc:	f7ff ff88 	bl	80005d0 <ITM_SendChar>

  /* Software reset */
  data = 0x12;
 80006c0:	2312      	movs	r3, #18
 80006c2:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80006c4:	23c8      	movs	r3, #200	@ 0xc8
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	2301      	movs	r3, #1
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	227d      	movs	r2, #125	@ 0x7d
 80006d4:	217e      	movs	r1, #126	@ 0x7e
 80006d6:	48b3      	ldr	r0, [pc, #716]	@ (80009a4 <main+0x34c>)
 80006d8:	f002 fdfe 	bl	80032d8 <HAL_I2C_Mem_Write>
 80006dc:	4603      	mov	r3, r0
 80006de:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d004      	beq.n	80006f0 <main+0x98>
    printf("I2C communication error (%X).\n", status);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4619      	mov	r1, r3
 80006ea:	48af      	ldr	r0, [pc, #700]	@ (80009a8 <main+0x350>)
 80006ec:	f006 fbae 	bl	8006e4c <iprintf>

  data = 0x34;
 80006f0:	2334      	movs	r3, #52	@ 0x34
 80006f2:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80006f4:	23c8      	movs	r3, #200	@ 0xc8
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	227d      	movs	r2, #125	@ 0x7d
 8000704:	217e      	movs	r1, #126	@ 0x7e
 8000706:	48a7      	ldr	r0, [pc, #668]	@ (80009a4 <main+0x34c>)
 8000708:	f002 fde6 	bl	80032d8 <HAL_I2C_Mem_Write>
 800070c:	4603      	mov	r3, r0
 800070e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d004      	beq.n	8000720 <main+0xc8>
    printf("I2C communication error (%X).\n", status);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	48a3      	ldr	r0, [pc, #652]	@ (80009a8 <main+0x350>)
 800071c:	f006 fb96 	bl	8006e4c <iprintf>

  HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	@ 0x64
 8000722:	f001 ff7b 	bl	800261c <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000726:	2340      	movs	r3, #64	@ 0x40
 8000728:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 800072a:	23c8      	movs	r3, #200	@ 0xc8
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	1dbb      	adds	r3, r7, #6
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	221e      	movs	r2, #30
 800073a:	217e      	movs	r1, #126	@ 0x7e
 800073c:	4899      	ldr	r0, [pc, #612]	@ (80009a4 <main+0x34c>)
 800073e:	f002 fdcb 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d004      	beq.n	8000756 <main+0xfe>
    printf("I2C communication error (%X).\n", status);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	4619      	mov	r1, r3
 8000750:	4895      	ldr	r0, [pc, #596]	@ (80009a8 <main+0x350>)
 8000752:	f006 fb7b 	bl	8006e4c <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000756:	23f0      	movs	r3, #240	@ 0xf0
 8000758:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800075a:	23c8      	movs	r3, #200	@ 0xc8
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2301      	movs	r3, #1
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2301      	movs	r3, #1
 8000768:	220f      	movs	r2, #15
 800076a:	217e      	movs	r1, #126	@ 0x7e
 800076c:	488d      	ldr	r0, [pc, #564]	@ (80009a4 <main+0x34c>)
 800076e:	f002 fdb3 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d004      	beq.n	8000786 <main+0x12e>
    printf("I2C communication error (%X).\n", status);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4619      	mov	r1, r3
 8000780:	4889      	ldr	r0, [pc, #548]	@ (80009a8 <main+0x350>)
 8000782:	f006 fb63 	bl	8006e4c <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 8000786:	230f      	movs	r3, #15
 8000788:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800078a:	23c8      	movs	r3, #200	@ 0xc8
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	2301      	movs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	220e      	movs	r2, #14
 800079a:	217e      	movs	r1, #126	@ 0x7e
 800079c:	4881      	ldr	r0, [pc, #516]	@ (80009a4 <main+0x34c>)
 800079e:	f002 fd9b 	bl	80032d8 <HAL_I2C_Mem_Write>
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <main+0x15e>
    printf("I2C communication error (%X).\n", status);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4619      	mov	r1, r3
 80007b0:	487d      	ldr	r0, [pc, #500]	@ (80009a8 <main+0x350>)
 80007b2:	f006 fb4b 	bl	8006e4c <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80007b6:	230f      	movs	r3, #15
 80007b8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80007ba:	23c8      	movs	r3, #200	@ 0xc8
 80007bc:	9302      	str	r3, [sp, #8]
 80007be:	2301      	movs	r3, #1
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	1dbb      	adds	r3, r7, #6
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	220b      	movs	r2, #11
 80007ca:	217e      	movs	r1, #126	@ 0x7e
 80007cc:	4875      	ldr	r0, [pc, #468]	@ (80009a4 <main+0x34c>)
 80007ce:	f002 fd83 	bl	80032d8 <HAL_I2C_Mem_Write>
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d004      	beq.n	80007e6 <main+0x18e>
    printf("I2C communication error (%X).\n", status);
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4619      	mov	r1, r3
 80007e0:	4871      	ldr	r0, [pc, #452]	@ (80009a8 <main+0x350>)
 80007e2:	f006 fb33 	bl	8006e4c <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 80007e6:	230f      	movs	r3, #15
 80007e8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80007ea:	23c8      	movs	r3, #200	@ 0xc8
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	2301      	movs	r3, #1
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2301      	movs	r3, #1
 80007f8:	2206      	movs	r2, #6
 80007fa:	217e      	movs	r1, #126	@ 0x7e
 80007fc:	4869      	ldr	r0, [pc, #420]	@ (80009a4 <main+0x34c>)
 80007fe:	f002 fd6b 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d004      	beq.n	8000816 <main+0x1be>
    printf("I2C communication error (%X).\n", status);
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4619      	mov	r1, r3
 8000810:	4865      	ldr	r0, [pc, #404]	@ (80009a8 <main+0x350>)
 8000812:	f006 fb1b 	bl	8006e4c <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000816:	230f      	movs	r3, #15
 8000818:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 800081a:	23c8      	movs	r3, #200	@ 0xc8
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	2301      	movs	r3, #1
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2223      	movs	r2, #35	@ 0x23
 800082a:	217e      	movs	r1, #126	@ 0x7e
 800082c:	485d      	ldr	r0, [pc, #372]	@ (80009a4 <main+0x34c>)
 800082e:	f002 fd53 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <main+0x1ee>
    printf("I2C communication error (%X).\n", status);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4619      	mov	r1, r3
 8000840:	4859      	ldr	r0, [pc, #356]	@ (80009a8 <main+0x350>)
 8000842:	f006 fb03 	bl	8006e4c <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000846:	2305      	movs	r3, #5
 8000848:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 800084a:	23c8      	movs	r3, #200	@ 0xc8
 800084c:	9302      	str	r3, [sp, #8]
 800084e:	2301      	movs	r3, #1
 8000850:	9301      	str	r3, [sp, #4]
 8000852:	1dbb      	adds	r3, r7, #6
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2301      	movs	r3, #1
 8000858:	2222      	movs	r2, #34	@ 0x22
 800085a:	217e      	movs	r1, #126	@ 0x7e
 800085c:	4851      	ldr	r0, [pc, #324]	@ (80009a4 <main+0x34c>)
 800085e:	f002 fd3b 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d004      	beq.n	8000876 <main+0x21e>
    printf("I2C communication error (%X).\n", status);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4619      	mov	r1, r3
 8000870:	484d      	ldr	r0, [pc, #308]	@ (80009a8 <main+0x350>)
 8000872:	f006 faeb 	bl	8006e4c <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 8000876:	237d      	movs	r3, #125	@ 0x7d
 8000878:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 800087a:	23c8      	movs	r3, #200	@ 0xc8
 800087c:	9302      	str	r3, [sp, #8]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	2225      	movs	r2, #37	@ 0x25
 800088a:	217e      	movs	r1, #126	@ 0x7e
 800088c:	4845      	ldr	r0, [pc, #276]	@ (80009a4 <main+0x34c>)
 800088e:	f002 fd23 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <main+0x24e>
    printf("I2C communication error (%X).\n", status);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4619      	mov	r1, r3
 80008a0:	4841      	ldr	r0, [pc, #260]	@ (80009a8 <main+0x350>)
 80008a2:	f006 fad3 	bl	8006e4c <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80008a6:	231b      	movs	r3, #27
 80008a8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80008aa:	23c8      	movs	r3, #200	@ 0xc8
 80008ac:	9302      	str	r3, [sp, #8]
 80008ae:	2301      	movs	r3, #1
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	2226      	movs	r2, #38	@ 0x26
 80008ba:	217e      	movs	r1, #126	@ 0x7e
 80008bc:	4839      	ldr	r0, [pc, #228]	@ (80009a4 <main+0x34c>)
 80008be:	f002 fd0b 	bl	80032d8 <HAL_I2C_Mem_Write>
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d004      	beq.n	80008d6 <main+0x27e>
    printf("I2C communication error (%X).\n", status);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4619      	mov	r1, r3
 80008d0:	4835      	ldr	r0, [pc, #212]	@ (80009a8 <main+0x350>)
 80008d2:	f006 fabb 	bl	8006e4c <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 80008d6:	2064      	movs	r0, #100	@ 0x64
 80008d8:	f001 fea0 	bl	800261c <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008dc:	200a      	movs	r0, #10
 80008de:	f002 fa70 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80008e2:	2008      	movs	r0, #8
 80008e4:	f002 fa7b 	bl	8002dde <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80008e8:	2312      	movs	r3, #18
 80008ea:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80008ec:	23c8      	movs	r3, #200	@ 0xc8
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	2301      	movs	r3, #1
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	1dbb      	adds	r3, r7, #6
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2301      	movs	r3, #1
 80008fa:	227d      	movs	r2, #125	@ 0x7d
 80008fc:	217c      	movs	r1, #124	@ 0x7c
 80008fe:	4829      	ldr	r0, [pc, #164]	@ (80009a4 <main+0x34c>)
 8000900:	f002 fcea 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d004      	beq.n	8000918 <main+0x2c0>
    printf("I2C communication error (%X).\n", status);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4619      	mov	r1, r3
 8000912:	4825      	ldr	r0, [pc, #148]	@ (80009a8 <main+0x350>)
 8000914:	f006 fa9a 	bl	8006e4c <iprintf>

  data = 0x34;
 8000918:	2334      	movs	r3, #52	@ 0x34
 800091a:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800091c:	23c8      	movs	r3, #200	@ 0xc8
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	2301      	movs	r3, #1
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	1dbb      	adds	r3, r7, #6
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2301      	movs	r3, #1
 800092a:	227d      	movs	r2, #125	@ 0x7d
 800092c:	217c      	movs	r1, #124	@ 0x7c
 800092e:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <main+0x34c>)
 8000930:	f002 fcd2 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <main+0x2f0>
    printf("I2C communication error (%X).\n", status);
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4619      	mov	r1, r3
 8000942:	4819      	ldr	r0, [pc, #100]	@ (80009a8 <main+0x350>)
 8000944:	f006 fa82 	bl	8006e4c <iprintf>

  HAL_Delay(100);
 8000948:	2064      	movs	r0, #100	@ 0x64
 800094a:	f001 fe67 	bl	800261c <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 800094e:	23ff      	movs	r3, #255	@ 0xff
 8000950:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000952:	23c8      	movs	r3, #200	@ 0xc8
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2301      	movs	r3, #1
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	220f      	movs	r2, #15
 8000962:	217c      	movs	r1, #124	@ 0x7c
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <main+0x34c>)
 8000966:	f002 fcb7 	bl	80032d8 <HAL_I2C_Mem_Write>
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d004      	beq.n	800097e <main+0x326>
    printf("I2C communication error (%X).\n", status);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <main+0x350>)
 800097a:	f006 fa67 	bl	8006e4c <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 800097e:	23ff      	movs	r3, #255	@ 0xff
 8000980:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000982:	23c8      	movs	r3, #200	@ 0xc8
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2301      	movs	r3, #1
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	1dbb      	adds	r3, r7, #6
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2301      	movs	r3, #1
 8000990:	220e      	movs	r2, #14
 8000992:	217c      	movs	r1, #124	@ 0x7c
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <main+0x34c>)
 8000996:	f002 fc9f 	bl	80032d8 <HAL_I2C_Mem_Write>
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	e005      	b.n	80009ac <main+0x354>
 80009a0:	40021000 	.word	0x40021000
 80009a4:	200000cc 	.word	0x200000cc
 80009a8:	08007c14 	.word	0x08007c14
  if (status != HAL_OK)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d004      	beq.n	80009bc <main+0x364>
    printf("I2C communication error (%X).\n", status);
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4619      	mov	r1, r3
 80009b6:	482b      	ldr	r0, [pc, #172]	@ (8000a64 <main+0x40c>)
 80009b8:	f006 fa48 	bl	8006e4c <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 80009c0:	23c8      	movs	r3, #200	@ 0xc8
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	2213      	movs	r2, #19
 80009d0:	217c      	movs	r1, #124	@ 0x7c
 80009d2:	4825      	ldr	r0, [pc, #148]	@ (8000a68 <main+0x410>)
 80009d4:	f002 fc80 	bl	80032d8 <HAL_I2C_Mem_Write>
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d004      	beq.n	80009ec <main+0x394>
    printf("I2C communication error (%X).\n", status);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4619      	mov	r1, r3
 80009e6:	481f      	ldr	r0, [pc, #124]	@ (8000a64 <main+0x40c>)
 80009e8:	f006 fa30 	bl	8006e4c <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 80009ec:	23aa      	movs	r3, #170	@ 0xaa
 80009ee:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 80009f0:	23c8      	movs	r3, #200	@ 0xc8
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	2216      	movs	r2, #22
 8000a00:	217c      	movs	r1, #124	@ 0x7c
 8000a02:	4819      	ldr	r0, [pc, #100]	@ (8000a68 <main+0x410>)
 8000a04:	f002 fc68 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d004      	beq.n	8000a1c <main+0x3c4>
    printf("I2C communication error (%X).\n", status);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4813      	ldr	r0, [pc, #76]	@ (8000a64 <main+0x40c>)
 8000a18:	f006 fa18 	bl	8006e4c <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000a1c:	23aa      	movs	r3, #170	@ 0xaa
 8000a1e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000a20:	23c8      	movs	r3, #200	@ 0xc8
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	2301      	movs	r3, #1
 8000a26:	9301      	str	r3, [sp, #4]
 8000a28:	1dbb      	adds	r3, r7, #6
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2217      	movs	r2, #23
 8000a30:	217c      	movs	r1, #124	@ 0x7c
 8000a32:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <main+0x410>)
 8000a34:	f002 fc50 	bl	80032d8 <HAL_I2C_Mem_Write>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d004      	beq.n	8000a4c <main+0x3f4>
    printf("I2C communication error (%X).\n", status);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4619      	mov	r1, r3
 8000a46:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <main+0x40c>)
 8000a48:	f006 fa00 	bl	8006e4c <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000a4c:	2064      	movs	r0, #100	@ 0x64
 8000a4e:	f001 fde5 	bl	800261c <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a52:	2008      	movs	r0, #8
 8000a54:	f002 f9b5 	bl	8002dc2 <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <main+0x414>)
 8000a5a:	f006 fa5f 	bl	8006f1c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5e:	bf00      	nop
 8000a60:	e7fd      	b.n	8000a5e <main+0x406>
 8000a62:	bf00      	nop
 8000a64:	08007c14 	.word	0x08007c14
 8000a68:	200000cc 	.word	0x200000cc
 8000a6c:	08007c5c 	.word	0x08007c5c

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	@ 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 fb2c 	bl	80070dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a94:	f003 f83a 	bl	8003b0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <SystemClock_Config+0xdc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b4c <SystemClock_Config+0xdc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <SystemClock_Config+0xdc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab0:	4b27      	ldr	r3, [pc, #156]	@ (8000b50 <SystemClock_Config+0xe0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ab8:	4a25      	ldr	r2, [pc, #148]	@ (8000b50 <SystemClock_Config+0xe0>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <SystemClock_Config+0xe0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ad4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000ae4:	2360      	movs	r3, #96	@ 0x60
 8000ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f867 	bl	8003bcc <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b04:	f000 ff16 	bl	8001934 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b08:	f003 f810 	bl	8003b2c <HAL_PWREx_EnableOverDrive>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b12:	f000 ff0f 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2103      	movs	r1, #3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 faf8 	bl	8004128 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b3e:	f000 fef9 	bl	8001934 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	@ 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <MX_ADC1_Init+0x9c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <MX_ADC1_Init+0xa0>)
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb4:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000bb6:	f001 fd55 	bl	8002664 <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bc0:	f000 feb8 	bl	8001934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_ADC1_Init+0x98>)
 8000bd6:	f001 fd89 	bl	80026ec <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000be0:	f000 fea8 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000084 	.word	0x20000084
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	0f000001 	.word	0x0f000001

08000bf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <MX_I2C1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <MX_I2C1_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c34:	f002 fab4 	bl	80031a0 <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 fe79 	bl	8001934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c46:	f002 fec9 	bl	80039dc <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 fe70 	bl	8001934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_I2C1_Init+0x74>)
 8000c58:	f002 ff0b 	bl	8003a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 fe67 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000cc 	.word	0x200000cc
 8000c70:	40005400 	.word	0x40005400
 8000c74:	20303e5d 	.word	0x20303e5d

08000c78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf0 <MX_I2C2_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <MX_I2C2_Init+0x7c>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cb2:	480e      	ldr	r0, [pc, #56]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000cb4:	f002 fa74 	bl	80031a0 <HAL_I2C_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 fe39 	bl	8001934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000cc6:	f002 fe89 	bl	80039dc <HAL_I2CEx_ConfigAnalogFilter>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 fe30 	bl	8001934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_I2C2_Init+0x74>)
 8000cd8:	f002 fecb 	bl	8003a72 <HAL_I2CEx_ConfigDigitalFilter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 fe27 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000120 	.word	0x20000120
 8000cf0:	40005800 	.word	0x40005800
 8000cf4:	20303e5d 	.word	0x20303e5d

08000cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d70 <MX_SPI1_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d12:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d46:	2207      	movs	r2, #7
 8000d48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_SPI1_Init+0x74>)
 8000d58:	f004 f834 	bl	8004dc4 <HAL_SPI_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fde7 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000174 	.word	0x20000174
 8000d70:	40013000 	.word	0x40013000

08000d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09a      	sub	sp, #104	@ 0x68
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]
 8000da6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	222c      	movs	r2, #44	@ 0x2c
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f006 f994 	bl	80070dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000db4:	4b55      	ldr	r3, [pc, #340]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000db6:	4a56      	ldr	r2, [pc, #344]	@ (8000f10 <MX_TIM1_Init+0x19c>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000dba:	4b54      	ldr	r3, [pc, #336]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000dbc:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000dc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b52      	ldr	r3, [pc, #328]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000dc8:	4b50      	ldr	r3, [pc, #320]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000dca:	22c8      	movs	r2, #200	@ 0xc8
 8000dcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000de0:	484a      	ldr	r0, [pc, #296]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000de2:	f004 f89a 	bl	8004f1a <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f000 fda2 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4843      	ldr	r0, [pc, #268]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000dfe:	f004 fbf1 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e08:	f000 fd94 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e0c:	483f      	ldr	r0, [pc, #252]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000e0e:	f004 f8db 	bl	8004fc8 <HAL_TIM_PWM_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e18:	f000 fd8c 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4837      	ldr	r0, [pc, #220]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000e30:	f005 f970 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e3a:	f000 fd7b 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3e:	2360      	movs	r3, #96	@ 0x60
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	482a      	ldr	r0, [pc, #168]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000e64:	f004 faaa 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e6e:	f000 fd61 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e76:	2204      	movs	r2, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4824      	ldr	r0, [pc, #144]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000e7c:	f004 fa9e 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e86:	f000 fd55 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e8e:	2208      	movs	r2, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000e94:	f004 fa92 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000e9e:	f000 fd49 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4818      	ldr	r0, [pc, #96]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000eac:	f004 fa86 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000eb6:	f000 fd3d 	bl	8001934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000edc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000ef0:	f005 f99e 	bl	8006230 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000efa:	f000 fd1b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <MX_TIM1_Init+0x198>)
 8000f00:	f000 ffbe 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 8000f04:	bf00      	nop
 8000f06:	3768      	adds	r7, #104	@ 0x68
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001d8 	.word	0x200001d8
 8000f10:	40010000 	.word	0x40010000

08000f14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b092      	sub	sp, #72	@ 0x48
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]
 8000f46:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f5c:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f68:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b34      	ldr	r3, [pc, #208]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7c:	4831      	ldr	r0, [pc, #196]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f7e:	f003 ffcc 	bl	8004f1a <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000f88:	f000 fcd4 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f96:	4619      	mov	r1, r3
 8000f98:	482a      	ldr	r0, [pc, #168]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000f9a:	f004 fb23 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fa4:	f000 fcc6 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fa8:	4826      	ldr	r0, [pc, #152]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000faa:	f004 f80d 	bl	8004fc8 <HAL_TIM_PWM_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000fb4:	f000 fcbe 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fb8:	4822      	ldr	r0, [pc, #136]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000fba:	f004 f85c 	bl	8005076 <HAL_TIM_IC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 fcb6 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	@ (8001044 <MX_TIM2_Init+0x130>)
 8000fd8:	f005 f89c 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000fe2:	f000 fca7 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	2360      	movs	r3, #96	@ 0x60
 8000fe8:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4811      	ldr	r0, [pc, #68]	@ (8001044 <MX_TIM2_Init+0x130>)
 8001000:	f004 f9dc 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800100a:	f000 fc93 	bl	8001934 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001012:	2301      	movs	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	2208      	movs	r2, #8
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MX_TIM2_Init+0x130>)
 8001026:	f004 f92d 	bl	8005284 <HAL_TIM_IC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001030:	f000 fc80 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <MX_TIM2_Init+0x130>)
 8001036:	f000 ff23 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 800103a:	bf00      	nop
 800103c:	3748      	adds	r7, #72	@ 0x48
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000224 	.word	0x20000224

08001048 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	@ 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2224      	movs	r2, #36	@ 0x24
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f006 f840 	bl	80070dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <MX_TIM3_Init+0xa4>)
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <MX_TIM3_Init+0xa8>)
 800106a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <MX_TIM3_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <MX_TIM3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_TIM3_Init+0xa4>)
 800107a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800107e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_TIM3_Init+0xa4>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_TIM3_Init+0xa4>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800108c:	2301      	movs	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001094:	2301      	movs	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_TIM3_Init+0xa4>)
 80010b8:	f004 f83e 	bl	8005138 <HAL_TIM_Encoder_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010c2:	f000 fc37 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	@ (80010ec <MX_TIM3_Init+0xa4>)
 80010d4:	f005 f81e 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80010de:	f000 fc29 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	@ 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000270 	.word	0x20000270
 80010f0:	40000400 	.word	0x40000400

080010f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2224      	movs	r2, #36	@ 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 ffea 	bl	80070dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <MX_TIM4_Init+0xa4>)
 8001114:	4a21      	ldr	r2, [pc, #132]	@ (800119c <MX_TIM4_Init+0xa8>)
 8001116:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_TIM4_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <MX_TIM4_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_TIM4_Init+0xa4>)
 8001126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_TIM4_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_TIM4_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001138:	2301      	movs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM4_Init+0xa4>)
 8001164:	f003 ffe8 	bl	8005138 <HAL_TIM_Encoder_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800116e:	f000 fbe1 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_TIM4_Init+0xa4>)
 8001180:	f004 ffc8 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800118a:	f000 fbd3 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	@ 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200002bc 	.word	0x200002bc
 800119c:	40000800 	.word	0x40000800

080011a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	@ (800128c <MX_TIM5_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011e4:	4b28      	ldr	r3, [pc, #160]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011e6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	@ (8001288 <MX_TIM5_Init+0xe8>)
 80011fa:	f003 fe8e 	bl	8004f1a <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fb96 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <MX_TIM5_Init+0xe8>)
 8001216:	f004 f9e5 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fb88 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	@ (8001288 <MX_TIM5_Init+0xe8>)
 8001226:	f003 fecf 	bl	8004fc8 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fb80 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <MX_TIM5_Init+0xe8>)
 8001244:	f004 ff66 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fb71 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	@ 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM5_Init+0xe8>)
 800126a:	f004 f8a7 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 fb5e 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM5_Init+0xe8>)
 800127a:	f000 fe01 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	@ 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000308 	.word	0x20000308
 800128c:	40000c00 	.word	0x40000c00

08001290 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b09a      	sub	sp, #104	@ 0x68
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	222c      	movs	r2, #44	@ 0x2c
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 ff06 	bl	80070dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012d0:	4b56      	ldr	r3, [pc, #344]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012d2:	4a57      	ldr	r2, [pc, #348]	@ (8001430 <MX_TIM8_Init+0x1a0>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80012d6:	4b55      	ldr	r3, [pc, #340]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012d8:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80012dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b53      	ldr	r3, [pc, #332]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b4f      	ldr	r3, [pc, #316]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012f2:	4b4e      	ldr	r3, [pc, #312]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b4c      	ldr	r3, [pc, #304]	@ (800142c <MX_TIM8_Init+0x19c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012fe:	484b      	ldr	r0, [pc, #300]	@ (800142c <MX_TIM8_Init+0x19c>)
 8001300:	f003 fe0b 	bl	8004f1a <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800130a:	f000 fb13 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001312:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001314:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001318:	4619      	mov	r1, r3
 800131a:	4844      	ldr	r0, [pc, #272]	@ (800142c <MX_TIM8_Init+0x19c>)
 800131c:	f004 f962 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001326:	f000 fb05 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800132a:	4840      	ldr	r0, [pc, #256]	@ (800142c <MX_TIM8_Init+0x19c>)
 800132c:	f003 fe4c 	bl	8004fc8 <HAL_TIM_PWM_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001336:	f000 fafd 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001346:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800134a:	4619      	mov	r1, r3
 800134c:	4837      	ldr	r0, [pc, #220]	@ (800142c <MX_TIM8_Init+0x19c>)
 800134e:	f004 fee1 	bl	8006114 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001358:	f000 faec 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135c:	2360      	movs	r3, #96	@ 0x60
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001364:	2300      	movs	r3, #0
 8001366:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001368:	2300      	movs	r3, #0
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001378:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	482a      	ldr	r0, [pc, #168]	@ (800142c <MX_TIM8_Init+0x19c>)
 8001382:	f004 f81b 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800138c:	f000 fad2 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001390:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001394:	2204      	movs	r2, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4824      	ldr	r0, [pc, #144]	@ (800142c <MX_TIM8_Init+0x19c>)
 800139a:	f004 f80f 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80013a4:	f000 fac6 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ac:	2208      	movs	r2, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	481e      	ldr	r0, [pc, #120]	@ (800142c <MX_TIM8_Init+0x19c>)
 80013b2:	f004 f803 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80013bc:	f000 faba 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013c4:	220c      	movs	r2, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4818      	ldr	r0, [pc, #96]	@ (800142c <MX_TIM8_Init+0x19c>)
 80013ca:	f003 fff7 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80013d4:	f000 faae 	bl	8001934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	@ (800142c <MX_TIM8_Init+0x19c>)
 800140e:	f004 ff0f 	bl	8006230 <HAL_TIMEx_ConfigBreakDeadTime>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001418:	f000 fa8c 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <MX_TIM8_Init+0x19c>)
 800141e:	f000 fd2f 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3768      	adds	r7, #104	@ 0x68
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000354 	.word	0x20000354
 8001430:	40010400 	.word	0x40010400

08001434 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_TIM9_Init+0x98>)
 800144e:	4a20      	ldr	r2, [pc, #128]	@ (80014d0 <MX_TIM9_Init+0x9c>)
 8001450:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_TIM9_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_TIM9_Init+0x98>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM9_Init+0x98>)
 8001460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001464:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_TIM9_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_TIM9_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001472:	4816      	ldr	r0, [pc, #88]	@ (80014cc <MX_TIM9_Init+0x98>)
 8001474:	f003 fda8 	bl	8004fc8 <HAL_TIM_PWM_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800147e:	f000 fa59 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001482:	2360      	movs	r3, #96	@ 0x60
 8001484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM9_Init+0x98>)
 800149a:	f003 ff8f 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80014a4:	f000 fa46 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2204      	movs	r2, #4
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM9_Init+0x98>)
 80014b0:	f003 ff84 	bl	80053bc <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80014ba:	f000 fa3b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80014be:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM9_Init+0x98>)
 80014c0:	f000 fcde 	bl	8001e80 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200003a0 	.word	0x200003a0
 80014d0:	40014000 	.word	0x40014000

080014d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_UART4_Init+0x58>)
 80014da:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <MX_UART4_Init+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <MX_UART4_Init+0x58>)
 80014e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_UART4_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_UART4_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_UART4_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_UART4_Init+0x58>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <MX_UART4_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <MX_UART4_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <MX_UART4_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <MX_UART4_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_UART4_Init+0x58>)
 8001518:	f004 ff08 	bl	800632c <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001522:	f000 fa07 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200003ec 	.word	0x200003ec
 8001530:	40004c00 	.word	0x40004c00

08001534 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_UART5_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	@ (8001590 <MX_UART5_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_UART5_Init+0x58>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_UART5_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_UART5_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_UART5_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_UART5_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_UART5_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_UART5_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_UART5_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_UART5_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_UART5_Init+0x58>)
 8001578:	f004 fed8 	bl	800632c <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 f9d7 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000474 	.word	0x20000474
 8001590:	40005000 	.word	0x40005000

08001594 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	@ (80015f0 <MX_USART1_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART1_UART_Init+0x58>)
 80015d8:	f004 fea8 	bl	800632c <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f9a7 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200004fc 	.word	0x200004fc
 80015f0:	40011000 	.word	0x40011000

080015f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f8:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_USART2_UART_Init+0x58>)
 80015fa:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <MX_USART2_UART_Init+0x5c>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_USART2_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART2_UART_Init+0x58>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART2_UART_Init+0x58>)
 8001638:	f004 fe78 	bl	800632c <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001642:	f000 f977 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000584 	.word	0x20000584
 8001650:	40004400 	.word	0x40004400

08001654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <MX_USART3_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_USART3_UART_Init+0x58>)
 8001698:	f004 fe48 	bl	800632c <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 f947 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000060c 	.word	0x2000060c
 80016b0:	40004800 	.word	0x40004800

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	@ 0x38
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ca:	4b93      	ldr	r3, [pc, #588]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a92      	ldr	r2, [pc, #584]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b90      	ldr	r3, [pc, #576]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b8d      	ldr	r3, [pc, #564]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a8c      	ldr	r2, [pc, #560]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b87      	ldr	r3, [pc, #540]	@ (8001918 <MX_GPIO_Init+0x264>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a86      	ldr	r2, [pc, #536]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b84      	ldr	r3, [pc, #528]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	4b81      	ldr	r3, [pc, #516]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a80      	ldr	r2, [pc, #512]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b7e      	ldr	r3, [pc, #504]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b7b      	ldr	r3, [pc, #492]	@ (8001918 <MX_GPIO_Init+0x264>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a7a      	ldr	r2, [pc, #488]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b78      	ldr	r3, [pc, #480]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b75      	ldr	r3, [pc, #468]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a74      	ldr	r2, [pc, #464]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b72      	ldr	r3, [pc, #456]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <MX_GPIO_Init+0x264>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a6e      	ldr	r2, [pc, #440]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b6c      	ldr	r3, [pc, #432]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	4b69      	ldr	r3, [pc, #420]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a68      	ldr	r2, [pc, #416]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b66      	ldr	r3, [pc, #408]	@ (8001918 <MX_GPIO_Init+0x264>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2118      	movs	r1, #24
 800178e:	4863      	ldr	r0, [pc, #396]	@ (800191c <MX_GPIO_Init+0x268>)
 8001790:	f001 fcec 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	f244 0181 	movw	r1, #16513	@ 0x4081
 800179a:	4861      	ldr	r0, [pc, #388]	@ (8001920 <MX_GPIO_Init+0x26c>)
 800179c:	f001 fce6 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2140      	movs	r1, #64	@ 0x40
 80017a4:	485f      	ldr	r0, [pc, #380]	@ (8001924 <MX_GPIO_Init+0x270>)
 80017a6:	f001 fce1 	bl	800316c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80017aa:	2318      	movs	r3, #24
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017be:	4619      	mov	r1, r3
 80017c0:	4856      	ldr	r0, [pc, #344]	@ (800191c <MX_GPIO_Init+0x268>)
 80017c2:	f001 fb27 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80017c6:	f643 7308 	movw	r3, #16136	@ 0x3f08
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4852      	ldr	r0, [pc, #328]	@ (8001928 <MX_GPIO_Init+0x274>)
 80017de:	f001 fb19 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e2:	2310      	movs	r3, #16
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	484c      	ldr	r0, [pc, #304]	@ (8001928 <MX_GPIO_Init+0x274>)
 80017f8:	f001 fb0c 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017fc:	2332      	movs	r3, #50	@ 0x32
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800180c:	230b      	movs	r3, #11
 800180e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	4845      	ldr	r0, [pc, #276]	@ (800192c <MX_GPIO_Init+0x278>)
 8001818:	f001 fafc 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800181c:	2386      	movs	r3, #134	@ 0x86
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800182c:	230b      	movs	r3, #11
 800182e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	483e      	ldr	r0, [pc, #248]	@ (8001930 <MX_GPIO_Init+0x27c>)
 8001838:	f001 faec 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800183c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4832      	ldr	r0, [pc, #200]	@ (8001920 <MX_GPIO_Init+0x26c>)
 8001856:	f001 fadd 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800185a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800186c:	230b      	movs	r3, #11
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	482a      	ldr	r0, [pc, #168]	@ (8001920 <MX_GPIO_Init+0x26c>)
 8001878:	f001 facc 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800187c:	2340      	movs	r3, #64	@ 0x40
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	4824      	ldr	r0, [pc, #144]	@ (8001924 <MX_GPIO_Init+0x270>)
 8001894:	f001 fabe 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	481e      	ldr	r0, [pc, #120]	@ (8001924 <MX_GPIO_Init+0x270>)
 80018ac:	f001 fab2 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c2:	230a      	movs	r3, #10
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4818      	ldr	r0, [pc, #96]	@ (8001930 <MX_GPIO_Init+0x27c>)
 80018ce:	f001 faa1 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4812      	ldr	r0, [pc, #72]	@ (8001930 <MX_GPIO_Init+0x27c>)
 80018e8:	f001 fa94 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018ec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018fe:	230b      	movs	r3, #11
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_GPIO_Init+0x270>)
 800190a:	f001 fa83 	bl	8002e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3738      	adds	r7, #56	@ 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40021000 	.word	0x40021000
 8001920:	40020400 	.word	0x40020400
 8001924:	40021800 	.word	0x40021800
 8001928:	40021400 	.word	0x40021400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020000 	.word	0x40020000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <Error_Handler+0x8>

08001940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_MspInit+0x44>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	@ 0x40
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <HAL_MspInit+0x44>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_MspInit+0x44>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <HAL_MspInit+0x44>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001968:	6453      	str	r3, [r2, #68]	@ 0x44
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_MspInit+0x44>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <HAL_ADC_MspInit+0x74>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d123      	bne.n	80019f2 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_ADC_MspInit+0x78>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <HAL_ADC_MspInit+0x78>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_ADC_MspInit+0x78>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_ADC_MspInit+0x78>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a00 <HAL_ADC_MspInit+0x78>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_ADC_MspInit+0x78>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80019da:	2308      	movs	r3, #8
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019de:	2303      	movs	r3, #3
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <HAL_ADC_MspInit+0x7c>)
 80019ee:	f001 fa11 	bl	8002e14 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40012000 	.word	0x40012000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0b0      	sub	sp, #192	@ 0xc0
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2290      	movs	r2, #144	@ 0x90
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f005 fb57 	bl	80070dc <memset>
  if(hi2c->Instance==I2C1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a44      	ldr	r2, [pc, #272]	@ (8001b44 <HAL_I2C_MspInit+0x13c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13e      	bne.n	8001ab6 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fd93 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001a54:	f7ff ff6e 	bl	8001934 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a64:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a94:	4619      	mov	r1, r3
 8001a96:	482d      	ldr	r0, [pc, #180]	@ (8001b4c <HAL_I2C_MspInit+0x144>)
 8001a98:	f001 f9bc 	bl	8002e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	4a29      	ldr	r2, [pc, #164]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001aa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ab4:	e041      	b.n	8001b3a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	@ (8001b50 <HAL_I2C_MspInit+0x148>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d13c      	bne.n	8001b3a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ac0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ac4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fd4f 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001adc:	f7ff ff2a 	bl	8001934 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	4a18      	ldr	r2, [pc, #96]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001ae6:	f043 0320 	orr.w	r3, r3, #32
 8001aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aec:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afe:	2312      	movs	r3, #18
 8001b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b10:	2304      	movs	r3, #4
 8001b12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b16:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <HAL_I2C_MspInit+0x14c>)
 8001b1e:	f001 f979 	bl	8002e14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4a08      	ldr	r2, [pc, #32]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_I2C_MspInit+0x140>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	bf00      	nop
 8001b3c:	37c0      	adds	r7, #192	@ 0xc0
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40005400 	.word	0x40005400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	40005800 	.word	0x40005800
 8001b54:	40021400 	.word	0x40021400

08001b58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	@ 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a33      	ldr	r2, [pc, #204]	@ (8001c44 <HAL_SPI_MspInit+0xec>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d160      	bne.n	8001c3c <HAL_SPI_MspInit+0xe4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7a:	4b33      	ldr	r3, [pc, #204]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a32      	ldr	r2, [pc, #200]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b30      	ldr	r3, [pc, #192]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	4a2c      	ldr	r2, [pc, #176]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc2:	4b21      	ldr	r3, [pc, #132]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <HAL_SPI_MspInit+0xf0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bea:	2305      	movs	r3, #5
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4815      	ldr	r0, [pc, #84]	@ (8001c4c <HAL_SPI_MspInit+0xf4>)
 8001bf6:	f001 f90d 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	480e      	ldr	r0, [pc, #56]	@ (8001c50 <HAL_SPI_MspInit+0xf8>)
 8001c16:	f001 f8fd 	bl	8002e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <HAL_SPI_MspInit+0xfc>)
 8001c38:	f001 f8ec 	bl	8002e14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3730      	adds	r7, #48	@ 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40013000 	.word	0x40013000
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021800 	.word	0x40021800

08001c58 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	@ 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a32      	ldr	r2, [pc, #200]	@ (8001d40 <HAL_TIM_Base_MspInit+0xe8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10c      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7a:	4b32      	ldr	r3, [pc, #200]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a31      	ldr	r2, [pc, #196]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b2f      	ldr	r3, [pc, #188]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c92:	e051      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9c:	d129      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9e:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a28      	ldr	r2, [pc, #160]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <HAL_TIM_Base_MspInit+0xf0>)
 8001cec:	f001 f892 	bl	8002e14 <HAL_GPIO_Init>
}
 8001cf0:	e022      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a15      	ldr	r2, [pc, #84]	@ (8001d4c <HAL_TIM_Base_MspInit+0xf4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d10c      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d08:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	e010      	b.n	8001d38 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <HAL_TIM_Base_MspInit+0xf8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10b      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_TIM_Base_MspInit+0xec>)
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	3730      	adds	r7, #48	@ 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40000c00 	.word	0x40000c00
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	@ 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2e      	ldr	r2, [pc, #184]	@ (8001e2c <HAL_TIM_Encoder_MspInit+0xd8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d128      	bne.n	8001dc8 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d76:	4b2e      	ldr	r3, [pc, #184]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a27      	ldr	r2, [pc, #156]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001da6:	2330      	movs	r3, #48	@ 0x30
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	481c      	ldr	r0, [pc, #112]	@ (8001e34 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001dc2:	f001 f827 	bl	8002e14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dc6:	e02d      	b.n	8001e24 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e38 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d128      	bne.n	8001e24 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a16      	ldr	r2, [pc, #88]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a10      	ldr	r2, [pc, #64]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001e02:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e20:	f000 fff8 	bl	8002e14 <HAL_GPIO_Init>
}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	40020c00 	.word	0x40020c00

08001e40 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_TIM_PWM_MspInit+0x38>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d10b      	bne.n	8001e6a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	@ 0x30
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a56      	ldr	r2, [pc, #344]	@ (8001ff8 <HAL_TIM_MspPostInit+0x178>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d11d      	bne.n	8001ede <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea2:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a55      	ldr	r2, [pc, #340]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001ea8:	f043 0310 	orr.w	r3, r3, #16
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001eba:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	484a      	ldr	r0, [pc, #296]	@ (8002000 <HAL_TIM_MspPostInit+0x180>)
 8001ed8:	f000 ff9c 	bl	8002e14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001edc:	e088      	b.n	8001ff0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee6:	d11d      	bne.n	8001f24 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b44      	ldr	r3, [pc, #272]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	4a43      	ldr	r2, [pc, #268]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef4:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f12:	2301      	movs	r3, #1
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4839      	ldr	r0, [pc, #228]	@ (8002004 <HAL_TIM_MspPostInit+0x184>)
 8001f1e:	f000 ff79 	bl	8002e14 <HAL_GPIO_Init>
}
 8001f22:	e065      	b.n	8001ff0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a37      	ldr	r2, [pc, #220]	@ (8002008 <HAL_TIM_MspPostInit+0x188>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d11c      	bne.n	8001f68 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a32      	ldr	r2, [pc, #200]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4828      	ldr	r0, [pc, #160]	@ (8002004 <HAL_TIM_MspPostInit+0x184>)
 8001f62:	f000 ff57 	bl	8002e14 <HAL_GPIO_Init>
}
 8001f66:	e043      	b.n	8001ff0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a27      	ldr	r2, [pc, #156]	@ (800200c <HAL_TIM_MspPostInit+0x18c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11d      	bne.n	8001fae <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001f8a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	481a      	ldr	r0, [pc, #104]	@ (8002010 <HAL_TIM_MspPostInit+0x190>)
 8001fa8:	f000 ff34 	bl	8002e14 <HAL_GPIO_Init>
}
 8001fac:	e020      	b.n	8001ff0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_TIM_MspPostInit+0x194>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <HAL_TIM_MspPostInit+0x17c>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8001fd0:	2360      	movs	r3, #96	@ 0x60
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <HAL_TIM_MspPostInit+0x180>)
 8001fec:	f000 ff12 	bl	8002e14 <HAL_GPIO_Init>
}
 8001ff0:	bf00      	nop
 8001ff2:	3730      	adds	r7, #48	@ 0x30
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021000 	.word	0x40021000
 8002004:	40020000 	.word	0x40020000
 8002008:	40000c00 	.word	0x40000c00
 800200c:	40010400 	.word	0x40010400
 8002010:	40020800 	.word	0x40020800
 8002014:	40014000 	.word	0x40014000

08002018 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b6      	sub	sp, #216	@ 0xd8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002030:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002034:	2290      	movs	r2, #144	@ 0x90
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f005 f84f 	bl	80070dc <memset>
  if(huart->Instance==UART4)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4aa0      	ldr	r2, [pc, #640]	@ (80022c4 <HAL_UART_MspInit+0x2ac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d13e      	bne.n	80020c6 <HAL_UART_MspInit+0xae>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800204c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002054:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fa8b 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002064:	f7ff fc66 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002068:	4b97      	ldr	r3, [pc, #604]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	4a96      	ldr	r2, [pc, #600]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800206e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002072:	6413      	str	r3, [r2, #64]	@ 0x40
 8002074:	4b94      	ldr	r3, [pc, #592]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
 800207e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002080:	4b91      	ldr	r3, [pc, #580]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4a90      	ldr	r2, [pc, #576]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6313      	str	r3, [r2, #48]	@ 0x30
 800208c:	4b8e      	ldr	r3, [pc, #568]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002098:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800209c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020b2:	2308      	movs	r3, #8
 80020b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80020bc:	4619      	mov	r1, r3
 80020be:	4883      	ldr	r0, [pc, #524]	@ (80022cc <HAL_UART_MspInit+0x2b4>)
 80020c0:	f000 fea8 	bl	8002e14 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80020c4:	e151      	b.n	800236a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a81      	ldr	r2, [pc, #516]	@ (80022d0 <HAL_UART_MspInit+0x2b8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d160      	bne.n	8002192 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80020d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fa47 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80020ec:	f7ff fc22 	bl	8001934 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80020f0:	4b75      	ldr	r3, [pc, #468]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	4a74      	ldr	r2, [pc, #464]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fc:	4b72      	ldr	r3, [pc, #456]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002108:	4b6f      	ldr	r3, [pc, #444]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	4a6e      	ldr	r2, [pc, #440]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	6313      	str	r3, [r2, #48]	@ 0x30
 8002114:	4b6c      	ldr	r3, [pc, #432]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002120:	4b69      	ldr	r3, [pc, #420]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	4a68      	ldr	r2, [pc, #416]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6313      	str	r3, [r2, #48]	@ 0x30
 800212c:	4b66      	ldr	r3, [pc, #408]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002152:	2308      	movs	r3, #8
 8002154:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800215c:	4619      	mov	r1, r3
 800215e:	485d      	ldr	r0, [pc, #372]	@ (80022d4 <HAL_UART_MspInit+0x2bc>)
 8002160:	f000 fe58 	bl	8002e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002168:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800217e:	2308      	movs	r3, #8
 8002180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002184:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002188:	4619      	mov	r1, r3
 800218a:	4850      	ldr	r0, [pc, #320]	@ (80022cc <HAL_UART_MspInit+0x2b4>)
 800218c:	f000 fe42 	bl	8002e14 <HAL_GPIO_Init>
}
 8002190:	e0eb      	b.n	800236a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a50      	ldr	r2, [pc, #320]	@ (80022d8 <HAL_UART_MspInit+0x2c0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d151      	bne.n	8002240 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800219c:	2340      	movs	r3, #64	@ 0x40
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021a0:	2300      	movs	r3, #0
 80021a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 f9e3 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80021b4:	f7ff fbbe 	bl	8001934 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b8:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80021ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021bc:	4a42      	ldr	r2, [pc, #264]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c4:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b3d      	ldr	r3, [pc, #244]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	4a3c      	ldr	r2, [pc, #240]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	6313      	str	r3, [r2, #48]	@ 0x30
 80021dc:	4b3a      	ldr	r3, [pc, #232]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002202:	2304      	movs	r3, #4
 8002204:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800220c:	4619      	mov	r1, r3
 800220e:	4831      	ldr	r0, [pc, #196]	@ (80022d4 <HAL_UART_MspInit+0x2bc>)
 8002210:	f000 fe00 	bl	8002e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002214:	2340      	movs	r3, #64	@ 0x40
 8002216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222c:	2307      	movs	r3, #7
 800222e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002236:	4619      	mov	r1, r3
 8002238:	4826      	ldr	r0, [pc, #152]	@ (80022d4 <HAL_UART_MspInit+0x2bc>)
 800223a:	f000 fdeb 	bl	8002e14 <HAL_GPIO_Init>
}
 800223e:	e094      	b.n	800236a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a25      	ldr	r2, [pc, #148]	@ (80022dc <HAL_UART_MspInit+0x2c4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d14c      	bne.n	80022e4 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800224e:	2300      	movs	r3, #0
 8002250:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002252:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002256:	4618      	mov	r0, r3
 8002258:	f002 f98c 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002262:	f7ff fb67 	bl	8001934 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a17      	ldr	r2, [pc, #92]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800226c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b0f      	ldr	r3, [pc, #60]	@ (80022c8 <HAL_UART_MspInit+0x2b0>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002296:	2360      	movs	r3, #96	@ 0x60
 8002298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ae:	2307      	movs	r3, #7
 80022b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4809      	ldr	r0, [pc, #36]	@ (80022e0 <HAL_UART_MspInit+0x2c8>)
 80022bc:	f000 fdaa 	bl	8002e14 <HAL_GPIO_Init>
}
 80022c0:	e053      	b.n	800236a <HAL_UART_MspInit+0x352>
 80022c2:	bf00      	nop
 80022c4:	40004c00 	.word	0x40004c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40005000 	.word	0x40005000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40004400 	.word	0x40004400
 80022e0:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_UART_MspInit+0x35c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d13d      	bne.n	800236a <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 f938 	bl	8004574 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800230a:	f7ff fb13 	bl	8001934 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_UART_MspInit+0x360>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <HAL_UART_MspInit+0x360>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <HAL_UART_MspInit+0x360>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <HAL_UART_MspInit+0x360>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	4a13      	ldr	r2, [pc, #76]	@ (8002378 <HAL_UART_MspInit+0x360>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	6313      	str	r3, [r2, #48]	@ 0x30
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_UART_MspInit+0x360>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800233e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002342:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002358:	2307      	movs	r3, #7
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_UART_MspInit+0x364>)
 8002366:	f000 fd55 	bl	8002e14 <HAL_GPIO_Init>
}
 800236a:	bf00      	nop
 800236c:	37d8      	adds	r7, #216	@ 0xd8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40004800 	.word	0x40004800
 8002378:	40023800 	.word	0x40023800
 800237c:	40020c00 	.word	0x40020c00

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <NMI_Handler+0x4>

08002388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <HardFault_Handler+0x4>

08002390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <MemManage_Handler+0x4>

08002398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d6:	f000 f901 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e00a      	b.n	8002406 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f0:	f3af 8000 	nop.w
 80023f4:	4601      	mov	r1, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	b2ca      	uxtb	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	dbf0      	blt.n	80023f0 <_read+0x12>
  }

  return len;
 800240e:	687b      	ldr	r3, [r7, #4]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002440:	605a      	str	r2, [r3, #4]
  return 0;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_isatty>:

int _isatty(int file)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002458:	2301      	movs	r3, #1
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002488:	4a14      	ldr	r2, [pc, #80]	@ (80024dc <_sbrk+0x5c>)
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <_sbrk+0x60>)
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <_sbrk+0x64>)
 800249e:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <_sbrk+0x68>)
 80024a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d207      	bcs.n	80024c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b0:	f004 fe62 	bl	8007178 <__errno>
 80024b4:	4603      	mov	r3, r0
 80024b6:	220c      	movs	r2, #12
 80024b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	e009      	b.n	80024d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <_sbrk+0x64>)
 80024d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20080000 	.word	0x20080000
 80024e0:	00000400 	.word	0x00000400
 80024e4:	20000694 	.word	0x20000694
 80024e8:	200007e8 	.word	0x200007e8

080024ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <SystemInit+0x20>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	4a05      	ldr	r2, [pc, #20]	@ (800250c <SystemInit+0x20>)
 80024f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002548 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002514:	480d      	ldr	r0, [pc, #52]	@ (800254c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002516:	490e      	ldr	r1, [pc, #56]	@ (8002550 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002518:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800251c:	e002      	b.n	8002524 <LoopCopyDataInit>

0800251e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002522:	3304      	adds	r3, #4

08002524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002528:	d3f9      	bcc.n	800251e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800252a:	4a0b      	ldr	r2, [pc, #44]	@ (8002558 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800252c:	4c0b      	ldr	r4, [pc, #44]	@ (800255c <LoopFillZerobss+0x26>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002530:	e001      	b.n	8002536 <LoopFillZerobss>

08002532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002534:	3204      	adds	r2, #4

08002536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002538:	d3fb      	bcc.n	8002532 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800253a:	f7ff ffd7 	bl	80024ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253e:	f004 fe21 	bl	8007184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002542:	f7fe f889 	bl	8000658 <main>
  bx  lr    
 8002546:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002548:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800254c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002550:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002554:	08007cc0 	.word	0x08007cc0
  ldr r2, =_sbss
 8002558:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800255c:	200007e8 	.word	0x200007e8

08002560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC_IRQHandler>

08002562 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002566:	2003      	movs	r0, #3
 8002568:	f000 fc04 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256c:	2000      	movs	r0, #0
 800256e:	f000 f805 	bl	800257c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002572:	f7ff f9e5 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_InitTick+0x54>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <HAL_InitTick+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fc2d 	bl	8002dfa <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 fbe7 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <HAL_InitTick+0x5c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000008 	.word	0x20000008
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000698 	.word	0x20000698

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000698 	.word	0x20000698

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000008 	.word	0x20000008

08002664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e031      	b.n	80026de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff f980 	bl	8001988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_ADC_Init+0x84>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	f043 0202 	orr.w	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f970 	bl	8002998 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80026ce:	e001      	b.n	80026d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	ffffeefd 	.word	0xffffeefd

080026ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1c>
 8002704:	2302      	movs	r3, #2
 8002706:	e136      	b.n	8002976 <HAL_ADC_ConfigChannel+0x28a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b09      	cmp	r3, #9
 8002716:	d93a      	bls.n	800278e <HAL_ADC_ConfigChannel+0xa2>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002720:	d035      	beq.n	800278e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	3b1e      	subs	r3, #30
 8002738:	2207      	movs	r2, #7
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a8d      	ldr	r2, [pc, #564]	@ (8002984 <HAL_ADC_ConfigChannel+0x298>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d10a      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68d9      	ldr	r1, [r3, #12]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	061a      	lsls	r2, r3, #24
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002766:	e035      	b.n	80027d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	4603      	mov	r3, r0
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4403      	add	r3, r0
 8002780:	3b1e      	subs	r3, #30
 8002782:	409a      	lsls	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278c:	e022      	b.n	80027d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6919      	ldr	r1, [r3, #16]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	2207      	movs	r2, #7
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43da      	mvns	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	400a      	ands	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6919      	ldr	r1, [r3, #16]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	4603      	mov	r3, r0
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4403      	add	r3, r0
 80027ca:	409a      	lsls	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d824      	bhi.n	8002826 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b05      	subs	r3, #5
 80027ee:	221f      	movs	r2, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43da      	mvns	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	400a      	ands	r2, r1
 80027fc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b05      	subs	r3, #5
 8002818:	fa00 f203 	lsl.w	r2, r0, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	@ 0x34
 8002824:	e04c      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d824      	bhi.n	8002878 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3b23      	subs	r3, #35	@ 0x23
 8002840:	221f      	movs	r2, #31
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3b23      	subs	r3, #35	@ 0x23
 800286a:	fa00 f203 	lsl.w	r2, r0, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
 8002876:	e023      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	3b41      	subs	r3, #65	@ 0x41
 800288a:	221f      	movs	r2, #31
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43da      	mvns	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	400a      	ands	r2, r1
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	3b41      	subs	r3, #65	@ 0x41
 80028b4:	fa00 f203 	lsl.w	r2, r0, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a30      	ldr	r2, [pc, #192]	@ (8002988 <HAL_ADC_ConfigChannel+0x29c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10a      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1f4>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028d4:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 80028da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80028de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <HAL_ADC_ConfigChannel+0x29c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d10f      	bne.n	800290a <HAL_ADC_ConfigChannel+0x21e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d10b      	bne.n	800290a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80028f2:	4b26      	ldr	r3, [pc, #152]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a25      	ldr	r2, [pc, #148]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 80028f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80028fc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80028fe:	4b23      	ldr	r3, [pc, #140]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a22      	ldr	r2, [pc, #136]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 8002904:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002908:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1e      	ldr	r2, [pc, #120]	@ (8002988 <HAL_ADC_ConfigChannel+0x29c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d12b      	bne.n	800296c <HAL_ADC_ConfigChannel+0x280>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1a      	ldr	r2, [pc, #104]	@ (8002984 <HAL_ADC_ConfigChannel+0x298>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d003      	beq.n	8002926 <HAL_ADC_ConfigChannel+0x23a>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b11      	cmp	r3, #17
 8002924:	d122      	bne.n	800296c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002926:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4a18      	ldr	r2, [pc, #96]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 800292c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002930:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002932:	4b16      	ldr	r3, [pc, #88]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a15      	ldr	r2, [pc, #84]	@ (800298c <HAL_ADC_ConfigChannel+0x2a0>)
 8002938:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800293c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a10      	ldr	r2, [pc, #64]	@ (8002984 <HAL_ADC_ConfigChannel+0x298>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <HAL_ADC_ConfigChannel+0x2a4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a11      	ldr	r2, [pc, #68]	@ (8002994 <HAL_ADC_ConfigChannel+0x2a8>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0c9a      	lsrs	r2, r3, #18
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800295e:	e002      	b.n	8002966 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3b01      	subs	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f9      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	10000012 	.word	0x10000012
 8002988:	40012000 	.word	0x40012000
 800298c:	40012300 	.word	0x40012300
 8002990:	20000000 	.word	0x20000000
 8002994:	431bde83 	.word	0x431bde83

08002998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029a0:	4b78      	ldr	r3, [pc, #480]	@ (8002b84 <ADC_Init+0x1ec>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a77      	ldr	r2, [pc, #476]	@ (8002b84 <ADC_Init+0x1ec>)
 80029a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80029aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029ac:	4b75      	ldr	r3, [pc, #468]	@ (8002b84 <ADC_Init+0x1ec>)
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4973      	ldr	r1, [pc, #460]	@ (8002b84 <ADC_Init+0x1ec>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	4a58      	ldr	r2, [pc, #352]	@ (8002b88 <ADC_Init+0x1f0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	e00f      	b.n	8002a92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0202 	bic.w	r2, r2, #2
 8002aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	005a      	lsls	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ace:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ade:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	3b01      	subs	r3, #1
 8002aec:	035a      	lsls	r2, r3, #13
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e007      	b.n	8002b08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	051a      	lsls	r2, r3, #20
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b4a:	025a      	lsls	r2, r3, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	029a      	lsls	r2, r3, #10
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012300 	.word	0x40012300
 8002b88:	0f000001 	.word	0x0f000001

08002b8c <__NVIC_SetPriorityGrouping>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x40>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bb4:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bba:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <__NVIC_SetPriorityGrouping+0x40>)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	60d3      	str	r3, [r2, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00
 8002bd0:	05fa0000 	.word	0x05fa0000

08002bd4 <__NVIC_GetPriorityGrouping>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd8:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <__NVIC_GetPriorityGrouping+0x18>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0307 	and.w	r3, r3, #7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_EnableIRQ>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db0b      	blt.n	8002c1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4907      	ldr	r1, [pc, #28]	@ (8002c28 <__NVIC_EnableIRQ+0x38>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000e100 	.word	0xe000e100

08002c2c <__NVIC_DisableIRQ>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db12      	blt.n	8002c64 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	490a      	ldr	r1, [pc, #40]	@ (8002c70 <__NVIC_DisableIRQ+0x44>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	3320      	adds	r3, #32
 8002c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c58:	f3bf 8f4f 	dsb	sy
}
 8002c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c5e:	f3bf 8f6f 	isb	sy
}
 8002c62:	bf00      	nop
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	@ (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff05 	bl	8002b8c <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff1a 	bl	8002bd4 <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff0d 	bl	8002bf0 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff1d 	bl	8002c2c <__NVIC_DisableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff94 	bl	8002d30 <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	@ 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e175      	b.n	8003120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 8164 	bne.w	800311a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_GPIO_Init+0x56>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d017      	beq.n	8002f08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80be 	beq.w	800311a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	4b66      	ldr	r3, [pc, #408]	@ (8003138 <HAL_GPIO_Init+0x324>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_GPIO_Init+0x324>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002faa:	4b63      	ldr	r3, [pc, #396]	@ (8003138 <HAL_GPIO_Init+0x324>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fb6:	4a61      	ldr	r2, [pc, #388]	@ (800313c <HAL_GPIO_Init+0x328>)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	220f      	movs	r2, #15
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_GPIO_Init+0x32c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d037      	beq.n	8003052 <HAL_GPIO_Init+0x23e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a57      	ldr	r2, [pc, #348]	@ (8003144 <HAL_GPIO_Init+0x330>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_GPIO_Init+0x23a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a56      	ldr	r2, [pc, #344]	@ (8003148 <HAL_GPIO_Init+0x334>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x236>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a55      	ldr	r2, [pc, #340]	@ (800314c <HAL_GPIO_Init+0x338>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x232>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a54      	ldr	r2, [pc, #336]	@ (8003150 <HAL_GPIO_Init+0x33c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x22e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a53      	ldr	r2, [pc, #332]	@ (8003154 <HAL_GPIO_Init+0x340>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x22a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a52      	ldr	r2, [pc, #328]	@ (8003158 <HAL_GPIO_Init+0x344>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x226>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a51      	ldr	r2, [pc, #324]	@ (800315c <HAL_GPIO_Init+0x348>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x222>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a50      	ldr	r2, [pc, #320]	@ (8003160 <HAL_GPIO_Init+0x34c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x21e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4f      	ldr	r2, [pc, #316]	@ (8003164 <HAL_GPIO_Init+0x350>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x21a>
 800302a:	2309      	movs	r3, #9
 800302c:	e012      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800302e:	230a      	movs	r3, #10
 8003030:	e010      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003032:	2308      	movs	r3, #8
 8003034:	e00e      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003036:	2307      	movs	r3, #7
 8003038:	e00c      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800303a:	2306      	movs	r3, #6
 800303c:	e00a      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800303e:	2305      	movs	r3, #5
 8003040:	e008      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003042:	2304      	movs	r3, #4
 8003044:	e006      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003046:	2303      	movs	r3, #3
 8003048:	e004      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800304a:	2302      	movs	r3, #2
 800304c:	e002      	b.n	8003054 <HAL_GPIO_Init+0x240>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_GPIO_Init+0x240>
 8003052:	2300      	movs	r3, #0
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	f002 0203 	and.w	r2, r2, #3
 800305a:	0092      	lsls	r2, r2, #2
 800305c:	4093      	lsls	r3, r2
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003064:	4935      	ldr	r1, [pc, #212]	@ (800313c <HAL_GPIO_Init+0x328>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <HAL_GPIO_Init+0x354>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a34      	ldr	r2, [pc, #208]	@ (8003168 <HAL_GPIO_Init+0x354>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <HAL_GPIO_Init+0x354>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a29      	ldr	r2, [pc, #164]	@ (8003168 <HAL_GPIO_Init+0x354>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c6:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <HAL_GPIO_Init+0x354>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003168 <HAL_GPIO_Init+0x354>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <HAL_GPIO_Init+0x354>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <HAL_GPIO_Init+0x354>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3301      	adds	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	f67f ae86 	bls.w	8002e34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40013800 	.word	0x40013800
 8003140:	40020000 	.word	0x40020000
 8003144:	40020400 	.word	0x40020400
 8003148:	40020800 	.word	0x40020800
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40021000 	.word	0x40021000
 8003154:	40021400 	.word	0x40021400
 8003158:	40021800 	.word	0x40021800
 800315c:	40021c00 	.word	0x40021c00
 8003160:	40022000 	.word	0x40022000
 8003164:	40022400 	.word	0x40022400
 8003168:	40013c00 	.word	0x40013c00

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e08b      	b.n	80032ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fc1e 	bl	8001a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	@ 0x24
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003200:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e006      	b.n	8003228 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003226:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d108      	bne.n	8003242 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e007      	b.n	8003252 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_I2C_Init+0x134>)
 800325e:	430b      	orrs	r3, r1
 8003260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	02008000 	.word	0x02008000

080032d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	817b      	strh	r3, [r7, #10]
 80032ea:	460b      	mov	r3, r1
 80032ec:	813b      	strh	r3, [r7, #8]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	f040 80f9 	bne.w	80034f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_I2C_Mem_Write+0x34>
 8003306:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0ed      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_I2C_Mem_Write+0x4e>
 8003322:	2302      	movs	r3, #2
 8003324:	e0e6      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800332e:	f7ff f969 	bl	8002604 <HAL_GetTick>
 8003332:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2319      	movs	r3, #25
 800333a:	2201      	movs	r2, #1
 800333c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f955 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0d1      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2221      	movs	r2, #33	@ 0x21
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a3a      	ldr	r2, [r7, #32]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003378:	88f8      	ldrh	r0, [r7, #6]
 800337a:	893a      	ldrh	r2, [r7, #8]
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4603      	mov	r3, r0
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f8b9 	bl	8003500 <I2C_RequestMemoryWrite>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0a9      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2bff      	cmp	r3, #255	@ 0xff
 80033a8:	d90e      	bls.n	80033c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	22ff      	movs	r2, #255	@ 0xff
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	8979      	ldrh	r1, [r7, #10]
 80033b8:	2300      	movs	r3, #0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fad9 	bl	8003978 <I2C_TransferConfig>
 80033c6:	e00f      	b.n	80033e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	8979      	ldrh	r1, [r7, #10]
 80033da:	2300      	movs	r3, #0
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fac8 	bl	8003978 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f958 	bl	80036a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e07b      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d034      	beq.n	80034a0 <HAL_I2C_Mem_Write+0x1c8>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d130      	bne.n	80034a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	2200      	movs	r2, #0
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f8d1 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e04d      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2bff      	cmp	r3, #255	@ 0xff
 8003460:	d90e      	bls.n	8003480 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22ff      	movs	r2, #255	@ 0xff
 8003466:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	b2da      	uxtb	r2, r3
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	2300      	movs	r3, #0
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa7d 	bl	8003978 <I2C_TransferConfig>
 800347e:	e00f      	b.n	80034a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348e:	b2da      	uxtb	r2, r3
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	2300      	movs	r3, #0
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa6c 	bl	8003978 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d19e      	bne.n	80033e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f93e 	bl	8003730 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e01a      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2220      	movs	r2, #32
 80034c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <HAL_I2C_Mem_Write+0x224>)
 80034d2:	400b      	ands	r3, r1
 80034d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	fe00e800 	.word	0xfe00e800

08003500 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	8979      	ldrh	r1, [r7, #10]
 8003520:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <I2C_RequestMemoryWrite+0xa4>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa25 	bl	8003978 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8b5 	bl	80036a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02c      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	629a      	str	r2, [r3, #40]	@ 0x28
 8003552:	e015      	b.n	8003580 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b29b      	uxth	r3, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	69b9      	ldr	r1, [r7, #24]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f89b 	bl	80036a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e012      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2200      	movs	r2, #0
 8003588:	2180      	movs	r1, #128	@ 0x80
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f830 	bl	80035f0 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	80002000 	.word	0x80002000

080035a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d103      	bne.n	80035c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	619a      	str	r2, [r3, #24]
  }
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003600:	e03b      	b.n	800367a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f8d6 	bl	80037b8 <I2C_IsErrorOccurred>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e041      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d02d      	beq.n	800367a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fe fff1 	bl	8002604 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <I2C_WaitOnFlagUntilTimeout+0x44>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d122      	bne.n	800367a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d113      	bne.n	800367a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	429a      	cmp	r2, r3
 8003696:	d0b4      	beq.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ae:	e033      	b.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f87f 	bl	80037b8 <I2C_IsErrorOccurred>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e031      	b.n	8003728 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d025      	beq.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	f7fe ff9a 	bl	8002604 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11a      	bne.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d013      	beq.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d1c4      	bne.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373c:	e02f      	b.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f838 	bl	80037b8 <I2C_IsErrorOccurred>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e02d      	b.n	80037ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe ff57 	bl	8002604 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11a      	bne.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d013      	beq.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d1c8      	bne.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d068      	beq.n	80038b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2210      	movs	r2, #16
 80037ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037ec:	e049      	b.n	8003882 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d045      	beq.n	8003882 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe ff05 	bl	8002604 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_IsErrorOccurred+0x54>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d13a      	bne.n	8003882 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003816:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800381e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800382a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800382e:	d121      	bne.n	8003874 <I2C_IsErrorOccurred+0xbc>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003836:	d01d      	beq.n	8003874 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	2b20      	cmp	r3, #32
 800383c:	d01a      	beq.n	8003874 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800384c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800384e:	f7fe fed9 	bl	8002604 <HAL_GetTick>
 8003852:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003854:	e00e      	b.n	8003874 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003856:	f7fe fed5 	bl	8002604 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b19      	cmp	r3, #25
 8003862:	d907      	bls.n	8003874 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f043 0320 	orr.w	r3, r3, #32
 800386a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003872:	e006      	b.n	8003882 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b20      	cmp	r3, #32
 8003880:	d1e9      	bne.n	8003856 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d003      	beq.n	8003898 <I2C_IsErrorOccurred+0xe0>
 8003890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0aa      	beq.n	80037ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2220      	movs	r2, #32
 80038a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f043 0304 	orr.w	r3, r3, #4
 80038ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	f043 0308 	orr.w	r3, r3, #8
 80038f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01c      	beq.n	8003966 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff fe3b 	bl	80035a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <I2C_IsErrorOccurred+0x1bc>)
 800393e:	400b      	ands	r3, r1
 8003940:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	431a      	orrs	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003966:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800396a:	4618      	mov	r0, r3
 800396c:	3728      	adds	r7, #40	@ 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	fe00e800 	.word	0xfe00e800

08003978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	817b      	strh	r3, [r7, #10]
 8003986:	4613      	mov	r3, r2
 8003988:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800398a:	897b      	ldrh	r3, [r7, #10]
 800398c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003990:	7a7b      	ldrb	r3, [r7, #9]
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003998:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	0d5b      	lsrs	r3, r3, #21
 80039b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <I2C_TransferConfig+0x60>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	43db      	mvns	r3, r3
 80039bc:	ea02 0103 	and.w	r1, r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	03ff63ff 	.word	0x03ff63ff

080039dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d138      	bne.n	8003a64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e032      	b.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	@ 0x24
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d139      	bne.n	8003afc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e033      	b.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2224      	movs	r2, #36	@ 0x24
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e000      	b.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
  }
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40007000 	.word	0x40007000

08003b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b42:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5a:	f7fe fd53 	bl	8002604 <HAL_GetTick>
 8003b5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b60:	e009      	b.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b62:	f7fe fd4f 	bl	8002604 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b70:	d901      	bls.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e022      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b76:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b82:	d1ee      	bne.n	8003b62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b84:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0f      	ldr	r2, [pc, #60]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe fd38 	bl	8002604 <HAL_GetTick>
 8003b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b96:	e009      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b98:	f7fe fd34 	bl	8002604 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ba6:	d901      	bls.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e007      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e29b      	b.n	800411a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfc:	4b93      	ldr	r3, [pc, #588]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c08:	4b90      	ldr	r3, [pc, #576]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b8d      	ldr	r3, [pc, #564]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x130>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e275      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a>
 8003c38:	4b84      	ldr	r3, [pc, #528]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x9c>
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7e      	ldr	r2, [pc, #504]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003c72:	4b76      	ldr	r3, [pc, #472]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b73      	ldr	r3, [pc, #460]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b6c      	ldr	r3, [pc, #432]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fcaa 	bl	8002604 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fca6 	bl	8002604 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	@ 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e229      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b61      	ldr	r3, [pc, #388]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fc96 	bl	8002604 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fc92 	bl	8002604 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	@ 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e215      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b57      	ldr	r3, [pc, #348]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x110>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d069      	beq.n	8003dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b50      	ldr	r3, [pc, #320]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b4d      	ldr	r3, [pc, #308]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
 8003d22:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1e9      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	493d      	ldr	r1, [pc, #244]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fc48 	bl	8002604 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe fc44 	bl	8002604 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1c7      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b2d      	ldr	r3, [pc, #180]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4929      	ldr	r1, [pc, #164]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe fc24 	bl	8002604 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fc20 	bl	8002604 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1a3      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d038      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df6:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fe fc01 	bl	8002604 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fe fbfd 	bl	8002604 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e180      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
 8003e24:	e01a      	b.n	8003e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2a:	4a08      	ldr	r2, [pc, #32]	@ (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe fbe7 	bl	8002604 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fe fbe3 	bl	8002604 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d903      	bls.n	8003e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e166      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
 8003e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b92      	ldr	r3, [pc, #584]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b89      	ldr	r3, [pc, #548]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	4a88      	ldr	r2, [pc, #544]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e82:	4b86      	ldr	r3, [pc, #536]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e92:	4b83      	ldr	r3, [pc, #524]	@ (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e9e:	4b80      	ldr	r3, [pc, #512]	@ (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7f      	ldr	r2, [pc, #508]	@ (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe fbab 	bl	8002604 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fe fba7 	bl	8002604 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	@ 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e12a      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b76      	ldr	r3, [pc, #472]	@ (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x31a>
 8003ed8:	4b70      	ldr	r3, [pc, #448]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003edc:	4a6f      	ldr	r2, [pc, #444]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b6b      	ldr	r3, [pc, #428]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003efa:	4b68      	ldr	r3, [pc, #416]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	4a67      	ldr	r2, [pc, #412]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x35e>
 8003f10:	4b62      	ldr	r3, [pc, #392]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	4a61      	ldr	r2, [pc, #388]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	4a5e      	ldr	r2, [pc, #376]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f36:	4b59      	ldr	r3, [pc, #356]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3a:	4a58      	ldr	r2, [pc, #352]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fb5b 	bl	8002604 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fe fb57 	bl	8002604 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0d8      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4c      	ldr	r3, [pc, #304]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x386>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe fb45 	bl	8002604 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe fb41 	bl	8002604 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0c2      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b41      	ldr	r3, [pc, #260]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80ae 	beq.w	8004118 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	4b37      	ldr	r3, [pc, #220]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d06d      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d14b      	bne.n	8004068 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fb12 	bl	8002604 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe fb0e 	bl	8002604 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e091      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b29      	ldr	r3, [pc, #164]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	491b      	ldr	r1, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe fae0 	bl	8002604 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fe fadc 	bl	8002604 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e05f      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x47c>
 8004066:	e057      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0b      	ldr	r2, [pc, #44]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe fac6 	bl	8002604 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fe fac2 	bl	8002604 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e045      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b03      	ldr	r3, [pc, #12]	@ (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x4b0>
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004124 <HAL_RCC_OscConfig+0x558>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d030      	beq.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d129      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d122      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d119      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d10f      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0d0      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b6a      	ldr	r3, [pc, #424]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b67      	ldr	r3, [pc, #412]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	4965      	ldr	r1, [pc, #404]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b41      	ldr	r3, [pc, #260]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e073      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3d      	ldr	r3, [pc, #244]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06b      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4936      	ldr	r1, [pc, #216]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fe f9f2 	bl	8002604 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fe f9ee 	bl	8002604 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e053      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d210      	bcs.n	800427c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	4922      	ldr	r1, [pc, #136]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	@ (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a6:	4b12      	ldr	r3, [pc, #72]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	@ (80042f4 <HAL_RCC_ClockConfig+0x1cc>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	@ (80042f8 <HAL_RCC_ClockConfig+0x1d0>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <HAL_RCC_ClockConfig+0x1d4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe f94e 	bl	800257c <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08007c64 	.word	0x08007c64
 80042f8:	20000000 	.word	0x20000000
 80042fc:	20000004 	.word	0x20000004

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b094      	sub	sp, #80	@ 0x50
 8004306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	647b      	str	r3, [r7, #68]	@ 0x44
 800430c:	2300      	movs	r3, #0
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004310:	2300      	movs	r3, #0
 8004312:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004318:	4b79      	ldr	r3, [pc, #484]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b08      	cmp	r3, #8
 8004322:	d00d      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x40>
 8004324:	2b08      	cmp	r3, #8
 8004326:	f200 80e1 	bhi.w	80044ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x34>
 800432e:	2b04      	cmp	r3, #4
 8004330:	d003      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x3a>
 8004332:	e0db      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b73      	ldr	r3, [pc, #460]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x204>)
 8004336:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004338:	e0db      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800433a:	4b73      	ldr	r3, [pc, #460]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x208>)
 800433c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800433e:	e0d8      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004340:	4b6f      	ldr	r3, [pc, #444]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004348:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800434a:	4b6d      	ldr	r3, [pc, #436]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d063      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	2200      	movs	r2, #0
 800435e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004360:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004368:	633b      	str	r3, [r7, #48]	@ 0x30
 800436a:	2300      	movs	r3, #0
 800436c:	637b      	str	r3, [r7, #52]	@ 0x34
 800436e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004372:	4622      	mov	r2, r4
 8004374:	462b      	mov	r3, r5
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	0159      	lsls	r1, r3, #5
 8004380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004384:	0150      	lsls	r0, r2, #5
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4621      	mov	r1, r4
 800438c:	1a51      	subs	r1, r2, r1
 800438e:	6139      	str	r1, [r7, #16]
 8004390:	4629      	mov	r1, r5
 8004392:	eb63 0301 	sbc.w	r3, r3, r1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043a4:	4659      	mov	r1, fp
 80043a6:	018b      	lsls	r3, r1, #6
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ae:	4651      	mov	r1, sl
 80043b0:	018a      	lsls	r2, r1, #6
 80043b2:	4651      	mov	r1, sl
 80043b4:	ebb2 0801 	subs.w	r8, r2, r1
 80043b8:	4659      	mov	r1, fp
 80043ba:	eb63 0901 	sbc.w	r9, r3, r1
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d2:	4690      	mov	r8, r2
 80043d4:	4699      	mov	r9, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	eb18 0303 	adds.w	r3, r8, r3
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	462b      	mov	r3, r5
 80043e0:	eb49 0303 	adc.w	r3, r9, r3
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043f2:	4629      	mov	r1, r5
 80043f4:	024b      	lsls	r3, r1, #9
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043fc:	4621      	mov	r1, r4
 80043fe:	024a      	lsls	r2, r1, #9
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004406:	2200      	movs	r2, #0
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004410:	f7fb ff66 	bl	80002e0 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800441c:	e058      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441e:	4b38      	ldr	r3, [pc, #224]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	2200      	movs	r2, #0
 8004426:	4618      	mov	r0, r3
 8004428:	4611      	mov	r1, r2
 800442a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800442e:	623b      	str	r3, [r7, #32]
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
 8004434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	f04f 0000 	mov.w	r0, #0
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	0159      	lsls	r1, r3, #5
 8004446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800444a:	0150      	lsls	r0, r2, #5
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4641      	mov	r1, r8
 8004452:	ebb2 0a01 	subs.w	sl, r2, r1
 8004456:	4649      	mov	r1, r9
 8004458:	eb63 0b01 	sbc.w	fp, r3, r1
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800446c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004470:	ebb2 040a 	subs.w	r4, r2, sl
 8004474:	eb63 050b 	sbc.w	r5, r3, fp
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	00eb      	lsls	r3, r5, #3
 8004482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004486:	00e2      	lsls	r2, r4, #3
 8004488:	4614      	mov	r4, r2
 800448a:	461d      	mov	r5, r3
 800448c:	4643      	mov	r3, r8
 800448e:	18e3      	adds	r3, r4, r3
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	464b      	mov	r3, r9
 8004494:	eb45 0303 	adc.w	r3, r5, r3
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a6:	4629      	mov	r1, r5
 80044a8:	028b      	lsls	r3, r1, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b0:	4621      	mov	r1, r4
 80044b2:	028a      	lsls	r2, r1, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ba:	2200      	movs	r2, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	61fa      	str	r2, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	f7fb ff0c 	bl	80002e0 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3750      	adds	r7, #80	@ 0x50
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	00f42400 	.word	0x00f42400
 8004508:	007a1200 	.word	0x007a1200

0800450c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <HAL_RCC_GetHCLKFreq+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000000 	.word	0x20000000

08004524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004528:	f7ff fff0 	bl	800450c <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0a9b      	lsrs	r3, r3, #10
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	08007c74 	.word	0x08007c74

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004550:	f7ff ffdc 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0b5b      	lsrs	r3, r3, #13
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40023800 	.word	0x40023800
 8004570:	08007c74 	.word	0x08007c74

08004574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800459c:	4b69      	ldr	r3, [pc, #420]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4a68      	ldr	r2, [pc, #416]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045a6:	6093      	str	r3, [r2, #8]
 80045a8:	4b66      	ldr	r3, [pc, #408]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b0:	4964      	ldr	r1, [pc, #400]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d017      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	4959      	ldr	r1, [pc, #356]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ec:	d101      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d017      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800460a:	4b4e      	ldr	r3, [pc, #312]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004610:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	494a      	ldr	r1, [pc, #296]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004636:	2301      	movs	r3, #1
 8004638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 808b 	beq.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	4b3a      	ldr	r3, [pc, #232]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	4a39      	ldr	r2, [pc, #228]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004662:	6413      	str	r3, [r2, #64]	@ 0x40
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004670:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a34      	ldr	r2, [pc, #208]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467c:	f7fd ffc2 	bl	8002604 <HAL_GetTick>
 8004680:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004684:	f7fd ffbe 	bl	8002604 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	@ 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e38f      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004696:	4b2c      	ldr	r3, [pc, #176]	@ (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a2:	4b28      	ldr	r3, [pc, #160]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d035      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d02e      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c0:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046da:	4a1a      	ldr	r2, [pc, #104]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046e2:	4a18      	ldr	r2, [pc, #96]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046e8:	4b16      	ldr	r3, [pc, #88]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d114      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd ff86 	bl	8002604 <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fa:	e00a      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fd ff82 	bl	8002604 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e351      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0ee      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472a:	d111      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800473a:	400b      	ands	r3, r1
 800473c:	4901      	ldr	r1, [pc, #4]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
 8004742:	e00b      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004744:	40023800 	.word	0x40023800
 8004748:	40007000 	.word	0x40007000
 800474c:	0ffffcff 	.word	0x0ffffcff
 8004750:	4bac      	ldr	r3, [pc, #688]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4aab      	ldr	r2, [pc, #684]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004756:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800475a:	6093      	str	r3, [r2, #8]
 800475c:	4ba9      	ldr	r3, [pc, #676]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	49a6      	ldr	r1, [pc, #664]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	4313      	orrs	r3, r2
 800476c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800477a:	4ba2      	ldr	r3, [pc, #648]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	4aa0      	ldr	r2, [pc, #640]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004786:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800478a:	4b9e      	ldr	r3, [pc, #632]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	499b      	ldr	r1, [pc, #620]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a8:	4b96      	ldr	r3, [pc, #600]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047b6:	4993      	ldr	r1, [pc, #588]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d8:	498a      	ldr	r1, [pc, #552]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ec:	4b85      	ldr	r3, [pc, #532]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fa:	4982      	ldr	r1, [pc, #520]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800480e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004814:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481c:	4979      	ldr	r1, [pc, #484]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004830:	4b74      	ldr	r3, [pc, #464]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	f023 0203 	bic.w	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	4971      	ldr	r1, [pc, #452]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004852:	4b6c      	ldr	r3, [pc, #432]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004858:	f023 020c 	bic.w	r2, r3, #12
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004860:	4968      	ldr	r1, [pc, #416]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004874:	4b63      	ldr	r3, [pc, #396]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	4960      	ldr	r1, [pc, #384]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004896:	4b5b      	ldr	r3, [pc, #364]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a4:	4957      	ldr	r1, [pc, #348]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b8:	4b52      	ldr	r3, [pc, #328]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	494f      	ldr	r1, [pc, #316]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048da:	4b4a      	ldr	r3, [pc, #296]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	4946      	ldr	r1, [pc, #280]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048fc:	4b41      	ldr	r3, [pc, #260]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	493e      	ldr	r1, [pc, #248]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800491e:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004924:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492c:	4935      	ldr	r1, [pc, #212]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004940:	4b30      	ldr	r3, [pc, #192]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800494e:	492d      	ldr	r1, [pc, #180]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004962:	4b28      	ldr	r3, [pc, #160]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004970:	4924      	ldr	r1, [pc, #144]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800497c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004980:	d101      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004992:	2301      	movs	r3, #1
 8004994:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049a2:	4b18      	ldr	r3, [pc, #96]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b0:	4914      	ldr	r1, [pc, #80]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049d4:	490b      	ldr	r1, [pc, #44]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f8:	4902      	ldr	r1, [pc, #8]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a14:	4b8a      	ldr	r3, [pc, #552]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	4986      	ldr	r1, [pc, #536]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a38:	4b81      	ldr	r3, [pc, #516]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a3e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a48:	497d      	ldr	r1, [pc, #500]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d006      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80d6 	beq.w	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a64:	4b76      	ldr	r3, [pc, #472]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a75      	ldr	r2, [pc, #468]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fd fdc8 	bl	8002604 <HAL_GetTick>
 8004a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a78:	f7fd fdc4 	bl	8002604 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	@ 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e195      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d021      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11d      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aaa:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ab8:	4b61      	ldr	r3, [pc, #388]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004abe:	0e1b      	lsrs	r3, r3, #24
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	061b      	lsls	r3, r3, #24
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	4958      	ldr	r1, [pc, #352]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d004      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02e      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b10:	d129      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b12:	4b4b      	ldr	r3, [pc, #300]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b20:	4b47      	ldr	r3, [pc, #284]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b26:	0f1b      	lsrs	r3, r3, #28
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	019a      	lsls	r2, r3, #6
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	061b      	lsls	r3, r3, #24
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	071b      	lsls	r3, r3, #28
 8004b46:	493e      	ldr	r1, [pc, #248]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b54:	f023 021f 	bic.w	r2, r3, #31
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	4938      	ldr	r1, [pc, #224]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01d      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b72:	4b33      	ldr	r3, [pc, #204]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b80:	4b2f      	ldr	r3, [pc, #188]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b86:	0f1b      	lsrs	r3, r3, #28
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	019a      	lsls	r2, r3, #6
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	4926      	ldr	r1, [pc, #152]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d011      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	019a      	lsls	r2, r3, #6
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	061b      	lsls	r3, r3, #24
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	071b      	lsls	r3, r3, #28
 8004bd6:	491a      	ldr	r1, [pc, #104]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bde:	4b18      	ldr	r3, [pc, #96]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a17      	ldr	r2, [pc, #92]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bea:	f7fd fd0b 	bl	8002604 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bf2:	f7fd fd07 	bl	8002604 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b64      	cmp	r3, #100	@ 0x64
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e0d8      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c04:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	f040 80ce 	bne.w	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c18:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c24:	f7fd fcee 	bl	8002604 <HAL_GetTick>
 8004c28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c2c:	f7fd fcea 	bl	8002604 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	@ 0x64
 8004c38:	d904      	bls.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0bb      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c44:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c50:	d0ec      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02e      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12a      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c7a:	4b51      	ldr	r3, [pc, #324]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c88:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8e:	0f1b      	lsrs	r3, r3, #28
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	019a      	lsls	r2, r3, #6
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	061b      	lsls	r3, r3, #24
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	071b      	lsls	r3, r3, #28
 8004cae:	4944      	ldr	r1, [pc, #272]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cb6:	4b42      	ldr	r3, [pc, #264]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cbc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	493d      	ldr	r1, [pc, #244]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d022      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce4:	d11d      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ce6:	4b36      	ldr	r3, [pc, #216]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cec:	0e1b      	lsrs	r3, r3, #24
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cf4:	4b32      	ldr	r3, [pc, #200]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	0f1b      	lsrs	r3, r3, #28
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	019a      	lsls	r2, r3, #6
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	431a      	orrs	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	071b      	lsls	r3, r3, #28
 8004d1a:	4929      	ldr	r1, [pc, #164]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d028      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	0e1b      	lsrs	r3, r3, #24
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d3c:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	019a      	lsls	r2, r3, #6
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	431a      	orrs	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	071b      	lsls	r3, r3, #28
 8004d62:	4917      	ldr	r1, [pc, #92]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d6a:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	4911      	ldr	r1, [pc, #68]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fd fc3a 	bl	8002604 <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d94:	f7fd fc36 	bl	8002604 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	@ 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e007      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004db2:	d1ef      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800

08004dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e09d      	b.n	8004f12 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d108      	bne.n	8004df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004de6:	d009      	beq.n	8004dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	61da      	str	r2, [r3, #28]
 8004dee:	e005      	b.n	8004dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fc fe9e 	bl	8001b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e3c:	d902      	bls.n	8004e44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e002      	b.n	8004e4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e52:	d007      	beq.n	8004e64 <HAL_SPI_Init+0xa0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e5c:	d002      	beq.n	8004e64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea6:	ea42 0103 	orr.w	r1, r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	0c1b      	lsrs	r3, r3, #16
 8004ec0:	f003 0204 	and.w	r2, r3, #4
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e049      	b.n	8004fc0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fc fe89 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 fc0d 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e049      	b.n	800506e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fc ff26 	bl	8001e40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 fbb6 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e049      	b.n	800511c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f841 	bl	8005124 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f000 fb5f 	bl	8005778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e08f      	b.n	800526c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fc fdf7 	bl	8001d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6899      	ldr	r1, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b3e      	ldr	r3, [pc, #248]	@ (8005274 <HAL_TIM_Encoder_Init+0x13c>)
 800517a:	400b      	ands	r3, r1
 800517c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 faf5 	bl	8005778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4b31      	ldr	r3, [pc, #196]	@ (8005278 <HAL_TIM_Encoder_Init+0x140>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	4313      	orrs	r3, r2
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <HAL_TIM_Encoder_Init+0x144>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005280 <HAL_TIM_Encoder_Init+0x148>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	4313      	orrs	r3, r2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	011a      	lsls	r2, r3, #4
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	031b      	lsls	r3, r3, #12
 80051f8:	4313      	orrs	r3, r2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	4313      	orrs	r3, r2
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	fffebff8 	.word	0xfffebff8
 8005278:	fffffcfc 	.word	0xfffffcfc
 800527c:	fffff3f3 	.word	0xfffff3f3
 8005280:	ffff0f0f 	.word	0xffff0f0f

08005284 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_IC_ConfigChannel+0x1e>
 800529e:	2302      	movs	r3, #2
 80052a0:	e088      	b.n	80053b4 <HAL_TIM_IC_ConfigChannel+0x130>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80052c0:	f000 fd64 	bl	8005d8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 020c 	bic.w	r2, r2, #12
 80052d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6999      	ldr	r1, [r3, #24]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	619a      	str	r2, [r3, #24]
 80052e6:	e060      	b.n	80053aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d11c      	bne.n	8005328 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80052fe:	f000 fde8 	bl	8005ed2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005310:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6999      	ldr	r1, [r3, #24]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	021a      	lsls	r2, r3, #8
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	619a      	str	r2, [r3, #24]
 8005326:	e040      	b.n	80053aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d11b      	bne.n	8005366 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800533e:	f000 fe35 	bl	8005fac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 020c 	bic.w	r2, r2, #12
 8005350:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69d9      	ldr	r1, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
 8005364:	e021      	b.n	80053aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b0c      	cmp	r3, #12
 800536a:	d11c      	bne.n	80053a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800537c:	f000 fe52 	bl	8006024 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800538e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69d9      	ldr	r1, [r3, #28]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	61da      	str	r2, [r3, #28]
 80053a4:	e001      	b.n	80053aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e0ff      	b.n	80055da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b14      	cmp	r3, #20
 80053e6:	f200 80f0 	bhi.w	80055ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ea:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005445 	.word	0x08005445
 80053f4:	080055cb 	.word	0x080055cb
 80053f8:	080055cb 	.word	0x080055cb
 80053fc:	080055cb 	.word	0x080055cb
 8005400:	08005485 	.word	0x08005485
 8005404:	080055cb 	.word	0x080055cb
 8005408:	080055cb 	.word	0x080055cb
 800540c:	080055cb 	.word	0x080055cb
 8005410:	080054c7 	.word	0x080054c7
 8005414:	080055cb 	.word	0x080055cb
 8005418:	080055cb 	.word	0x080055cb
 800541c:	080055cb 	.word	0x080055cb
 8005420:	08005507 	.word	0x08005507
 8005424:	080055cb 	.word	0x080055cb
 8005428:	080055cb 	.word	0x080055cb
 800542c:	080055cb 	.word	0x080055cb
 8005430:	08005549 	.word	0x08005549
 8005434:	080055cb 	.word	0x080055cb
 8005438:	080055cb 	.word	0x080055cb
 800543c:	080055cb 	.word	0x080055cb
 8005440:	08005589 	.word	0x08005589
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fa40 	bl	80058d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0208 	orr.w	r2, r2, #8
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	619a      	str	r2, [r3, #24]
      break;
 8005482:	e0a5      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa92 	bl	80059b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6999      	ldr	r1, [r3, #24]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	021a      	lsls	r2, r3, #8
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	619a      	str	r2, [r3, #24]
      break;
 80054c4:	e084      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fae9 	bl	8005aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0208 	orr.w	r2, r2, #8
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0204 	bic.w	r2, r2, #4
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]
      break;
 8005504:	e064      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fb3f 	bl	8005b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	61da      	str	r2, [r3, #28]
      break;
 8005546:	e043      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fb76 	bl	8005c40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0204 	bic.w	r2, r2, #4
 8005572:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005586:	e023      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fba8 	bl	8005ce4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055c8:	e002      	b.n	80055d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
      break;
 80055ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop

080055e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIM_ConfigClockSource+0x1c>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0b4      	b.n	800576a <HAL_TIM_ConfigClockSource+0x186>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	4b56      	ldr	r3, [pc, #344]	@ (8005774 <HAL_TIM_ConfigClockSource+0x190>)
 800561c:	4013      	ands	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005638:	d03e      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0xd4>
 800563a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563e:	f200 8087 	bhi.w	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	f000 8086 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x172>
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564e:	d87f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b70      	cmp	r3, #112	@ 0x70
 8005652:	d01a      	beq.n	800568a <HAL_TIM_ConfigClockSource+0xa6>
 8005654:	2b70      	cmp	r3, #112	@ 0x70
 8005656:	d87b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b60      	cmp	r3, #96	@ 0x60
 800565a:	d050      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x11a>
 800565c:	2b60      	cmp	r3, #96	@ 0x60
 800565e:	d877      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b50      	cmp	r3, #80	@ 0x50
 8005662:	d03c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xfa>
 8005664:	2b50      	cmp	r3, #80	@ 0x50
 8005666:	d873      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	d058      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x13a>
 800566c:	2b40      	cmp	r3, #64	@ 0x40
 800566e:	d86f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b30      	cmp	r3, #48	@ 0x30
 8005672:	d064      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	2b30      	cmp	r3, #48	@ 0x30
 8005676:	d86b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d060      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d867      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d05c      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d05a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	e062      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800569a:	f000 fd1b 	bl	80060d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
      break;
 80056b6:	e04f      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	f000 fd04 	bl	80060d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056da:	609a      	str	r2, [r3, #8]
      break;
 80056dc:	e03c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 fbc2 	bl	8005e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2150      	movs	r1, #80	@ 0x50
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fcd1 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 80056fc:	e02c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800570a:	461a      	mov	r2, r3
 800570c:	f000 fc1e 	bl	8005f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2160      	movs	r1, #96	@ 0x60
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fcc1 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 800571c:	e01c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572a:	461a      	mov	r2, r3
 800572c:	f000 fba2 	bl	8005e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2140      	movs	r1, #64	@ 0x40
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fcb1 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 800573c:	e00c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f000 fca8 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 800574e:	e003      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e000      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	fffeff88 	.word	0xfffeff88

08005778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a46      	ldr	r2, [pc, #280]	@ (80058a4 <TIM_Base_SetConfig+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d013      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d00f      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a43      	ldr	r2, [pc, #268]	@ (80058a8 <TIM_Base_SetConfig+0x130>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a42      	ldr	r2, [pc, #264]	@ (80058ac <TIM_Base_SetConfig+0x134>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a41      	ldr	r2, [pc, #260]	@ (80058b0 <TIM_Base_SetConfig+0x138>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a40      	ldr	r2, [pc, #256]	@ (80058b4 <TIM_Base_SetConfig+0x13c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d108      	bne.n	80057ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a35      	ldr	r2, [pc, #212]	@ (80058a4 <TIM_Base_SetConfig+0x12c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d02b      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d8:	d027      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a32      	ldr	r2, [pc, #200]	@ (80058a8 <TIM_Base_SetConfig+0x130>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d023      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a31      	ldr	r2, [pc, #196]	@ (80058ac <TIM_Base_SetConfig+0x134>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01f      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a30      	ldr	r2, [pc, #192]	@ (80058b0 <TIM_Base_SetConfig+0x138>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01b      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2f      	ldr	r2, [pc, #188]	@ (80058b4 <TIM_Base_SetConfig+0x13c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d017      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2e      	ldr	r2, [pc, #184]	@ (80058b8 <TIM_Base_SetConfig+0x140>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2d      	ldr	r2, [pc, #180]	@ (80058bc <TIM_Base_SetConfig+0x144>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2c      	ldr	r2, [pc, #176]	@ (80058c0 <TIM_Base_SetConfig+0x148>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2b      	ldr	r2, [pc, #172]	@ (80058c4 <TIM_Base_SetConfig+0x14c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2a      	ldr	r2, [pc, #168]	@ (80058c8 <TIM_Base_SetConfig+0x150>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a29      	ldr	r2, [pc, #164]	@ (80058cc <TIM_Base_SetConfig+0x154>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a10      	ldr	r2, [pc, #64]	@ (80058a4 <TIM_Base_SetConfig+0x12c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0xf8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <TIM_Base_SetConfig+0x13c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d103      	bne.n	8005878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d105      	bne.n	8005896 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	611a      	str	r2, [r3, #16]
  }
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40010400 	.word	0x40010400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800
 80058c4:	40001800 	.word	0x40001800
 80058c8:	40001c00 	.word	0x40001c00
 80058cc:	40002000 	.word	0x40002000

080058d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f023 0201 	bic.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4b2b      	ldr	r3, [pc, #172]	@ (80059a8 <TIM_OC1_SetConfig+0xd8>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f023 0302 	bic.w	r3, r3, #2
 8005918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a21      	ldr	r2, [pc, #132]	@ (80059ac <TIM_OC1_SetConfig+0xdc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC1_SetConfig+0x64>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a20      	ldr	r2, [pc, #128]	@ (80059b0 <TIM_OC1_SetConfig+0xe0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10c      	bne.n	800594e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0308 	bic.w	r3, r3, #8
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a16      	ldr	r2, [pc, #88]	@ (80059ac <TIM_OC1_SetConfig+0xdc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_OC1_SetConfig+0x8e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <TIM_OC1_SetConfig+0xe0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d111      	bne.n	8005982 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	621a      	str	r2, [r3, #32]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	fffeff8f 	.word	0xfffeff8f
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40010400 	.word	0x40010400

080059b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 0210 	bic.w	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4b2e      	ldr	r3, [pc, #184]	@ (8005a98 <TIM_OC2_SetConfig+0xe4>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0320 	bic.w	r3, r3, #32
 80059fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a23      	ldr	r2, [pc, #140]	@ (8005a9c <TIM_OC2_SetConfig+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC2_SetConfig+0x68>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a22      	ldr	r2, [pc, #136]	@ (8005aa0 <TIM_OC2_SetConfig+0xec>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10d      	bne.n	8005a38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <TIM_OC2_SetConfig+0xe8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC2_SetConfig+0x94>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a17      	ldr	r2, [pc, #92]	@ (8005aa0 <TIM_OC2_SetConfig+0xec>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d113      	bne.n	8005a70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	feff8fff 	.word	0xfeff8fff
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4b2d      	ldr	r3, [pc, #180]	@ (8005b84 <TIM_OC3_SetConfig+0xe0>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a22      	ldr	r2, [pc, #136]	@ (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_OC3_SetConfig+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a21      	ldr	r2, [pc, #132]	@ (8005b8c <TIM_OC3_SetConfig+0xe8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a17      	ldr	r2, [pc, #92]	@ (8005b88 <TIM_OC3_SetConfig+0xe4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x92>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a16      	ldr	r2, [pc, #88]	@ (8005b8c <TIM_OC3_SetConfig+0xe8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d113      	bne.n	8005b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	fffeff8f 	.word	0xfffeff8f
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40010400 	.word	0x40010400

08005b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4b1e      	ldr	r3, [pc, #120]	@ (8005c34 <TIM_OC4_SetConfig+0xa4>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	031b      	lsls	r3, r3, #12
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a13      	ldr	r2, [pc, #76]	@ (8005c38 <TIM_OC4_SetConfig+0xa8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC4_SetConfig+0x68>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	@ (8005c3c <TIM_OC4_SetConfig+0xac>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d109      	bne.n	8005c0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	019b      	lsls	r3, r3, #6
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	621a      	str	r2, [r3, #32]
}
 8005c26:	bf00      	nop
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	feff8fff 	.word	0xfeff8fff
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40010400 	.word	0x40010400

08005c40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd8 <TIM_OC5_SetConfig+0x98>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a12      	ldr	r2, [pc, #72]	@ (8005cdc <TIM_OC5_SetConfig+0x9c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC5_SetConfig+0x5e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <TIM_OC5_SetConfig+0xa0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d109      	bne.n	8005cb2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	fffeff8f 	.word	0xfffeff8f
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d80 <TIM_OC6_SetConfig+0x9c>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a13      	ldr	r2, [pc, #76]	@ (8005d84 <TIM_OC6_SetConfig+0xa0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC6_SetConfig+0x60>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	@ (8005d88 <TIM_OC6_SetConfig+0xa4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d109      	bne.n	8005d58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	feff8fff 	.word	0xfeff8fff
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f023 0201 	bic.w	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a28      	ldr	r2, [pc, #160]	@ (8005e58 <TIM_TI1_SetConfig+0xcc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d017      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a25      	ldr	r2, [pc, #148]	@ (8005e5c <TIM_TI1_SetConfig+0xd0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	@ (8005e60 <TIM_TI1_SetConfig+0xd4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	@ (8005e64 <TIM_TI1_SetConfig+0xd8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	@ (8005e68 <TIM_TI1_SetConfig+0xdc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a21      	ldr	r2, [pc, #132]	@ (8005e6c <TIM_TI1_SetConfig+0xe0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a20      	ldr	r2, [pc, #128]	@ (8005e70 <TIM_TI1_SetConfig+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <TIM_TI1_SetConfig+0x6a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <TIM_TI1_SetConfig+0x6c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e003      	b.n	8005e16 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 030a 	and.w	r3, r3, #10
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40010400 	.word	0x40010400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40001800 	.word	0x40001800

08005e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 030a 	bic.w	r3, r3, #10
 8005eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f023 0210 	bic.w	r2, r3, #16
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f24:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	031b      	lsls	r3, r3, #12
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006050:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	b29b      	uxth	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006076:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	031b      	lsls	r3, r3, #12
 800607c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f043 0307 	orr.w	r3, r3, #7
 80060c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	609a      	str	r2, [r3, #8]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	021a      	lsls	r2, r3, #8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006128:	2302      	movs	r3, #2
 800612a:	e06d      	b.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a30      	ldr	r2, [pc, #192]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2f      	ldr	r2, [pc, #188]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d108      	bne.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a20      	ldr	r2, [pc, #128]	@ (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d022      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d01d      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1d      	ldr	r2, [pc, #116]	@ (800621c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d018      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d013      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a15      	ldr	r2, [pc, #84]	@ (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d009      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a15      	ldr	r2, [pc, #84]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d10c      	bne.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40010000 	.word	0x40010000
 8006218:	40010400 	.word	0x40010400
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40014000 	.word	0x40014000
 800622c:	40001800 	.word	0x40001800

08006230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006248:	2302      	movs	r3, #2
 800624a:	e065      	b.n	8006318 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a14      	ldr	r2, [pc, #80]	@ (8006328 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d115      	bne.n	8006306 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	051b      	lsls	r3, r3, #20
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e040      	b.n	80063c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fb fe62 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2224      	movs	r2, #36	@ 0x24
 8006358:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa8c 	bl	8006890 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f825 	bl	80063c8 <UART_SetConfig>
 800637e:	4603      	mov	r3, r0
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e01b      	b.n	80063c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fb0b 	bl	80069d4 <UART_CheckIdleState>
 80063be:	4603      	mov	r3, r0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3708      	adds	r7, #8
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4ba6      	ldr	r3, [pc, #664]	@ (800668c <UART_SetConfig+0x2c4>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	430a      	orrs	r2, r1
 8006438:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a94      	ldr	r2, [pc, #592]	@ (8006690 <UART_SetConfig+0x2c8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d120      	bne.n	8006486 <UART_SetConfig+0xbe>
 8006444:	4b93      	ldr	r3, [pc, #588]	@ (8006694 <UART_SetConfig+0x2cc>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b03      	cmp	r3, #3
 8006450:	d816      	bhi.n	8006480 <UART_SetConfig+0xb8>
 8006452:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <UART_SetConfig+0x90>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006469 	.word	0x08006469
 800645c:	08006475 	.word	0x08006475
 8006460:	0800646f 	.word	0x0800646f
 8006464:	0800647b 	.word	0x0800647b
 8006468:	2301      	movs	r3, #1
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e150      	b.n	8006710 <UART_SetConfig+0x348>
 800646e:	2302      	movs	r3, #2
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e14d      	b.n	8006710 <UART_SetConfig+0x348>
 8006474:	2304      	movs	r3, #4
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e14a      	b.n	8006710 <UART_SetConfig+0x348>
 800647a:	2308      	movs	r3, #8
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e147      	b.n	8006710 <UART_SetConfig+0x348>
 8006480:	2310      	movs	r3, #16
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e144      	b.n	8006710 <UART_SetConfig+0x348>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a83      	ldr	r2, [pc, #524]	@ (8006698 <UART_SetConfig+0x2d0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d132      	bne.n	80064f6 <UART_SetConfig+0x12e>
 8006490:	4b80      	ldr	r3, [pc, #512]	@ (8006694 <UART_SetConfig+0x2cc>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b0c      	cmp	r3, #12
 800649c:	d828      	bhi.n	80064f0 <UART_SetConfig+0x128>
 800649e:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <UART_SetConfig+0xdc>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	080064f1 	.word	0x080064f1
 80064ac:	080064f1 	.word	0x080064f1
 80064b0:	080064f1 	.word	0x080064f1
 80064b4:	080064e5 	.word	0x080064e5
 80064b8:	080064f1 	.word	0x080064f1
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	080064f1 	.word	0x080064f1
 80064c4:	080064df 	.word	0x080064df
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f1 	.word	0x080064f1
 80064d4:	080064eb 	.word	0x080064eb
 80064d8:	2300      	movs	r3, #0
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e118      	b.n	8006710 <UART_SetConfig+0x348>
 80064de:	2302      	movs	r3, #2
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	e115      	b.n	8006710 <UART_SetConfig+0x348>
 80064e4:	2304      	movs	r3, #4
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e112      	b.n	8006710 <UART_SetConfig+0x348>
 80064ea:	2308      	movs	r3, #8
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e10f      	b.n	8006710 <UART_SetConfig+0x348>
 80064f0:	2310      	movs	r3, #16
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e10c      	b.n	8006710 <UART_SetConfig+0x348>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a68      	ldr	r2, [pc, #416]	@ (800669c <UART_SetConfig+0x2d4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d120      	bne.n	8006542 <UART_SetConfig+0x17a>
 8006500:	4b64      	ldr	r3, [pc, #400]	@ (8006694 <UART_SetConfig+0x2cc>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800650a:	2b30      	cmp	r3, #48	@ 0x30
 800650c:	d013      	beq.n	8006536 <UART_SetConfig+0x16e>
 800650e:	2b30      	cmp	r3, #48	@ 0x30
 8006510:	d814      	bhi.n	800653c <UART_SetConfig+0x174>
 8006512:	2b20      	cmp	r3, #32
 8006514:	d009      	beq.n	800652a <UART_SetConfig+0x162>
 8006516:	2b20      	cmp	r3, #32
 8006518:	d810      	bhi.n	800653c <UART_SetConfig+0x174>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <UART_SetConfig+0x15c>
 800651e:	2b10      	cmp	r3, #16
 8006520:	d006      	beq.n	8006530 <UART_SetConfig+0x168>
 8006522:	e00b      	b.n	800653c <UART_SetConfig+0x174>
 8006524:	2300      	movs	r3, #0
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e0f2      	b.n	8006710 <UART_SetConfig+0x348>
 800652a:	2302      	movs	r3, #2
 800652c:	77fb      	strb	r3, [r7, #31]
 800652e:	e0ef      	b.n	8006710 <UART_SetConfig+0x348>
 8006530:	2304      	movs	r3, #4
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e0ec      	b.n	8006710 <UART_SetConfig+0x348>
 8006536:	2308      	movs	r3, #8
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e0e9      	b.n	8006710 <UART_SetConfig+0x348>
 800653c:	2310      	movs	r3, #16
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e0e6      	b.n	8006710 <UART_SetConfig+0x348>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a56      	ldr	r2, [pc, #344]	@ (80066a0 <UART_SetConfig+0x2d8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d120      	bne.n	800658e <UART_SetConfig+0x1c6>
 800654c:	4b51      	ldr	r3, [pc, #324]	@ (8006694 <UART_SetConfig+0x2cc>)
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006552:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006556:	2bc0      	cmp	r3, #192	@ 0xc0
 8006558:	d013      	beq.n	8006582 <UART_SetConfig+0x1ba>
 800655a:	2bc0      	cmp	r3, #192	@ 0xc0
 800655c:	d814      	bhi.n	8006588 <UART_SetConfig+0x1c0>
 800655e:	2b80      	cmp	r3, #128	@ 0x80
 8006560:	d009      	beq.n	8006576 <UART_SetConfig+0x1ae>
 8006562:	2b80      	cmp	r3, #128	@ 0x80
 8006564:	d810      	bhi.n	8006588 <UART_SetConfig+0x1c0>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <UART_SetConfig+0x1a8>
 800656a:	2b40      	cmp	r3, #64	@ 0x40
 800656c:	d006      	beq.n	800657c <UART_SetConfig+0x1b4>
 800656e:	e00b      	b.n	8006588 <UART_SetConfig+0x1c0>
 8006570:	2300      	movs	r3, #0
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e0cc      	b.n	8006710 <UART_SetConfig+0x348>
 8006576:	2302      	movs	r3, #2
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e0c9      	b.n	8006710 <UART_SetConfig+0x348>
 800657c:	2304      	movs	r3, #4
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e0c6      	b.n	8006710 <UART_SetConfig+0x348>
 8006582:	2308      	movs	r3, #8
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e0c3      	b.n	8006710 <UART_SetConfig+0x348>
 8006588:	2310      	movs	r3, #16
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e0c0      	b.n	8006710 <UART_SetConfig+0x348>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a44      	ldr	r2, [pc, #272]	@ (80066a4 <UART_SetConfig+0x2dc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d125      	bne.n	80065e4 <UART_SetConfig+0x21c>
 8006598:	4b3e      	ldr	r3, [pc, #248]	@ (8006694 <UART_SetConfig+0x2cc>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065a6:	d017      	beq.n	80065d8 <UART_SetConfig+0x210>
 80065a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ac:	d817      	bhi.n	80065de <UART_SetConfig+0x216>
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b2:	d00b      	beq.n	80065cc <UART_SetConfig+0x204>
 80065b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b8:	d811      	bhi.n	80065de <UART_SetConfig+0x216>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <UART_SetConfig+0x1fe>
 80065be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c2:	d006      	beq.n	80065d2 <UART_SetConfig+0x20a>
 80065c4:	e00b      	b.n	80065de <UART_SetConfig+0x216>
 80065c6:	2300      	movs	r3, #0
 80065c8:	77fb      	strb	r3, [r7, #31]
 80065ca:	e0a1      	b.n	8006710 <UART_SetConfig+0x348>
 80065cc:	2302      	movs	r3, #2
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e09e      	b.n	8006710 <UART_SetConfig+0x348>
 80065d2:	2304      	movs	r3, #4
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e09b      	b.n	8006710 <UART_SetConfig+0x348>
 80065d8:	2308      	movs	r3, #8
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e098      	b.n	8006710 <UART_SetConfig+0x348>
 80065de:	2310      	movs	r3, #16
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e095      	b.n	8006710 <UART_SetConfig+0x348>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a2f      	ldr	r2, [pc, #188]	@ (80066a8 <UART_SetConfig+0x2e0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d125      	bne.n	800663a <UART_SetConfig+0x272>
 80065ee:	4b29      	ldr	r3, [pc, #164]	@ (8006694 <UART_SetConfig+0x2cc>)
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065fc:	d017      	beq.n	800662e <UART_SetConfig+0x266>
 80065fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006602:	d817      	bhi.n	8006634 <UART_SetConfig+0x26c>
 8006604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006608:	d00b      	beq.n	8006622 <UART_SetConfig+0x25a>
 800660a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800660e:	d811      	bhi.n	8006634 <UART_SetConfig+0x26c>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <UART_SetConfig+0x254>
 8006614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006618:	d006      	beq.n	8006628 <UART_SetConfig+0x260>
 800661a:	e00b      	b.n	8006634 <UART_SetConfig+0x26c>
 800661c:	2301      	movs	r3, #1
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e076      	b.n	8006710 <UART_SetConfig+0x348>
 8006622:	2302      	movs	r3, #2
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e073      	b.n	8006710 <UART_SetConfig+0x348>
 8006628:	2304      	movs	r3, #4
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e070      	b.n	8006710 <UART_SetConfig+0x348>
 800662e:	2308      	movs	r3, #8
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e06d      	b.n	8006710 <UART_SetConfig+0x348>
 8006634:	2310      	movs	r3, #16
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e06a      	b.n	8006710 <UART_SetConfig+0x348>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <UART_SetConfig+0x2e4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d138      	bne.n	80066b6 <UART_SetConfig+0x2ee>
 8006644:	4b13      	ldr	r3, [pc, #76]	@ (8006694 <UART_SetConfig+0x2cc>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800664e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006652:	d017      	beq.n	8006684 <UART_SetConfig+0x2bc>
 8006654:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006658:	d82a      	bhi.n	80066b0 <UART_SetConfig+0x2e8>
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800665e:	d00b      	beq.n	8006678 <UART_SetConfig+0x2b0>
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006664:	d824      	bhi.n	80066b0 <UART_SetConfig+0x2e8>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <UART_SetConfig+0x2aa>
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666e:	d006      	beq.n	800667e <UART_SetConfig+0x2b6>
 8006670:	e01e      	b.n	80066b0 <UART_SetConfig+0x2e8>
 8006672:	2300      	movs	r3, #0
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e04b      	b.n	8006710 <UART_SetConfig+0x348>
 8006678:	2302      	movs	r3, #2
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e048      	b.n	8006710 <UART_SetConfig+0x348>
 800667e:	2304      	movs	r3, #4
 8006680:	77fb      	strb	r3, [r7, #31]
 8006682:	e045      	b.n	8006710 <UART_SetConfig+0x348>
 8006684:	2308      	movs	r3, #8
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e042      	b.n	8006710 <UART_SetConfig+0x348>
 800668a:	bf00      	nop
 800668c:	efff69f3 	.word	0xefff69f3
 8006690:	40011000 	.word	0x40011000
 8006694:	40023800 	.word	0x40023800
 8006698:	40004400 	.word	0x40004400
 800669c:	40004800 	.word	0x40004800
 80066a0:	40004c00 	.word	0x40004c00
 80066a4:	40005000 	.word	0x40005000
 80066a8:	40011400 	.word	0x40011400
 80066ac:	40007800 	.word	0x40007800
 80066b0:	2310      	movs	r3, #16
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e02c      	b.n	8006710 <UART_SetConfig+0x348>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a72      	ldr	r2, [pc, #456]	@ (8006884 <UART_SetConfig+0x4bc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d125      	bne.n	800670c <UART_SetConfig+0x344>
 80066c0:	4b71      	ldr	r3, [pc, #452]	@ (8006888 <UART_SetConfig+0x4c0>)
 80066c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80066ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066ce:	d017      	beq.n	8006700 <UART_SetConfig+0x338>
 80066d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066d4:	d817      	bhi.n	8006706 <UART_SetConfig+0x33e>
 80066d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066da:	d00b      	beq.n	80066f4 <UART_SetConfig+0x32c>
 80066dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e0:	d811      	bhi.n	8006706 <UART_SetConfig+0x33e>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <UART_SetConfig+0x326>
 80066e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ea:	d006      	beq.n	80066fa <UART_SetConfig+0x332>
 80066ec:	e00b      	b.n	8006706 <UART_SetConfig+0x33e>
 80066ee:	2300      	movs	r3, #0
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e00d      	b.n	8006710 <UART_SetConfig+0x348>
 80066f4:	2302      	movs	r3, #2
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e00a      	b.n	8006710 <UART_SetConfig+0x348>
 80066fa:	2304      	movs	r3, #4
 80066fc:	77fb      	strb	r3, [r7, #31]
 80066fe:	e007      	b.n	8006710 <UART_SetConfig+0x348>
 8006700:	2308      	movs	r3, #8
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e004      	b.n	8006710 <UART_SetConfig+0x348>
 8006706:	2310      	movs	r3, #16
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e001      	b.n	8006710 <UART_SetConfig+0x348>
 800670c:	2310      	movs	r3, #16
 800670e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006718:	d15b      	bne.n	80067d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800671a:	7ffb      	ldrb	r3, [r7, #31]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d828      	bhi.n	8006772 <UART_SetConfig+0x3aa>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0x360>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fd feea 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 8006750:	61b8      	str	r0, [r7, #24]
        break;
 8006752:	e013      	b.n	800677c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fd fefa 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8006758:	61b8      	str	r0, [r7, #24]
        break;
 800675a:	e00f      	b.n	800677c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b4b      	ldr	r3, [pc, #300]	@ (800688c <UART_SetConfig+0x4c4>)
 800675e:	61bb      	str	r3, [r7, #24]
        break;
 8006760:	e00c      	b.n	800677c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fd fdcd 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006766:	61b8      	str	r0, [r7, #24]
        break;
 8006768:	e008      	b.n	800677c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676e:	61bb      	str	r3, [r7, #24]
        break;
 8006770:	e004      	b.n	800677c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	77bb      	strb	r3, [r7, #30]
        break;
 800677a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d074      	beq.n	800686c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	005a      	lsls	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d916      	bls.n	80067cc <UART_SetConfig+0x404>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a4:	d212      	bcs.n	80067cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f023 030f 	bic.w	r3, r3, #15
 80067ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	085b      	lsrs	r3, r3, #1
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	89fb      	ldrh	r3, [r7, #14]
 80067be:	4313      	orrs	r3, r2
 80067c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	89fa      	ldrh	r2, [r7, #14]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e04f      	b.n	800686c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	77bb      	strb	r3, [r7, #30]
 80067d0:	e04c      	b.n	800686c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d2:	7ffb      	ldrb	r3, [r7, #31]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d828      	bhi.n	800682a <UART_SetConfig+0x462>
 80067d8:	a201      	add	r2, pc, #4	@ (adr r2, 80067e0 <UART_SetConfig+0x418>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	0800682b 	.word	0x0800682b
 80067f0:	0800681b 	.word	0x0800681b
 80067f4:	0800682b 	.word	0x0800682b
 80067f8:	0800682b 	.word	0x0800682b
 80067fc:	0800682b 	.word	0x0800682b
 8006800:	08006823 	.word	0x08006823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006804:	f7fd fe8e 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 8006808:	61b8      	str	r0, [r7, #24]
        break;
 800680a:	e013      	b.n	8006834 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800680c:	f7fd fe9e 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8006810:	61b8      	str	r0, [r7, #24]
        break;
 8006812:	e00f      	b.n	8006834 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006814:	4b1d      	ldr	r3, [pc, #116]	@ (800688c <UART_SetConfig+0x4c4>)
 8006816:	61bb      	str	r3, [r7, #24]
        break;
 8006818:	e00c      	b.n	8006834 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681a:	f7fd fd71 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 800681e:	61b8      	str	r0, [r7, #24]
        break;
 8006820:	e008      	b.n	8006834 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006826:	61bb      	str	r3, [r7, #24]
        break;
 8006828:	e004      	b.n	8006834 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	77bb      	strb	r3, [r7, #30]
        break;
 8006832:	bf00      	nop
    }

    if (pclk != 0U)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d018      	beq.n	800686c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	085a      	lsrs	r2, r3, #1
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	441a      	add	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b0f      	cmp	r3, #15
 8006852:	d909      	bls.n	8006868 <UART_SetConfig+0x4a0>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800685a:	d205      	bcs.n	8006868 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e001      	b.n	800686c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006878:	7fbb      	ldrb	r3, [r7, #30]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40007c00 	.word	0x40007c00
 8006888:	40023800 	.word	0x40023800
 800688c:	00f42400 	.word	0x00f42400

08006890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800698e:	d10a      	bne.n	80069a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b098      	sub	sp, #96	@ 0x60
 80069d8:	af02      	add	r7, sp, #8
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069e4:	f7fb fe0e 	bl	8002604 <HAL_GetTick>
 80069e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d12e      	bne.n	8006a56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a00:	2200      	movs	r2, #0
 8006a02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f88c 	bl	8006b24 <UART_WaitOnFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d021      	beq.n	8006a56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a32:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e6      	bne.n	8006a12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e062      	b.n	8006b1c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d149      	bne.n	8006af8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f856 	bl	8006b24 <UART_WaitOnFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d03c      	beq.n	8006af8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e6      	bne.n	8006a7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e5      	bne.n	8006ab0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e011      	b.n	8006b1c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3758      	adds	r7, #88	@ 0x58
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	4613      	mov	r3, r2
 8006b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b34:	e04f      	b.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d04b      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3e:	f7fb fd61 	bl	8002604 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d302      	bcc.n	8006b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e04e      	b.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d037      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b80      	cmp	r3, #128	@ 0x80
 8006b6a:	d034      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d031      	beq.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d110      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2208      	movs	r2, #8
 8006b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f838 	bl	8006bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2208      	movs	r2, #8
 8006b92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e029      	b.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb0:	d111      	bne.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f81e 	bl	8006bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e00f      	b.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	bf0c      	ite	eq
 8006be6:	2301      	moveq	r3, #1
 8006be8:	2300      	movne	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d0a0      	beq.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b095      	sub	sp, #84	@ 0x54
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e5      	bne.n	8006c38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d118      	bne.n	8006ca6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f023 0310 	bic.w	r3, r3, #16
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e6      	bne.n	8006c74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cba:	bf00      	nop
 8006cbc:	3754      	adds	r7, #84	@ 0x54
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <std>:
 8006cc8:	2300      	movs	r3, #0
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	4604      	mov	r4, r0
 8006cce:	e9c0 3300 	strd	r3, r3, [r0]
 8006cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cd6:	6083      	str	r3, [r0, #8]
 8006cd8:	8181      	strh	r1, [r0, #12]
 8006cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cdc:	81c2      	strh	r2, [r0, #14]
 8006cde:	6183      	str	r3, [r0, #24]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	305c      	adds	r0, #92	@ 0x5c
 8006ce6:	f000 f9f9 	bl	80070dc <memset>
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <std+0x58>)
 8006cec:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <std+0x5c>)
 8006cf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d28 <std+0x60>)
 8006cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <std+0x64>)
 8006cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <std+0x68>)
 8006cfc:	6224      	str	r4, [r4, #32]
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	d006      	beq.n	8006d10 <std+0x48>
 8006d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d06:	4294      	cmp	r4, r2
 8006d08:	d002      	beq.n	8006d10 <std+0x48>
 8006d0a:	33d0      	adds	r3, #208	@ 0xd0
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	d105      	bne.n	8006d1c <std+0x54>
 8006d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d18:	f000 ba58 	b.w	80071cc <__retarget_lock_init_recursive>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	08006f2d 	.word	0x08006f2d
 8006d24:	08006f4f 	.word	0x08006f4f
 8006d28:	08006f87 	.word	0x08006f87
 8006d2c:	08006fab 	.word	0x08006fab
 8006d30:	2000069c 	.word	0x2000069c

08006d34 <stdio_exit_handler>:
 8006d34:	4a02      	ldr	r2, [pc, #8]	@ (8006d40 <stdio_exit_handler+0xc>)
 8006d36:	4903      	ldr	r1, [pc, #12]	@ (8006d44 <stdio_exit_handler+0x10>)
 8006d38:	4803      	ldr	r0, [pc, #12]	@ (8006d48 <stdio_exit_handler+0x14>)
 8006d3a:	f000 b869 	b.w	8006e10 <_fwalk_sglue>
 8006d3e:	bf00      	nop
 8006d40:	2000000c 	.word	0x2000000c
 8006d44:	08007a6d 	.word	0x08007a6d
 8006d48:	2000001c 	.word	0x2000001c

08006d4c <cleanup_stdio>:
 8006d4c:	6841      	ldr	r1, [r0, #4]
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d80 <cleanup_stdio+0x34>)
 8006d50:	4299      	cmp	r1, r3
 8006d52:	b510      	push	{r4, lr}
 8006d54:	4604      	mov	r4, r0
 8006d56:	d001      	beq.n	8006d5c <cleanup_stdio+0x10>
 8006d58:	f000 fe88 	bl	8007a6c <_fflush_r>
 8006d5c:	68a1      	ldr	r1, [r4, #8]
 8006d5e:	4b09      	ldr	r3, [pc, #36]	@ (8006d84 <cleanup_stdio+0x38>)
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <cleanup_stdio+0x1e>
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 fe81 	bl	8007a6c <_fflush_r>
 8006d6a:	68e1      	ldr	r1, [r4, #12]
 8006d6c:	4b06      	ldr	r3, [pc, #24]	@ (8006d88 <cleanup_stdio+0x3c>)
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	d004      	beq.n	8006d7c <cleanup_stdio+0x30>
 8006d72:	4620      	mov	r0, r4
 8006d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d78:	f000 be78 	b.w	8007a6c <_fflush_r>
 8006d7c:	bd10      	pop	{r4, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000069c 	.word	0x2000069c
 8006d84:	20000704 	.word	0x20000704
 8006d88:	2000076c 	.word	0x2000076c

08006d8c <global_stdio_init.part.0>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <global_stdio_init.part.0+0x30>)
 8006d90:	4c0b      	ldr	r4, [pc, #44]	@ (8006dc0 <global_stdio_init.part.0+0x34>)
 8006d92:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc4 <global_stdio_init.part.0+0x38>)
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	4620      	mov	r0, r4
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2104      	movs	r1, #4
 8006d9c:	f7ff ff94 	bl	8006cc8 <std>
 8006da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006da4:	2201      	movs	r2, #1
 8006da6:	2109      	movs	r1, #9
 8006da8:	f7ff ff8e 	bl	8006cc8 <std>
 8006dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006db0:	2202      	movs	r2, #2
 8006db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db6:	2112      	movs	r1, #18
 8006db8:	f7ff bf86 	b.w	8006cc8 <std>
 8006dbc:	200007d4 	.word	0x200007d4
 8006dc0:	2000069c 	.word	0x2000069c
 8006dc4:	08006d35 	.word	0x08006d35

08006dc8 <__sfp_lock_acquire>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__sfp_lock_acquire+0x8>)
 8006dca:	f000 ba00 	b.w	80071ce <__retarget_lock_acquire_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200007dd 	.word	0x200007dd

08006dd4 <__sfp_lock_release>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	@ (8006ddc <__sfp_lock_release+0x8>)
 8006dd6:	f000 b9fb 	b.w	80071d0 <__retarget_lock_release_recursive>
 8006dda:	bf00      	nop
 8006ddc:	200007dd 	.word	0x200007dd

08006de0 <__sinit>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4604      	mov	r4, r0
 8006de4:	f7ff fff0 	bl	8006dc8 <__sfp_lock_acquire>
 8006de8:	6a23      	ldr	r3, [r4, #32]
 8006dea:	b11b      	cbz	r3, 8006df4 <__sinit+0x14>
 8006dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df0:	f7ff bff0 	b.w	8006dd4 <__sfp_lock_release>
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <__sinit+0x28>)
 8006df6:	6223      	str	r3, [r4, #32]
 8006df8:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <__sinit+0x2c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f5      	bne.n	8006dec <__sinit+0xc>
 8006e00:	f7ff ffc4 	bl	8006d8c <global_stdio_init.part.0>
 8006e04:	e7f2      	b.n	8006dec <__sinit+0xc>
 8006e06:	bf00      	nop
 8006e08:	08006d4d 	.word	0x08006d4d
 8006e0c:	200007d4 	.word	0x200007d4

08006e10 <_fwalk_sglue>:
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	4607      	mov	r7, r0
 8006e16:	4688      	mov	r8, r1
 8006e18:	4614      	mov	r4, r2
 8006e1a:	2600      	movs	r6, #0
 8006e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e20:	f1b9 0901 	subs.w	r9, r9, #1
 8006e24:	d505      	bpl.n	8006e32 <_fwalk_sglue+0x22>
 8006e26:	6824      	ldr	r4, [r4, #0]
 8006e28:	2c00      	cmp	r4, #0
 8006e2a:	d1f7      	bne.n	8006e1c <_fwalk_sglue+0xc>
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d907      	bls.n	8006e48 <_fwalk_sglue+0x38>
 8006e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	d003      	beq.n	8006e48 <_fwalk_sglue+0x38>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4638      	mov	r0, r7
 8006e44:	47c0      	blx	r8
 8006e46:	4306      	orrs	r6, r0
 8006e48:	3568      	adds	r5, #104	@ 0x68
 8006e4a:	e7e9      	b.n	8006e20 <_fwalk_sglue+0x10>

08006e4c <iprintf>:
 8006e4c:	b40f      	push	{r0, r1, r2, r3}
 8006e4e:	b507      	push	{r0, r1, r2, lr}
 8006e50:	4906      	ldr	r1, [pc, #24]	@ (8006e6c <iprintf+0x20>)
 8006e52:	ab04      	add	r3, sp, #16
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5a:	6881      	ldr	r1, [r0, #8]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	f000 fadb 	bl	8007418 <_vfiprintf_r>
 8006e62:	b003      	add	sp, #12
 8006e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	20000018 	.word	0x20000018

08006e70 <_puts_r>:
 8006e70:	6a03      	ldr	r3, [r0, #32]
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	6884      	ldr	r4, [r0, #8]
 8006e76:	4605      	mov	r5, r0
 8006e78:	460e      	mov	r6, r1
 8006e7a:	b90b      	cbnz	r3, 8006e80 <_puts_r+0x10>
 8006e7c:	f7ff ffb0 	bl	8006de0 <__sinit>
 8006e80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d405      	bmi.n	8006e92 <_puts_r+0x22>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	0598      	lsls	r0, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_puts_r+0x22>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e8e:	f000 f99e 	bl	80071ce <__retarget_lock_acquire_recursive>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	0719      	lsls	r1, r3, #28
 8006e96:	d502      	bpl.n	8006e9e <_puts_r+0x2e>
 8006e98:	6923      	ldr	r3, [r4, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d135      	bne.n	8006f0a <_puts_r+0x9a>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 f8c5 	bl	8007030 <__swsetup_r>
 8006ea6:	b380      	cbz	r0, 8006f0a <_puts_r+0x9a>
 8006ea8:	f04f 35ff 	mov.w	r5, #4294967295
 8006eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eae:	07da      	lsls	r2, r3, #31
 8006eb0:	d405      	bmi.n	8006ebe <_puts_r+0x4e>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	059b      	lsls	r3, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_puts_r+0x4e>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eba:	f000 f989 	bl	80071d0 <__retarget_lock_release_recursive>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da04      	bge.n	8006ed0 <_puts_r+0x60>
 8006ec6:	69a2      	ldr	r2, [r4, #24]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	dc17      	bgt.n	8006efc <_puts_r+0x8c>
 8006ecc:	290a      	cmp	r1, #10
 8006ece:	d015      	beq.n	8006efc <_puts_r+0x8c>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	7019      	strb	r1, [r3, #0]
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	2900      	cmp	r1, #0
 8006ee4:	d1ed      	bne.n	8006ec2 <_puts_r+0x52>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da11      	bge.n	8006f0e <_puts_r+0x9e>
 8006eea:	4622      	mov	r2, r4
 8006eec:	210a      	movs	r1, #10
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f85f 	bl	8006fb2 <__swbuf_r>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d0d7      	beq.n	8006ea8 <_puts_r+0x38>
 8006ef8:	250a      	movs	r5, #10
 8006efa:	e7d7      	b.n	8006eac <_puts_r+0x3c>
 8006efc:	4622      	mov	r2, r4
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 f857 	bl	8006fb2 <__swbuf_r>
 8006f04:	3001      	adds	r0, #1
 8006f06:	d1e7      	bne.n	8006ed8 <_puts_r+0x68>
 8006f08:	e7ce      	b.n	8006ea8 <_puts_r+0x38>
 8006f0a:	3e01      	subs	r6, #1
 8006f0c:	e7e4      	b.n	8006ed8 <_puts_r+0x68>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	220a      	movs	r2, #10
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	e7ee      	b.n	8006ef8 <_puts_r+0x88>
	...

08006f1c <puts>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <puts+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f7ff bfa5 	b.w	8006e70 <_puts_r>
 8006f26:	bf00      	nop
 8006f28:	20000018 	.word	0x20000018

08006f2c <__sread>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	f000 f8fc 	bl	8007130 <_read_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	bfab      	itete	ge
 8006f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f40:	181b      	addge	r3, r3, r0
 8006f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f46:	bfac      	ite	ge
 8006f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f4a:	81a3      	strhlt	r3, [r4, #12]
 8006f4c:	bd10      	pop	{r4, pc}

08006f4e <__swrite>:
 8006f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f52:	461f      	mov	r7, r3
 8006f54:	898b      	ldrh	r3, [r1, #12]
 8006f56:	05db      	lsls	r3, r3, #23
 8006f58:	4605      	mov	r5, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	d505      	bpl.n	8006f6c <__swrite+0x1e>
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	2302      	movs	r3, #2
 8006f66:	2200      	movs	r2, #0
 8006f68:	f000 f8d0 	bl	800710c <_lseek_r>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	f000 b8e7 	b.w	8007154 <_write_r>

08006f86 <__sseek>:
 8006f86:	b510      	push	{r4, lr}
 8006f88:	460c      	mov	r4, r1
 8006f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8e:	f000 f8bd 	bl	800710c <_lseek_r>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	bf15      	itete	ne
 8006f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fa2:	81a3      	strheq	r3, [r4, #12]
 8006fa4:	bf18      	it	ne
 8006fa6:	81a3      	strhne	r3, [r4, #12]
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <__sclose>:
 8006faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fae:	f000 b89d 	b.w	80070ec <_close_r>

08006fb2 <__swbuf_r>:
 8006fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	4614      	mov	r4, r2
 8006fb8:	4605      	mov	r5, r0
 8006fba:	b118      	cbz	r0, 8006fc4 <__swbuf_r+0x12>
 8006fbc:	6a03      	ldr	r3, [r0, #32]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <__swbuf_r+0x12>
 8006fc0:	f7ff ff0e 	bl	8006de0 <__sinit>
 8006fc4:	69a3      	ldr	r3, [r4, #24]
 8006fc6:	60a3      	str	r3, [r4, #8]
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	071a      	lsls	r2, r3, #28
 8006fcc:	d501      	bpl.n	8006fd2 <__swbuf_r+0x20>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	b943      	cbnz	r3, 8006fe4 <__swbuf_r+0x32>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 f82b 	bl	8007030 <__swsetup_r>
 8006fda:	b118      	cbz	r0, 8006fe4 <__swbuf_r+0x32>
 8006fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	6922      	ldr	r2, [r4, #16]
 8006fe8:	1a98      	subs	r0, r3, r2
 8006fea:	6963      	ldr	r3, [r4, #20]
 8006fec:	b2f6      	uxtb	r6, r6
 8006fee:	4283      	cmp	r3, r0
 8006ff0:	4637      	mov	r7, r6
 8006ff2:	dc05      	bgt.n	8007000 <__swbuf_r+0x4e>
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 fd38 	bl	8007a6c <_fflush_r>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d1ed      	bne.n	8006fdc <__swbuf_r+0x2a>
 8007000:	68a3      	ldr	r3, [r4, #8]
 8007002:	3b01      	subs	r3, #1
 8007004:	60a3      	str	r3, [r4, #8]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	6022      	str	r2, [r4, #0]
 800700c:	701e      	strb	r6, [r3, #0]
 800700e:	6962      	ldr	r2, [r4, #20]
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	429a      	cmp	r2, r3
 8007014:	d004      	beq.n	8007020 <__swbuf_r+0x6e>
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	07db      	lsls	r3, r3, #31
 800701a:	d5e1      	bpl.n	8006fe0 <__swbuf_r+0x2e>
 800701c:	2e0a      	cmp	r6, #10
 800701e:	d1df      	bne.n	8006fe0 <__swbuf_r+0x2e>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f000 fd22 	bl	8007a6c <_fflush_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	d0d9      	beq.n	8006fe0 <__swbuf_r+0x2e>
 800702c:	e7d6      	b.n	8006fdc <__swbuf_r+0x2a>
	...

08007030 <__swsetup_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4b29      	ldr	r3, [pc, #164]	@ (80070d8 <__swsetup_r+0xa8>)
 8007034:	4605      	mov	r5, r0
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	460c      	mov	r4, r1
 800703a:	b118      	cbz	r0, 8007044 <__swsetup_r+0x14>
 800703c:	6a03      	ldr	r3, [r0, #32]
 800703e:	b90b      	cbnz	r3, 8007044 <__swsetup_r+0x14>
 8007040:	f7ff fece 	bl	8006de0 <__sinit>
 8007044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007048:	0719      	lsls	r1, r3, #28
 800704a:	d422      	bmi.n	8007092 <__swsetup_r+0x62>
 800704c:	06da      	lsls	r2, r3, #27
 800704e:	d407      	bmi.n	8007060 <__swsetup_r+0x30>
 8007050:	2209      	movs	r2, #9
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	e033      	b.n	80070c8 <__swsetup_r+0x98>
 8007060:	0758      	lsls	r0, r3, #29
 8007062:	d512      	bpl.n	800708a <__swsetup_r+0x5a>
 8007064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007066:	b141      	cbz	r1, 800707a <__swsetup_r+0x4a>
 8007068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800706c:	4299      	cmp	r1, r3
 800706e:	d002      	beq.n	8007076 <__swsetup_r+0x46>
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f8af 	bl	80071d4 <_free_r>
 8007076:	2300      	movs	r3, #0
 8007078:	6363      	str	r3, [r4, #52]	@ 0x34
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	2300      	movs	r3, #0
 8007084:	6063      	str	r3, [r4, #4]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f043 0308 	orr.w	r3, r3, #8
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	b94b      	cbnz	r3, 80070aa <__swsetup_r+0x7a>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800709c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a0:	d003      	beq.n	80070aa <__swsetup_r+0x7a>
 80070a2:	4621      	mov	r1, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 fd2f 	bl	8007b08 <__smakebuf_r>
 80070aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ae:	f013 0201 	ands.w	r2, r3, #1
 80070b2:	d00a      	beq.n	80070ca <__swsetup_r+0x9a>
 80070b4:	2200      	movs	r2, #0
 80070b6:	60a2      	str	r2, [r4, #8]
 80070b8:	6962      	ldr	r2, [r4, #20]
 80070ba:	4252      	negs	r2, r2
 80070bc:	61a2      	str	r2, [r4, #24]
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	b942      	cbnz	r2, 80070d4 <__swsetup_r+0xa4>
 80070c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070c6:	d1c5      	bne.n	8007054 <__swsetup_r+0x24>
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	0799      	lsls	r1, r3, #30
 80070cc:	bf58      	it	pl
 80070ce:	6962      	ldrpl	r2, [r4, #20]
 80070d0:	60a2      	str	r2, [r4, #8]
 80070d2:	e7f4      	b.n	80070be <__swsetup_r+0x8e>
 80070d4:	2000      	movs	r0, #0
 80070d6:	e7f7      	b.n	80070c8 <__swsetup_r+0x98>
 80070d8:	20000018 	.word	0x20000018

080070dc <memset>:
 80070dc:	4402      	add	r2, r0
 80070de:	4603      	mov	r3, r0
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d100      	bne.n	80070e6 <memset+0xa>
 80070e4:	4770      	bx	lr
 80070e6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ea:	e7f9      	b.n	80070e0 <memset+0x4>

080070ec <_close_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d06      	ldr	r5, [pc, #24]	@ (8007108 <_close_r+0x1c>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	602b      	str	r3, [r5, #0]
 80070f8:	f7fb f98e 	bl	8002418 <_close>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_close_r+0x1a>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_close_r+0x1a>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	200007d8 	.word	0x200007d8

0800710c <_lseek_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	@ (800712c <_lseek_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f7fb f9a3 	bl	8002466 <_lseek>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_lseek_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_lseek_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	200007d8 	.word	0x200007d8

08007130 <_read_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d07      	ldr	r5, [pc, #28]	@ (8007150 <_read_r+0x20>)
 8007134:	4604      	mov	r4, r0
 8007136:	4608      	mov	r0, r1
 8007138:	4611      	mov	r1, r2
 800713a:	2200      	movs	r2, #0
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fb f94d 	bl	80023de <_read>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_read_r+0x1e>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_read_r+0x1e>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	200007d8 	.word	0x200007d8

08007154 <_write_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d07      	ldr	r5, [pc, #28]	@ (8007174 <_write_r+0x20>)
 8007158:	4604      	mov	r4, r0
 800715a:	4608      	mov	r0, r1
 800715c:	4611      	mov	r1, r2
 800715e:	2200      	movs	r2, #0
 8007160:	602a      	str	r2, [r5, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	f7f9 fa5b 	bl	800061e <_write>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_write_r+0x1e>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_write_r+0x1e>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	200007d8 	.word	0x200007d8

08007178 <__errno>:
 8007178:	4b01      	ldr	r3, [pc, #4]	@ (8007180 <__errno+0x8>)
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000018 	.word	0x20000018

08007184 <__libc_init_array>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4d0d      	ldr	r5, [pc, #52]	@ (80071bc <__libc_init_array+0x38>)
 8007188:	4c0d      	ldr	r4, [pc, #52]	@ (80071c0 <__libc_init_array+0x3c>)
 800718a:	1b64      	subs	r4, r4, r5
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	2600      	movs	r6, #0
 8007190:	42a6      	cmp	r6, r4
 8007192:	d109      	bne.n	80071a8 <__libc_init_array+0x24>
 8007194:	4d0b      	ldr	r5, [pc, #44]	@ (80071c4 <__libc_init_array+0x40>)
 8007196:	4c0c      	ldr	r4, [pc, #48]	@ (80071c8 <__libc_init_array+0x44>)
 8007198:	f000 fd24 	bl	8007be4 <_init>
 800719c:	1b64      	subs	r4, r4, r5
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	2600      	movs	r6, #0
 80071a2:	42a6      	cmp	r6, r4
 80071a4:	d105      	bne.n	80071b2 <__libc_init_array+0x2e>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ac:	4798      	blx	r3
 80071ae:	3601      	adds	r6, #1
 80071b0:	e7ee      	b.n	8007190 <__libc_init_array+0xc>
 80071b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b6:	4798      	blx	r3
 80071b8:	3601      	adds	r6, #1
 80071ba:	e7f2      	b.n	80071a2 <__libc_init_array+0x1e>
 80071bc:	08007cb8 	.word	0x08007cb8
 80071c0:	08007cb8 	.word	0x08007cb8
 80071c4:	08007cb8 	.word	0x08007cb8
 80071c8:	08007cbc 	.word	0x08007cbc

080071cc <__retarget_lock_init_recursive>:
 80071cc:	4770      	bx	lr

080071ce <__retarget_lock_acquire_recursive>:
 80071ce:	4770      	bx	lr

080071d0 <__retarget_lock_release_recursive>:
 80071d0:	4770      	bx	lr
	...

080071d4 <_free_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4605      	mov	r5, r0
 80071d8:	2900      	cmp	r1, #0
 80071da:	d041      	beq.n	8007260 <_free_r+0x8c>
 80071dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e0:	1f0c      	subs	r4, r1, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	bfb8      	it	lt
 80071e6:	18e4      	addlt	r4, r4, r3
 80071e8:	f000 f8e0 	bl	80073ac <__malloc_lock>
 80071ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007264 <_free_r+0x90>)
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	b933      	cbnz	r3, 8007200 <_free_r+0x2c>
 80071f2:	6063      	str	r3, [r4, #4]
 80071f4:	6014      	str	r4, [r2, #0]
 80071f6:	4628      	mov	r0, r5
 80071f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071fc:	f000 b8dc 	b.w	80073b8 <__malloc_unlock>
 8007200:	42a3      	cmp	r3, r4
 8007202:	d908      	bls.n	8007216 <_free_r+0x42>
 8007204:	6820      	ldr	r0, [r4, #0]
 8007206:	1821      	adds	r1, r4, r0
 8007208:	428b      	cmp	r3, r1
 800720a:	bf01      	itttt	eq
 800720c:	6819      	ldreq	r1, [r3, #0]
 800720e:	685b      	ldreq	r3, [r3, #4]
 8007210:	1809      	addeq	r1, r1, r0
 8007212:	6021      	streq	r1, [r4, #0]
 8007214:	e7ed      	b.n	80071f2 <_free_r+0x1e>
 8007216:	461a      	mov	r2, r3
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b10b      	cbz	r3, 8007220 <_free_r+0x4c>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d9fa      	bls.n	8007216 <_free_r+0x42>
 8007220:	6811      	ldr	r1, [r2, #0]
 8007222:	1850      	adds	r0, r2, r1
 8007224:	42a0      	cmp	r0, r4
 8007226:	d10b      	bne.n	8007240 <_free_r+0x6c>
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	4401      	add	r1, r0
 800722c:	1850      	adds	r0, r2, r1
 800722e:	4283      	cmp	r3, r0
 8007230:	6011      	str	r1, [r2, #0]
 8007232:	d1e0      	bne.n	80071f6 <_free_r+0x22>
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	6053      	str	r3, [r2, #4]
 800723a:	4408      	add	r0, r1
 800723c:	6010      	str	r0, [r2, #0]
 800723e:	e7da      	b.n	80071f6 <_free_r+0x22>
 8007240:	d902      	bls.n	8007248 <_free_r+0x74>
 8007242:	230c      	movs	r3, #12
 8007244:	602b      	str	r3, [r5, #0]
 8007246:	e7d6      	b.n	80071f6 <_free_r+0x22>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	1821      	adds	r1, r4, r0
 800724c:	428b      	cmp	r3, r1
 800724e:	bf04      	itt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	bf04      	itt	eq
 8007258:	1809      	addeq	r1, r1, r0
 800725a:	6021      	streq	r1, [r4, #0]
 800725c:	6054      	str	r4, [r2, #4]
 800725e:	e7ca      	b.n	80071f6 <_free_r+0x22>
 8007260:	bd38      	pop	{r3, r4, r5, pc}
 8007262:	bf00      	nop
 8007264:	200007e4 	.word	0x200007e4

08007268 <sbrk_aligned>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	4e0f      	ldr	r6, [pc, #60]	@ (80072a8 <sbrk_aligned+0x40>)
 800726c:	460c      	mov	r4, r1
 800726e:	6831      	ldr	r1, [r6, #0]
 8007270:	4605      	mov	r5, r0
 8007272:	b911      	cbnz	r1, 800727a <sbrk_aligned+0x12>
 8007274:	f000 fca6 	bl	8007bc4 <_sbrk_r>
 8007278:	6030      	str	r0, [r6, #0]
 800727a:	4621      	mov	r1, r4
 800727c:	4628      	mov	r0, r5
 800727e:	f000 fca1 	bl	8007bc4 <_sbrk_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d103      	bne.n	800728e <sbrk_aligned+0x26>
 8007286:	f04f 34ff 	mov.w	r4, #4294967295
 800728a:	4620      	mov	r0, r4
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	1cc4      	adds	r4, r0, #3
 8007290:	f024 0403 	bic.w	r4, r4, #3
 8007294:	42a0      	cmp	r0, r4
 8007296:	d0f8      	beq.n	800728a <sbrk_aligned+0x22>
 8007298:	1a21      	subs	r1, r4, r0
 800729a:	4628      	mov	r0, r5
 800729c:	f000 fc92 	bl	8007bc4 <_sbrk_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1f2      	bne.n	800728a <sbrk_aligned+0x22>
 80072a4:	e7ef      	b.n	8007286 <sbrk_aligned+0x1e>
 80072a6:	bf00      	nop
 80072a8:	200007e0 	.word	0x200007e0

080072ac <_malloc_r>:
 80072ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	1ccd      	adds	r5, r1, #3
 80072b2:	f025 0503 	bic.w	r5, r5, #3
 80072b6:	3508      	adds	r5, #8
 80072b8:	2d0c      	cmp	r5, #12
 80072ba:	bf38      	it	cc
 80072bc:	250c      	movcc	r5, #12
 80072be:	2d00      	cmp	r5, #0
 80072c0:	4606      	mov	r6, r0
 80072c2:	db01      	blt.n	80072c8 <_malloc_r+0x1c>
 80072c4:	42a9      	cmp	r1, r5
 80072c6:	d904      	bls.n	80072d2 <_malloc_r+0x26>
 80072c8:	230c      	movs	r3, #12
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	2000      	movs	r0, #0
 80072ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073a8 <_malloc_r+0xfc>
 80072d6:	f000 f869 	bl	80073ac <__malloc_lock>
 80072da:	f8d8 3000 	ldr.w	r3, [r8]
 80072de:	461c      	mov	r4, r3
 80072e0:	bb44      	cbnz	r4, 8007334 <_malloc_r+0x88>
 80072e2:	4629      	mov	r1, r5
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff ffbf 	bl	8007268 <sbrk_aligned>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	4604      	mov	r4, r0
 80072ee:	d158      	bne.n	80073a2 <_malloc_r+0xf6>
 80072f0:	f8d8 4000 	ldr.w	r4, [r8]
 80072f4:	4627      	mov	r7, r4
 80072f6:	2f00      	cmp	r7, #0
 80072f8:	d143      	bne.n	8007382 <_malloc_r+0xd6>
 80072fa:	2c00      	cmp	r4, #0
 80072fc:	d04b      	beq.n	8007396 <_malloc_r+0xea>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	4639      	mov	r1, r7
 8007302:	4630      	mov	r0, r6
 8007304:	eb04 0903 	add.w	r9, r4, r3
 8007308:	f000 fc5c 	bl	8007bc4 <_sbrk_r>
 800730c:	4581      	cmp	r9, r0
 800730e:	d142      	bne.n	8007396 <_malloc_r+0xea>
 8007310:	6821      	ldr	r1, [r4, #0]
 8007312:	1a6d      	subs	r5, r5, r1
 8007314:	4629      	mov	r1, r5
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff ffa6 	bl	8007268 <sbrk_aligned>
 800731c:	3001      	adds	r0, #1
 800731e:	d03a      	beq.n	8007396 <_malloc_r+0xea>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	442b      	add	r3, r5
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	f8d8 3000 	ldr.w	r3, [r8]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	bb62      	cbnz	r2, 8007388 <_malloc_r+0xdc>
 800732e:	f8c8 7000 	str.w	r7, [r8]
 8007332:	e00f      	b.n	8007354 <_malloc_r+0xa8>
 8007334:	6822      	ldr	r2, [r4, #0]
 8007336:	1b52      	subs	r2, r2, r5
 8007338:	d420      	bmi.n	800737c <_malloc_r+0xd0>
 800733a:	2a0b      	cmp	r2, #11
 800733c:	d917      	bls.n	800736e <_malloc_r+0xc2>
 800733e:	1961      	adds	r1, r4, r5
 8007340:	42a3      	cmp	r3, r4
 8007342:	6025      	str	r5, [r4, #0]
 8007344:	bf18      	it	ne
 8007346:	6059      	strne	r1, [r3, #4]
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	bf08      	it	eq
 800734c:	f8c8 1000 	streq.w	r1, [r8]
 8007350:	5162      	str	r2, [r4, r5]
 8007352:	604b      	str	r3, [r1, #4]
 8007354:	4630      	mov	r0, r6
 8007356:	f000 f82f 	bl	80073b8 <__malloc_unlock>
 800735a:	f104 000b 	add.w	r0, r4, #11
 800735e:	1d23      	adds	r3, r4, #4
 8007360:	f020 0007 	bic.w	r0, r0, #7
 8007364:	1ac2      	subs	r2, r0, r3
 8007366:	bf1c      	itt	ne
 8007368:	1a1b      	subne	r3, r3, r0
 800736a:	50a3      	strne	r3, [r4, r2]
 800736c:	e7af      	b.n	80072ce <_malloc_r+0x22>
 800736e:	6862      	ldr	r2, [r4, #4]
 8007370:	42a3      	cmp	r3, r4
 8007372:	bf0c      	ite	eq
 8007374:	f8c8 2000 	streq.w	r2, [r8]
 8007378:	605a      	strne	r2, [r3, #4]
 800737a:	e7eb      	b.n	8007354 <_malloc_r+0xa8>
 800737c:	4623      	mov	r3, r4
 800737e:	6864      	ldr	r4, [r4, #4]
 8007380:	e7ae      	b.n	80072e0 <_malloc_r+0x34>
 8007382:	463c      	mov	r4, r7
 8007384:	687f      	ldr	r7, [r7, #4]
 8007386:	e7b6      	b.n	80072f6 <_malloc_r+0x4a>
 8007388:	461a      	mov	r2, r3
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	42a3      	cmp	r3, r4
 800738e:	d1fb      	bne.n	8007388 <_malloc_r+0xdc>
 8007390:	2300      	movs	r3, #0
 8007392:	6053      	str	r3, [r2, #4]
 8007394:	e7de      	b.n	8007354 <_malloc_r+0xa8>
 8007396:	230c      	movs	r3, #12
 8007398:	6033      	str	r3, [r6, #0]
 800739a:	4630      	mov	r0, r6
 800739c:	f000 f80c 	bl	80073b8 <__malloc_unlock>
 80073a0:	e794      	b.n	80072cc <_malloc_r+0x20>
 80073a2:	6005      	str	r5, [r0, #0]
 80073a4:	e7d6      	b.n	8007354 <_malloc_r+0xa8>
 80073a6:	bf00      	nop
 80073a8:	200007e4 	.word	0x200007e4

080073ac <__malloc_lock>:
 80073ac:	4801      	ldr	r0, [pc, #4]	@ (80073b4 <__malloc_lock+0x8>)
 80073ae:	f7ff bf0e 	b.w	80071ce <__retarget_lock_acquire_recursive>
 80073b2:	bf00      	nop
 80073b4:	200007dc 	.word	0x200007dc

080073b8 <__malloc_unlock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	@ (80073c0 <__malloc_unlock+0x8>)
 80073ba:	f7ff bf09 	b.w	80071d0 <__retarget_lock_release_recursive>
 80073be:	bf00      	nop
 80073c0:	200007dc 	.word	0x200007dc

080073c4 <__sfputc_r>:
 80073c4:	6893      	ldr	r3, [r2, #8]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	b410      	push	{r4}
 80073cc:	6093      	str	r3, [r2, #8]
 80073ce:	da08      	bge.n	80073e2 <__sfputc_r+0x1e>
 80073d0:	6994      	ldr	r4, [r2, #24]
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	db01      	blt.n	80073da <__sfputc_r+0x16>
 80073d6:	290a      	cmp	r1, #10
 80073d8:	d103      	bne.n	80073e2 <__sfputc_r+0x1e>
 80073da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073de:	f7ff bde8 	b.w	8006fb2 <__swbuf_r>
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	1c58      	adds	r0, r3, #1
 80073e6:	6010      	str	r0, [r2, #0]
 80073e8:	7019      	strb	r1, [r3, #0]
 80073ea:	4608      	mov	r0, r1
 80073ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <__sfputs_r>:
 80073f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f4:	4606      	mov	r6, r0
 80073f6:	460f      	mov	r7, r1
 80073f8:	4614      	mov	r4, r2
 80073fa:	18d5      	adds	r5, r2, r3
 80073fc:	42ac      	cmp	r4, r5
 80073fe:	d101      	bne.n	8007404 <__sfputs_r+0x12>
 8007400:	2000      	movs	r0, #0
 8007402:	e007      	b.n	8007414 <__sfputs_r+0x22>
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	463a      	mov	r2, r7
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ffda 	bl	80073c4 <__sfputc_r>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d1f3      	bne.n	80073fc <__sfputs_r+0xa>
 8007414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007418 <_vfiprintf_r>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	460d      	mov	r5, r1
 800741e:	b09d      	sub	sp, #116	@ 0x74
 8007420:	4614      	mov	r4, r2
 8007422:	4698      	mov	r8, r3
 8007424:	4606      	mov	r6, r0
 8007426:	b118      	cbz	r0, 8007430 <_vfiprintf_r+0x18>
 8007428:	6a03      	ldr	r3, [r0, #32]
 800742a:	b90b      	cbnz	r3, 8007430 <_vfiprintf_r+0x18>
 800742c:	f7ff fcd8 	bl	8006de0 <__sinit>
 8007430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007432:	07d9      	lsls	r1, r3, #31
 8007434:	d405      	bmi.n	8007442 <_vfiprintf_r+0x2a>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	059a      	lsls	r2, r3, #22
 800743a:	d402      	bmi.n	8007442 <_vfiprintf_r+0x2a>
 800743c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800743e:	f7ff fec6 	bl	80071ce <__retarget_lock_acquire_recursive>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	071b      	lsls	r3, r3, #28
 8007446:	d501      	bpl.n	800744c <_vfiprintf_r+0x34>
 8007448:	692b      	ldr	r3, [r5, #16]
 800744a:	b99b      	cbnz	r3, 8007474 <_vfiprintf_r+0x5c>
 800744c:	4629      	mov	r1, r5
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff fdee 	bl	8007030 <__swsetup_r>
 8007454:	b170      	cbz	r0, 8007474 <_vfiprintf_r+0x5c>
 8007456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007458:	07dc      	lsls	r4, r3, #31
 800745a:	d504      	bpl.n	8007466 <_vfiprintf_r+0x4e>
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	b01d      	add	sp, #116	@ 0x74
 8007462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	0598      	lsls	r0, r3, #22
 800746a:	d4f7      	bmi.n	800745c <_vfiprintf_r+0x44>
 800746c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800746e:	f7ff feaf 	bl	80071d0 <__retarget_lock_release_recursive>
 8007472:	e7f3      	b.n	800745c <_vfiprintf_r+0x44>
 8007474:	2300      	movs	r3, #0
 8007476:	9309      	str	r3, [sp, #36]	@ 0x24
 8007478:	2320      	movs	r3, #32
 800747a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800747e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007482:	2330      	movs	r3, #48	@ 0x30
 8007484:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007634 <_vfiprintf_r+0x21c>
 8007488:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800748c:	f04f 0901 	mov.w	r9, #1
 8007490:	4623      	mov	r3, r4
 8007492:	469a      	mov	sl, r3
 8007494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007498:	b10a      	cbz	r2, 800749e <_vfiprintf_r+0x86>
 800749a:	2a25      	cmp	r2, #37	@ 0x25
 800749c:	d1f9      	bne.n	8007492 <_vfiprintf_r+0x7a>
 800749e:	ebba 0b04 	subs.w	fp, sl, r4
 80074a2:	d00b      	beq.n	80074bc <_vfiprintf_r+0xa4>
 80074a4:	465b      	mov	r3, fp
 80074a6:	4622      	mov	r2, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ffa1 	bl	80073f2 <__sfputs_r>
 80074b0:	3001      	adds	r0, #1
 80074b2:	f000 80a7 	beq.w	8007604 <_vfiprintf_r+0x1ec>
 80074b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074b8:	445a      	add	r2, fp
 80074ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80074bc:	f89a 3000 	ldrb.w	r3, [sl]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 809f 	beq.w	8007604 <_vfiprintf_r+0x1ec>
 80074c6:	2300      	movs	r3, #0
 80074c8:	f04f 32ff 	mov.w	r2, #4294967295
 80074cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074d0:	f10a 0a01 	add.w	sl, sl, #1
 80074d4:	9304      	str	r3, [sp, #16]
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80074de:	4654      	mov	r4, sl
 80074e0:	2205      	movs	r2, #5
 80074e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e6:	4853      	ldr	r0, [pc, #332]	@ (8007634 <_vfiprintf_r+0x21c>)
 80074e8:	f7f8 feaa 	bl	8000240 <memchr>
 80074ec:	9a04      	ldr	r2, [sp, #16]
 80074ee:	b9d8      	cbnz	r0, 8007528 <_vfiprintf_r+0x110>
 80074f0:	06d1      	lsls	r1, r2, #27
 80074f2:	bf44      	itt	mi
 80074f4:	2320      	movmi	r3, #32
 80074f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074fa:	0713      	lsls	r3, r2, #28
 80074fc:	bf44      	itt	mi
 80074fe:	232b      	movmi	r3, #43	@ 0x2b
 8007500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007504:	f89a 3000 	ldrb.w	r3, [sl]
 8007508:	2b2a      	cmp	r3, #42	@ 0x2a
 800750a:	d015      	beq.n	8007538 <_vfiprintf_r+0x120>
 800750c:	9a07      	ldr	r2, [sp, #28]
 800750e:	4654      	mov	r4, sl
 8007510:	2000      	movs	r0, #0
 8007512:	f04f 0c0a 	mov.w	ip, #10
 8007516:	4621      	mov	r1, r4
 8007518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800751c:	3b30      	subs	r3, #48	@ 0x30
 800751e:	2b09      	cmp	r3, #9
 8007520:	d94b      	bls.n	80075ba <_vfiprintf_r+0x1a2>
 8007522:	b1b0      	cbz	r0, 8007552 <_vfiprintf_r+0x13a>
 8007524:	9207      	str	r2, [sp, #28]
 8007526:	e014      	b.n	8007552 <_vfiprintf_r+0x13a>
 8007528:	eba0 0308 	sub.w	r3, r0, r8
 800752c:	fa09 f303 	lsl.w	r3, r9, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	46a2      	mov	sl, r4
 8007536:	e7d2      	b.n	80074de <_vfiprintf_r+0xc6>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	1d19      	adds	r1, r3, #4
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	9103      	str	r1, [sp, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfbb      	ittet	lt
 8007544:	425b      	neglt	r3, r3
 8007546:	f042 0202 	orrlt.w	r2, r2, #2
 800754a:	9307      	strge	r3, [sp, #28]
 800754c:	9307      	strlt	r3, [sp, #28]
 800754e:	bfb8      	it	lt
 8007550:	9204      	strlt	r2, [sp, #16]
 8007552:	7823      	ldrb	r3, [r4, #0]
 8007554:	2b2e      	cmp	r3, #46	@ 0x2e
 8007556:	d10a      	bne.n	800756e <_vfiprintf_r+0x156>
 8007558:	7863      	ldrb	r3, [r4, #1]
 800755a:	2b2a      	cmp	r3, #42	@ 0x2a
 800755c:	d132      	bne.n	80075c4 <_vfiprintf_r+0x1ac>
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	1d1a      	adds	r2, r3, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	9203      	str	r2, [sp, #12]
 8007566:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800756a:	3402      	adds	r4, #2
 800756c:	9305      	str	r3, [sp, #20]
 800756e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007644 <_vfiprintf_r+0x22c>
 8007572:	7821      	ldrb	r1, [r4, #0]
 8007574:	2203      	movs	r2, #3
 8007576:	4650      	mov	r0, sl
 8007578:	f7f8 fe62 	bl	8000240 <memchr>
 800757c:	b138      	cbz	r0, 800758e <_vfiprintf_r+0x176>
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	eba0 000a 	sub.w	r0, r0, sl
 8007584:	2240      	movs	r2, #64	@ 0x40
 8007586:	4082      	lsls	r2, r0
 8007588:	4313      	orrs	r3, r2
 800758a:	3401      	adds	r4, #1
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007592:	4829      	ldr	r0, [pc, #164]	@ (8007638 <_vfiprintf_r+0x220>)
 8007594:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007598:	2206      	movs	r2, #6
 800759a:	f7f8 fe51 	bl	8000240 <memchr>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d03f      	beq.n	8007622 <_vfiprintf_r+0x20a>
 80075a2:	4b26      	ldr	r3, [pc, #152]	@ (800763c <_vfiprintf_r+0x224>)
 80075a4:	bb1b      	cbnz	r3, 80075ee <_vfiprintf_r+0x1d6>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	3307      	adds	r3, #7
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	3308      	adds	r3, #8
 80075b0:	9303      	str	r3, [sp, #12]
 80075b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b4:	443b      	add	r3, r7
 80075b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80075b8:	e76a      	b.n	8007490 <_vfiprintf_r+0x78>
 80075ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80075be:	460c      	mov	r4, r1
 80075c0:	2001      	movs	r0, #1
 80075c2:	e7a8      	b.n	8007516 <_vfiprintf_r+0xfe>
 80075c4:	2300      	movs	r3, #0
 80075c6:	3401      	adds	r4, #1
 80075c8:	9305      	str	r3, [sp, #20]
 80075ca:	4619      	mov	r1, r3
 80075cc:	f04f 0c0a 	mov.w	ip, #10
 80075d0:	4620      	mov	r0, r4
 80075d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d6:	3a30      	subs	r2, #48	@ 0x30
 80075d8:	2a09      	cmp	r2, #9
 80075da:	d903      	bls.n	80075e4 <_vfiprintf_r+0x1cc>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0c6      	beq.n	800756e <_vfiprintf_r+0x156>
 80075e0:	9105      	str	r1, [sp, #20]
 80075e2:	e7c4      	b.n	800756e <_vfiprintf_r+0x156>
 80075e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e8:	4604      	mov	r4, r0
 80075ea:	2301      	movs	r3, #1
 80075ec:	e7f0      	b.n	80075d0 <_vfiprintf_r+0x1b8>
 80075ee:	ab03      	add	r3, sp, #12
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <_vfiprintf_r+0x228>)
 80075f6:	a904      	add	r1, sp, #16
 80075f8:	4630      	mov	r0, r6
 80075fa:	f3af 8000 	nop.w
 80075fe:	4607      	mov	r7, r0
 8007600:	1c78      	adds	r0, r7, #1
 8007602:	d1d6      	bne.n	80075b2 <_vfiprintf_r+0x19a>
 8007604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007606:	07d9      	lsls	r1, r3, #31
 8007608:	d405      	bmi.n	8007616 <_vfiprintf_r+0x1fe>
 800760a:	89ab      	ldrh	r3, [r5, #12]
 800760c:	059a      	lsls	r2, r3, #22
 800760e:	d402      	bmi.n	8007616 <_vfiprintf_r+0x1fe>
 8007610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007612:	f7ff fddd 	bl	80071d0 <__retarget_lock_release_recursive>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	065b      	lsls	r3, r3, #25
 800761a:	f53f af1f 	bmi.w	800745c <_vfiprintf_r+0x44>
 800761e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007620:	e71e      	b.n	8007460 <_vfiprintf_r+0x48>
 8007622:	ab03      	add	r3, sp, #12
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	462a      	mov	r2, r5
 8007628:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <_vfiprintf_r+0x228>)
 800762a:	a904      	add	r1, sp, #16
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f879 	bl	8007724 <_printf_i>
 8007632:	e7e4      	b.n	80075fe <_vfiprintf_r+0x1e6>
 8007634:	08007c7c 	.word	0x08007c7c
 8007638:	08007c86 	.word	0x08007c86
 800763c:	00000000 	.word	0x00000000
 8007640:	080073f3 	.word	0x080073f3
 8007644:	08007c82 	.word	0x08007c82

08007648 <_printf_common>:
 8007648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800764c:	4616      	mov	r6, r2
 800764e:	4698      	mov	r8, r3
 8007650:	688a      	ldr	r2, [r1, #8]
 8007652:	690b      	ldr	r3, [r1, #16]
 8007654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007658:	4293      	cmp	r3, r2
 800765a:	bfb8      	it	lt
 800765c:	4613      	movlt	r3, r2
 800765e:	6033      	str	r3, [r6, #0]
 8007660:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007664:	4607      	mov	r7, r0
 8007666:	460c      	mov	r4, r1
 8007668:	b10a      	cbz	r2, 800766e <_printf_common+0x26>
 800766a:	3301      	adds	r3, #1
 800766c:	6033      	str	r3, [r6, #0]
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	0699      	lsls	r1, r3, #26
 8007672:	bf42      	ittt	mi
 8007674:	6833      	ldrmi	r3, [r6, #0]
 8007676:	3302      	addmi	r3, #2
 8007678:	6033      	strmi	r3, [r6, #0]
 800767a:	6825      	ldr	r5, [r4, #0]
 800767c:	f015 0506 	ands.w	r5, r5, #6
 8007680:	d106      	bne.n	8007690 <_printf_common+0x48>
 8007682:	f104 0a19 	add.w	sl, r4, #25
 8007686:	68e3      	ldr	r3, [r4, #12]
 8007688:	6832      	ldr	r2, [r6, #0]
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	42ab      	cmp	r3, r5
 800768e:	dc26      	bgt.n	80076de <_printf_common+0x96>
 8007690:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	3b00      	subs	r3, #0
 8007698:	bf18      	it	ne
 800769a:	2301      	movne	r3, #1
 800769c:	0692      	lsls	r2, r2, #26
 800769e:	d42b      	bmi.n	80076f8 <_printf_common+0xb0>
 80076a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076a4:	4641      	mov	r1, r8
 80076a6:	4638      	mov	r0, r7
 80076a8:	47c8      	blx	r9
 80076aa:	3001      	adds	r0, #1
 80076ac:	d01e      	beq.n	80076ec <_printf_common+0xa4>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	6922      	ldr	r2, [r4, #16]
 80076b2:	f003 0306 	and.w	r3, r3, #6
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	bf02      	ittt	eq
 80076ba:	68e5      	ldreq	r5, [r4, #12]
 80076bc:	6833      	ldreq	r3, [r6, #0]
 80076be:	1aed      	subeq	r5, r5, r3
 80076c0:	68a3      	ldr	r3, [r4, #8]
 80076c2:	bf0c      	ite	eq
 80076c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c8:	2500      	movne	r5, #0
 80076ca:	4293      	cmp	r3, r2
 80076cc:	bfc4      	itt	gt
 80076ce:	1a9b      	subgt	r3, r3, r2
 80076d0:	18ed      	addgt	r5, r5, r3
 80076d2:	2600      	movs	r6, #0
 80076d4:	341a      	adds	r4, #26
 80076d6:	42b5      	cmp	r5, r6
 80076d8:	d11a      	bne.n	8007710 <_printf_common+0xc8>
 80076da:	2000      	movs	r0, #0
 80076dc:	e008      	b.n	80076f0 <_printf_common+0xa8>
 80076de:	2301      	movs	r3, #1
 80076e0:	4652      	mov	r2, sl
 80076e2:	4641      	mov	r1, r8
 80076e4:	4638      	mov	r0, r7
 80076e6:	47c8      	blx	r9
 80076e8:	3001      	adds	r0, #1
 80076ea:	d103      	bne.n	80076f4 <_printf_common+0xac>
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f4:	3501      	adds	r5, #1
 80076f6:	e7c6      	b.n	8007686 <_printf_common+0x3e>
 80076f8:	18e1      	adds	r1, r4, r3
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	2030      	movs	r0, #48	@ 0x30
 80076fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007702:	4422      	add	r2, r4
 8007704:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007708:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800770c:	3302      	adds	r3, #2
 800770e:	e7c7      	b.n	80076a0 <_printf_common+0x58>
 8007710:	2301      	movs	r3, #1
 8007712:	4622      	mov	r2, r4
 8007714:	4641      	mov	r1, r8
 8007716:	4638      	mov	r0, r7
 8007718:	47c8      	blx	r9
 800771a:	3001      	adds	r0, #1
 800771c:	d0e6      	beq.n	80076ec <_printf_common+0xa4>
 800771e:	3601      	adds	r6, #1
 8007720:	e7d9      	b.n	80076d6 <_printf_common+0x8e>
	...

08007724 <_printf_i>:
 8007724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007728:	7e0f      	ldrb	r7, [r1, #24]
 800772a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800772c:	2f78      	cmp	r7, #120	@ 0x78
 800772e:	4691      	mov	r9, r2
 8007730:	4680      	mov	r8, r0
 8007732:	460c      	mov	r4, r1
 8007734:	469a      	mov	sl, r3
 8007736:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800773a:	d807      	bhi.n	800774c <_printf_i+0x28>
 800773c:	2f62      	cmp	r7, #98	@ 0x62
 800773e:	d80a      	bhi.n	8007756 <_printf_i+0x32>
 8007740:	2f00      	cmp	r7, #0
 8007742:	f000 80d2 	beq.w	80078ea <_printf_i+0x1c6>
 8007746:	2f58      	cmp	r7, #88	@ 0x58
 8007748:	f000 80b9 	beq.w	80078be <_printf_i+0x19a>
 800774c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007750:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007754:	e03a      	b.n	80077cc <_printf_i+0xa8>
 8007756:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800775a:	2b15      	cmp	r3, #21
 800775c:	d8f6      	bhi.n	800774c <_printf_i+0x28>
 800775e:	a101      	add	r1, pc, #4	@ (adr r1, 8007764 <_printf_i+0x40>)
 8007760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007764:	080077bd 	.word	0x080077bd
 8007768:	080077d1 	.word	0x080077d1
 800776c:	0800774d 	.word	0x0800774d
 8007770:	0800774d 	.word	0x0800774d
 8007774:	0800774d 	.word	0x0800774d
 8007778:	0800774d 	.word	0x0800774d
 800777c:	080077d1 	.word	0x080077d1
 8007780:	0800774d 	.word	0x0800774d
 8007784:	0800774d 	.word	0x0800774d
 8007788:	0800774d 	.word	0x0800774d
 800778c:	0800774d 	.word	0x0800774d
 8007790:	080078d1 	.word	0x080078d1
 8007794:	080077fb 	.word	0x080077fb
 8007798:	0800788b 	.word	0x0800788b
 800779c:	0800774d 	.word	0x0800774d
 80077a0:	0800774d 	.word	0x0800774d
 80077a4:	080078f3 	.word	0x080078f3
 80077a8:	0800774d 	.word	0x0800774d
 80077ac:	080077fb 	.word	0x080077fb
 80077b0:	0800774d 	.word	0x0800774d
 80077b4:	0800774d 	.word	0x0800774d
 80077b8:	08007893 	.word	0x08007893
 80077bc:	6833      	ldr	r3, [r6, #0]
 80077be:	1d1a      	adds	r2, r3, #4
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6032      	str	r2, [r6, #0]
 80077c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077cc:	2301      	movs	r3, #1
 80077ce:	e09d      	b.n	800790c <_printf_i+0x1e8>
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	6820      	ldr	r0, [r4, #0]
 80077d4:	1d19      	adds	r1, r3, #4
 80077d6:	6031      	str	r1, [r6, #0]
 80077d8:	0606      	lsls	r6, r0, #24
 80077da:	d501      	bpl.n	80077e0 <_printf_i+0xbc>
 80077dc:	681d      	ldr	r5, [r3, #0]
 80077de:	e003      	b.n	80077e8 <_printf_i+0xc4>
 80077e0:	0645      	lsls	r5, r0, #25
 80077e2:	d5fb      	bpl.n	80077dc <_printf_i+0xb8>
 80077e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	da03      	bge.n	80077f4 <_printf_i+0xd0>
 80077ec:	232d      	movs	r3, #45	@ 0x2d
 80077ee:	426d      	negs	r5, r5
 80077f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077f4:	4859      	ldr	r0, [pc, #356]	@ (800795c <_printf_i+0x238>)
 80077f6:	230a      	movs	r3, #10
 80077f8:	e011      	b.n	800781e <_printf_i+0xfa>
 80077fa:	6821      	ldr	r1, [r4, #0]
 80077fc:	6833      	ldr	r3, [r6, #0]
 80077fe:	0608      	lsls	r0, r1, #24
 8007800:	f853 5b04 	ldr.w	r5, [r3], #4
 8007804:	d402      	bmi.n	800780c <_printf_i+0xe8>
 8007806:	0649      	lsls	r1, r1, #25
 8007808:	bf48      	it	mi
 800780a:	b2ad      	uxthmi	r5, r5
 800780c:	2f6f      	cmp	r7, #111	@ 0x6f
 800780e:	4853      	ldr	r0, [pc, #332]	@ (800795c <_printf_i+0x238>)
 8007810:	6033      	str	r3, [r6, #0]
 8007812:	bf14      	ite	ne
 8007814:	230a      	movne	r3, #10
 8007816:	2308      	moveq	r3, #8
 8007818:	2100      	movs	r1, #0
 800781a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800781e:	6866      	ldr	r6, [r4, #4]
 8007820:	60a6      	str	r6, [r4, #8]
 8007822:	2e00      	cmp	r6, #0
 8007824:	bfa2      	ittt	ge
 8007826:	6821      	ldrge	r1, [r4, #0]
 8007828:	f021 0104 	bicge.w	r1, r1, #4
 800782c:	6021      	strge	r1, [r4, #0]
 800782e:	b90d      	cbnz	r5, 8007834 <_printf_i+0x110>
 8007830:	2e00      	cmp	r6, #0
 8007832:	d04b      	beq.n	80078cc <_printf_i+0x1a8>
 8007834:	4616      	mov	r6, r2
 8007836:	fbb5 f1f3 	udiv	r1, r5, r3
 800783a:	fb03 5711 	mls	r7, r3, r1, r5
 800783e:	5dc7      	ldrb	r7, [r0, r7]
 8007840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007844:	462f      	mov	r7, r5
 8007846:	42bb      	cmp	r3, r7
 8007848:	460d      	mov	r5, r1
 800784a:	d9f4      	bls.n	8007836 <_printf_i+0x112>
 800784c:	2b08      	cmp	r3, #8
 800784e:	d10b      	bne.n	8007868 <_printf_i+0x144>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07df      	lsls	r7, r3, #31
 8007854:	d508      	bpl.n	8007868 <_printf_i+0x144>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	6861      	ldr	r1, [r4, #4]
 800785a:	4299      	cmp	r1, r3
 800785c:	bfde      	ittt	le
 800785e:	2330      	movle	r3, #48	@ 0x30
 8007860:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007864:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007868:	1b92      	subs	r2, r2, r6
 800786a:	6122      	str	r2, [r4, #16]
 800786c:	f8cd a000 	str.w	sl, [sp]
 8007870:	464b      	mov	r3, r9
 8007872:	aa03      	add	r2, sp, #12
 8007874:	4621      	mov	r1, r4
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff fee6 	bl	8007648 <_printf_common>
 800787c:	3001      	adds	r0, #1
 800787e:	d14a      	bne.n	8007916 <_printf_i+0x1f2>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	b004      	add	sp, #16
 8007886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f043 0320 	orr.w	r3, r3, #32
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	4833      	ldr	r0, [pc, #204]	@ (8007960 <_printf_i+0x23c>)
 8007894:	2778      	movs	r7, #120	@ 0x78
 8007896:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	6831      	ldr	r1, [r6, #0]
 800789e:	061f      	lsls	r7, r3, #24
 80078a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80078a4:	d402      	bmi.n	80078ac <_printf_i+0x188>
 80078a6:	065f      	lsls	r7, r3, #25
 80078a8:	bf48      	it	mi
 80078aa:	b2ad      	uxthmi	r5, r5
 80078ac:	6031      	str	r1, [r6, #0]
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	bf44      	itt	mi
 80078b2:	f043 0320 	orrmi.w	r3, r3, #32
 80078b6:	6023      	strmi	r3, [r4, #0]
 80078b8:	b11d      	cbz	r5, 80078c2 <_printf_i+0x19e>
 80078ba:	2310      	movs	r3, #16
 80078bc:	e7ac      	b.n	8007818 <_printf_i+0xf4>
 80078be:	4827      	ldr	r0, [pc, #156]	@ (800795c <_printf_i+0x238>)
 80078c0:	e7e9      	b.n	8007896 <_printf_i+0x172>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	f023 0320 	bic.w	r3, r3, #32
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	e7f6      	b.n	80078ba <_printf_i+0x196>
 80078cc:	4616      	mov	r6, r2
 80078ce:	e7bd      	b.n	800784c <_printf_i+0x128>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	6825      	ldr	r5, [r4, #0]
 80078d4:	6961      	ldr	r1, [r4, #20]
 80078d6:	1d18      	adds	r0, r3, #4
 80078d8:	6030      	str	r0, [r6, #0]
 80078da:	062e      	lsls	r6, r5, #24
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	d501      	bpl.n	80078e4 <_printf_i+0x1c0>
 80078e0:	6019      	str	r1, [r3, #0]
 80078e2:	e002      	b.n	80078ea <_printf_i+0x1c6>
 80078e4:	0668      	lsls	r0, r5, #25
 80078e6:	d5fb      	bpl.n	80078e0 <_printf_i+0x1bc>
 80078e8:	8019      	strh	r1, [r3, #0]
 80078ea:	2300      	movs	r3, #0
 80078ec:	6123      	str	r3, [r4, #16]
 80078ee:	4616      	mov	r6, r2
 80078f0:	e7bc      	b.n	800786c <_printf_i+0x148>
 80078f2:	6833      	ldr	r3, [r6, #0]
 80078f4:	1d1a      	adds	r2, r3, #4
 80078f6:	6032      	str	r2, [r6, #0]
 80078f8:	681e      	ldr	r6, [r3, #0]
 80078fa:	6862      	ldr	r2, [r4, #4]
 80078fc:	2100      	movs	r1, #0
 80078fe:	4630      	mov	r0, r6
 8007900:	f7f8 fc9e 	bl	8000240 <memchr>
 8007904:	b108      	cbz	r0, 800790a <_printf_i+0x1e6>
 8007906:	1b80      	subs	r0, r0, r6
 8007908:	6060      	str	r0, [r4, #4]
 800790a:	6863      	ldr	r3, [r4, #4]
 800790c:	6123      	str	r3, [r4, #16]
 800790e:	2300      	movs	r3, #0
 8007910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007914:	e7aa      	b.n	800786c <_printf_i+0x148>
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	4632      	mov	r2, r6
 800791a:	4649      	mov	r1, r9
 800791c:	4640      	mov	r0, r8
 800791e:	47d0      	blx	sl
 8007920:	3001      	adds	r0, #1
 8007922:	d0ad      	beq.n	8007880 <_printf_i+0x15c>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	079b      	lsls	r3, r3, #30
 8007928:	d413      	bmi.n	8007952 <_printf_i+0x22e>
 800792a:	68e0      	ldr	r0, [r4, #12]
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	4298      	cmp	r0, r3
 8007930:	bfb8      	it	lt
 8007932:	4618      	movlt	r0, r3
 8007934:	e7a6      	b.n	8007884 <_printf_i+0x160>
 8007936:	2301      	movs	r3, #1
 8007938:	4632      	mov	r2, r6
 800793a:	4649      	mov	r1, r9
 800793c:	4640      	mov	r0, r8
 800793e:	47d0      	blx	sl
 8007940:	3001      	adds	r0, #1
 8007942:	d09d      	beq.n	8007880 <_printf_i+0x15c>
 8007944:	3501      	adds	r5, #1
 8007946:	68e3      	ldr	r3, [r4, #12]
 8007948:	9903      	ldr	r1, [sp, #12]
 800794a:	1a5b      	subs	r3, r3, r1
 800794c:	42ab      	cmp	r3, r5
 800794e:	dcf2      	bgt.n	8007936 <_printf_i+0x212>
 8007950:	e7eb      	b.n	800792a <_printf_i+0x206>
 8007952:	2500      	movs	r5, #0
 8007954:	f104 0619 	add.w	r6, r4, #25
 8007958:	e7f5      	b.n	8007946 <_printf_i+0x222>
 800795a:	bf00      	nop
 800795c:	08007c8d 	.word	0x08007c8d
 8007960:	08007c9e 	.word	0x08007c9e

08007964 <__sflush_r>:
 8007964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796c:	0716      	lsls	r6, r2, #28
 800796e:	4605      	mov	r5, r0
 8007970:	460c      	mov	r4, r1
 8007972:	d454      	bmi.n	8007a1e <__sflush_r+0xba>
 8007974:	684b      	ldr	r3, [r1, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	dc02      	bgt.n	8007980 <__sflush_r+0x1c>
 800797a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	dd48      	ble.n	8007a12 <__sflush_r+0xae>
 8007980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007982:	2e00      	cmp	r6, #0
 8007984:	d045      	beq.n	8007a12 <__sflush_r+0xae>
 8007986:	2300      	movs	r3, #0
 8007988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800798c:	682f      	ldr	r7, [r5, #0]
 800798e:	6a21      	ldr	r1, [r4, #32]
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	d030      	beq.n	80079f6 <__sflush_r+0x92>
 8007994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	0759      	lsls	r1, r3, #29
 800799a:	d505      	bpl.n	80079a8 <__sflush_r+0x44>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079a2:	b10b      	cbz	r3, 80079a8 <__sflush_r+0x44>
 80079a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079ac:	6a21      	ldr	r1, [r4, #32]
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b0      	blx	r6
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	d106      	bne.n	80079c6 <__sflush_r+0x62>
 80079b8:	6829      	ldr	r1, [r5, #0]
 80079ba:	291d      	cmp	r1, #29
 80079bc:	d82b      	bhi.n	8007a16 <__sflush_r+0xb2>
 80079be:	4a2a      	ldr	r2, [pc, #168]	@ (8007a68 <__sflush_r+0x104>)
 80079c0:	410a      	asrs	r2, r1
 80079c2:	07d6      	lsls	r6, r2, #31
 80079c4:	d427      	bmi.n	8007a16 <__sflush_r+0xb2>
 80079c6:	2200      	movs	r2, #0
 80079c8:	6062      	str	r2, [r4, #4]
 80079ca:	04d9      	lsls	r1, r3, #19
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	6022      	str	r2, [r4, #0]
 80079d0:	d504      	bpl.n	80079dc <__sflush_r+0x78>
 80079d2:	1c42      	adds	r2, r0, #1
 80079d4:	d101      	bne.n	80079da <__sflush_r+0x76>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b903      	cbnz	r3, 80079dc <__sflush_r+0x78>
 80079da:	6560      	str	r0, [r4, #84]	@ 0x54
 80079dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079de:	602f      	str	r7, [r5, #0]
 80079e0:	b1b9      	cbz	r1, 8007a12 <__sflush_r+0xae>
 80079e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079e6:	4299      	cmp	r1, r3
 80079e8:	d002      	beq.n	80079f0 <__sflush_r+0x8c>
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7ff fbf2 	bl	80071d4 <_free_r>
 80079f0:	2300      	movs	r3, #0
 80079f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079f4:	e00d      	b.n	8007a12 <__sflush_r+0xae>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b0      	blx	r6
 80079fc:	4602      	mov	r2, r0
 80079fe:	1c50      	adds	r0, r2, #1
 8007a00:	d1c9      	bne.n	8007996 <__sflush_r+0x32>
 8007a02:	682b      	ldr	r3, [r5, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0c6      	beq.n	8007996 <__sflush_r+0x32>
 8007a08:	2b1d      	cmp	r3, #29
 8007a0a:	d001      	beq.n	8007a10 <__sflush_r+0xac>
 8007a0c:	2b16      	cmp	r3, #22
 8007a0e:	d11e      	bne.n	8007a4e <__sflush_r+0xea>
 8007a10:	602f      	str	r7, [r5, #0]
 8007a12:	2000      	movs	r0, #0
 8007a14:	e022      	b.n	8007a5c <__sflush_r+0xf8>
 8007a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a1a:	b21b      	sxth	r3, r3
 8007a1c:	e01b      	b.n	8007a56 <__sflush_r+0xf2>
 8007a1e:	690f      	ldr	r7, [r1, #16]
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	d0f6      	beq.n	8007a12 <__sflush_r+0xae>
 8007a24:	0793      	lsls	r3, r2, #30
 8007a26:	680e      	ldr	r6, [r1, #0]
 8007a28:	bf08      	it	eq
 8007a2a:	694b      	ldreq	r3, [r1, #20]
 8007a2c:	600f      	str	r7, [r1, #0]
 8007a2e:	bf18      	it	ne
 8007a30:	2300      	movne	r3, #0
 8007a32:	eba6 0807 	sub.w	r8, r6, r7
 8007a36:	608b      	str	r3, [r1, #8]
 8007a38:	f1b8 0f00 	cmp.w	r8, #0
 8007a3c:	dde9      	ble.n	8007a12 <__sflush_r+0xae>
 8007a3e:	6a21      	ldr	r1, [r4, #32]
 8007a40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a42:	4643      	mov	r3, r8
 8007a44:	463a      	mov	r2, r7
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b0      	blx	r6
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	dc08      	bgt.n	8007a60 <__sflush_r+0xfc>
 8007a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a60:	4407      	add	r7, r0
 8007a62:	eba8 0800 	sub.w	r8, r8, r0
 8007a66:	e7e7      	b.n	8007a38 <__sflush_r+0xd4>
 8007a68:	dfbffffe 	.word	0xdfbffffe

08007a6c <_fflush_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	690b      	ldr	r3, [r1, #16]
 8007a70:	4605      	mov	r5, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	b913      	cbnz	r3, 8007a7c <_fflush_r+0x10>
 8007a76:	2500      	movs	r5, #0
 8007a78:	4628      	mov	r0, r5
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	b118      	cbz	r0, 8007a86 <_fflush_r+0x1a>
 8007a7e:	6a03      	ldr	r3, [r0, #32]
 8007a80:	b90b      	cbnz	r3, 8007a86 <_fflush_r+0x1a>
 8007a82:	f7ff f9ad 	bl	8006de0 <__sinit>
 8007a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f3      	beq.n	8007a76 <_fflush_r+0xa>
 8007a8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a90:	07d0      	lsls	r0, r2, #31
 8007a92:	d404      	bmi.n	8007a9e <_fflush_r+0x32>
 8007a94:	0599      	lsls	r1, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_fflush_r+0x32>
 8007a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a9a:	f7ff fb98 	bl	80071ce <__retarget_lock_acquire_recursive>
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	f7ff ff5f 	bl	8007964 <__sflush_r>
 8007aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aa8:	07da      	lsls	r2, r3, #31
 8007aaa:	4605      	mov	r5, r0
 8007aac:	d4e4      	bmi.n	8007a78 <_fflush_r+0xc>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	059b      	lsls	r3, r3, #22
 8007ab2:	d4e1      	bmi.n	8007a78 <_fflush_r+0xc>
 8007ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab6:	f7ff fb8b 	bl	80071d0 <__retarget_lock_release_recursive>
 8007aba:	e7dd      	b.n	8007a78 <_fflush_r+0xc>

08007abc <__swhatbuf_r>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	b096      	sub	sp, #88	@ 0x58
 8007ac8:	4615      	mov	r5, r2
 8007aca:	461e      	mov	r6, r3
 8007acc:	da0d      	bge.n	8007aea <__swhatbuf_r+0x2e>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ad4:	f04f 0100 	mov.w	r1, #0
 8007ad8:	bf14      	ite	ne
 8007ada:	2340      	movne	r3, #64	@ 0x40
 8007adc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	6031      	str	r1, [r6, #0]
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	b016      	add	sp, #88	@ 0x58
 8007ae8:	bd70      	pop	{r4, r5, r6, pc}
 8007aea:	466a      	mov	r2, sp
 8007aec:	f000 f848 	bl	8007b80 <_fstat_r>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	dbec      	blt.n	8007ace <__swhatbuf_r+0x12>
 8007af4:	9901      	ldr	r1, [sp, #4]
 8007af6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007afa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007afe:	4259      	negs	r1, r3
 8007b00:	4159      	adcs	r1, r3
 8007b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b06:	e7eb      	b.n	8007ae0 <__swhatbuf_r+0x24>

08007b08 <__smakebuf_r>:
 8007b08:	898b      	ldrh	r3, [r1, #12]
 8007b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b0c:	079d      	lsls	r5, r3, #30
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	d507      	bpl.n	8007b24 <__smakebuf_r+0x1c>
 8007b14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	6163      	str	r3, [r4, #20]
 8007b20:	b003      	add	sp, #12
 8007b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b24:	ab01      	add	r3, sp, #4
 8007b26:	466a      	mov	r2, sp
 8007b28:	f7ff ffc8 	bl	8007abc <__swhatbuf_r>
 8007b2c:	9f00      	ldr	r7, [sp, #0]
 8007b2e:	4605      	mov	r5, r0
 8007b30:	4639      	mov	r1, r7
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7ff fbba 	bl	80072ac <_malloc_r>
 8007b38:	b948      	cbnz	r0, 8007b4e <__smakebuf_r+0x46>
 8007b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3e:	059a      	lsls	r2, r3, #22
 8007b40:	d4ee      	bmi.n	8007b20 <__smakebuf_r+0x18>
 8007b42:	f023 0303 	bic.w	r3, r3, #3
 8007b46:	f043 0302 	orr.w	r3, r3, #2
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	e7e2      	b.n	8007b14 <__smakebuf_r+0xc>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	6020      	str	r0, [r4, #0]
 8007b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	9b01      	ldr	r3, [sp, #4]
 8007b5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b5e:	b15b      	cbz	r3, 8007b78 <__smakebuf_r+0x70>
 8007b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b64:	4630      	mov	r0, r6
 8007b66:	f000 f81d 	bl	8007ba4 <_isatty_r>
 8007b6a:	b128      	cbz	r0, 8007b78 <__smakebuf_r+0x70>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	431d      	orrs	r5, r3
 8007b7c:	81a5      	strh	r5, [r4, #12]
 8007b7e:	e7cf      	b.n	8007b20 <__smakebuf_r+0x18>

08007b80 <_fstat_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d07      	ldr	r5, [pc, #28]	@ (8007ba0 <_fstat_r+0x20>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	f7fa fc4f 	bl	8002430 <_fstat>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	d102      	bne.n	8007b9c <_fstat_r+0x1c>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b103      	cbz	r3, 8007b9c <_fstat_r+0x1c>
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	bd38      	pop	{r3, r4, r5, pc}
 8007b9e:	bf00      	nop
 8007ba0:	200007d8 	.word	0x200007d8

08007ba4 <_isatty_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d06      	ldr	r5, [pc, #24]	@ (8007bc0 <_isatty_r+0x1c>)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	4604      	mov	r4, r0
 8007bac:	4608      	mov	r0, r1
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	f7fa fc4e 	bl	8002450 <_isatty>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_isatty_r+0x1a>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_isatty_r+0x1a>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	200007d8 	.word	0x200007d8

08007bc4 <_sbrk_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4d06      	ldr	r5, [pc, #24]	@ (8007be0 <_sbrk_r+0x1c>)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	f7fa fc56 	bl	8002480 <_sbrk>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_sbrk_r+0x1a>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_sbrk_r+0x1a>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	200007d8 	.word	0x200007d8

08007be4 <_init>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr

08007bf0 <_fini>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr
