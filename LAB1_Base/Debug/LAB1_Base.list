
LAB1_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aec  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007cec  08007cec  00008cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dc4  08007dc4  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007dc4  08007dc4  00008dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dcc  08007dcc  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dcc  08007dcc  00008dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007dd4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000068  08007e3c  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007e3c  000097e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016340  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a37  00000000  00000000  0001f3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00021e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001035  00000000  00000000  000232a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a594  00000000  00000000  000242dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dc7  00000000  00000000  0004e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107272  00000000  00000000  00068638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f8aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  0016f8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00175898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08007cd4 	.word	0x08007cd4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08007cd4 	.word	0x08007cd4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d013      	beq.n	8000610 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005f8:	e000      	b.n	80005fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000606:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b086      	sub	sp, #24
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e009      	b.n	8000644 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffc9 	bl	80005d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	dbf1      	blt.n	8000630 <_write+0x12>
	}
	return len;
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af04      	add	r7, sp, #16
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]

	  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	4619      	mov	r1, r3
 8000666:	481f      	ldr	r0, [pc, #124]	@ (80006e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000668:	f006 fc68 	bl	8006f3c <iprintf>
      uint8_t data;
      data = 0x1B;
 800066c:	231b      	movs	r3, #27
 800066e:	737b      	strb	r3, [r7, #13]

      HAL_StatusTypeDef status_col = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &data, 1, I2C_TIMEOUT);
 8000670:	23c8      	movs	r3, #200	@ 0xc8
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	2301      	movs	r3, #1
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	f107 030d 	add.w	r3, r7, #13
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	2227      	movs	r2, #39	@ 0x27
 8000682:	217e      	movs	r1, #126	@ 0x7e
 8000684:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000686:	f002 fe9f 	bl	80033c8 <HAL_I2C_Mem_Write>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

      if (status_col != HAL_OK){
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <HAL_GPIO_EXTI_Callback+0x46>
          printf("I2C communication error (%X)",status_col);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4619      	mov	r1, r3
 8000698:	4814      	ldr	r0, [pc, #80]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x94>)
 800069a:	f006 fc4f 	bl	8006f3c <iprintf>

      }

      printf("Column Pressed: (%d).\n", REG_KEY_DATA_1);
 800069e:	2127      	movs	r1, #39	@ 0x27
 80006a0:	4813      	ldr	r0, [pc, #76]	@ (80006f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80006a2:	f006 fc4b 	bl	8006f3c <iprintf>


      HAL_StatusTypeDef status_row = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &data, 1, I2C_TIMEOUT);
 80006a6:	23c8      	movs	r3, #200	@ 0xc8
 80006a8:	9302      	str	r3, [sp, #8]
 80006aa:	2301      	movs	r3, #1
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	f107 030d 	add.w	r3, r7, #13
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2301      	movs	r3, #1
 80006b6:	2228      	movs	r2, #40	@ 0x28
 80006b8:	217e      	movs	r1, #126	@ 0x7e
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <HAL_GPIO_EXTI_Callback+0x90>)
 80006bc:	f002 fe84 	bl	80033c8 <HAL_I2C_Mem_Write>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73bb      	strb	r3, [r7, #14]

      if (status_row != HAL_OK){
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d004      	beq.n	80006d4 <HAL_GPIO_EXTI_Callback+0x7c>
          printf("I2C communication error (%X)", status_row);
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4807      	ldr	r0, [pc, #28]	@ (80006ec <HAL_GPIO_EXTI_Callback+0x94>)
 80006d0:	f006 fc34 	bl	8006f3c <iprintf>
		}

      printf("Row Pressed: (%d).\n", REG_KEY_DATA_2);
 80006d4:	2128      	movs	r1, #40	@ 0x28
 80006d6:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80006d8:	f006 fc30 	bl	8006f3c <iprintf>

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08007cec 	.word	0x08007cec
 80006e8:	200000cc 	.word	0x200000cc
 80006ec:	08007d04 	.word	0x08007d04
 80006f0:	08007d24 	.word	0x08007d24
 80006f4:	08007d3c 	.word	0x08007d3c

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f001 ff90 	bl	8002622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 fa05 	bl	8000b10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f001 f825 	bl	8001754 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800070a:	f000 fff3 	bl	80016f4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800070e:	f000 fa71 	bl	8000bf4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000712:	f000 fac1 	bl	8000c98 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000716:	f000 faff 	bl	8000d18 <MX_I2C2_Init>
  MX_SPI1_Init();
 800071a:	f000 fb3d 	bl	8000d98 <MX_SPI1_Init>
  MX_TIM1_Init();
 800071e:	f000 fb79 	bl	8000e14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000722:	f000 fc47 	bl	8000fb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000726:	f000 fcdf 	bl	80010e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800072a:	f000 fd33 	bl	8001194 <MX_TIM4_Init>
  MX_TIM5_Init();
 800072e:	f000 fd87 	bl	8001240 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000732:	f000 fdfd 	bl	8001330 <MX_TIM8_Init>
  MX_UART4_Init();
 8000736:	f000 ff1d 	bl	8001574 <MX_UART4_Init>
  MX_UART5_Init();
 800073a:	f000 ff4b 	bl	80015d4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800073e:	f000 ff79 	bl	8001634 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000742:	f000 ffa7 	bl	8001694 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000746:	f000 fec5 	bl	80014d4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	48bc      	ldr	r0, [pc, #752]	@ (8000a40 <main+0x348>)
 8000750:	f002 fd6c 	bl	800322c <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000754:	200a      	movs	r0, #10
 8000756:	f002 fba2 	bl	8002e9e <HAL_NVIC_DisableIRQ>

  ITM_SendChar('h');
 800075a:	2068      	movs	r0, #104	@ 0x68
 800075c:	f7ff ff38 	bl	80005d0 <ITM_SendChar>

  /* Software reset */
  data = 0x12;
 8000760:	2312      	movs	r3, #18
 8000762:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000764:	23c8      	movs	r3, #200	@ 0xc8
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	2301      	movs	r3, #1
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	227d      	movs	r2, #125	@ 0x7d
 8000774:	217e      	movs	r1, #126	@ 0x7e
 8000776:	48b3      	ldr	r0, [pc, #716]	@ (8000a44 <main+0x34c>)
 8000778:	f002 fe26 	bl	80033c8 <HAL_I2C_Mem_Write>
 800077c:	4603      	mov	r3, r0
 800077e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0x98>
    printf("I2C communication error (%X).\n", status);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4619      	mov	r1, r3
 800078a:	48af      	ldr	r0, [pc, #700]	@ (8000a48 <main+0x350>)
 800078c:	f006 fbd6 	bl	8006f3c <iprintf>

  data = 0x34;
 8000790:	2334      	movs	r3, #52	@ 0x34
 8000792:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000794:	23c8      	movs	r3, #200	@ 0xc8
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	2301      	movs	r3, #1
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	1dbb      	adds	r3, r7, #6
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2301      	movs	r3, #1
 80007a2:	227d      	movs	r2, #125	@ 0x7d
 80007a4:	217e      	movs	r1, #126	@ 0x7e
 80007a6:	48a7      	ldr	r0, [pc, #668]	@ (8000a44 <main+0x34c>)
 80007a8:	f002 fe0e 	bl	80033c8 <HAL_I2C_Mem_Write>
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xc8>
    printf("I2C communication error (%X).\n", status);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4619      	mov	r1, r3
 80007ba:	48a3      	ldr	r0, [pc, #652]	@ (8000a48 <main+0x350>)
 80007bc:	f006 fbbe 	bl	8006f3c <iprintf>

  HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f001 ff8b 	bl	80026dc <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 80007c6:	2340      	movs	r3, #64	@ 0x40
 80007c8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 80007ca:	23c8      	movs	r3, #200	@ 0xc8
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2301      	movs	r3, #1
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2301      	movs	r3, #1
 80007d8:	221e      	movs	r2, #30
 80007da:	217e      	movs	r1, #126	@ 0x7e
 80007dc:	4899      	ldr	r0, [pc, #612]	@ (8000a44 <main+0x34c>)
 80007de:	f002 fdf3 	bl	80033c8 <HAL_I2C_Mem_Write>
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d004      	beq.n	80007f6 <main+0xfe>
    printf("I2C communication error (%X).\n", status);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4619      	mov	r1, r3
 80007f0:	4895      	ldr	r0, [pc, #596]	@ (8000a48 <main+0x350>)
 80007f2:	f006 fba3 	bl	8006f3c <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 80007f6:	23f0      	movs	r3, #240	@ 0xf0
 80007f8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 80007fa:	23c8      	movs	r3, #200	@ 0xc8
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	2301      	movs	r3, #1
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2301      	movs	r3, #1
 8000808:	220f      	movs	r2, #15
 800080a:	217e      	movs	r1, #126	@ 0x7e
 800080c:	488d      	ldr	r0, [pc, #564]	@ (8000a44 <main+0x34c>)
 800080e:	f002 fddb 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d004      	beq.n	8000826 <main+0x12e>
    printf("I2C communication error (%X).\n", status);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4619      	mov	r1, r3
 8000820:	4889      	ldr	r0, [pc, #548]	@ (8000a48 <main+0x350>)
 8000822:	f006 fb8b 	bl	8006f3c <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 8000826:	230f      	movs	r3, #15
 8000828:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800082a:	23c8      	movs	r3, #200	@ 0xc8
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2301      	movs	r3, #1
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	1dbb      	adds	r3, r7, #6
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	220e      	movs	r2, #14
 800083a:	217e      	movs	r1, #126	@ 0x7e
 800083c:	4881      	ldr	r0, [pc, #516]	@ (8000a44 <main+0x34c>)
 800083e:	f002 fdc3 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d004      	beq.n	8000856 <main+0x15e>
    printf("I2C communication error (%X).\n", status);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4619      	mov	r1, r3
 8000850:	487d      	ldr	r0, [pc, #500]	@ (8000a48 <main+0x350>)
 8000852:	f006 fb73 	bl	8006f3c <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 8000856:	230f      	movs	r3, #15
 8000858:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 800085a:	23c8      	movs	r3, #200	@ 0xc8
 800085c:	9302      	str	r3, [sp, #8]
 800085e:	2301      	movs	r3, #1
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	1dbb      	adds	r3, r7, #6
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	220b      	movs	r2, #11
 800086a:	217e      	movs	r1, #126	@ 0x7e
 800086c:	4875      	ldr	r0, [pc, #468]	@ (8000a44 <main+0x34c>)
 800086e:	f002 fdab 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d004      	beq.n	8000886 <main+0x18e>
    printf("I2C communication error (%X).\n", status);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4619      	mov	r1, r3
 8000880:	4871      	ldr	r0, [pc, #452]	@ (8000a48 <main+0x350>)
 8000882:	f006 fb5b 	bl	8006f3c <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 8000886:	230f      	movs	r3, #15
 8000888:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 800088a:	23c8      	movs	r3, #200	@ 0xc8
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	1dbb      	adds	r3, r7, #6
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2206      	movs	r2, #6
 800089a:	217e      	movs	r1, #126	@ 0x7e
 800089c:	4869      	ldr	r0, [pc, #420]	@ (8000a44 <main+0x34c>)
 800089e:	f002 fd93 	bl	80033c8 <HAL_I2C_Mem_Write>
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d004      	beq.n	80008b6 <main+0x1be>
    printf("I2C communication error (%X).\n", status);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4865      	ldr	r0, [pc, #404]	@ (8000a48 <main+0x350>)
 80008b2:	f006 fb43 	bl	8006f3c <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 80008b6:	230f      	movs	r3, #15
 80008b8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 80008ba:	23c8      	movs	r3, #200	@ 0xc8
 80008bc:	9302      	str	r3, [sp, #8]
 80008be:	2301      	movs	r3, #1
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	2223      	movs	r2, #35	@ 0x23
 80008ca:	217e      	movs	r1, #126	@ 0x7e
 80008cc:	485d      	ldr	r0, [pc, #372]	@ (8000a44 <main+0x34c>)
 80008ce:	f002 fd7b 	bl	80033c8 <HAL_I2C_Mem_Write>
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d004      	beq.n	80008e6 <main+0x1ee>
    printf("I2C communication error (%X).\n", status);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4619      	mov	r1, r3
 80008e0:	4859      	ldr	r0, [pc, #356]	@ (8000a48 <main+0x350>)
 80008e2:	f006 fb2b 	bl	8006f3c <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 80008e6:	2305      	movs	r3, #5
 80008e8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 80008ea:	23c8      	movs	r3, #200	@ 0xc8
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	2301      	movs	r3, #1
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2301      	movs	r3, #1
 80008f8:	2222      	movs	r2, #34	@ 0x22
 80008fa:	217e      	movs	r1, #126	@ 0x7e
 80008fc:	4851      	ldr	r0, [pc, #324]	@ (8000a44 <main+0x34c>)
 80008fe:	f002 fd63 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d004      	beq.n	8000916 <main+0x21e>
    printf("I2C communication error (%X).\n", status);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4619      	mov	r1, r3
 8000910:	484d      	ldr	r0, [pc, #308]	@ (8000a48 <main+0x350>)
 8000912:	f006 fb13 	bl	8006f3c <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 8000916:	237d      	movs	r3, #125	@ 0x7d
 8000918:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 800091a:	23c8      	movs	r3, #200	@ 0xc8
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	2301      	movs	r3, #1
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	1dbb      	adds	r3, r7, #6
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	2225      	movs	r2, #37	@ 0x25
 800092a:	217e      	movs	r1, #126	@ 0x7e
 800092c:	4845      	ldr	r0, [pc, #276]	@ (8000a44 <main+0x34c>)
 800092e:	f002 fd4b 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <main+0x24e>
    printf("I2C communication error (%X).\n", status);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4619      	mov	r1, r3
 8000940:	4841      	ldr	r0, [pc, #260]	@ (8000a48 <main+0x350>)
 8000942:	f006 fafb 	bl	8006f3c <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 8000946:	231b      	movs	r3, #27
 8000948:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 800094a:	23c8      	movs	r3, #200	@ 0xc8
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	2301      	movs	r3, #1
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	1dbb      	adds	r3, r7, #6
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	2226      	movs	r2, #38	@ 0x26
 800095a:	217e      	movs	r1, #126	@ 0x7e
 800095c:	4839      	ldr	r0, [pc, #228]	@ (8000a44 <main+0x34c>)
 800095e:	f002 fd33 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <main+0x27e>
    printf("I2C communication error (%X).\n", status);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4619      	mov	r1, r3
 8000970:	4835      	ldr	r0, [pc, #212]	@ (8000a48 <main+0x350>)
 8000972:	f006 fae3 	bl	8006f3c <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	@ 0x64
 8000978:	f001 feb0 	bl	80026dc <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800097c:	200a      	movs	r0, #10
 800097e:	f002 fa80 	bl	8002e82 <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000982:	2008      	movs	r0, #8
 8000984:	f002 fa8b 	bl	8002e9e <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 8000988:	2312      	movs	r3, #18
 800098a:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800098c:	23c8      	movs	r3, #200	@ 0xc8
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	2301      	movs	r3, #1
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	1dbb      	adds	r3, r7, #6
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	227d      	movs	r2, #125	@ 0x7d
 800099c:	217c      	movs	r1, #124	@ 0x7c
 800099e:	4829      	ldr	r0, [pc, #164]	@ (8000a44 <main+0x34c>)
 80009a0:	f002 fd12 	bl	80033c8 <HAL_I2C_Mem_Write>
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <main+0x2c0>
    printf("I2C communication error (%X).\n", status);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	@ (8000a48 <main+0x350>)
 80009b4:	f006 fac2 	bl	8006f3c <iprintf>

  data = 0x34;
 80009b8:	2334      	movs	r3, #52	@ 0x34
 80009ba:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009bc:	23c8      	movs	r3, #200	@ 0xc8
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2301      	movs	r3, #1
 80009ca:	227d      	movs	r2, #125	@ 0x7d
 80009cc:	217c      	movs	r1, #124	@ 0x7c
 80009ce:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <main+0x34c>)
 80009d0:	f002 fcfa 	bl	80033c8 <HAL_I2C_Mem_Write>
 80009d4:	4603      	mov	r3, r0
 80009d6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <main+0x2f0>
    printf("I2C communication error (%X).\n", status);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4819      	ldr	r0, [pc, #100]	@ (8000a48 <main+0x350>)
 80009e4:	f006 faaa 	bl	8006f3c <iprintf>

  HAL_Delay(100);
 80009e8:	2064      	movs	r0, #100	@ 0x64
 80009ea:	f001 fe77 	bl	80026dc <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 80009f2:	23c8      	movs	r3, #200	@ 0xc8
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2301      	movs	r3, #1
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	1dbb      	adds	r3, r7, #6
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	220f      	movs	r2, #15
 8000a02:	217c      	movs	r1, #124	@ 0x7c
 8000a04:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <main+0x34c>)
 8000a06:	f002 fcdf 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <main+0x326>
    printf("I2C communication error (%X).\n", status);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4619      	mov	r1, r3
 8000a18:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <main+0x350>)
 8000a1a:	f006 fa8f 	bl	8006f3c <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a1e:	23ff      	movs	r3, #255	@ 0xff
 8000a20:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000a22:	23c8      	movs	r3, #200	@ 0xc8
 8000a24:	9302      	str	r3, [sp, #8]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	220e      	movs	r2, #14
 8000a32:	217c      	movs	r1, #124	@ 0x7c
 8000a34:	4803      	ldr	r0, [pc, #12]	@ (8000a44 <main+0x34c>)
 8000a36:	f002 fcc7 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	e005      	b.n	8000a4c <main+0x354>
 8000a40:	40021000 	.word	0x40021000
 8000a44:	200000cc 	.word	0x200000cc
 8000a48:	08007d50 	.word	0x08007d50
  if (status != HAL_OK)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <main+0x364>
    printf("I2C communication error (%X).\n", status);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4619      	mov	r1, r3
 8000a56:	482b      	ldr	r0, [pc, #172]	@ (8000b04 <main+0x40c>)
 8000a58:	f006 fa70 	bl	8006f3c <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000a60:	23c8      	movs	r3, #200	@ 0xc8
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	1dbb      	adds	r3, r7, #6
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2213      	movs	r2, #19
 8000a70:	217c      	movs	r1, #124	@ 0x7c
 8000a72:	4825      	ldr	r0, [pc, #148]	@ (8000b08 <main+0x410>)
 8000a74:	f002 fca8 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d004      	beq.n	8000a8c <main+0x394>
    printf("I2C communication error (%X).\n", status);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4619      	mov	r1, r3
 8000a86:	481f      	ldr	r0, [pc, #124]	@ (8000b04 <main+0x40c>)
 8000a88:	f006 fa58 	bl	8006f3c <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000a8c:	23aa      	movs	r3, #170	@ 0xaa
 8000a8e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000a90:	23c8      	movs	r3, #200	@ 0xc8
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	2216      	movs	r2, #22
 8000aa0:	217c      	movs	r1, #124	@ 0x7c
 8000aa2:	4819      	ldr	r0, [pc, #100]	@ (8000b08 <main+0x410>)
 8000aa4:	f002 fc90 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d004      	beq.n	8000abc <main+0x3c4>
    printf("I2C communication error (%X).\n", status);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <main+0x40c>)
 8000ab8:	f006 fa40 	bl	8006f3c <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000abc:	23aa      	movs	r3, #170	@ 0xaa
 8000abe:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000ac0:	23c8      	movs	r3, #200	@ 0xc8
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2301      	movs	r3, #1
 8000ace:	2217      	movs	r2, #23
 8000ad0:	217c      	movs	r1, #124	@ 0x7c
 8000ad2:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <main+0x410>)
 8000ad4:	f002 fc78 	bl	80033c8 <HAL_I2C_Mem_Write>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <main+0x3f4>
    printf("I2C communication error (%X).\n", status);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <main+0x40c>)
 8000ae8:	f006 fa28 	bl	8006f3c <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000aec:	2064      	movs	r0, #100	@ 0x64
 8000aee:	f001 fdf5 	bl	80026dc <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000af2:	2008      	movs	r0, #8
 8000af4:	f002 f9c5 	bl	8002e82 <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <main+0x414>)
 8000afa:	f006 fa87 	bl	800700c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000afe:	bf00      	nop
 8000b00:	e7fd      	b.n	8000afe <main+0x406>
 8000b02:	bf00      	nop
 8000b04:	08007d50 	.word	0x08007d50
 8000b08:	200000cc 	.word	0x200000cc
 8000b0c:	08007d70 	.word	0x08007d70

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	@ 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2234      	movs	r2, #52	@ 0x34
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f006 fb54 	bl	80071cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b34:	f003 f862 	bl	8003bfc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	4b2c      	ldr	r3, [pc, #176]	@ (8000bec <SystemClock_Config+0xdc>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bec <SystemClock_Config+0xdc>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <SystemClock_Config+0xdc>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <SystemClock_Config+0xe0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b58:	4a25      	ldr	r2, [pc, #148]	@ (8000bf0 <SystemClock_Config+0xe0>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <SystemClock_Config+0xe0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b70:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b84:	2360      	movs	r3, #96	@ 0x60
 8000b86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f88f 	bl	8003cbc <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ba4:	f000 ff1e 	bl	80019e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ba8:	f003 f838 	bl	8003c1c <HAL_PWREx_EnableOverDrive>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bb2:	f000 ff17 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fb20 	bl	8004218 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bde:	f000 ff01 	bl	80019e4 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	@ 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <MX_ADC1_Init+0x9c>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c36:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <MX_ADC1_Init+0xa0>)
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c56:	f001 fd65 	bl	8002724 <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c60:	f000 fec0 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c64:	2303      	movs	r3, #3
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_ADC1_Init+0x98>)
 8000c76:	f001 fd99 	bl	80027ac <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c80:	f000 feb0 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000084 	.word	0x20000084
 8000c90:	40012000 	.word	0x40012000
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d10 <MX_I2C1_Init+0x78>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <MX_I2C1_Init+0x7c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cd4:	f002 fadc 	bl	8003290 <HAL_I2C_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 fe81 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000ce6:	f002 fef1 	bl	8003acc <HAL_I2CEx_ConfigAnalogFilter>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf0:	f000 fe78 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_I2C1_Init+0x74>)
 8000cf8:	f002 ff33 	bl	8003b62 <HAL_I2CEx_ConfigDigitalFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 fe6f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200000cc 	.word	0x200000cc
 8000d10:	40005400 	.word	0x40005400
 8000d14:	20303e5d 	.word	0x20303e5d

08000d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <MX_I2C2_Init+0x78>)
 8000d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <MX_I2C2_Init+0x7c>)
 8000d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d54:	f002 fa9c 	bl	8003290 <HAL_I2C_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d5e:	f000 fe41 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4809      	ldr	r0, [pc, #36]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d66:	f002 feb1 	bl	8003acc <HAL_I2CEx_ConfigAnalogFilter>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d70:	f000 fe38 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_I2C2_Init+0x74>)
 8000d78:	f002 fef3 	bl	8003b62 <HAL_I2CEx_ConfigDigitalFilter>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 fe2f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000120 	.word	0x20000120
 8000d90:	40005800 	.word	0x40005800
 8000d94:	20303e5d 	.word	0x20303e5d

08000d98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_SPI1_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000da4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000da8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000db2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000db6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000de6:	2207      	movs	r2, #7
 8000de8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000df2:	2208      	movs	r2, #8
 8000df4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_SPI1_Init+0x74>)
 8000df8:	f004 f85c 	bl	8004eb4 <HAL_SPI_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 fdef 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000174 	.word	0x20000174
 8000e10:	40013000 	.word	0x40013000

08000e14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b09a      	sub	sp, #104	@ 0x68
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	222c      	movs	r2, #44	@ 0x2c
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 f9bc 	bl	80071cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e54:	4b55      	ldr	r3, [pc, #340]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e56:	4a56      	ldr	r2, [pc, #344]	@ (8000fb0 <MX_TIM1_Init+0x19c>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000e5a:	4b54      	ldr	r3, [pc, #336]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e5c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000e60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b52      	ldr	r3, [pc, #328]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000e68:	4b50      	ldr	r3, [pc, #320]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e6a:	22c8      	movs	r2, #200	@ 0xc8
 8000e6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e74:	4b4d      	ldr	r3, [pc, #308]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e80:	484a      	ldr	r0, [pc, #296]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e82:	f004 f8c2 	bl	800500a <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e8c:	f000 fdaa 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e94:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4843      	ldr	r0, [pc, #268]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000e9e:	f004 fc19 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ea8:	f000 fd9c 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eac:	483f      	ldr	r0, [pc, #252]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000eae:	f004 f903 	bl	80050b8 <HAL_TIM_PWM_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000eb8:	f000 fd94 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4837      	ldr	r0, [pc, #220]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000ed0:	f005 f998 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000eda:	f000 fd83 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ede:	2360      	movs	r3, #96	@ 0x60
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000efe:	2200      	movs	r2, #0
 8000f00:	4619      	mov	r1, r3
 8000f02:	482a      	ldr	r0, [pc, #168]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000f04:	f004 fad2 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f0e:	f000 fd69 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f16:	2204      	movs	r2, #4
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4824      	ldr	r0, [pc, #144]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000f1c:	f004 fac6 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f26:	f000 fd5d 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f2e:	2208      	movs	r2, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	481e      	ldr	r0, [pc, #120]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000f34:	f004 faba 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000f3e:	f000 fd51 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f46:	220c      	movs	r2, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4818      	ldr	r0, [pc, #96]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000f4c:	f004 faae 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f56:	f000 fd45 	bl	80019e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4807      	ldr	r0, [pc, #28]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000f90:	f005 f9c6 	bl	8006320 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000f9a:	f000 fd23 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <MX_TIM1_Init+0x198>)
 8000fa0:	f000 ffc6 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 8000fa4:	bf00      	nop
 8000fa6:	3768      	adds	r7, #104	@ 0x68
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001d8 	.word	0x200001d8
 8000fb0:	40010000 	.word	0x40010000

08000fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b092      	sub	sp, #72	@ 0x48
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	615a      	str	r2, [r3, #20]
 8000fe6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80010e4 <MX_TIM2_Init+0x130>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ffc:	4b39      	ldr	r3, [pc, #228]	@ (80010e4 <MX_TIM2_Init+0x130>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b38      	ldr	r3, [pc, #224]	@ (80010e4 <MX_TIM2_Init+0x130>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <MX_TIM2_Init+0x130>)
 800100a:	f04f 32ff 	mov.w	r2, #4294967295
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b34      	ldr	r3, [pc, #208]	@ (80010e4 <MX_TIM2_Init+0x130>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_TIM2_Init+0x130>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4831      	ldr	r0, [pc, #196]	@ (80010e4 <MX_TIM2_Init+0x130>)
 800101e:	f003 fff4 	bl	800500a <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001028:	f000 fcdc 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001036:	4619      	mov	r1, r3
 8001038:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <MX_TIM2_Init+0x130>)
 800103a:	f004 fb4b 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001044:	f000 fcce 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001048:	4826      	ldr	r0, [pc, #152]	@ (80010e4 <MX_TIM2_Init+0x130>)
 800104a:	f004 f835 	bl	80050b8 <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001054:	f000 fcc6 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001058:	4822      	ldr	r0, [pc, #136]	@ (80010e4 <MX_TIM2_Init+0x130>)
 800105a:	f004 f884 	bl	8005166 <HAL_TIM_IC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001064:	f000 fcbe 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001070:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <MX_TIM2_Init+0x130>)
 8001078:	f005 f8c4 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001082:	f000 fcaf 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	@ 0x60
 8001088:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	4619      	mov	r1, r3
 800109e:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_TIM2_Init+0x130>)
 80010a0:	f004 fa04 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80010aa:	f000 fc9b 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010b2:	2301      	movs	r3, #1
 80010b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	2208      	movs	r2, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <MX_TIM2_Init+0x130>)
 80010c6:	f004 f955 	bl	8005374 <HAL_TIM_IC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80010d0:	f000 fc88 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <MX_TIM2_Init+0x130>)
 80010d6:	f000 ff2b 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 80010da:	bf00      	nop
 80010dc:	3748      	adds	r7, #72	@ 0x48
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000224 	.word	0x20000224

080010e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2224      	movs	r2, #36	@ 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 f868 	bl	80071cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <MX_TIM3_Init+0xa4>)
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <MX_TIM3_Init+0xa8>)
 800110a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <MX_TIM3_Init+0xa4>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <MX_TIM3_Init+0xa4>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001118:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <MX_TIM3_Init+0xa4>)
 800111a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800111e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_TIM3_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <MX_TIM3_Init+0xa4>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800112c:	2301      	movs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001144:	2301      	movs	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	@ (800118c <MX_TIM3_Init+0xa4>)
 8001158:	f004 f866 	bl	8005228 <HAL_TIM_Encoder_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001162:	f000 fc3f 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <MX_TIM3_Init+0xa4>)
 8001174:	f005 f846 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800117e:	f000 fc31 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	@ 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000270 	.word	0x20000270
 8001190:	40000400 	.word	0x40000400

08001194 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	@ 0x30
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2224      	movs	r2, #36	@ 0x24
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 f812 	bl	80071cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_TIM4_Init+0xa4>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	@ (800123c <MX_TIM4_Init+0xa8>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_TIM4_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_TIM4_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_TIM4_Init+0xa4>)
 80011c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_TIM4_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_TIM4_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	@ (8001238 <MX_TIM4_Init+0xa4>)
 8001204:	f004 f810 	bl	8005228 <HAL_TIM_Encoder_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800120e:	f000 fbe9 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <MX_TIM4_Init+0xa4>)
 8001220:	f004 fff0 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800122a:	f000 fbdb 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	@ 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002bc 	.word	0x200002bc
 800123c:	40000800 	.word	0x40000800

08001240 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	@ 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
 800126c:	611a      	str	r2, [r3, #16]
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001272:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <MX_TIM5_Init+0xe8>)
 8001274:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <MX_TIM5_Init+0xec>)
 8001276:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001278:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <MX_TIM5_Init+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b2a      	ldr	r3, [pc, #168]	@ (8001328 <MX_TIM5_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001284:	4b28      	ldr	r3, [pc, #160]	@ (8001328 <MX_TIM5_Init+0xe8>)
 8001286:	f04f 32ff 	mov.w	r2, #4294967295
 800128a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b26      	ldr	r3, [pc, #152]	@ (8001328 <MX_TIM5_Init+0xe8>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <MX_TIM5_Init+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001298:	4823      	ldr	r0, [pc, #140]	@ (8001328 <MX_TIM5_Init+0xe8>)
 800129a:	f003 feb6 	bl	800500a <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012a4:	f000 fb9e 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b2:	4619      	mov	r1, r3
 80012b4:	481c      	ldr	r0, [pc, #112]	@ (8001328 <MX_TIM5_Init+0xe8>)
 80012b6:	f004 fa0d 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80012c0:	f000 fb90 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <MX_TIM5_Init+0xe8>)
 80012c6:	f003 fef7 	bl	80050b8 <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80012d0:	f000 fb88 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80012dc:	f107 031c 	add.w	r3, r7, #28
 80012e0:	4619      	mov	r1, r3
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_TIM5_Init+0xe8>)
 80012e4:	f004 ff8e 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012ee:	f000 fb79 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM5_Init+0xe8>)
 800130a:	f004 f8cf 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001314:	f000 fb66 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM5_Init+0xe8>)
 800131a:	f000 fe09 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 800131e:	bf00      	nop
 8001320:	3738      	adds	r7, #56	@ 0x38
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000308 	.word	0x20000308
 800132c:	40000c00 	.word	0x40000c00

08001330 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b09a      	sub	sp, #104	@ 0x68
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	222c      	movs	r2, #44	@ 0x2c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 ff2e 	bl	80071cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001370:	4b56      	ldr	r3, [pc, #344]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001372:	4a57      	ldr	r2, [pc, #348]	@ (80014d0 <MX_TIM8_Init+0x1a0>)
 8001374:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001376:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001378:	f240 32bf 	movw	r2, #959	@ 0x3bf
 800137c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b53      	ldr	r3, [pc, #332]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001384:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001386:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800138a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b4f      	ldr	r3, [pc, #316]	@ (80014cc <MX_TIM8_Init+0x19c>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001392:	4b4e      	ldr	r3, [pc, #312]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001398:	4b4c      	ldr	r3, [pc, #304]	@ (80014cc <MX_TIM8_Init+0x19c>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800139e:	484b      	ldr	r0, [pc, #300]	@ (80014cc <MX_TIM8_Init+0x19c>)
 80013a0:	f003 fe33 	bl	800500a <HAL_TIM_Base_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80013aa:	f000 fb1b 	bl	80019e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013b8:	4619      	mov	r1, r3
 80013ba:	4844      	ldr	r0, [pc, #272]	@ (80014cc <MX_TIM8_Init+0x19c>)
 80013bc:	f004 f98a 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80013c6:	f000 fb0d 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80013ca:	4840      	ldr	r0, [pc, #256]	@ (80014cc <MX_TIM8_Init+0x19c>)
 80013cc:	f003 fe74 	bl	80050b8 <HAL_TIM_PWM_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80013d6:	f000 fb05 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80013ea:	4619      	mov	r1, r3
 80013ec:	4837      	ldr	r0, [pc, #220]	@ (80014cc <MX_TIM8_Init+0x19c>)
 80013ee:	f004 ff09 	bl	8006204 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80013f8:	f000 faf4 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fc:	2360      	movs	r3, #96	@ 0x60
 80013fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001408:	2300      	movs	r3, #0
 800140a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001418:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	482a      	ldr	r0, [pc, #168]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001422:	f004 f843 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800142c:	f000 fada 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001430:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001434:	2204      	movs	r2, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4824      	ldr	r0, [pc, #144]	@ (80014cc <MX_TIM8_Init+0x19c>)
 800143a:	f004 f837 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001444:	f000 face 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001448:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800144c:	2208      	movs	r2, #8
 800144e:	4619      	mov	r1, r3
 8001450:	481e      	ldr	r0, [pc, #120]	@ (80014cc <MX_TIM8_Init+0x19c>)
 8001452:	f004 f82b 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800145c:	f000 fac2 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001460:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001464:	220c      	movs	r2, #12
 8001466:	4619      	mov	r1, r3
 8001468:	4818      	ldr	r0, [pc, #96]	@ (80014cc <MX_TIM8_Init+0x19c>)
 800146a:	f004 f81f 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001474:	f000 fab6 	bl	80019e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800148c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001490:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800149a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	@ (80014cc <MX_TIM8_Init+0x19c>)
 80014ae:	f004 ff37 	bl	8006320 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80014b8:	f000 fa94 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <MX_TIM8_Init+0x19c>)
 80014be:	f000 fd37 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3768      	adds	r7, #104	@ 0x68
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000354 	.word	0x20000354
 80014d0:	40010400 	.word	0x40010400

080014d4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_TIM9_Init+0x98>)
 80014ee:	4a20      	ldr	r2, [pc, #128]	@ (8001570 <MX_TIM9_Init+0x9c>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <MX_TIM9_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_TIM9_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_TIM9_Init+0x98>)
 8001500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001504:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <MX_TIM9_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_TIM9_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001512:	4816      	ldr	r0, [pc, #88]	@ (800156c <MX_TIM9_Init+0x98>)
 8001514:	f003 fdd0 	bl	80050b8 <HAL_TIM_PWM_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800151e:	f000 fa61 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001522:	2360      	movs	r3, #96	@ 0x60
 8001524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <MX_TIM9_Init+0x98>)
 800153a:	f003 ffb7 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 fa4e 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2204      	movs	r2, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	@ (800156c <MX_TIM9_Init+0x98>)
 8001550:	f003 ffac 	bl	80054ac <HAL_TIM_PWM_ConfigChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800155a:	f000 fa43 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800155e:	4803      	ldr	r0, [pc, #12]	@ (800156c <MX_TIM9_Init+0x98>)
 8001560:	f000 fce6 	bl	8001f30 <HAL_TIM_MspPostInit>

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200003a0 	.word	0x200003a0
 8001570:	40014000 	.word	0x40014000

08001574 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_UART4_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_UART4_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_UART4_Init+0x58>)
 8001580:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001584:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_UART4_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_UART4_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_UART4_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_UART4_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_UART4_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_UART4_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_UART4_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_UART4_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_UART4_Init+0x58>)
 80015b8:	f004 ff30 	bl	800641c <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 fa0f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200003ec 	.word	0x200003ec
 80015d0:	40004c00 	.word	0x40004c00

080015d4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <MX_UART5_Init+0x58>)
 80015da:	4a15      	ldr	r2, [pc, #84]	@ (8001630 <MX_UART5_Init+0x5c>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <MX_UART5_Init+0x58>)
 80015e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_UART5_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_UART5_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_UART5_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_UART5_Init+0x58>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_UART5_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_UART5_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_UART5_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_UART5_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_UART5_Init+0x58>)
 8001618:	f004 ff00 	bl	800641c <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 f9df 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000474 	.word	0x20000474
 8001630:	40005000 	.word	0x40005000

08001634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <MX_USART1_UART_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_USART1_UART_Init+0x58>)
 8001678:	f004 fed0 	bl	800641c <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001682:	f000 f9af 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200004fc 	.word	0x200004fc
 8001690:	40011000 	.word	0x40011000

08001694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 800169a:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <MX_USART2_UART_Init+0x5c>)
 800169c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_USART2_UART_Init+0x58>)
 80016d8:	f004 fea0 	bl	800641c <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016e2:	f000 f97f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000584 	.word	0x20000584
 80016f0:	40004400 	.word	0x40004400

080016f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <MX_USART3_UART_Init+0x58>)
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <MX_USART3_UART_Init+0x5c>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_USART3_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_USART3_UART_Init+0x58>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <MX_USART3_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_USART3_UART_Init+0x58>)
 8001738:	f004 fe70 	bl	800641c <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f94f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000060c 	.word	0x2000060c
 8001750:	40004800 	.word	0x40004800

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	@ 0x38
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4b97      	ldr	r3, [pc, #604]	@ (80019c8 <MX_GPIO_Init+0x274>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a96      	ldr	r2, [pc, #600]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b94      	ldr	r3, [pc, #592]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	623b      	str	r3, [r7, #32]
 8001780:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b91      	ldr	r3, [pc, #580]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a90      	ldr	r2, [pc, #576]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b8e      	ldr	r3, [pc, #568]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179a:	4b8b      	ldr	r3, [pc, #556]	@ (80019c8 <MX_GPIO_Init+0x274>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a8a      	ldr	r2, [pc, #552]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017a0:	f043 0320 	orr.w	r3, r3, #32
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	4b85      	ldr	r3, [pc, #532]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a84      	ldr	r2, [pc, #528]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b82      	ldr	r3, [pc, #520]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b7f      	ldr	r3, [pc, #508]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a7e      	ldr	r2, [pc, #504]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b7c      	ldr	r3, [pc, #496]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b79      	ldr	r3, [pc, #484]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a78      	ldr	r2, [pc, #480]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	4b73      	ldr	r3, [pc, #460]	@ (80019c8 <MX_GPIO_Init+0x274>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a72      	ldr	r2, [pc, #456]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b70      	ldr	r3, [pc, #448]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001812:	4b6d      	ldr	r3, [pc, #436]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a6c      	ldr	r2, [pc, #432]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b6a      	ldr	r3, [pc, #424]	@ (80019c8 <MX_GPIO_Init+0x274>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	2118      	movs	r1, #24
 800182e:	4867      	ldr	r0, [pc, #412]	@ (80019cc <MX_GPIO_Init+0x278>)
 8001830:	f001 fcfc 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f244 0181 	movw	r1, #16513	@ 0x4081
 800183a:	4865      	ldr	r0, [pc, #404]	@ (80019d0 <MX_GPIO_Init+0x27c>)
 800183c:	f001 fcf6 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2140      	movs	r1, #64	@ 0x40
 8001844:	4863      	ldr	r0, [pc, #396]	@ (80019d4 <MX_GPIO_Init+0x280>)
 8001846:	f001 fcf1 	bl	800322c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 800184a:	2318      	movs	r3, #24
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	485a      	ldr	r0, [pc, #360]	@ (80019cc <MX_GPIO_Init+0x278>)
 8001862:	f001 fb37 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 8001866:	f643 7308 	movw	r3, #16136	@ 0x3f08
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	4856      	ldr	r0, [pc, #344]	@ (80019d8 <MX_GPIO_Init+0x284>)
 800187e:	f001 fb29 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 8001882:	2310      	movs	r3, #16
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001886:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	4850      	ldr	r0, [pc, #320]	@ (80019d8 <MX_GPIO_Init+0x284>)
 8001898:	f001 fb1c 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800189c:	2332      	movs	r3, #50	@ 0x32
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ac:	230b      	movs	r3, #11
 80018ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	4849      	ldr	r0, [pc, #292]	@ (80019dc <MX_GPIO_Init+0x288>)
 80018b8:	f001 fb0c 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018bc:	2386      	movs	r3, #134	@ 0x86
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018cc:	230b      	movs	r3, #11
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4842      	ldr	r0, [pc, #264]	@ (80019e0 <MX_GPIO_Init+0x28c>)
 80018d8:	f001 fafc 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f2:	4619      	mov	r1, r3
 80018f4:	4836      	ldr	r0, [pc, #216]	@ (80019d0 <MX_GPIO_Init+0x27c>)
 80018f6:	f001 faed 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800190c:	230b      	movs	r3, #11
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	482e      	ldr	r0, [pc, #184]	@ (80019d0 <MX_GPIO_Init+0x27c>)
 8001918:	f001 fadc 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800191c:	2340      	movs	r3, #64	@ 0x40
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4828      	ldr	r0, [pc, #160]	@ (80019d4 <MX_GPIO_Init+0x280>)
 8001934:	f001 face 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	4822      	ldr	r0, [pc, #136]	@ (80019d4 <MX_GPIO_Init+0x280>)
 800194c:	f001 fac2 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001950:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001962:	230a      	movs	r3, #10
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	481c      	ldr	r0, [pc, #112]	@ (80019e0 <MX_GPIO_Init+0x28c>)
 800196e:	f001 fab1 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4816      	ldr	r0, [pc, #88]	@ (80019e0 <MX_GPIO_Init+0x28c>)
 8001988:	f001 faa4 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800198c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199e:	230b      	movs	r3, #11
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	480a      	ldr	r0, [pc, #40]	@ (80019d4 <MX_GPIO_Init+0x280>)
 80019aa:	f001 fa93 	bl	8002ed4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2101      	movs	r1, #1
 80019b2:	200a      	movs	r0, #10
 80019b4:	f001 fa49 	bl	8002e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019b8:	200a      	movs	r0, #10
 80019ba:	f001 fa62 	bl	8002e82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019be:	bf00      	nop
 80019c0:	3738      	adds	r7, #56	@ 0x38
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40021800 	.word	0x40021800
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020000 	.word	0x40020000

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <Error_Handler+0x8>

080019f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_MspInit+0x44>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <HAL_ADC_MspInit+0x74>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d123      	bne.n	8001aa2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_ADC_MspInit+0x78>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <HAL_ADC_MspInit+0x78>)
 8001a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_ADC_MspInit+0x78>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <HAL_ADC_MspInit+0x78>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <HAL_ADC_MspInit+0x78>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_ADC_MspInit+0x78>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <HAL_ADC_MspInit+0x7c>)
 8001a9e:	f001 fa19 	bl	8002ed4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0b0      	sub	sp, #192	@ 0xc0
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2290      	movs	r2, #144	@ 0x90
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f005 fb77 	bl	80071cc <memset>
  if(hi2c->Instance==I2C1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a44      	ldr	r2, [pc, #272]	@ (8001bf4 <HAL_I2C_MspInit+0x13c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d13e      	bne.n	8001b66 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ae8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001aec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fdb3 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b04:	f7ff ff6e 	bl	80019e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b14:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b44:	4619      	mov	r1, r3
 8001b46:	482d      	ldr	r0, [pc, #180]	@ (8001bfc <HAL_I2C_MspInit+0x144>)
 8001b48:	f001 f9c4 	bl	8002ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	4a29      	ldr	r2, [pc, #164]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b64:	e041      	b.n	8001bea <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a25      	ldr	r2, [pc, #148]	@ (8001c00 <HAL_I2C_MspInit+0x148>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d13c      	bne.n	8001bea <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b74:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fd6f 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001b8c:	f7ff ff2a 	bl	80019e4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b96:	f043 0320 	orr.w	r3, r3, #32
 8001b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bae:	2312      	movs	r3, #18
 8001bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <HAL_I2C_MspInit+0x14c>)
 8001bce:	f001 f981 	bl	8002ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_I2C_MspInit+0x140>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	37c0      	adds	r7, #192	@ 0xc0
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40005800 	.word	0x40005800
 8001c04:	40021400 	.word	0x40021400

08001c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	@ 0x30
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a33      	ldr	r2, [pc, #204]	@ (8001cf4 <HAL_SPI_MspInit+0xec>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d160      	bne.n	8001cec <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2a:	4b33      	ldr	r3, [pc, #204]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a32      	ldr	r2, [pc, #200]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b30      	ldr	r3, [pc, #192]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a26      	ldr	r2, [pc, #152]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b24      	ldr	r3, [pc, #144]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	4a20      	ldr	r2, [pc, #128]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_SPI_MspInit+0xf0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4815      	ldr	r0, [pc, #84]	@ (8001cfc <HAL_SPI_MspInit+0xf4>)
 8001ca6:	f001 f915 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001caa:	2380      	movs	r3, #128	@ 0x80
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480e      	ldr	r0, [pc, #56]	@ (8001d00 <HAL_SPI_MspInit+0xf8>)
 8001cc6:	f001 f905 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cdc:	2305      	movs	r3, #5
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <HAL_SPI_MspInit+0xfc>)
 8001ce8:	f001 f8f4 	bl	8002ed4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	@ 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013000 	.word	0x40013000
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021800 	.word	0x40021800

08001d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a32      	ldr	r2, [pc, #200]	@ (8001df0 <HAL_TIM_Base_MspInit+0xe8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10c      	bne.n	8001d44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2a:	4b32      	ldr	r3, [pc, #200]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a31      	ldr	r2, [pc, #196]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b2f      	ldr	r3, [pc, #188]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d42:	e051      	b.n	8001de8 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4c:	d129      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4e:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a28      	ldr	r2, [pc, #160]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d90:	2301      	movs	r3, #1
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4817      	ldr	r0, [pc, #92]	@ (8001df8 <HAL_TIM_Base_MspInit+0xf0>)
 8001d9c:	f001 f89a 	bl	8002ed4 <HAL_GPIO_Init>
}
 8001da0:	e022      	b.n	8001de8 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <HAL_TIM_Base_MspInit+0xf4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d10c      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	4a10      	ldr	r2, [pc, #64]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	e010      	b.n	8001de8 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <HAL_TIM_Base_MspInit+0xf8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10b      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001dd6:	f043 0302 	orr.w	r3, r3, #2
 8001dda:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_TIM_Base_MspInit+0xec>)
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	@ 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40010400 	.word	0x40010400

08001e04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d128      	bne.n	8001e78 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a27      	ldr	r2, [pc, #156]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001e56:	2330      	movs	r3, #48	@ 0x30
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e66:	2302      	movs	r3, #2
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	481c      	ldr	r0, [pc, #112]	@ (8001ee4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e72:	f001 f82f 	bl	8002ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e76:	e02d      	b.n	8001ed4 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d128      	bne.n	8001ed4 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a16      	ldr	r2, [pc, #88]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001eb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4807      	ldr	r0, [pc, #28]	@ (8001eec <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ed0:	f001 f800 	bl	8002ed4 <HAL_GPIO_Init>
}
 8001ed4:	bf00      	nop
 8001ed6:	3730      	adds	r7, #48	@ 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40020c00 	.word	0x40020c00

08001ef0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_TIM_PWM_MspInit+0x38>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10b      	bne.n	8001f1a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <HAL_TIM_PWM_MspInit+0x3c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40023800 	.word	0x40023800

08001f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a56      	ldr	r2, [pc, #344]	@ (80020a8 <HAL_TIM_MspPostInit+0x178>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d11d      	bne.n	8001f8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f52:	4b56      	ldr	r3, [pc, #344]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a55      	ldr	r2, [pc, #340]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b53      	ldr	r3, [pc, #332]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001f6a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	484a      	ldr	r0, [pc, #296]	@ (80020b0 <HAL_TIM_MspPostInit+0x180>)
 8001f88:	f000 ffa4 	bl	8002ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001f8c:	e088      	b.n	80020a0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f96:	d11d      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b44      	ldr	r3, [pc, #272]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	4a43      	ldr	r2, [pc, #268]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa4:	4b41      	ldr	r3, [pc, #260]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001fb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4839      	ldr	r0, [pc, #228]	@ (80020b4 <HAL_TIM_MspPostInit+0x184>)
 8001fce:	f000 ff81 	bl	8002ed4 <HAL_GPIO_Init>
}
 8001fd2:	e065      	b.n	80020a0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a37      	ldr	r2, [pc, #220]	@ (80020b8 <HAL_TIM_MspPostInit+0x188>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d11c      	bne.n	8002018 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b33      	ldr	r3, [pc, #204]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a32      	ldr	r2, [pc, #200]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b30      	ldr	r3, [pc, #192]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002006:	2302      	movs	r3, #2
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	4828      	ldr	r0, [pc, #160]	@ (80020b4 <HAL_TIM_MspPostInit+0x184>)
 8002012:	f000 ff5f 	bl	8002ed4 <HAL_GPIO_Init>
}
 8002016:	e043      	b.n	80020a0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a27      	ldr	r2, [pc, #156]	@ (80020bc <HAL_TIM_MspPostInit+0x18c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d11d      	bne.n	800205e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 800203a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800204c:	2303      	movs	r3, #3
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	481a      	ldr	r0, [pc, #104]	@ (80020c0 <HAL_TIM_MspPostInit+0x190>)
 8002058:	f000 ff3c 	bl	8002ed4 <HAL_GPIO_Init>
}
 800205c:	e020      	b.n	80020a0 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <HAL_TIM_MspPostInit+0x194>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002068:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	6313      	str	r3, [r2, #48]	@ 0x30
 8002074:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_TIM_MspPostInit+0x17c>)
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002080:	2360      	movs	r3, #96	@ 0x60
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002090:	2303      	movs	r3, #3
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <HAL_TIM_MspPostInit+0x180>)
 800209c:	f000 ff1a 	bl	8002ed4 <HAL_GPIO_Init>
}
 80020a0:	bf00      	nop
 80020a2:	3730      	adds	r7, #48	@ 0x30
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40010400 	.word	0x40010400
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40014000 	.word	0x40014000

080020c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0b6      	sub	sp, #216	@ 0xd8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020e4:	2290      	movs	r2, #144	@ 0x90
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f005 f86f 	bl	80071cc <memset>
  if(huart->Instance==UART4)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4aa0      	ldr	r2, [pc, #640]	@ (8002374 <HAL_UART_MspInit+0x2ac>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d13e      	bne.n	8002176 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002104:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002108:	4618      	mov	r0, r3
 800210a:	f002 faab 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002114:	f7ff fc66 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002118:	4b97      	ldr	r3, [pc, #604]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	4a96      	ldr	r2, [pc, #600]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800211e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002122:	6413      	str	r3, [r2, #64]	@ 0x40
 8002124:	4b94      	ldr	r3, [pc, #592]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800212c:	633b      	str	r3, [r7, #48]	@ 0x30
 800212e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002130:	4b91      	ldr	r3, [pc, #580]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	4a90      	ldr	r2, [pc, #576]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6313      	str	r3, [r2, #48]	@ 0x30
 800213c:	4b8e      	ldr	r3, [pc, #568]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002148:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800214c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002162:	2308      	movs	r3, #8
 8002164:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800216c:	4619      	mov	r1, r3
 800216e:	4883      	ldr	r0, [pc, #524]	@ (800237c <HAL_UART_MspInit+0x2b4>)
 8002170:	f000 feb0 	bl	8002ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002174:	e151      	b.n	800241a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_UART_MspInit+0x2b8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d160      	bne.n	8002242 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002180:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fa67 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800219c:	f7ff fc22 	bl	80019e4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80021a0:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	4a74      	ldr	r2, [pc, #464]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ac:	4b72      	ldr	r3, [pc, #456]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d0:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	4a68      	ldr	r2, [pc, #416]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6313      	str	r3, [r2, #48]	@ 0x30
 80021dc:	4b66      	ldr	r3, [pc, #408]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	623b      	str	r3, [r7, #32]
 80021e6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002202:	2308      	movs	r3, #8
 8002204:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800220c:	4619      	mov	r1, r3
 800220e:	485d      	ldr	r0, [pc, #372]	@ (8002384 <HAL_UART_MspInit+0x2bc>)
 8002210:	f000 fe60 	bl	8002ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002218:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800222e:	2308      	movs	r3, #8
 8002230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002234:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002238:	4619      	mov	r1, r3
 800223a:	4850      	ldr	r0, [pc, #320]	@ (800237c <HAL_UART_MspInit+0x2b4>)
 800223c:	f000 fe4a 	bl	8002ed4 <HAL_GPIO_Init>
}
 8002240:	e0eb      	b.n	800241a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a50      	ldr	r2, [pc, #320]	@ (8002388 <HAL_UART_MspInit+0x2c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d151      	bne.n	80022f0 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800224c:	2340      	movs	r3, #64	@ 0x40
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002250:	2300      	movs	r3, #0
 8002252:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002254:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fa03 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002264:	f7ff fbbe 	bl	80019e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002268:	4b43      	ldr	r3, [pc, #268]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	4a42      	ldr	r2, [pc, #264]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	6453      	str	r3, [r2, #68]	@ 0x44
 8002274:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002280:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	4a3c      	ldr	r2, [pc, #240]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	6313      	str	r3, [r2, #48]	@ 0x30
 800228c:	4b3a      	ldr	r3, [pc, #232]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022b2:	2304      	movs	r3, #4
 80022b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022bc:	4619      	mov	r1, r3
 80022be:	4831      	ldr	r0, [pc, #196]	@ (8002384 <HAL_UART_MspInit+0x2bc>)
 80022c0:	f000 fe08 	bl	8002ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c4:	2340      	movs	r3, #64	@ 0x40
 80022c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022dc:	2307      	movs	r3, #7
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4826      	ldr	r0, [pc, #152]	@ (8002384 <HAL_UART_MspInit+0x2bc>)
 80022ea:	f000 fdf3 	bl	8002ed4 <HAL_GPIO_Init>
}
 80022ee:	e094      	b.n	800241a <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a25      	ldr	r2, [pc, #148]	@ (800238c <HAL_UART_MspInit+0x2c4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d14c      	bne.n	8002394 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022fe:	2300      	movs	r3, #0
 8002300:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002306:	4618      	mov	r0, r3
 8002308:	f002 f9ac 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002312:	f7ff fb67 	bl	80019e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002316:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4a17      	ldr	r2, [pc, #92]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800231c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002320:	6413      	str	r3, [r2, #64]	@ 0x40
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a11      	ldr	r2, [pc, #68]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_UART_MspInit+0x2b0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002346:	2360      	movs	r3, #96	@ 0x60
 8002348:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800235e:	2307      	movs	r3, #7
 8002360:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002364:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002368:	4619      	mov	r1, r3
 800236a:	4809      	ldr	r0, [pc, #36]	@ (8002390 <HAL_UART_MspInit+0x2c8>)
 800236c:	f000 fdb2 	bl	8002ed4 <HAL_GPIO_Init>
}
 8002370:	e053      	b.n	800241a <HAL_UART_MspInit+0x352>
 8002372:	bf00      	nop
 8002374:	40004c00 	.word	0x40004c00
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40005000 	.word	0x40005000
 8002384:	40020400 	.word	0x40020400
 8002388:	40011000 	.word	0x40011000
 800238c:	40004400 	.word	0x40004400
 8002390:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a22      	ldr	r2, [pc, #136]	@ (8002424 <HAL_UART_MspInit+0x35c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d13d      	bne.n	800241a <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800239e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 f958 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80023ba:	f7ff fb13 	bl	80019e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_UART_MspInit+0x360>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_UART_MspInit+0x360>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <HAL_UART_MspInit+0x360>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_UART_MspInit+0x360>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <HAL_UART_MspInit+0x360>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_UART_MspInit+0x360>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002408:	2307      	movs	r3, #7
 800240a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002412:	4619      	mov	r1, r3
 8002414:	4805      	ldr	r0, [pc, #20]	@ (800242c <HAL_UART_MspInit+0x364>)
 8002416:	f000 fd5d 	bl	8002ed4 <HAL_GPIO_Init>
}
 800241a:	bf00      	nop
 800241c:	37d8      	adds	r7, #216	@ 0xd8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40004800 	.word	0x40004800
 8002428:	40023800 	.word	0x40023800
 800242c:	40020c00 	.word	0x40020c00

08002430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <NMI_Handler+0x4>

08002438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <HardFault_Handler+0x4>

08002440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <MemManage_Handler+0x4>

08002448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <UsageFault_Handler+0x4>

08002458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002486:	f000 f909 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}

0800248e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 8002492:	2010      	movs	r0, #16
 8002494:	f000 fee4 	bl	8003260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_isatty>:

int _isatty(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f004 fe7a 	bl	8007268 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20080000 	.word	0x20080000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	20000694 	.word	0x20000694
 80025a8:	200007e8 	.word	0x200007e8

080025ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025d4:	480d      	ldr	r0, [pc, #52]	@ (800260c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025d6:	490e      	ldr	r1, [pc, #56]	@ (8002610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025ec:	4c0b      	ldr	r4, [pc, #44]	@ (800261c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025fa:	f7ff ffd7 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025fe:	f004 fe39 	bl	8007274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002602:	f7fe f879 	bl	80006f8 <main>
  bx  lr    
 8002606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002608:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800260c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002610:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002614:	08007dd4 	.word	0x08007dd4
  ldr r2, =_sbss
 8002618:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800261c:	200007e8 	.word	0x200007e8

08002620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC_IRQHandler>

08002622 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002626:	2003      	movs	r0, #3
 8002628:	f000 fc04 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262c:	2000      	movs	r0, #0
 800262e:	f000 f805 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002632:	f7ff f9dd 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fc2d 	bl	8002eba <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 fbe7 	bl	8002e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	@ (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000000 	.word	0x20000000
 8002694:	20000008 	.word	0x20000008
 8002698:	20000004 	.word	0x20000004

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000008 	.word	0x20000008
 80026c0:	20000698 	.word	0x20000698

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000698 	.word	0x20000698

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000008 	.word	0x20000008

08002724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e031      	b.n	800279e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff f978 	bl	8001a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002766:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_ADC_Init+0x84>)
 8002768:	4013      	ands	r3, r2
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f970 	bl	8002a58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40
 800278e:	e001      	b.n	8002794 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	ffffeefd 	.word	0xffffeefd

080027ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e136      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x28a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d93a      	bls.n	800284e <HAL_ADC_ConfigChannel+0xa2>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027e0:	d035      	beq.n	800284e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	3b1e      	subs	r3, #30
 80027f8:	2207      	movs	r2, #7
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	400a      	ands	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a8d      	ldr	r2, [pc, #564]	@ (8002a44 <HAL_ADC_ConfigChannel+0x298>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68d9      	ldr	r1, [r3, #12]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	061a      	lsls	r2, r3, #24
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002826:	e035      	b.n	8002894 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68d9      	ldr	r1, [r3, #12]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	4603      	mov	r3, r0
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4403      	add	r3, r0
 8002840:	3b1e      	subs	r3, #30
 8002842:	409a      	lsls	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284c:	e022      	b.n	8002894 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6919      	ldr	r1, [r3, #16]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	2207      	movs	r2, #7
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43da      	mvns	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	400a      	ands	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	4603      	mov	r3, r0
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4403      	add	r3, r0
 800288a:	409a      	lsls	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d824      	bhi.n	80028e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b05      	subs	r3, #5
 80028ae:	221f      	movs	r2, #31
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43da      	mvns	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	400a      	ands	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3b05      	subs	r3, #5
 80028d8:	fa00 f203 	lsl.w	r2, r0, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80028e4:	e04c      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d824      	bhi.n	8002938 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b23      	subs	r3, #35	@ 0x23
 8002900:	221f      	movs	r2, #31
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b23      	subs	r3, #35	@ 0x23
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
 8002936:	e023      	b.n	8002980 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	3b41      	subs	r3, #65	@ 0x41
 800294a:	221f      	movs	r2, #31
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43da      	mvns	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	400a      	ands	r2, r1
 8002958:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	4618      	mov	r0, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b41      	subs	r3, #65	@ 0x41
 8002974:	fa00 f203 	lsl.w	r2, r0, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a30      	ldr	r2, [pc, #192]	@ (8002a48 <HAL_ADC_ConfigChannel+0x29c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1f4>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002992:	d105      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002994:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a2c      	ldr	r2, [pc, #176]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 800299a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800299e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a28      	ldr	r2, [pc, #160]	@ (8002a48 <HAL_ADC_ConfigChannel+0x29c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10f      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d10b      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029b2:	4b26      	ldr	r3, [pc, #152]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a25      	ldr	r2, [pc, #148]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029be:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a22      	ldr	r2, [pc, #136]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002a48 <HAL_ADC_ConfigChannel+0x29c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d12b      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x280>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a44 <HAL_ADC_ConfigChannel+0x298>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x23a>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b11      	cmp	r3, #17
 80029e4:	d122      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029e6:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a18      	ldr	r2, [pc, #96]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80029f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <HAL_ADC_ConfigChannel+0x2a0>)
 80029f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <HAL_ADC_ConfigChannel+0x298>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d111      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a11      	ldr	r2, [pc, #68]	@ (8002a54 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0c9a      	lsrs	r2, r3, #18
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a1e:	e002      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f9      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	10000012 	.word	0x10000012
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	20000000 	.word	0x20000000
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a60:	4b78      	ldr	r3, [pc, #480]	@ (8002c44 <ADC_Init+0x1ec>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a77      	ldr	r2, [pc, #476]	@ (8002c44 <ADC_Init+0x1ec>)
 8002a66:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a6a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a6c:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <ADC_Init+0x1ec>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4973      	ldr	r1, [pc, #460]	@ (8002c44 <ADC_Init+0x1ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	4a58      	ldr	r2, [pc, #352]	@ (8002c48 <ADC_Init+0x1f0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d022      	beq.n	8002b32 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002afa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e00f      	b.n	8002b52 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0202 	bic.w	r2, r2, #2
 8002b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	005a      	lsls	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	3b01      	subs	r3, #1
 8002bac:	035a      	lsls	r2, r3, #13
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	e007      	b.n	8002bc8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	051a      	lsls	r2, r3, #20
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c0a:	025a      	lsls	r2, r3, #9
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	029a      	lsls	r2, r3, #10
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	40012300 	.word	0x40012300
 8002c48:	0f000001 	.word	0x0f000001

08002c4c <__NVIC_SetPriorityGrouping>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <__NVIC_SetPriorityGrouping+0x40>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7a:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <__NVIC_SetPriorityGrouping+0x40>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	60d3      	str	r3, [r2, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00
 8002c90:	05fa0000 	.word	0x05fa0000

08002c94 <__NVIC_GetPriorityGrouping>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_EnableIRQ>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db0b      	blt.n	8002cda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4907      	ldr	r1, [pc, #28]	@ (8002ce8 <__NVIC_EnableIRQ+0x38>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_DisableIRQ>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db12      	blt.n	8002d24 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	490a      	ldr	r1, [pc, #40]	@ (8002d30 <__NVIC_DisableIRQ+0x44>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	3320      	adds	r3, #32
 8002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d18:	f3bf 8f4f 	dsb	sy
}
 8002d1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d1e:	f3bf 8f6f 	isb	sy
}
 8002d22:	bf00      	nop
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	@ (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	@ (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	@ 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff05 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff1a 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff0d 	bl	8002cb0 <__NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff1d 	bl	8002cec <__NVIC_DisableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff94 	bl	8002df0 <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	@ 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e175      	b.n	80031e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	f040 8164 	bne.w	80031da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_GPIO_Init+0x56>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d130      	bne.n	8002f8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f60:	2201      	movs	r2, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0201 	and.w	r2, r3, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d017      	beq.n	8002fc8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d123      	bne.n	800301c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	08da      	lsrs	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3208      	adds	r2, #8
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0203 	and.w	r2, r3, #3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80be 	beq.w	80031da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	4b66      	ldr	r3, [pc, #408]	@ (80031f8 <HAL_GPIO_Init+0x324>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	4a65      	ldr	r2, [pc, #404]	@ (80031f8 <HAL_GPIO_Init+0x324>)
 8003064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003068:	6453      	str	r3, [r2, #68]	@ 0x44
 800306a:	4b63      	ldr	r3, [pc, #396]	@ (80031f8 <HAL_GPIO_Init+0x324>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003076:	4a61      	ldr	r2, [pc, #388]	@ (80031fc <HAL_GPIO_Init+0x328>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <HAL_GPIO_Init+0x32c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d037      	beq.n	8003112 <HAL_GPIO_Init+0x23e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a57      	ldr	r2, [pc, #348]	@ (8003204 <HAL_GPIO_Init+0x330>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d031      	beq.n	800310e <HAL_GPIO_Init+0x23a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a56      	ldr	r2, [pc, #344]	@ (8003208 <HAL_GPIO_Init+0x334>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02b      	beq.n	800310a <HAL_GPIO_Init+0x236>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a55      	ldr	r2, [pc, #340]	@ (800320c <HAL_GPIO_Init+0x338>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d025      	beq.n	8003106 <HAL_GPIO_Init+0x232>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a54      	ldr	r2, [pc, #336]	@ (8003210 <HAL_GPIO_Init+0x33c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01f      	beq.n	8003102 <HAL_GPIO_Init+0x22e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a53      	ldr	r2, [pc, #332]	@ (8003214 <HAL_GPIO_Init+0x340>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x22a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_GPIO_Init+0x344>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x226>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a51      	ldr	r2, [pc, #324]	@ (800321c <HAL_GPIO_Init+0x348>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x222>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a50      	ldr	r2, [pc, #320]	@ (8003220 <HAL_GPIO_Init+0x34c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x21e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003224 <HAL_GPIO_Init+0x350>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x21a>
 80030ea:	2309      	movs	r3, #9
 80030ec:	e012      	b.n	8003114 <HAL_GPIO_Init+0x240>
 80030ee:	230a      	movs	r3, #10
 80030f0:	e010      	b.n	8003114 <HAL_GPIO_Init+0x240>
 80030f2:	2308      	movs	r3, #8
 80030f4:	e00e      	b.n	8003114 <HAL_GPIO_Init+0x240>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00c      	b.n	8003114 <HAL_GPIO_Init+0x240>
 80030fa:	2306      	movs	r3, #6
 80030fc:	e00a      	b.n	8003114 <HAL_GPIO_Init+0x240>
 80030fe:	2305      	movs	r3, #5
 8003100:	e008      	b.n	8003114 <HAL_GPIO_Init+0x240>
 8003102:	2304      	movs	r3, #4
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x240>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <HAL_GPIO_Init+0x240>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x240>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_GPIO_Init+0x240>
 8003112:	2300      	movs	r3, #0
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f002 0203 	and.w	r2, r2, #3
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	4093      	lsls	r3, r2
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003124:	4935      	ldr	r1, [pc, #212]	@ (80031fc <HAL_GPIO_Init+0x328>)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003132:	4b3d      	ldr	r3, [pc, #244]	@ (8003228 <HAL_GPIO_Init+0x354>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003156:	4a34      	ldr	r2, [pc, #208]	@ (8003228 <HAL_GPIO_Init+0x354>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800315c:	4b32      	ldr	r3, [pc, #200]	@ (8003228 <HAL_GPIO_Init+0x354>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003180:	4a29      	ldr	r2, [pc, #164]	@ (8003228 <HAL_GPIO_Init+0x354>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003186:	4b28      	ldr	r3, [pc, #160]	@ (8003228 <HAL_GPIO_Init+0x354>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003228 <HAL_GPIO_Init+0x354>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003228 <HAL_GPIO_Init+0x354>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d4:	4a14      	ldr	r2, [pc, #80]	@ (8003228 <HAL_GPIO_Init+0x354>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3301      	adds	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	f67f ae86 	bls.w	8002ef4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40013800 	.word	0x40013800
 8003200:	40020000 	.word	0x40020000
 8003204:	40020400 	.word	0x40020400
 8003208:	40020800 	.word	0x40020800
 800320c:	40020c00 	.word	0x40020c00
 8003210:	40021000 	.word	0x40021000
 8003214:	40021400 	.word	0x40021400
 8003218:	40021800 	.word	0x40021800
 800321c:	40021c00 	.word	0x40021c00
 8003220:	40022000 	.word	0x40022000
 8003224:	40022400 	.word	0x40022400
 8003228:	40013c00 	.word	0x40013c00

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003248:	e003      	b.n	8003252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	619a      	str	r2, [r3, #24]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800326a:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003276:	4a05      	ldr	r2, [pc, #20]	@ (800328c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f9ea 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40013c00 	.word	0x40013c00

08003290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e08b      	b.n	80033ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fbfe 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	@ 0x24
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e006      	b.n	8003318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d108      	bne.n	8003332 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	e007      	b.n	8003342 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b1d      	ldr	r3, [pc, #116]	@ (80033c4 <HAL_I2C_Init+0x134>)
 800334e:	430b      	orrs	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	02008000 	.word	0x02008000

080033c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	4608      	mov	r0, r1
 80033d2:	4611      	mov	r1, r2
 80033d4:	461a      	mov	r2, r3
 80033d6:	4603      	mov	r3, r0
 80033d8:	817b      	strh	r3, [r7, #10]
 80033da:	460b      	mov	r3, r1
 80033dc:	813b      	strh	r3, [r7, #8]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	f040 80f9 	bne.w	80035e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_I2C_Mem_Write+0x34>
 80033f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003402:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0ed      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_I2C_Mem_Write+0x4e>
 8003412:	2302      	movs	r3, #2
 8003414:	e0e6      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800341e:	f7ff f951 	bl	80026c4 <HAL_GetTick>
 8003422:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2319      	movs	r3, #25
 800342a:	2201      	movs	r2, #1
 800342c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f955 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0d1      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2221      	movs	r2, #33	@ 0x21
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2240      	movs	r2, #64	@ 0x40
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003468:	88f8      	ldrh	r0, [r7, #6]
 800346a:	893a      	ldrh	r2, [r7, #8]
 800346c:	8979      	ldrh	r1, [r7, #10]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	4603      	mov	r3, r0
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f8b9 	bl	80035f0 <I2C_RequestMemoryWrite>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0a9      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2bff      	cmp	r3, #255	@ 0xff
 8003498:	d90e      	bls.n	80034b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	22ff      	movs	r2, #255	@ 0xff
 800349e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8979      	ldrh	r1, [r7, #10]
 80034a8:	2300      	movs	r3, #0
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fad9 	bl	8003a68 <I2C_TransferConfig>
 80034b6:	e00f      	b.n	80034d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	8979      	ldrh	r1, [r7, #10]
 80034ca:	2300      	movs	r3, #0
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fac8 	bl	8003a68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f958 	bl	8003792 <I2C_WaitOnTXISFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e07b      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d034      	beq.n	8003590 <HAL_I2C_Mem_Write+0x1c8>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d130      	bne.n	8003590 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8d1 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e04d      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2bff      	cmp	r3, #255	@ 0xff
 8003550:	d90e      	bls.n	8003570 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	22ff      	movs	r2, #255	@ 0xff
 8003556:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	b2da      	uxtb	r2, r3
 800355e:	8979      	ldrh	r1, [r7, #10]
 8003560:	2300      	movs	r3, #0
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa7d 	bl	8003a68 <I2C_TransferConfig>
 800356e:	e00f      	b.n	8003590 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	b2da      	uxtb	r2, r3
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa6c 	bl	8003a68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d19e      	bne.n	80034d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f93e 	bl	8003820 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e01a      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <HAL_I2C_Mem_Write+0x224>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fe00e800 	.word	0xfe00e800

080035f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	4608      	mov	r0, r1
 80035fa:	4611      	mov	r1, r2
 80035fc:	461a      	mov	r2, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	817b      	strh	r3, [r7, #10]
 8003602:	460b      	mov	r3, r1
 8003604:	813b      	strh	r3, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	8979      	ldrh	r1, [r7, #10]
 8003610:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <I2C_RequestMemoryWrite+0xa4>)
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 fa25 	bl	8003a68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f8b5 	bl	8003792 <I2C_WaitOnTXISFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e02c      	b.n	800368c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003638:	893b      	ldrh	r3, [r7, #8]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	629a      	str	r2, [r3, #40]	@ 0x28
 8003642:	e015      	b.n	8003670 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	b29b      	uxth	r3, r3
 800364a:	b2da      	uxtb	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f89b 	bl	8003792 <I2C_WaitOnTXISFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e012      	b.n	800368c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003666:	893b      	ldrh	r3, [r7, #8]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2200      	movs	r2, #0
 8003678:	2180      	movs	r1, #128	@ 0x80
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f830 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	80002000 	.word	0x80002000

08003698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d103      	bne.n	80036b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d007      	beq.n	80036d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	619a      	str	r2, [r3, #24]
  }
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	e03b      	b.n	800376a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f8d6 	bl	80038a8 <I2C_IsErrorOccurred>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e041      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370c:	d02d      	beq.n	800376a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe ffd9 	bl	80026c4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x44>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d122      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	429a      	cmp	r2, r3
 8003740:	d113      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	429a      	cmp	r2, r3
 8003786:	d0b4      	beq.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800379e:	e033      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f87f 	bl	80038a8 <I2C_IsErrorOccurred>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e031      	b.n	8003818 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d025      	beq.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037bc:	f7fe ff82 	bl	80026c4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d302      	bcc.n	80037d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11a      	bne.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d013      	beq.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e007      	b.n	8003818 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d1c4      	bne.n	80037a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382c:	e02f      	b.n	800388e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f838 	bl	80038a8 <I2C_IsErrorOccurred>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e02d      	b.n	800389e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fe ff3f 	bl	80026c4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	d302      	bcc.n	8003858 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11a      	bne.n	800388e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b20      	cmp	r3, #32
 8003864:	d013      	beq.n	800388e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e007      	b.n	800389e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b20      	cmp	r3, #32
 800389a:	d1c8      	bne.n	800382e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	@ 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d068      	beq.n	80039a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2210      	movs	r2, #16
 80038da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038dc:	e049      	b.n	8003972 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d045      	beq.n	8003972 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038e6:	f7fe feed 	bl	80026c4 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d302      	bcc.n	80038fc <I2C_IsErrorOccurred+0x54>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d13a      	bne.n	8003972 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003906:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800390e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800391e:	d121      	bne.n	8003964 <I2C_IsErrorOccurred+0xbc>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003926:	d01d      	beq.n	8003964 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b20      	cmp	r3, #32
 800392c:	d01a      	beq.n	8003964 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800393c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800393e:	f7fe fec1 	bl	80026c4 <HAL_GetTick>
 8003942:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003944:	e00e      	b.n	8003964 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003946:	f7fe febd 	bl	80026c4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b19      	cmp	r3, #25
 8003952:	d907      	bls.n	8003964 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f043 0320 	orr.w	r3, r3, #32
 800395a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003962:	e006      	b.n	8003972 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d1e9      	bne.n	8003946 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d003      	beq.n	8003988 <I2C_IsErrorOccurred+0xe0>
 8003980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0aa      	beq.n	80038de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2220      	movs	r2, #32
 8003996:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	f043 0304 	orr.w	r3, r3, #4
 800399e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f043 0302 	orr.w	r3, r3, #2
 8003a02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01c      	beq.n	8003a56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff fe3b 	bl	8003698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <I2C_IsErrorOccurred+0x1bc>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3728      	adds	r7, #40	@ 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	fe00e800 	.word	0xfe00e800

08003a68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	817b      	strh	r3, [r7, #10]
 8003a76:	4613      	mov	r3, r2
 8003a78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a80:	7a7b      	ldrb	r3, [r7, #9]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	0d5b      	lsrs	r3, r3, #21
 8003aa2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <I2C_TransferConfig+0x60>)
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	ea02 0103 	and.w	r1, r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	03ff63ff 	.word	0x03ff63ff

08003acc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d138      	bne.n	8003b54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e032      	b.n	8003b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d139      	bne.n	8003bec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e033      	b.n	8003bee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2224      	movs	r2, #36	@ 0x24
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40007000 	.word	0x40007000

08003c1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	4b23      	ldr	r3, [pc, #140]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	4a22      	ldr	r2, [pc, #136]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4a:	f7fe fd3b 	bl	80026c4 <HAL_GetTick>
 8003c4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c50:	e009      	b.n	8003c66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c52:	f7fe fd37 	bl	80026c4 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c60:	d901      	bls.n	8003c66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e022      	b.n	8003cac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c66:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c72:	d1ee      	bne.n	8003c52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c74:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c80:	f7fe fd20 	bl	80026c4 <HAL_GetTick>
 8003c84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c86:	e009      	b.n	8003c9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c88:	f7fe fd1c 	bl	80026c4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c96:	d901      	bls.n	8003c9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e007      	b.n	8003cac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000

08003cbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e29b      	b.n	800420a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8087 	beq.w	8003dee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce0:	4b96      	ldr	r3, [pc, #600]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cec:	4b93      	ldr	r3, [pc, #588]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d112      	bne.n	8003d1e <HAL_RCC_OscConfig+0x62>
 8003cf8:	4b90      	ldr	r3, [pc, #576]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d06:	4b8d      	ldr	r3, [pc, #564]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d06c      	beq.n	8003dec <HAL_RCC_OscConfig+0x130>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d168      	bne.n	8003dec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e275      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x7a>
 8003d28:	4b84      	ldr	r3, [pc, #528]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a83      	ldr	r2, [pc, #524]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e02e      	b.n	8003d94 <HAL_RCC_OscConfig+0xd8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x9c>
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7e      	ldr	r2, [pc, #504]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01d      	b.n	8003d94 <HAL_RCC_OscConfig+0xd8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0xc0>
 8003d62:	4b76      	ldr	r3, [pc, #472]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a75      	ldr	r2, [pc, #468]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b73      	ldr	r3, [pc, #460]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a72      	ldr	r2, [pc, #456]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xd8>
 8003d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6e      	ldr	r2, [pc, #440]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b6c      	ldr	r3, [pc, #432]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fc92 	bl	80026c4 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe fc8e 	bl	80026c4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	@ 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e229      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b61      	ldr	r3, [pc, #388]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe8>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fc7e 	bl	80026c4 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fc7a 	bl	80026c4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e215      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	4b57      	ldr	r3, [pc, #348]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x110>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d069      	beq.n	8003ece <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfa:	4b50      	ldr	r3, [pc, #320]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e06:	4b4d      	ldr	r3, [pc, #308]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x190>
 8003e12:	4b4a      	ldr	r3, [pc, #296]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1e9      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b41      	ldr	r3, [pc, #260]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	493d      	ldr	r1, [pc, #244]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	e040      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d023      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e54:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a38      	ldr	r2, [pc, #224]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe fc30 	bl	80026c4 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fe fc2c 	bl	80026c4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e1c7      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b30      	ldr	r3, [pc, #192]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4929      	ldr	r1, [pc, #164]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
 8003e9a:	e018      	b.n	8003ece <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9c:	4b27      	ldr	r3, [pc, #156]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fc0c 	bl	80026c4 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe fc08 	bl	80026c4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1a3      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d038      	beq.n	8003f4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b16      	ldr	r3, [pc, #88]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	4a15      	ldr	r2, [pc, #84]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fe fbe9 	bl	80026c4 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fe fbe5 	bl	80026c4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e180      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x23a>
 8003f14:	e01a      	b.n	8003f4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1a:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <HAL_RCC_OscConfig+0x280>)
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f22:	f7fe fbcf 	bl	80026c4 <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fe fbcb 	bl	80026c4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d903      	bls.n	8003f40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e166      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
 8003f3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b92      	ldr	r3, [pc, #584]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ee      	bne.n	8003f2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a4 	beq.w	80040a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5a:	4b8c      	ldr	r3, [pc, #560]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b89      	ldr	r3, [pc, #548]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	4a88      	ldr	r2, [pc, #544]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f72:	4b86      	ldr	r3, [pc, #536]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	4b83      	ldr	r3, [pc, #524]	@ (8004190 <HAL_RCC_OscConfig+0x4d4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f8e:	4b80      	ldr	r3, [pc, #512]	@ (8004190 <HAL_RCC_OscConfig+0x4d4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a7f      	ldr	r2, [pc, #508]	@ (8004190 <HAL_RCC_OscConfig+0x4d4>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe fb93 	bl	80026c4 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe fb8f 	bl	80026c4 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b64      	cmp	r3, #100	@ 0x64
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e12a      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4b76      	ldr	r3, [pc, #472]	@ (8004190 <HAL_RCC_OscConfig+0x4d4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x31a>
 8003fc8:	4b70      	ldr	r3, [pc, #448]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fcc:	4a6f      	ldr	r2, [pc, #444]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd4:	e02d      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x33c>
 8003fde:	4b6b      	ldr	r3, [pc, #428]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	4a6a      	ldr	r2, [pc, #424]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fea:	4b68      	ldr	r3, [pc, #416]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fee:	4a67      	ldr	r2, [pc, #412]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8003ff0:	f023 0304 	bic.w	r3, r3, #4
 8003ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff6:	e01c      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_OscConfig+0x35e>
 8004000:	4b62      	ldr	r3, [pc, #392]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a61      	ldr	r2, [pc, #388]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	4b5f      	ldr	r3, [pc, #380]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a5e      	ldr	r2, [pc, #376]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
 8004018:	e00b      	b.n	8004032 <HAL_RCC_OscConfig+0x376>
 800401a:	4b5c      	ldr	r3, [pc, #368]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	4a5b      	ldr	r2, [pc, #364]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	@ 0x70
 8004026:	4b59      	ldr	r3, [pc, #356]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a58      	ldr	r2, [pc, #352]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d015      	beq.n	8004066 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fe fb43 	bl	80026c4 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fe fb3f 	bl	80026c4 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e0d8      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	4b4c      	ldr	r3, [pc, #304]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ee      	beq.n	8004042 <HAL_RCC_OscConfig+0x386>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004066:	f7fe fb2d 	bl	80026c4 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fe fb29 	bl	80026c4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0c2      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b41      	ldr	r3, [pc, #260]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b3d      	ldr	r3, [pc, #244]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	4a3c      	ldr	r2, [pc, #240]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80ae 	beq.w	8004208 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ac:	4b37      	ldr	r3, [pc, #220]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d06d      	beq.n	8004194 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d14b      	bne.n	8004158 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b32      	ldr	r3, [pc, #200]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a31      	ldr	r2, [pc, #196]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe fafa 	bl	80026c4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe faf6 	bl	80026c4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e091      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	019b      	lsls	r3, r3, #6
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	3b01      	subs	r3, #1
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411c:	071b      	lsls	r3, r3, #28
 800411e:	491b      	ldr	r1, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b19      	ldr	r3, [pc, #100]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fac8 	bl	80026c4 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe fac4 	bl	80026c4 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e05f      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x47c>
 8004156:	e057      	b.n	8004208 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0b      	ldr	r2, [pc, #44]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 800415e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe faae 	bl	80026c4 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fe faaa 	bl	80026c4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e045      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b03      	ldr	r3, [pc, #12]	@ (800418c <HAL_RCC_OscConfig+0x4d0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x4b0>
 800418a:	e03d      	b.n	8004208 <HAL_RCC_OscConfig+0x54c>
 800418c:	40023800 	.word	0x40023800
 8004190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004194:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <HAL_RCC_OscConfig+0x558>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d030      	beq.n	8004204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d129      	bne.n	8004204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d122      	bne.n	8004204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d119      	bne.n	8004204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d10f      	bne.n	8004204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d0      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b6a      	ldr	r3, [pc, #424]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d910      	bls.n	8004260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b67      	ldr	r3, [pc, #412]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 020f 	bic.w	r2, r3, #15
 8004246:	4965      	ldr	r1, [pc, #404]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b63      	ldr	r3, [pc, #396]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0b8      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d020      	beq.n	80042ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004278:	4b59      	ldr	r3, [pc, #356]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a58      	ldr	r2, [pc, #352]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004290:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	4a52      	ldr	r2, [pc, #328]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800429a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	494d      	ldr	r1, [pc, #308]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d040      	beq.n	800433c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d115      	bne.n	80042fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e07f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e073      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ea:	4b3d      	ldr	r3, [pc, #244]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e06b      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4936      	ldr	r1, [pc, #216]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fe f9da 	bl	80026c4 <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	e00a      	b.n	800432a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004314:	f7fe f9d6 	bl	80026c4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e053      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 020c 	and.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	429a      	cmp	r2, r3
 800433a:	d1eb      	bne.n	8004314 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800433c:	4b27      	ldr	r3, [pc, #156]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d210      	bcs.n	800436c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 020f 	bic.w	r2, r3, #15
 8004352:	4922      	ldr	r1, [pc, #136]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e032      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004378:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4916      	ldr	r1, [pc, #88]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004396:	4b12      	ldr	r3, [pc, #72]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	490e      	ldr	r1, [pc, #56]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043aa:	f000 f821 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	490a      	ldr	r1, [pc, #40]	@ (80043e4 <HAL_RCC_ClockConfig+0x1cc>)
 80043bc:	5ccb      	ldrb	r3, [r1, r3]
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <HAL_RCC_ClockConfig+0x1d0>)
 80043c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043c6:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <HAL_RCC_ClockConfig+0x1d4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe f936 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40023c00 	.word	0x40023c00
 80043e0:	40023800 	.word	0x40023800
 80043e4:	08007d78 	.word	0x08007d78
 80043e8:	20000000 	.word	0x20000000
 80043ec:	20000004 	.word	0x20000004

080043f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f4:	b094      	sub	sp, #80	@ 0x50
 80043f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fc:	2300      	movs	r3, #0
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004400:	2300      	movs	r3, #0
 8004402:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004408:	4b79      	ldr	r3, [pc, #484]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d00d      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x40>
 8004414:	2b08      	cmp	r3, #8
 8004416:	f200 80e1 	bhi.w	80045dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x34>
 800441e:	2b04      	cmp	r3, #4
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x3a>
 8004422:	e0db      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b73      	ldr	r3, [pc, #460]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004428:	e0db      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442a:	4b73      	ldr	r3, [pc, #460]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800442c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800442e:	e0d8      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004430:	4b6f      	ldr	r3, [pc, #444]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800443a:	4b6d      	ldr	r3, [pc, #436]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d063      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004446:	4b6a      	ldr	r3, [pc, #424]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	099b      	lsrs	r3, r3, #6
 800444c:	2200      	movs	r2, #0
 800444e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
 800445a:	2300      	movs	r3, #0
 800445c:	637b      	str	r3, [r7, #52]	@ 0x34
 800445e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4621      	mov	r1, r4
 800447c:	1a51      	subs	r1, r2, r1
 800447e:	6139      	str	r1, [r7, #16]
 8004480:	4629      	mov	r1, r5
 8004482:	eb63 0301 	sbc.w	r3, r3, r1
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004494:	4659      	mov	r1, fp
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	4651      	mov	r1, sl
 800449a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800449e:	4651      	mov	r1, sl
 80044a0:	018a      	lsls	r2, r1, #6
 80044a2:	4651      	mov	r1, sl
 80044a4:	ebb2 0801 	subs.w	r8, r2, r1
 80044a8:	4659      	mov	r1, fp
 80044aa:	eb63 0901 	sbc.w	r9, r3, r1
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c2:	4690      	mov	r8, r2
 80044c4:	4699      	mov	r9, r3
 80044c6:	4623      	mov	r3, r4
 80044c8:	eb18 0303 	adds.w	r3, r8, r3
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	462b      	mov	r3, r5
 80044d0:	eb49 0303 	adc.w	r3, r9, r3
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044e2:	4629      	mov	r1, r5
 80044e4:	024b      	lsls	r3, r1, #9
 80044e6:	4621      	mov	r1, r4
 80044e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044ec:	4621      	mov	r1, r4
 80044ee:	024a      	lsls	r2, r1, #9
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f6:	2200      	movs	r2, #0
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004500:	f7fb feee 	bl	80002e0 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4613      	mov	r3, r2
 800450a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800450c:	e058      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450e:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	2200      	movs	r2, #0
 8004516:	4618      	mov	r0, r3
 8004518:	4611      	mov	r1, r2
 800451a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800451e:	623b      	str	r3, [r7, #32]
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
 8004524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	f04f 0000 	mov.w	r0, #0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	0159      	lsls	r1, r3, #5
 8004536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453a:	0150      	lsls	r0, r2, #5
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4641      	mov	r1, r8
 8004542:	ebb2 0a01 	subs.w	sl, r2, r1
 8004546:	4649      	mov	r1, r9
 8004548:	eb63 0b01 	sbc.w	fp, r3, r1
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800455c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004560:	ebb2 040a 	subs.w	r4, r2, sl
 8004564:	eb63 050b 	sbc.w	r5, r3, fp
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	464b      	mov	r3, r9
 8004584:	eb45 0303 	adc.w	r3, r5, r3
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004596:	4629      	mov	r1, r5
 8004598:	028b      	lsls	r3, r1, #10
 800459a:	4621      	mov	r1, r4
 800459c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045a0:	4621      	mov	r1, r4
 80045a2:	028a      	lsls	r2, r1, #10
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045aa:	2200      	movs	r2, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	61fa      	str	r2, [r7, #28]
 80045b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b4:	f7fb fe94 	bl	80002e0 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	3301      	adds	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80045d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045da:	e002      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3750      	adds	r7, #80	@ 0x50
 80045e8:	46bd      	mov	sp, r7
 80045ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ee:	bf00      	nop
 80045f0:	40023800 	.word	0x40023800
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	007a1200 	.word	0x007a1200

080045fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004600:	4b03      	ldr	r3, [pc, #12]	@ (8004610 <HAL_RCC_GetHCLKFreq+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000000 	.word	0x20000000

08004614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004618:	f7ff fff0 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0a9b      	lsrs	r3, r3, #10
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	@ (8004638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	08007d88 	.word	0x08007d88

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004640:	f7ff ffdc 	bl	80045fc <HAL_RCC_GetHCLKFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b05      	ldr	r3, [pc, #20]	@ (800465c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0b5b      	lsrs	r3, r3, #13
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	4903      	ldr	r1, [pc, #12]	@ (8004660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40023800 	.word	0x40023800
 8004660:	08007d88 	.word	0x08007d88

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800468c:	4b69      	ldr	r3, [pc, #420]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a68      	ldr	r2, [pc, #416]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004696:	6093      	str	r3, [r2, #8]
 8004698:	4b66      	ldr	r3, [pc, #408]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a0:	4964      	ldr	r1, [pc, #400]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046be:	4b5d      	ldr	r3, [pc, #372]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	4959      	ldr	r1, [pc, #356]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004700:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	494a      	ldr	r1, [pc, #296]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004718:	d101      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 808b 	beq.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004748:	4b3a      	ldr	r3, [pc, #232]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	4a39      	ldr	r2, [pc, #228]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004752:	6413      	str	r3, [r2, #64]	@ 0x40
 8004754:	4b37      	ldr	r3, [pc, #220]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004760:	4b35      	ldr	r3, [pc, #212]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a34      	ldr	r2, [pc, #208]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fd ffaa 	bl	80026c4 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004774:	f7fd ffa6 	bl	80026c4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	@ 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e38f      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004786:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004792:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800479a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d035      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d02e      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047b0:	4b20      	ldr	r3, [pc, #128]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047d2:	4a18      	ldr	r2, [pc, #96]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047d8:	4b16      	ldr	r3, [pc, #88]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d114      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fd ff6e 	bl	80026c4 <HAL_GetTick>
 80047e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	e00a      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ec:	f7fd ff6a 	bl	80026c4 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e351      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	4b0c      	ldr	r3, [pc, #48]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0ee      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800481a:	d111      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800482a:	400b      	ands	r3, r1
 800482c:	4901      	ldr	r1, [pc, #4]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
 8004832:	e00b      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004834:	40023800 	.word	0x40023800
 8004838:	40007000 	.word	0x40007000
 800483c:	0ffffcff 	.word	0x0ffffcff
 8004840:	4bac      	ldr	r3, [pc, #688]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4aab      	ldr	r2, [pc, #684]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800484a:	6093      	str	r3, [r2, #8]
 800484c:	4ba9      	ldr	r3, [pc, #676]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	49a6      	ldr	r1, [pc, #664]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	4313      	orrs	r3, r2
 800485c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d010      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800486a:	4ba2      	ldr	r3, [pc, #648]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004870:	4aa0      	ldr	r2, [pc, #640]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004876:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800487a:	4b9e      	ldr	r3, [pc, #632]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	499b      	ldr	r1, [pc, #620]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004898:	4b96      	ldr	r3, [pc, #600]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a6:	4993      	ldr	r1, [pc, #588]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ba:	4b8e      	ldr	r3, [pc, #568]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c8:	498a      	ldr	r1, [pc, #552]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048dc:	4b85      	ldr	r3, [pc, #532]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ea:	4982      	ldr	r1, [pc, #520]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048fe:	4b7d      	ldr	r3, [pc, #500]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004904:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	4979      	ldr	r1, [pc, #484]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004920:	4b74      	ldr	r3, [pc, #464]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	4971      	ldr	r1, [pc, #452]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004942:	4b6c      	ldr	r3, [pc, #432]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004948:	f023 020c 	bic.w	r2, r3, #12
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004950:	4968      	ldr	r1, [pc, #416]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004964:	4b63      	ldr	r3, [pc, #396]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004972:	4960      	ldr	r1, [pc, #384]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	4957      	ldr	r1, [pc, #348]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a8:	4b52      	ldr	r3, [pc, #328]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	494f      	ldr	r1, [pc, #316]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049ca:	4b4a      	ldr	r3, [pc, #296]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d8:	4946      	ldr	r1, [pc, #280]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049ec:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fa:	493e      	ldr	r1, [pc, #248]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a0e:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1c:	4935      	ldr	r1, [pc, #212]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a30:	4b30      	ldr	r3, [pc, #192]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a36:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a3e:	492d      	ldr	r1, [pc, #180]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a52:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a58:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a60:	4924      	ldr	r1, [pc, #144]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a70:	d101      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a92:	4b18      	ldr	r3, [pc, #96]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a98:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa0:	4914      	ldr	r1, [pc, #80]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac4:	490b      	ldr	r1, [pc, #44]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ad8:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae8:	4902      	ldr	r1, [pc, #8]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004af0:	e002      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b04:	4b8a      	ldr	r3, [pc, #552]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	4986      	ldr	r1, [pc, #536]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b28:	4b81      	ldr	r3, [pc, #516]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b2e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b38:	497d      	ldr	r1, [pc, #500]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d006      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80d6 	beq.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b54:	4b76      	ldr	r3, [pc, #472]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a75      	ldr	r2, [pc, #468]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b60:	f7fd fdb0 	bl	80026c4 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b68:	f7fd fdac 	bl	80026c4 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	@ 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e195      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ba8:	4b61      	ldr	r3, [pc, #388]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bae:	0e1b      	lsrs	r3, r3, #24
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	019a      	lsls	r2, r3, #6
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	4958      	ldr	r1, [pc, #352]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d02e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c00:	d129      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c02:	4b4b      	ldr	r3, [pc, #300]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c10:	4b47      	ldr	r3, [pc, #284]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c16:	0f1b      	lsrs	r3, r3, #28
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	019a      	lsls	r2, r3, #6
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	493e      	ldr	r1, [pc, #248]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c44:	f023 021f 	bic.w	r2, r3, #31
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	4938      	ldr	r1, [pc, #224]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01d      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c62:	4b33      	ldr	r3, [pc, #204]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c68:	0e1b      	lsrs	r3, r3, #24
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c70:	4b2f      	ldr	r3, [pc, #188]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c76:	0f1b      	lsrs	r3, r3, #28
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	019a      	lsls	r2, r3, #6
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	061b      	lsls	r3, r3, #24
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	4926      	ldr	r1, [pc, #152]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d011      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	491a      	ldr	r1, [pc, #104]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cce:	4b18      	ldr	r3, [pc, #96]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fd fcf3 	bl	80026c4 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce2:	f7fd fcef 	bl	80026c4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b64      	cmp	r3, #100	@ 0x64
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0d8      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 80ce 	bne.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d08:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a08      	ldr	r2, [pc, #32]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d14:	f7fd fcd6 	bl	80026c4 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d1c:	f7fd fcd2 	bl	80026c4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	@ 0x64
 8004d28:	d904      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0bb      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d34:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d40:	d0ec      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02e      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d12a      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d6a:	4b51      	ldr	r3, [pc, #324]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d78:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	0f1b      	lsrs	r3, r3, #28
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	4944      	ldr	r1, [pc, #272]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004da6:	4b42      	ldr	r3, [pc, #264]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	493d      	ldr	r1, [pc, #244]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d022      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dd4:	d11d      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dd6:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004de4:	4b32      	ldr	r3, [pc, #200]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dea:	0f1b      	lsrs	r3, r3, #28
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	019a      	lsls	r2, r3, #6
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	4929      	ldr	r1, [pc, #164]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d028      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e1e:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e2c:	4b20      	ldr	r3, [pc, #128]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	019a      	lsls	r2, r3, #6
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	041b      	lsls	r3, r3, #16
 8004e44:	431a      	orrs	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	071b      	lsls	r3, r3, #28
 8004e52:	4917      	ldr	r1, [pc, #92]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e5a:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4911      	ldr	r1, [pc, #68]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e70:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0e      	ldr	r2, [pc, #56]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd fc22 	bl	80026c4 <HAL_GetTick>
 8004e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e84:	f7fd fc1e 	bl	80026c4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	@ 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e007      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ea2:	d1ef      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800

08004eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e09d      	b.n	8005002 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d108      	bne.n	8004ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ed6:	d009      	beq.n	8004eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
 8004ede:	e005      	b.n	8004eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc fe7e 	bl	8001c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f2c:	d902      	bls.n	8004f34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e002      	b.n	8004f3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f42:	d007      	beq.n	8004f54 <HAL_SPI_Init+0xa0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f4c:	d002      	beq.n	8004f54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	ea42 0103 	orr.w	r1, r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	f003 0204 	and.w	r2, r3, #4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e049      	b.n	80050b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fc fe69 	bl	8001d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f000 fc0d 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc ff06 	bl	8001ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fbb6 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e049      	b.n	800520c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f841 	bl	8005214 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f000 fb5f 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e08f      	b.n	800535c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fc fdd7 	bl	8001e04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b3e      	ldr	r3, [pc, #248]	@ (8005364 <HAL_TIM_Encoder_Init+0x13c>)
 800526a:	400b      	ands	r3, r1
 800526c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f000 faf5 	bl	8005868 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <HAL_TIM_Encoder_Init+0x140>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	4313      	orrs	r3, r2
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4b2b      	ldr	r3, [pc, #172]	@ (800536c <HAL_TIM_Encoder_Init+0x144>)
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005370 <HAL_TIM_Encoder_Init+0x148>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	4313      	orrs	r3, r2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	011a      	lsls	r2, r3, #4
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	031b      	lsls	r3, r3, #12
 80052e8:	4313      	orrs	r3, r2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	4313      	orrs	r3, r2
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	fffebff8 	.word	0xfffebff8
 8005368:	fffffcfc 	.word	0xfffffcfc
 800536c:	fffff3f3 	.word	0xfffff3f3
 8005370:	ffff0f0f 	.word	0xffff0f0f

08005374 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_TIM_IC_ConfigChannel+0x1e>
 800538e:	2302      	movs	r3, #2
 8005390:	e088      	b.n	80054a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053b0:	f000 fd64 	bl	8005e7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 020c 	bic.w	r2, r2, #12
 80053c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	619a      	str	r2, [r3, #24]
 80053d6:	e060      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d11c      	bne.n	8005418 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80053ee:	f000 fde8 	bl	8005fc2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005400:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6999      	ldr	r1, [r3, #24]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	021a      	lsls	r2, r3, #8
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	619a      	str	r2, [r3, #24]
 8005416:	e040      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11b      	bne.n	8005456 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800542e:	f000 fe35 	bl	800609c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 020c 	bic.w	r2, r2, #12
 8005440:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	61da      	str	r2, [r3, #28]
 8005454:	e021      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d11c      	bne.n	8005496 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800546c:	f000 fe52 	bl	8006114 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800547e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69d9      	ldr	r1, [r3, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	61da      	str	r2, [r3, #28]
 8005494:	e001      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e0ff      	b.n	80056ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b14      	cmp	r3, #20
 80054d6:	f200 80f0 	bhi.w	80056ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054da:	a201      	add	r2, pc, #4	@ (adr r2, 80054e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080056bb 	.word	0x080056bb
 80054e8:	080056bb 	.word	0x080056bb
 80054ec:	080056bb 	.word	0x080056bb
 80054f0:	08005575 	.word	0x08005575
 80054f4:	080056bb 	.word	0x080056bb
 80054f8:	080056bb 	.word	0x080056bb
 80054fc:	080056bb 	.word	0x080056bb
 8005500:	080055b7 	.word	0x080055b7
 8005504:	080056bb 	.word	0x080056bb
 8005508:	080056bb 	.word	0x080056bb
 800550c:	080056bb 	.word	0x080056bb
 8005510:	080055f7 	.word	0x080055f7
 8005514:	080056bb 	.word	0x080056bb
 8005518:	080056bb 	.word	0x080056bb
 800551c:	080056bb 	.word	0x080056bb
 8005520:	08005639 	.word	0x08005639
 8005524:	080056bb 	.word	0x080056bb
 8005528:	080056bb 	.word	0x080056bb
 800552c:	080056bb 	.word	0x080056bb
 8005530:	08005679 	.word	0x08005679
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fa40 	bl	80059c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0208 	orr.w	r2, r2, #8
 800554e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0204 	bic.w	r2, r2, #4
 800555e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6999      	ldr	r1, [r3, #24]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	619a      	str	r2, [r3, #24]
      break;
 8005572:	e0a5      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa92 	bl	8005aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800558e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6999      	ldr	r1, [r3, #24]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	021a      	lsls	r2, r3, #8
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]
      break;
 80055b4:	e084      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fae9 	bl	8005b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0208 	orr.w	r2, r2, #8
 80055d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0204 	bic.w	r2, r2, #4
 80055e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69d9      	ldr	r1, [r3, #28]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	61da      	str	r2, [r3, #28]
      break;
 80055f4:	e064      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fb3f 	bl	8005c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69d9      	ldr	r1, [r3, #28]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	021a      	lsls	r2, r3, #8
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	61da      	str	r2, [r3, #28]
      break;
 8005636:	e043      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fb76 	bl	8005d30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0208 	orr.w	r2, r2, #8
 8005652:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0204 	bic.w	r2, r2, #4
 8005662:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005676:	e023      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fba8 	bl	8005dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005692:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	021a      	lsls	r2, r3, #8
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056b8:	e002      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
      break;
 80056be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop

080056d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e0b4      	b.n	800585a <HAL_TIM_ConfigClockSource+0x186>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	4b56      	ldr	r3, [pc, #344]	@ (8005864 <HAL_TIM_ConfigClockSource+0x190>)
 800570c:	4013      	ands	r3, r2
 800570e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005728:	d03e      	beq.n	80057a8 <HAL_TIM_ConfigClockSource+0xd4>
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572e:	f200 8087 	bhi.w	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005736:	f000 8086 	beq.w	8005846 <HAL_TIM_ConfigClockSource+0x172>
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800573e:	d87f      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b70      	cmp	r3, #112	@ 0x70
 8005742:	d01a      	beq.n	800577a <HAL_TIM_ConfigClockSource+0xa6>
 8005744:	2b70      	cmp	r3, #112	@ 0x70
 8005746:	d87b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b60      	cmp	r3, #96	@ 0x60
 800574a:	d050      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x11a>
 800574c:	2b60      	cmp	r3, #96	@ 0x60
 800574e:	d877      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b50      	cmp	r3, #80	@ 0x50
 8005752:	d03c      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xfa>
 8005754:	2b50      	cmp	r3, #80	@ 0x50
 8005756:	d873      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b40      	cmp	r3, #64	@ 0x40
 800575a:	d058      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x13a>
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d86f      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b30      	cmp	r3, #48	@ 0x30
 8005762:	d064      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b30      	cmp	r3, #48	@ 0x30
 8005766:	d86b      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d060      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d867      	bhi.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 8005774:	2b10      	cmp	r3, #16
 8005776:	d05a      	beq.n	800582e <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	e062      	b.n	8005840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800578a:	f000 fd1b 	bl	80061c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800579c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	609a      	str	r2, [r3, #8]
      break;
 80057a6:	e04f      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057b8:	f000 fd04 	bl	80061c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ca:	609a      	str	r2, [r3, #8]
      break;
 80057cc:	e03c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 fbc2 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2150      	movs	r1, #80	@ 0x50
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fcd1 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 80057ec:	e02c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 fc1e 	bl	800603c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2160      	movs	r1, #96	@ 0x60
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fcc1 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 800580c:	e01c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800581a:	461a      	mov	r2, r3
 800581c:	f000 fba2 	bl	8005f64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2140      	movs	r1, #64	@ 0x40
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fcb1 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 800582c:	e00c      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f000 fca8 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 800583e:	e003      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
      break;
 8005844:	e000      	b.n	8005848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	fffeff88 	.word	0xfffeff88

08005868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a46      	ldr	r2, [pc, #280]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a43      	ldr	r2, [pc, #268]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a42      	ldr	r2, [pc, #264]	@ (800599c <TIM_Base_SetConfig+0x134>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a41      	ldr	r2, [pc, #260]	@ (80059a0 <TIM_Base_SetConfig+0x138>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a40      	ldr	r2, [pc, #256]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c8:	d027      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a32      	ldr	r2, [pc, #200]	@ (8005998 <TIM_Base_SetConfig+0x130>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d023      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a31      	ldr	r2, [pc, #196]	@ (800599c <TIM_Base_SetConfig+0x134>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a30      	ldr	r2, [pc, #192]	@ (80059a0 <TIM_Base_SetConfig+0x138>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2f      	ldr	r2, [pc, #188]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d017      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2e      	ldr	r2, [pc, #184]	@ (80059a8 <TIM_Base_SetConfig+0x140>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2d      	ldr	r2, [pc, #180]	@ (80059ac <TIM_Base_SetConfig+0x144>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2c      	ldr	r2, [pc, #176]	@ (80059b0 <TIM_Base_SetConfig+0x148>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <TIM_Base_SetConfig+0x14c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2a      	ldr	r2, [pc, #168]	@ (80059b8 <TIM_Base_SetConfig+0x150>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a29      	ldr	r2, [pc, #164]	@ (80059bc <TIM_Base_SetConfig+0x154>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d108      	bne.n	800592c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a10      	ldr	r2, [pc, #64]	@ (8005994 <TIM_Base_SetConfig+0x12c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0xf8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a12      	ldr	r2, [pc, #72]	@ (80059a4 <TIM_Base_SetConfig+0x13c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f023 0201 	bic.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]
  }
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40010000 	.word	0x40010000
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40010400 	.word	0x40010400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	40001800 	.word	0x40001800
 80059b8:	40001c00 	.word	0x40001c00
 80059bc:	40002000 	.word	0x40002000

080059c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f023 0201 	bic.w	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005a98 <TIM_OC1_SetConfig+0xd8>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 0302 	bic.w	r3, r3, #2
 8005a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a21      	ldr	r2, [pc, #132]	@ (8005a9c <TIM_OC1_SetConfig+0xdc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_OC1_SetConfig+0x64>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a20      	ldr	r2, [pc, #128]	@ (8005aa0 <TIM_OC1_SetConfig+0xe0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d10c      	bne.n	8005a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0308 	bic.w	r3, r3, #8
 8005a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f023 0304 	bic.w	r3, r3, #4
 8005a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <TIM_OC1_SetConfig+0xdc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_OC1_SetConfig+0x8e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <TIM_OC1_SetConfig+0xe0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d111      	bne.n	8005a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	fffeff8f 	.word	0xfffeff8f
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f023 0210 	bic.w	r2, r3, #16
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4b2e      	ldr	r3, [pc, #184]	@ (8005b88 <TIM_OC2_SetConfig+0xe4>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0320 	bic.w	r3, r3, #32
 8005aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a23      	ldr	r2, [pc, #140]	@ (8005b8c <TIM_OC2_SetConfig+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC2_SetConfig+0x68>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a22      	ldr	r2, [pc, #136]	@ (8005b90 <TIM_OC2_SetConfig+0xec>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10d      	bne.n	8005b28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <TIM_OC2_SetConfig+0xe8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_OC2_SetConfig+0x94>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <TIM_OC2_SetConfig+0xec>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d113      	bne.n	8005b60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	feff8fff 	.word	0xfeff8fff
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40010400 	.word	0x40010400

08005b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <TIM_OC3_SetConfig+0xe0>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a22      	ldr	r2, [pc, #136]	@ (8005c78 <TIM_OC3_SetConfig+0xe4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_OC3_SetConfig+0x66>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a21      	ldr	r2, [pc, #132]	@ (8005c7c <TIM_OC3_SetConfig+0xe8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10d      	bne.n	8005c16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a17      	ldr	r2, [pc, #92]	@ (8005c78 <TIM_OC3_SetConfig+0xe4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x92>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <TIM_OC3_SetConfig+0xe8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d113      	bne.n	8005c4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	fffeff8f 	.word	0xfffeff8f
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010400 	.word	0x40010400

08005c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4b1e      	ldr	r3, [pc, #120]	@ (8005d24 <TIM_OC4_SetConfig+0xa4>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	031b      	lsls	r3, r3, #12
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a13      	ldr	r2, [pc, #76]	@ (8005d28 <TIM_OC4_SetConfig+0xa8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x68>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a12      	ldr	r2, [pc, #72]	@ (8005d2c <TIM_OC4_SetConfig+0xac>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d109      	bne.n	8005cfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	feff8fff 	.word	0xfeff8fff
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400

08005d30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <TIM_OC5_SetConfig+0x98>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a12      	ldr	r2, [pc, #72]	@ (8005dcc <TIM_OC5_SetConfig+0x9c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d003      	beq.n	8005d8e <TIM_OC5_SetConfig+0x5e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a11      	ldr	r2, [pc, #68]	@ (8005dd0 <TIM_OC5_SetConfig+0xa0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d109      	bne.n	8005da2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	fffeff8f 	.word	0xfffeff8f
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005e70 <TIM_OC6_SetConfig+0x9c>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	051b      	lsls	r3, r3, #20
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a13      	ldr	r2, [pc, #76]	@ (8005e74 <TIM_OC6_SetConfig+0xa0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_OC6_SetConfig+0x60>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	@ (8005e78 <TIM_OC6_SetConfig+0xa4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d109      	bne.n	8005e48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	029b      	lsls	r3, r3, #10
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	feff8fff 	.word	0xfeff8fff
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010400 	.word	0x40010400

08005e7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 0201 	bic.w	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a28      	ldr	r2, [pc, #160]	@ (8005f48 <TIM_TI1_SetConfig+0xcc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01b      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb0:	d017      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a25      	ldr	r2, [pc, #148]	@ (8005f4c <TIM_TI1_SetConfig+0xd0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d013      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a24      	ldr	r2, [pc, #144]	@ (8005f50 <TIM_TI1_SetConfig+0xd4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00f      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a23      	ldr	r2, [pc, #140]	@ (8005f54 <TIM_TI1_SetConfig+0xd8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00b      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a22      	ldr	r2, [pc, #136]	@ (8005f58 <TIM_TI1_SetConfig+0xdc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a21      	ldr	r2, [pc, #132]	@ (8005f5c <TIM_TI1_SetConfig+0xe0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_TI1_SetConfig+0x66>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a20      	ldr	r2, [pc, #128]	@ (8005f60 <TIM_TI1_SetConfig+0xe4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d101      	bne.n	8005ee6 <TIM_TI1_SetConfig+0x6a>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <TIM_TI1_SetConfig+0x6c>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e003      	b.n	8005f06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f023 030a 	bic.w	r3, r3, #10
 8005f20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 030a 	and.w	r3, r3, #10
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40010400 	.word	0x40010400
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40001800 	.word	0x40001800

08005f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f023 030a 	bic.w	r3, r3, #10
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f023 0210 	bic.w	r2, r3, #16
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	b29b      	uxth	r3, r3
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006014:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4313      	orrs	r3, r2
 8006022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f023 0210 	bic.w	r2, r3, #16
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	031b      	lsls	r3, r3, #12
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006078:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f023 0303 	bic.w	r3, r3, #3
 80060c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80060ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006140:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006152:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	031b      	lsls	r3, r3, #12
 8006158:	b29b      	uxth	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006166:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f043 0307 	orr.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	021a      	lsls	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006218:	2302      	movs	r3, #2
 800621a:	e06d      	b.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a30      	ldr	r2, [pc, #192]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2f      	ldr	r2, [pc, #188]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d108      	bne.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006256:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a20      	ldr	r2, [pc, #128]	@ (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d022      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628e:	d01d      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1d      	ldr	r2, [pc, #116]	@ (800630c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d018      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1c      	ldr	r2, [pc, #112]	@ (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d013      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00e      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d009      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a16      	ldr	r2, [pc, #88]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d004      	beq.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a15      	ldr	r2, [pc, #84]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10c      	bne.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40010000 	.word	0x40010000
 8006308:	40010400 	.word	0x40010400
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40014000 	.word	0x40014000
 800631c:	40001800 	.word	0x40001800

08006320 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006338:	2302      	movs	r3, #2
 800633a:	e065      	b.n	8006408 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	041b      	lsls	r3, r3, #16
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a16      	ldr	r2, [pc, #88]	@ (8006414 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d115      	bne.n	80063f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	051b      	lsls	r3, r3, #20
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	40010000 	.word	0x40010000
 8006418:	40010400 	.word	0x40010400

0800641c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e040      	b.n	80064b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fb fe42 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2224      	movs	r2, #36	@ 0x24
 8006448:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa8c 	bl	8006980 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f825 	bl	80064b8 <UART_SetConfig>
 800646e:	4603      	mov	r3, r0
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e01b      	b.n	80064b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb0b 	bl	8006ac4 <UART_CheckIdleState>
 80064ae:	4603      	mov	r3, r0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4ba6      	ldr	r3, [pc, #664]	@ (800677c <UART_SetConfig+0x2c4>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a94      	ldr	r2, [pc, #592]	@ (8006780 <UART_SetConfig+0x2c8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d120      	bne.n	8006576 <UART_SetConfig+0xbe>
 8006534:	4b93      	ldr	r3, [pc, #588]	@ (8006784 <UART_SetConfig+0x2cc>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b03      	cmp	r3, #3
 8006540:	d816      	bhi.n	8006570 <UART_SetConfig+0xb8>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0x90>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006559 	.word	0x08006559
 800654c:	08006565 	.word	0x08006565
 8006550:	0800655f 	.word	0x0800655f
 8006554:	0800656b 	.word	0x0800656b
 8006558:	2301      	movs	r3, #1
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e150      	b.n	8006800 <UART_SetConfig+0x348>
 800655e:	2302      	movs	r3, #2
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e14d      	b.n	8006800 <UART_SetConfig+0x348>
 8006564:	2304      	movs	r3, #4
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e14a      	b.n	8006800 <UART_SetConfig+0x348>
 800656a:	2308      	movs	r3, #8
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e147      	b.n	8006800 <UART_SetConfig+0x348>
 8006570:	2310      	movs	r3, #16
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e144      	b.n	8006800 <UART_SetConfig+0x348>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a83      	ldr	r2, [pc, #524]	@ (8006788 <UART_SetConfig+0x2d0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d132      	bne.n	80065e6 <UART_SetConfig+0x12e>
 8006580:	4b80      	ldr	r3, [pc, #512]	@ (8006784 <UART_SetConfig+0x2cc>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006586:	f003 030c 	and.w	r3, r3, #12
 800658a:	2b0c      	cmp	r3, #12
 800658c:	d828      	bhi.n	80065e0 <UART_SetConfig+0x128>
 800658e:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <UART_SetConfig+0xdc>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065e1 	.word	0x080065e1
 800659c:	080065e1 	.word	0x080065e1
 80065a0:	080065e1 	.word	0x080065e1
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	080065e1 	.word	0x080065e1
 80065ac:	080065e1 	.word	0x080065e1
 80065b0:	080065e1 	.word	0x080065e1
 80065b4:	080065cf 	.word	0x080065cf
 80065b8:	080065e1 	.word	0x080065e1
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065e1 	.word	0x080065e1
 80065c4:	080065db 	.word	0x080065db
 80065c8:	2300      	movs	r3, #0
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e118      	b.n	8006800 <UART_SetConfig+0x348>
 80065ce:	2302      	movs	r3, #2
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e115      	b.n	8006800 <UART_SetConfig+0x348>
 80065d4:	2304      	movs	r3, #4
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e112      	b.n	8006800 <UART_SetConfig+0x348>
 80065da:	2308      	movs	r3, #8
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e10f      	b.n	8006800 <UART_SetConfig+0x348>
 80065e0:	2310      	movs	r3, #16
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e10c      	b.n	8006800 <UART_SetConfig+0x348>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a68      	ldr	r2, [pc, #416]	@ (800678c <UART_SetConfig+0x2d4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d120      	bne.n	8006632 <UART_SetConfig+0x17a>
 80065f0:	4b64      	ldr	r3, [pc, #400]	@ (8006784 <UART_SetConfig+0x2cc>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065fa:	2b30      	cmp	r3, #48	@ 0x30
 80065fc:	d013      	beq.n	8006626 <UART_SetConfig+0x16e>
 80065fe:	2b30      	cmp	r3, #48	@ 0x30
 8006600:	d814      	bhi.n	800662c <UART_SetConfig+0x174>
 8006602:	2b20      	cmp	r3, #32
 8006604:	d009      	beq.n	800661a <UART_SetConfig+0x162>
 8006606:	2b20      	cmp	r3, #32
 8006608:	d810      	bhi.n	800662c <UART_SetConfig+0x174>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <UART_SetConfig+0x15c>
 800660e:	2b10      	cmp	r3, #16
 8006610:	d006      	beq.n	8006620 <UART_SetConfig+0x168>
 8006612:	e00b      	b.n	800662c <UART_SetConfig+0x174>
 8006614:	2300      	movs	r3, #0
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e0f2      	b.n	8006800 <UART_SetConfig+0x348>
 800661a:	2302      	movs	r3, #2
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e0ef      	b.n	8006800 <UART_SetConfig+0x348>
 8006620:	2304      	movs	r3, #4
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e0ec      	b.n	8006800 <UART_SetConfig+0x348>
 8006626:	2308      	movs	r3, #8
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e0e9      	b.n	8006800 <UART_SetConfig+0x348>
 800662c:	2310      	movs	r3, #16
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e0e6      	b.n	8006800 <UART_SetConfig+0x348>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a56      	ldr	r2, [pc, #344]	@ (8006790 <UART_SetConfig+0x2d8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d120      	bne.n	800667e <UART_SetConfig+0x1c6>
 800663c:	4b51      	ldr	r3, [pc, #324]	@ (8006784 <UART_SetConfig+0x2cc>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006646:	2bc0      	cmp	r3, #192	@ 0xc0
 8006648:	d013      	beq.n	8006672 <UART_SetConfig+0x1ba>
 800664a:	2bc0      	cmp	r3, #192	@ 0xc0
 800664c:	d814      	bhi.n	8006678 <UART_SetConfig+0x1c0>
 800664e:	2b80      	cmp	r3, #128	@ 0x80
 8006650:	d009      	beq.n	8006666 <UART_SetConfig+0x1ae>
 8006652:	2b80      	cmp	r3, #128	@ 0x80
 8006654:	d810      	bhi.n	8006678 <UART_SetConfig+0x1c0>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <UART_SetConfig+0x1a8>
 800665a:	2b40      	cmp	r3, #64	@ 0x40
 800665c:	d006      	beq.n	800666c <UART_SetConfig+0x1b4>
 800665e:	e00b      	b.n	8006678 <UART_SetConfig+0x1c0>
 8006660:	2300      	movs	r3, #0
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e0cc      	b.n	8006800 <UART_SetConfig+0x348>
 8006666:	2302      	movs	r3, #2
 8006668:	77fb      	strb	r3, [r7, #31]
 800666a:	e0c9      	b.n	8006800 <UART_SetConfig+0x348>
 800666c:	2304      	movs	r3, #4
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e0c6      	b.n	8006800 <UART_SetConfig+0x348>
 8006672:	2308      	movs	r3, #8
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e0c3      	b.n	8006800 <UART_SetConfig+0x348>
 8006678:	2310      	movs	r3, #16
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e0c0      	b.n	8006800 <UART_SetConfig+0x348>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a44      	ldr	r2, [pc, #272]	@ (8006794 <UART_SetConfig+0x2dc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d125      	bne.n	80066d4 <UART_SetConfig+0x21c>
 8006688:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <UART_SetConfig+0x2cc>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006696:	d017      	beq.n	80066c8 <UART_SetConfig+0x210>
 8006698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800669c:	d817      	bhi.n	80066ce <UART_SetConfig+0x216>
 800669e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a2:	d00b      	beq.n	80066bc <UART_SetConfig+0x204>
 80066a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a8:	d811      	bhi.n	80066ce <UART_SetConfig+0x216>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <UART_SetConfig+0x1fe>
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b2:	d006      	beq.n	80066c2 <UART_SetConfig+0x20a>
 80066b4:	e00b      	b.n	80066ce <UART_SetConfig+0x216>
 80066b6:	2300      	movs	r3, #0
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e0a1      	b.n	8006800 <UART_SetConfig+0x348>
 80066bc:	2302      	movs	r3, #2
 80066be:	77fb      	strb	r3, [r7, #31]
 80066c0:	e09e      	b.n	8006800 <UART_SetConfig+0x348>
 80066c2:	2304      	movs	r3, #4
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e09b      	b.n	8006800 <UART_SetConfig+0x348>
 80066c8:	2308      	movs	r3, #8
 80066ca:	77fb      	strb	r3, [r7, #31]
 80066cc:	e098      	b.n	8006800 <UART_SetConfig+0x348>
 80066ce:	2310      	movs	r3, #16
 80066d0:	77fb      	strb	r3, [r7, #31]
 80066d2:	e095      	b.n	8006800 <UART_SetConfig+0x348>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006798 <UART_SetConfig+0x2e0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d125      	bne.n	800672a <UART_SetConfig+0x272>
 80066de:	4b29      	ldr	r3, [pc, #164]	@ (8006784 <UART_SetConfig+0x2cc>)
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ec:	d017      	beq.n	800671e <UART_SetConfig+0x266>
 80066ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066f2:	d817      	bhi.n	8006724 <UART_SetConfig+0x26c>
 80066f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f8:	d00b      	beq.n	8006712 <UART_SetConfig+0x25a>
 80066fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066fe:	d811      	bhi.n	8006724 <UART_SetConfig+0x26c>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <UART_SetConfig+0x254>
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006708:	d006      	beq.n	8006718 <UART_SetConfig+0x260>
 800670a:	e00b      	b.n	8006724 <UART_SetConfig+0x26c>
 800670c:	2301      	movs	r3, #1
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e076      	b.n	8006800 <UART_SetConfig+0x348>
 8006712:	2302      	movs	r3, #2
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e073      	b.n	8006800 <UART_SetConfig+0x348>
 8006718:	2304      	movs	r3, #4
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e070      	b.n	8006800 <UART_SetConfig+0x348>
 800671e:	2308      	movs	r3, #8
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e06d      	b.n	8006800 <UART_SetConfig+0x348>
 8006724:	2310      	movs	r3, #16
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e06a      	b.n	8006800 <UART_SetConfig+0x348>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1b      	ldr	r2, [pc, #108]	@ (800679c <UART_SetConfig+0x2e4>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d138      	bne.n	80067a6 <UART_SetConfig+0x2ee>
 8006734:	4b13      	ldr	r3, [pc, #76]	@ (8006784 <UART_SetConfig+0x2cc>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800673e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006742:	d017      	beq.n	8006774 <UART_SetConfig+0x2bc>
 8006744:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006748:	d82a      	bhi.n	80067a0 <UART_SetConfig+0x2e8>
 800674a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674e:	d00b      	beq.n	8006768 <UART_SetConfig+0x2b0>
 8006750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006754:	d824      	bhi.n	80067a0 <UART_SetConfig+0x2e8>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <UART_SetConfig+0x2aa>
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675e:	d006      	beq.n	800676e <UART_SetConfig+0x2b6>
 8006760:	e01e      	b.n	80067a0 <UART_SetConfig+0x2e8>
 8006762:	2300      	movs	r3, #0
 8006764:	77fb      	strb	r3, [r7, #31]
 8006766:	e04b      	b.n	8006800 <UART_SetConfig+0x348>
 8006768:	2302      	movs	r3, #2
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e048      	b.n	8006800 <UART_SetConfig+0x348>
 800676e:	2304      	movs	r3, #4
 8006770:	77fb      	strb	r3, [r7, #31]
 8006772:	e045      	b.n	8006800 <UART_SetConfig+0x348>
 8006774:	2308      	movs	r3, #8
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	e042      	b.n	8006800 <UART_SetConfig+0x348>
 800677a:	bf00      	nop
 800677c:	efff69f3 	.word	0xefff69f3
 8006780:	40011000 	.word	0x40011000
 8006784:	40023800 	.word	0x40023800
 8006788:	40004400 	.word	0x40004400
 800678c:	40004800 	.word	0x40004800
 8006790:	40004c00 	.word	0x40004c00
 8006794:	40005000 	.word	0x40005000
 8006798:	40011400 	.word	0x40011400
 800679c:	40007800 	.word	0x40007800
 80067a0:	2310      	movs	r3, #16
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e02c      	b.n	8006800 <UART_SetConfig+0x348>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a72      	ldr	r2, [pc, #456]	@ (8006974 <UART_SetConfig+0x4bc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d125      	bne.n	80067fc <UART_SetConfig+0x344>
 80067b0:	4b71      	ldr	r3, [pc, #452]	@ (8006978 <UART_SetConfig+0x4c0>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067be:	d017      	beq.n	80067f0 <UART_SetConfig+0x338>
 80067c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067c4:	d817      	bhi.n	80067f6 <UART_SetConfig+0x33e>
 80067c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ca:	d00b      	beq.n	80067e4 <UART_SetConfig+0x32c>
 80067cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d0:	d811      	bhi.n	80067f6 <UART_SetConfig+0x33e>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <UART_SetConfig+0x326>
 80067d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067da:	d006      	beq.n	80067ea <UART_SetConfig+0x332>
 80067dc:	e00b      	b.n	80067f6 <UART_SetConfig+0x33e>
 80067de:	2300      	movs	r3, #0
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e00d      	b.n	8006800 <UART_SetConfig+0x348>
 80067e4:	2302      	movs	r3, #2
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e00a      	b.n	8006800 <UART_SetConfig+0x348>
 80067ea:	2304      	movs	r3, #4
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e007      	b.n	8006800 <UART_SetConfig+0x348>
 80067f0:	2308      	movs	r3, #8
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e004      	b.n	8006800 <UART_SetConfig+0x348>
 80067f6:	2310      	movs	r3, #16
 80067f8:	77fb      	strb	r3, [r7, #31]
 80067fa:	e001      	b.n	8006800 <UART_SetConfig+0x348>
 80067fc:	2310      	movs	r3, #16
 80067fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006808:	d15b      	bne.n	80068c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800680a:	7ffb      	ldrb	r3, [r7, #31]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d828      	bhi.n	8006862 <UART_SetConfig+0x3aa>
 8006810:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <UART_SetConfig+0x360>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	08006863 	.word	0x08006863
 8006828:	08006853 	.word	0x08006853
 800682c:	08006863 	.word	0x08006863
 8006830:	08006863 	.word	0x08006863
 8006834:	08006863 	.word	0x08006863
 8006838:	0800685b 	.word	0x0800685b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fd feea 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 8006840:	61b8      	str	r0, [r7, #24]
        break;
 8006842:	e013      	b.n	800686c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006844:	f7fd fefa 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8006848:	61b8      	str	r0, [r7, #24]
        break;
 800684a:	e00f      	b.n	800686c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800684c:	4b4b      	ldr	r3, [pc, #300]	@ (800697c <UART_SetConfig+0x4c4>)
 800684e:	61bb      	str	r3, [r7, #24]
        break;
 8006850:	e00c      	b.n	800686c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fd fdcd 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 8006856:	61b8      	str	r0, [r7, #24]
        break;
 8006858:	e008      	b.n	800686c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800685e:	61bb      	str	r3, [r7, #24]
        break;
 8006860:	e004      	b.n	800686c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	77bb      	strb	r3, [r7, #30]
        break;
 800686a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d074      	beq.n	800695c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	005a      	lsls	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	441a      	add	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	d916      	bls.n	80068bc <UART_SetConfig+0x404>
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006894:	d212      	bcs.n	80068bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f023 030f 	bic.w	r3, r3, #15
 800689e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	89fb      	ldrh	r3, [r7, #14]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	89fa      	ldrh	r2, [r7, #14]
 80068b8:	60da      	str	r2, [r3, #12]
 80068ba:	e04f      	b.n	800695c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	77bb      	strb	r3, [r7, #30]
 80068c0:	e04c      	b.n	800695c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d828      	bhi.n	800691a <UART_SetConfig+0x462>
 80068c8:	a201      	add	r2, pc, #4	@ (adr r2, 80068d0 <UART_SetConfig+0x418>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068f5 	.word	0x080068f5
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	08006905 	.word	0x08006905
 80068dc:	0800691b 	.word	0x0800691b
 80068e0:	0800690b 	.word	0x0800690b
 80068e4:	0800691b 	.word	0x0800691b
 80068e8:	0800691b 	.word	0x0800691b
 80068ec:	0800691b 	.word	0x0800691b
 80068f0:	08006913 	.word	0x08006913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f4:	f7fd fe8e 	bl	8004614 <HAL_RCC_GetPCLK1Freq>
 80068f8:	61b8      	str	r0, [r7, #24]
        break;
 80068fa:	e013      	b.n	8006924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068fc:	f7fd fe9e 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8006900:	61b8      	str	r0, [r7, #24]
        break;
 8006902:	e00f      	b.n	8006924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <UART_SetConfig+0x4c4>)
 8006906:	61bb      	str	r3, [r7, #24]
        break;
 8006908:	e00c      	b.n	8006924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800690a:	f7fd fd71 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 800690e:	61b8      	str	r0, [r7, #24]
        break;
 8006910:	e008      	b.n	8006924 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006916:	61bb      	str	r3, [r7, #24]
        break;
 8006918:	e004      	b.n	8006924 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	77bb      	strb	r3, [r7, #30]
        break;
 8006922:	bf00      	nop
    }

    if (pclk != 0U)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	085a      	lsrs	r2, r3, #1
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	fbb2 f3f3 	udiv	r3, r2, r3
 800693c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b0f      	cmp	r3, #15
 8006942:	d909      	bls.n	8006958 <UART_SetConfig+0x4a0>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694a:	d205      	bcs.n	8006958 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	b29a      	uxth	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	e001      	b.n	800695c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006968:	7fbb      	ldrb	r3, [r7, #30]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40007c00 	.word	0x40007c00
 8006978:	40023800 	.word	0x40023800
 800697c:	00f42400 	.word	0x00f42400

08006980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7e:	d10a      	bne.n	8006a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b098      	sub	sp, #96	@ 0x60
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad4:	f7fb fdf6 	bl	80026c4 <HAL_GetTick>
 8006ad8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d12e      	bne.n	8006b46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af0:	2200      	movs	r2, #0
 8006af2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f88c 	bl	8006c14 <UART_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d021      	beq.n	8006b46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e062      	b.n	8006c0c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d149      	bne.n	8006be8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f856 	bl	8006c14 <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d03c      	beq.n	8006be8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e5      	bne.n	8006ba0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e011      	b.n	8006c0c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3758      	adds	r7, #88	@ 0x58
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c24:	e04f      	b.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2c:	d04b      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2e:	f7fb fd49 	bl	80026c4 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d302      	bcc.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e04e      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d037      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b80      	cmp	r3, #128	@ 0x80
 8006c5a:	d034      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b40      	cmp	r3, #64	@ 0x40
 8006c60:	d031      	beq.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d110      	bne.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2208      	movs	r2, #8
 8006c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f838 	bl	8006cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2208      	movs	r2, #8
 8006c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e029      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ca0:	d111      	bne.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f81e 	bl	8006cee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e00f      	b.n	8006ce6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	bf0c      	ite	eq
 8006cd6:	2301      	moveq	r3, #1
 8006cd8:	2300      	movne	r3, #0
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d0a0      	beq.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b095      	sub	sp, #84	@ 0x54
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3308      	adds	r3, #8
 8006d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d118      	bne.n	8006d96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f023 0310 	bic.w	r3, r3, #16
 8006d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6979      	ldr	r1, [r7, #20]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e6      	bne.n	8006d64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006daa:	bf00      	nop
 8006dac:	3754      	adds	r7, #84	@ 0x54
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <std>:
 8006db8:	2300      	movs	r3, #0
 8006dba:	b510      	push	{r4, lr}
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dc6:	6083      	str	r3, [r0, #8]
 8006dc8:	8181      	strh	r1, [r0, #12]
 8006dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dcc:	81c2      	strh	r2, [r0, #14]
 8006dce:	6183      	str	r3, [r0, #24]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	305c      	adds	r0, #92	@ 0x5c
 8006dd6:	f000 f9f9 	bl	80071cc <memset>
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <std+0x58>)
 8006ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dde:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <std+0x5c>)
 8006de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006de2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e18 <std+0x60>)
 8006de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006de6:	4b0d      	ldr	r3, [pc, #52]	@ (8006e1c <std+0x64>)
 8006de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <std+0x68>)
 8006dec:	6224      	str	r4, [r4, #32]
 8006dee:	429c      	cmp	r4, r3
 8006df0:	d006      	beq.n	8006e00 <std+0x48>
 8006df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006df6:	4294      	cmp	r4, r2
 8006df8:	d002      	beq.n	8006e00 <std+0x48>
 8006dfa:	33d0      	adds	r3, #208	@ 0xd0
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d105      	bne.n	8006e0c <std+0x54>
 8006e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e08:	f000 ba58 	b.w	80072bc <__retarget_lock_init_recursive>
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop
 8006e10:	0800701d 	.word	0x0800701d
 8006e14:	0800703f 	.word	0x0800703f
 8006e18:	08007077 	.word	0x08007077
 8006e1c:	0800709b 	.word	0x0800709b
 8006e20:	2000069c 	.word	0x2000069c

08006e24 <stdio_exit_handler>:
 8006e24:	4a02      	ldr	r2, [pc, #8]	@ (8006e30 <stdio_exit_handler+0xc>)
 8006e26:	4903      	ldr	r1, [pc, #12]	@ (8006e34 <stdio_exit_handler+0x10>)
 8006e28:	4803      	ldr	r0, [pc, #12]	@ (8006e38 <stdio_exit_handler+0x14>)
 8006e2a:	f000 b869 	b.w	8006f00 <_fwalk_sglue>
 8006e2e:	bf00      	nop
 8006e30:	2000000c 	.word	0x2000000c
 8006e34:	08007b5d 	.word	0x08007b5d
 8006e38:	2000001c 	.word	0x2000001c

08006e3c <cleanup_stdio>:
 8006e3c:	6841      	ldr	r1, [r0, #4]
 8006e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <cleanup_stdio+0x34>)
 8006e40:	4299      	cmp	r1, r3
 8006e42:	b510      	push	{r4, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	d001      	beq.n	8006e4c <cleanup_stdio+0x10>
 8006e48:	f000 fe88 	bl	8007b5c <_fflush_r>
 8006e4c:	68a1      	ldr	r1, [r4, #8]
 8006e4e:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <cleanup_stdio+0x38>)
 8006e50:	4299      	cmp	r1, r3
 8006e52:	d002      	beq.n	8006e5a <cleanup_stdio+0x1e>
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fe81 	bl	8007b5c <_fflush_r>
 8006e5a:	68e1      	ldr	r1, [r4, #12]
 8006e5c:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <cleanup_stdio+0x3c>)
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	d004      	beq.n	8006e6c <cleanup_stdio+0x30>
 8006e62:	4620      	mov	r0, r4
 8006e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e68:	f000 be78 	b.w	8007b5c <_fflush_r>
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	2000069c 	.word	0x2000069c
 8006e74:	20000704 	.word	0x20000704
 8006e78:	2000076c 	.word	0x2000076c

08006e7c <global_stdio_init.part.0>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006eac <global_stdio_init.part.0+0x30>)
 8006e80:	4c0b      	ldr	r4, [pc, #44]	@ (8006eb0 <global_stdio_init.part.0+0x34>)
 8006e82:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb4 <global_stdio_init.part.0+0x38>)
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	4620      	mov	r0, r4
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2104      	movs	r1, #4
 8006e8c:	f7ff ff94 	bl	8006db8 <std>
 8006e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e94:	2201      	movs	r2, #1
 8006e96:	2109      	movs	r1, #9
 8006e98:	f7ff ff8e 	bl	8006db8 <std>
 8006e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea6:	2112      	movs	r1, #18
 8006ea8:	f7ff bf86 	b.w	8006db8 <std>
 8006eac:	200007d4 	.word	0x200007d4
 8006eb0:	2000069c 	.word	0x2000069c
 8006eb4:	08006e25 	.word	0x08006e25

08006eb8 <__sfp_lock_acquire>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	@ (8006ec0 <__sfp_lock_acquire+0x8>)
 8006eba:	f000 ba00 	b.w	80072be <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	200007dd 	.word	0x200007dd

08006ec4 <__sfp_lock_release>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	@ (8006ecc <__sfp_lock_release+0x8>)
 8006ec6:	f000 b9fb 	b.w	80072c0 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	200007dd 	.word	0x200007dd

08006ed0 <__sinit>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	f7ff fff0 	bl	8006eb8 <__sfp_lock_acquire>
 8006ed8:	6a23      	ldr	r3, [r4, #32]
 8006eda:	b11b      	cbz	r3, 8006ee4 <__sinit+0x14>
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	f7ff bff0 	b.w	8006ec4 <__sfp_lock_release>
 8006ee4:	4b04      	ldr	r3, [pc, #16]	@ (8006ef8 <__sinit+0x28>)
 8006ee6:	6223      	str	r3, [r4, #32]
 8006ee8:	4b04      	ldr	r3, [pc, #16]	@ (8006efc <__sinit+0x2c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f5      	bne.n	8006edc <__sinit+0xc>
 8006ef0:	f7ff ffc4 	bl	8006e7c <global_stdio_init.part.0>
 8006ef4:	e7f2      	b.n	8006edc <__sinit+0xc>
 8006ef6:	bf00      	nop
 8006ef8:	08006e3d 	.word	0x08006e3d
 8006efc:	200007d4 	.word	0x200007d4

08006f00 <_fwalk_sglue>:
 8006f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f04:	4607      	mov	r7, r0
 8006f06:	4688      	mov	r8, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f10:	f1b9 0901 	subs.w	r9, r9, #1
 8006f14:	d505      	bpl.n	8006f22 <_fwalk_sglue+0x22>
 8006f16:	6824      	ldr	r4, [r4, #0]
 8006f18:	2c00      	cmp	r4, #0
 8006f1a:	d1f7      	bne.n	8006f0c <_fwalk_sglue+0xc>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d907      	bls.n	8006f38 <_fwalk_sglue+0x38>
 8006f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	d003      	beq.n	8006f38 <_fwalk_sglue+0x38>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c0      	blx	r8
 8006f36:	4306      	orrs	r6, r0
 8006f38:	3568      	adds	r5, #104	@ 0x68
 8006f3a:	e7e9      	b.n	8006f10 <_fwalk_sglue+0x10>

08006f3c <iprintf>:
 8006f3c:	b40f      	push	{r0, r1, r2, r3}
 8006f3e:	b507      	push	{r0, r1, r2, lr}
 8006f40:	4906      	ldr	r1, [pc, #24]	@ (8006f5c <iprintf+0x20>)
 8006f42:	ab04      	add	r3, sp, #16
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f4a:	6881      	ldr	r1, [r0, #8]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	f000 fadb 	bl	8007508 <_vfiprintf_r>
 8006f52:	b003      	add	sp, #12
 8006f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f58:	b004      	add	sp, #16
 8006f5a:	4770      	bx	lr
 8006f5c:	20000018 	.word	0x20000018

08006f60 <_puts_r>:
 8006f60:	6a03      	ldr	r3, [r0, #32]
 8006f62:	b570      	push	{r4, r5, r6, lr}
 8006f64:	6884      	ldr	r4, [r0, #8]
 8006f66:	4605      	mov	r5, r0
 8006f68:	460e      	mov	r6, r1
 8006f6a:	b90b      	cbnz	r3, 8006f70 <_puts_r+0x10>
 8006f6c:	f7ff ffb0 	bl	8006ed0 <__sinit>
 8006f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f72:	07db      	lsls	r3, r3, #31
 8006f74:	d405      	bmi.n	8006f82 <_puts_r+0x22>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	0598      	lsls	r0, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_puts_r+0x22>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7e:	f000 f99e 	bl	80072be <__retarget_lock_acquire_recursive>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	0719      	lsls	r1, r3, #28
 8006f86:	d502      	bpl.n	8006f8e <_puts_r+0x2e>
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d135      	bne.n	8006ffa <_puts_r+0x9a>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 f8c5 	bl	8007120 <__swsetup_r>
 8006f96:	b380      	cbz	r0, 8006ffa <_puts_r+0x9a>
 8006f98:	f04f 35ff 	mov.w	r5, #4294967295
 8006f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f9e:	07da      	lsls	r2, r3, #31
 8006fa0:	d405      	bmi.n	8006fae <_puts_r+0x4e>
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	059b      	lsls	r3, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_puts_r+0x4e>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006faa:	f000 f989 	bl	80072c0 <__retarget_lock_release_recursive>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da04      	bge.n	8006fc0 <_puts_r+0x60>
 8006fb6:	69a2      	ldr	r2, [r4, #24]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	dc17      	bgt.n	8006fec <_puts_r+0x8c>
 8006fbc:	290a      	cmp	r1, #10
 8006fbe:	d015      	beq.n	8006fec <_puts_r+0x8c>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	7019      	strb	r1, [r3, #0]
 8006fc8:	68a3      	ldr	r3, [r4, #8]
 8006fca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	60a3      	str	r3, [r4, #8]
 8006fd2:	2900      	cmp	r1, #0
 8006fd4:	d1ed      	bne.n	8006fb2 <_puts_r+0x52>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da11      	bge.n	8006ffe <_puts_r+0x9e>
 8006fda:	4622      	mov	r2, r4
 8006fdc:	210a      	movs	r1, #10
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 f85f 	bl	80070a2 <__swbuf_r>
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d0d7      	beq.n	8006f98 <_puts_r+0x38>
 8006fe8:	250a      	movs	r5, #10
 8006fea:	e7d7      	b.n	8006f9c <_puts_r+0x3c>
 8006fec:	4622      	mov	r2, r4
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 f857 	bl	80070a2 <__swbuf_r>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d1e7      	bne.n	8006fc8 <_puts_r+0x68>
 8006ff8:	e7ce      	b.n	8006f98 <_puts_r+0x38>
 8006ffa:	3e01      	subs	r6, #1
 8006ffc:	e7e4      	b.n	8006fc8 <_puts_r+0x68>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	220a      	movs	r2, #10
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e7ee      	b.n	8006fe8 <_puts_r+0x88>
	...

0800700c <puts>:
 800700c:	4b02      	ldr	r3, [pc, #8]	@ (8007018 <puts+0xc>)
 800700e:	4601      	mov	r1, r0
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	f7ff bfa5 	b.w	8006f60 <_puts_r>
 8007016:	bf00      	nop
 8007018:	20000018 	.word	0x20000018

0800701c <__sread>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	f000 f8fc 	bl	8007220 <_read_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	bfab      	itete	ge
 800702c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800702e:	89a3      	ldrhlt	r3, [r4, #12]
 8007030:	181b      	addge	r3, r3, r0
 8007032:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007036:	bfac      	ite	ge
 8007038:	6563      	strge	r3, [r4, #84]	@ 0x54
 800703a:	81a3      	strhlt	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__swrite>:
 800703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	461f      	mov	r7, r3
 8007044:	898b      	ldrh	r3, [r1, #12]
 8007046:	05db      	lsls	r3, r3, #23
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	4616      	mov	r6, r2
 800704e:	d505      	bpl.n	800705c <__swrite+0x1e>
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	2302      	movs	r3, #2
 8007056:	2200      	movs	r2, #0
 8007058:	f000 f8d0 	bl	80071fc <_lseek_r>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007062:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	4628      	mov	r0, r5
 800706e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007072:	f000 b8e7 	b.w	8007244 <_write_r>

08007076 <__sseek>:
 8007076:	b510      	push	{r4, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 f8bd 	bl	80071fc <_lseek_r>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	bf15      	itete	ne
 8007088:	6560      	strne	r0, [r4, #84]	@ 0x54
 800708a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800708e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007092:	81a3      	strheq	r3, [r4, #12]
 8007094:	bf18      	it	ne
 8007096:	81a3      	strhne	r3, [r4, #12]
 8007098:	bd10      	pop	{r4, pc}

0800709a <__sclose>:
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 b89d 	b.w	80071dc <_close_r>

080070a2 <__swbuf_r>:
 80070a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a4:	460e      	mov	r6, r1
 80070a6:	4614      	mov	r4, r2
 80070a8:	4605      	mov	r5, r0
 80070aa:	b118      	cbz	r0, 80070b4 <__swbuf_r+0x12>
 80070ac:	6a03      	ldr	r3, [r0, #32]
 80070ae:	b90b      	cbnz	r3, 80070b4 <__swbuf_r+0x12>
 80070b0:	f7ff ff0e 	bl	8006ed0 <__sinit>
 80070b4:	69a3      	ldr	r3, [r4, #24]
 80070b6:	60a3      	str	r3, [r4, #8]
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	071a      	lsls	r2, r3, #28
 80070bc:	d501      	bpl.n	80070c2 <__swbuf_r+0x20>
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	b943      	cbnz	r3, 80070d4 <__swbuf_r+0x32>
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 f82b 	bl	8007120 <__swsetup_r>
 80070ca:	b118      	cbz	r0, 80070d4 <__swbuf_r+0x32>
 80070cc:	f04f 37ff 	mov.w	r7, #4294967295
 80070d0:	4638      	mov	r0, r7
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	6922      	ldr	r2, [r4, #16]
 80070d8:	1a98      	subs	r0, r3, r2
 80070da:	6963      	ldr	r3, [r4, #20]
 80070dc:	b2f6      	uxtb	r6, r6
 80070de:	4283      	cmp	r3, r0
 80070e0:	4637      	mov	r7, r6
 80070e2:	dc05      	bgt.n	80070f0 <__swbuf_r+0x4e>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fd38 	bl	8007b5c <_fflush_r>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d1ed      	bne.n	80070cc <__swbuf_r+0x2a>
 80070f0:	68a3      	ldr	r3, [r4, #8]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	60a3      	str	r3, [r4, #8]
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	701e      	strb	r6, [r3, #0]
 80070fe:	6962      	ldr	r2, [r4, #20]
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	429a      	cmp	r2, r3
 8007104:	d004      	beq.n	8007110 <__swbuf_r+0x6e>
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	07db      	lsls	r3, r3, #31
 800710a:	d5e1      	bpl.n	80070d0 <__swbuf_r+0x2e>
 800710c:	2e0a      	cmp	r6, #10
 800710e:	d1df      	bne.n	80070d0 <__swbuf_r+0x2e>
 8007110:	4621      	mov	r1, r4
 8007112:	4628      	mov	r0, r5
 8007114:	f000 fd22 	bl	8007b5c <_fflush_r>
 8007118:	2800      	cmp	r0, #0
 800711a:	d0d9      	beq.n	80070d0 <__swbuf_r+0x2e>
 800711c:	e7d6      	b.n	80070cc <__swbuf_r+0x2a>
	...

08007120 <__swsetup_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4b29      	ldr	r3, [pc, #164]	@ (80071c8 <__swsetup_r+0xa8>)
 8007124:	4605      	mov	r5, r0
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	460c      	mov	r4, r1
 800712a:	b118      	cbz	r0, 8007134 <__swsetup_r+0x14>
 800712c:	6a03      	ldr	r3, [r0, #32]
 800712e:	b90b      	cbnz	r3, 8007134 <__swsetup_r+0x14>
 8007130:	f7ff fece 	bl	8006ed0 <__sinit>
 8007134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007138:	0719      	lsls	r1, r3, #28
 800713a:	d422      	bmi.n	8007182 <__swsetup_r+0x62>
 800713c:	06da      	lsls	r2, r3, #27
 800713e:	d407      	bmi.n	8007150 <__swsetup_r+0x30>
 8007140:	2209      	movs	r2, #9
 8007142:	602a      	str	r2, [r5, #0]
 8007144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	e033      	b.n	80071b8 <__swsetup_r+0x98>
 8007150:	0758      	lsls	r0, r3, #29
 8007152:	d512      	bpl.n	800717a <__swsetup_r+0x5a>
 8007154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007156:	b141      	cbz	r1, 800716a <__swsetup_r+0x4a>
 8007158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800715c:	4299      	cmp	r1, r3
 800715e:	d002      	beq.n	8007166 <__swsetup_r+0x46>
 8007160:	4628      	mov	r0, r5
 8007162:	f000 f8af 	bl	80072c4 <_free_r>
 8007166:	2300      	movs	r3, #0
 8007168:	6363      	str	r3, [r4, #52]	@ 0x34
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	2300      	movs	r3, #0
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	6923      	ldr	r3, [r4, #16]
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	89a3      	ldrh	r3, [r4, #12]
 800717c:	f043 0308 	orr.w	r3, r3, #8
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	6923      	ldr	r3, [r4, #16]
 8007184:	b94b      	cbnz	r3, 800719a <__swsetup_r+0x7a>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800718c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007190:	d003      	beq.n	800719a <__swsetup_r+0x7a>
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 fd2f 	bl	8007bf8 <__smakebuf_r>
 800719a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800719e:	f013 0201 	ands.w	r2, r3, #1
 80071a2:	d00a      	beq.n	80071ba <__swsetup_r+0x9a>
 80071a4:	2200      	movs	r2, #0
 80071a6:	60a2      	str	r2, [r4, #8]
 80071a8:	6962      	ldr	r2, [r4, #20]
 80071aa:	4252      	negs	r2, r2
 80071ac:	61a2      	str	r2, [r4, #24]
 80071ae:	6922      	ldr	r2, [r4, #16]
 80071b0:	b942      	cbnz	r2, 80071c4 <__swsetup_r+0xa4>
 80071b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071b6:	d1c5      	bne.n	8007144 <__swsetup_r+0x24>
 80071b8:	bd38      	pop	{r3, r4, r5, pc}
 80071ba:	0799      	lsls	r1, r3, #30
 80071bc:	bf58      	it	pl
 80071be:	6962      	ldrpl	r2, [r4, #20]
 80071c0:	60a2      	str	r2, [r4, #8]
 80071c2:	e7f4      	b.n	80071ae <__swsetup_r+0x8e>
 80071c4:	2000      	movs	r0, #0
 80071c6:	e7f7      	b.n	80071b8 <__swsetup_r+0x98>
 80071c8:	20000018 	.word	0x20000018

080071cc <memset>:
 80071cc:	4402      	add	r2, r0
 80071ce:	4603      	mov	r3, r0
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d100      	bne.n	80071d6 <memset+0xa>
 80071d4:	4770      	bx	lr
 80071d6:	f803 1b01 	strb.w	r1, [r3], #1
 80071da:	e7f9      	b.n	80071d0 <memset+0x4>

080071dc <_close_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4d06      	ldr	r5, [pc, #24]	@ (80071f8 <_close_r+0x1c>)
 80071e0:	2300      	movs	r3, #0
 80071e2:	4604      	mov	r4, r0
 80071e4:	4608      	mov	r0, r1
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	f7fb f975 	bl	80024d6 <_close>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_close_r+0x1a>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_close_r+0x1a>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	200007d8 	.word	0x200007d8

080071fc <_lseek_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	@ (800721c <_lseek_r+0x20>)
 8007200:	4604      	mov	r4, r0
 8007202:	4608      	mov	r0, r1
 8007204:	4611      	mov	r1, r2
 8007206:	2200      	movs	r2, #0
 8007208:	602a      	str	r2, [r5, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	f7fb f98a 	bl	8002524 <_lseek>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_lseek_r+0x1e>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_lseek_r+0x1e>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	200007d8 	.word	0x200007d8

08007220 <_read_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d07      	ldr	r5, [pc, #28]	@ (8007240 <_read_r+0x20>)
 8007224:	4604      	mov	r4, r0
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	2200      	movs	r2, #0
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7fb f934 	bl	800249c <_read>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_read_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_read_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	200007d8 	.word	0x200007d8

08007244 <_write_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d07      	ldr	r5, [pc, #28]	@ (8007264 <_write_r+0x20>)
 8007248:	4604      	mov	r4, r0
 800724a:	4608      	mov	r0, r1
 800724c:	4611      	mov	r1, r2
 800724e:	2200      	movs	r2, #0
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7f9 f9e3 	bl	800061e <_write>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_write_r+0x1e>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_write_r+0x1e>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	200007d8 	.word	0x200007d8

08007268 <__errno>:
 8007268:	4b01      	ldr	r3, [pc, #4]	@ (8007270 <__errno+0x8>)
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000018 	.word	0x20000018

08007274 <__libc_init_array>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4d0d      	ldr	r5, [pc, #52]	@ (80072ac <__libc_init_array+0x38>)
 8007278:	4c0d      	ldr	r4, [pc, #52]	@ (80072b0 <__libc_init_array+0x3c>)
 800727a:	1b64      	subs	r4, r4, r5
 800727c:	10a4      	asrs	r4, r4, #2
 800727e:	2600      	movs	r6, #0
 8007280:	42a6      	cmp	r6, r4
 8007282:	d109      	bne.n	8007298 <__libc_init_array+0x24>
 8007284:	4d0b      	ldr	r5, [pc, #44]	@ (80072b4 <__libc_init_array+0x40>)
 8007286:	4c0c      	ldr	r4, [pc, #48]	@ (80072b8 <__libc_init_array+0x44>)
 8007288:	f000 fd24 	bl	8007cd4 <_init>
 800728c:	1b64      	subs	r4, r4, r5
 800728e:	10a4      	asrs	r4, r4, #2
 8007290:	2600      	movs	r6, #0
 8007292:	42a6      	cmp	r6, r4
 8007294:	d105      	bne.n	80072a2 <__libc_init_array+0x2e>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f855 3b04 	ldr.w	r3, [r5], #4
 800729c:	4798      	blx	r3
 800729e:	3601      	adds	r6, #1
 80072a0:	e7ee      	b.n	8007280 <__libc_init_array+0xc>
 80072a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a6:	4798      	blx	r3
 80072a8:	3601      	adds	r6, #1
 80072aa:	e7f2      	b.n	8007292 <__libc_init_array+0x1e>
 80072ac:	08007dcc 	.word	0x08007dcc
 80072b0:	08007dcc 	.word	0x08007dcc
 80072b4:	08007dcc 	.word	0x08007dcc
 80072b8:	08007dd0 	.word	0x08007dd0

080072bc <__retarget_lock_init_recursive>:
 80072bc:	4770      	bx	lr

080072be <__retarget_lock_acquire_recursive>:
 80072be:	4770      	bx	lr

080072c0 <__retarget_lock_release_recursive>:
 80072c0:	4770      	bx	lr
	...

080072c4 <_free_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4605      	mov	r5, r0
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d041      	beq.n	8007350 <_free_r+0x8c>
 80072cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d0:	1f0c      	subs	r4, r1, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bfb8      	it	lt
 80072d6:	18e4      	addlt	r4, r4, r3
 80072d8:	f000 f8e0 	bl	800749c <__malloc_lock>
 80072dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007354 <_free_r+0x90>)
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	b933      	cbnz	r3, 80072f0 <_free_r+0x2c>
 80072e2:	6063      	str	r3, [r4, #4]
 80072e4:	6014      	str	r4, [r2, #0]
 80072e6:	4628      	mov	r0, r5
 80072e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ec:	f000 b8dc 	b.w	80074a8 <__malloc_unlock>
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d908      	bls.n	8007306 <_free_r+0x42>
 80072f4:	6820      	ldr	r0, [r4, #0]
 80072f6:	1821      	adds	r1, r4, r0
 80072f8:	428b      	cmp	r3, r1
 80072fa:	bf01      	itttt	eq
 80072fc:	6819      	ldreq	r1, [r3, #0]
 80072fe:	685b      	ldreq	r3, [r3, #4]
 8007300:	1809      	addeq	r1, r1, r0
 8007302:	6021      	streq	r1, [r4, #0]
 8007304:	e7ed      	b.n	80072e2 <_free_r+0x1e>
 8007306:	461a      	mov	r2, r3
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b10b      	cbz	r3, 8007310 <_free_r+0x4c>
 800730c:	42a3      	cmp	r3, r4
 800730e:	d9fa      	bls.n	8007306 <_free_r+0x42>
 8007310:	6811      	ldr	r1, [r2, #0]
 8007312:	1850      	adds	r0, r2, r1
 8007314:	42a0      	cmp	r0, r4
 8007316:	d10b      	bne.n	8007330 <_free_r+0x6c>
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	4401      	add	r1, r0
 800731c:	1850      	adds	r0, r2, r1
 800731e:	4283      	cmp	r3, r0
 8007320:	6011      	str	r1, [r2, #0]
 8007322:	d1e0      	bne.n	80072e6 <_free_r+0x22>
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	6053      	str	r3, [r2, #4]
 800732a:	4408      	add	r0, r1
 800732c:	6010      	str	r0, [r2, #0]
 800732e:	e7da      	b.n	80072e6 <_free_r+0x22>
 8007330:	d902      	bls.n	8007338 <_free_r+0x74>
 8007332:	230c      	movs	r3, #12
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	e7d6      	b.n	80072e6 <_free_r+0x22>
 8007338:	6820      	ldr	r0, [r4, #0]
 800733a:	1821      	adds	r1, r4, r0
 800733c:	428b      	cmp	r3, r1
 800733e:	bf04      	itt	eq
 8007340:	6819      	ldreq	r1, [r3, #0]
 8007342:	685b      	ldreq	r3, [r3, #4]
 8007344:	6063      	str	r3, [r4, #4]
 8007346:	bf04      	itt	eq
 8007348:	1809      	addeq	r1, r1, r0
 800734a:	6021      	streq	r1, [r4, #0]
 800734c:	6054      	str	r4, [r2, #4]
 800734e:	e7ca      	b.n	80072e6 <_free_r+0x22>
 8007350:	bd38      	pop	{r3, r4, r5, pc}
 8007352:	bf00      	nop
 8007354:	200007e4 	.word	0x200007e4

08007358 <sbrk_aligned>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4e0f      	ldr	r6, [pc, #60]	@ (8007398 <sbrk_aligned+0x40>)
 800735c:	460c      	mov	r4, r1
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	4605      	mov	r5, r0
 8007362:	b911      	cbnz	r1, 800736a <sbrk_aligned+0x12>
 8007364:	f000 fca6 	bl	8007cb4 <_sbrk_r>
 8007368:	6030      	str	r0, [r6, #0]
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 fca1 	bl	8007cb4 <_sbrk_r>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	d103      	bne.n	800737e <sbrk_aligned+0x26>
 8007376:	f04f 34ff 	mov.w	r4, #4294967295
 800737a:	4620      	mov	r0, r4
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	1cc4      	adds	r4, r0, #3
 8007380:	f024 0403 	bic.w	r4, r4, #3
 8007384:	42a0      	cmp	r0, r4
 8007386:	d0f8      	beq.n	800737a <sbrk_aligned+0x22>
 8007388:	1a21      	subs	r1, r4, r0
 800738a:	4628      	mov	r0, r5
 800738c:	f000 fc92 	bl	8007cb4 <_sbrk_r>
 8007390:	3001      	adds	r0, #1
 8007392:	d1f2      	bne.n	800737a <sbrk_aligned+0x22>
 8007394:	e7ef      	b.n	8007376 <sbrk_aligned+0x1e>
 8007396:	bf00      	nop
 8007398:	200007e0 	.word	0x200007e0

0800739c <_malloc_r>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	1ccd      	adds	r5, r1, #3
 80073a2:	f025 0503 	bic.w	r5, r5, #3
 80073a6:	3508      	adds	r5, #8
 80073a8:	2d0c      	cmp	r5, #12
 80073aa:	bf38      	it	cc
 80073ac:	250c      	movcc	r5, #12
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	4606      	mov	r6, r0
 80073b2:	db01      	blt.n	80073b8 <_malloc_r+0x1c>
 80073b4:	42a9      	cmp	r1, r5
 80073b6:	d904      	bls.n	80073c2 <_malloc_r+0x26>
 80073b8:	230c      	movs	r3, #12
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	2000      	movs	r0, #0
 80073be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007498 <_malloc_r+0xfc>
 80073c6:	f000 f869 	bl	800749c <__malloc_lock>
 80073ca:	f8d8 3000 	ldr.w	r3, [r8]
 80073ce:	461c      	mov	r4, r3
 80073d0:	bb44      	cbnz	r4, 8007424 <_malloc_r+0x88>
 80073d2:	4629      	mov	r1, r5
 80073d4:	4630      	mov	r0, r6
 80073d6:	f7ff ffbf 	bl	8007358 <sbrk_aligned>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	4604      	mov	r4, r0
 80073de:	d158      	bne.n	8007492 <_malloc_r+0xf6>
 80073e0:	f8d8 4000 	ldr.w	r4, [r8]
 80073e4:	4627      	mov	r7, r4
 80073e6:	2f00      	cmp	r7, #0
 80073e8:	d143      	bne.n	8007472 <_malloc_r+0xd6>
 80073ea:	2c00      	cmp	r4, #0
 80073ec:	d04b      	beq.n	8007486 <_malloc_r+0xea>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	4639      	mov	r1, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	eb04 0903 	add.w	r9, r4, r3
 80073f8:	f000 fc5c 	bl	8007cb4 <_sbrk_r>
 80073fc:	4581      	cmp	r9, r0
 80073fe:	d142      	bne.n	8007486 <_malloc_r+0xea>
 8007400:	6821      	ldr	r1, [r4, #0]
 8007402:	1a6d      	subs	r5, r5, r1
 8007404:	4629      	mov	r1, r5
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ffa6 	bl	8007358 <sbrk_aligned>
 800740c:	3001      	adds	r0, #1
 800740e:	d03a      	beq.n	8007486 <_malloc_r+0xea>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	442b      	add	r3, r5
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	f8d8 3000 	ldr.w	r3, [r8]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	bb62      	cbnz	r2, 8007478 <_malloc_r+0xdc>
 800741e:	f8c8 7000 	str.w	r7, [r8]
 8007422:	e00f      	b.n	8007444 <_malloc_r+0xa8>
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	1b52      	subs	r2, r2, r5
 8007428:	d420      	bmi.n	800746c <_malloc_r+0xd0>
 800742a:	2a0b      	cmp	r2, #11
 800742c:	d917      	bls.n	800745e <_malloc_r+0xc2>
 800742e:	1961      	adds	r1, r4, r5
 8007430:	42a3      	cmp	r3, r4
 8007432:	6025      	str	r5, [r4, #0]
 8007434:	bf18      	it	ne
 8007436:	6059      	strne	r1, [r3, #4]
 8007438:	6863      	ldr	r3, [r4, #4]
 800743a:	bf08      	it	eq
 800743c:	f8c8 1000 	streq.w	r1, [r8]
 8007440:	5162      	str	r2, [r4, r5]
 8007442:	604b      	str	r3, [r1, #4]
 8007444:	4630      	mov	r0, r6
 8007446:	f000 f82f 	bl	80074a8 <__malloc_unlock>
 800744a:	f104 000b 	add.w	r0, r4, #11
 800744e:	1d23      	adds	r3, r4, #4
 8007450:	f020 0007 	bic.w	r0, r0, #7
 8007454:	1ac2      	subs	r2, r0, r3
 8007456:	bf1c      	itt	ne
 8007458:	1a1b      	subne	r3, r3, r0
 800745a:	50a3      	strne	r3, [r4, r2]
 800745c:	e7af      	b.n	80073be <_malloc_r+0x22>
 800745e:	6862      	ldr	r2, [r4, #4]
 8007460:	42a3      	cmp	r3, r4
 8007462:	bf0c      	ite	eq
 8007464:	f8c8 2000 	streq.w	r2, [r8]
 8007468:	605a      	strne	r2, [r3, #4]
 800746a:	e7eb      	b.n	8007444 <_malloc_r+0xa8>
 800746c:	4623      	mov	r3, r4
 800746e:	6864      	ldr	r4, [r4, #4]
 8007470:	e7ae      	b.n	80073d0 <_malloc_r+0x34>
 8007472:	463c      	mov	r4, r7
 8007474:	687f      	ldr	r7, [r7, #4]
 8007476:	e7b6      	b.n	80073e6 <_malloc_r+0x4a>
 8007478:	461a      	mov	r2, r3
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	42a3      	cmp	r3, r4
 800747e:	d1fb      	bne.n	8007478 <_malloc_r+0xdc>
 8007480:	2300      	movs	r3, #0
 8007482:	6053      	str	r3, [r2, #4]
 8007484:	e7de      	b.n	8007444 <_malloc_r+0xa8>
 8007486:	230c      	movs	r3, #12
 8007488:	6033      	str	r3, [r6, #0]
 800748a:	4630      	mov	r0, r6
 800748c:	f000 f80c 	bl	80074a8 <__malloc_unlock>
 8007490:	e794      	b.n	80073bc <_malloc_r+0x20>
 8007492:	6005      	str	r5, [r0, #0]
 8007494:	e7d6      	b.n	8007444 <_malloc_r+0xa8>
 8007496:	bf00      	nop
 8007498:	200007e4 	.word	0x200007e4

0800749c <__malloc_lock>:
 800749c:	4801      	ldr	r0, [pc, #4]	@ (80074a4 <__malloc_lock+0x8>)
 800749e:	f7ff bf0e 	b.w	80072be <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	200007dc 	.word	0x200007dc

080074a8 <__malloc_unlock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	@ (80074b0 <__malloc_unlock+0x8>)
 80074aa:	f7ff bf09 	b.w	80072c0 <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	200007dc 	.word	0x200007dc

080074b4 <__sfputc_r>:
 80074b4:	6893      	ldr	r3, [r2, #8]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	b410      	push	{r4}
 80074bc:	6093      	str	r3, [r2, #8]
 80074be:	da08      	bge.n	80074d2 <__sfputc_r+0x1e>
 80074c0:	6994      	ldr	r4, [r2, #24]
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	db01      	blt.n	80074ca <__sfputc_r+0x16>
 80074c6:	290a      	cmp	r1, #10
 80074c8:	d103      	bne.n	80074d2 <__sfputc_r+0x1e>
 80074ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ce:	f7ff bde8 	b.w	80070a2 <__swbuf_r>
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	1c58      	adds	r0, r3, #1
 80074d6:	6010      	str	r0, [r2, #0]
 80074d8:	7019      	strb	r1, [r3, #0]
 80074da:	4608      	mov	r0, r1
 80074dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <__sfputs_r>:
 80074e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
 80074e8:	4614      	mov	r4, r2
 80074ea:	18d5      	adds	r5, r2, r3
 80074ec:	42ac      	cmp	r4, r5
 80074ee:	d101      	bne.n	80074f4 <__sfputs_r+0x12>
 80074f0:	2000      	movs	r0, #0
 80074f2:	e007      	b.n	8007504 <__sfputs_r+0x22>
 80074f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f8:	463a      	mov	r2, r7
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7ff ffda 	bl	80074b4 <__sfputc_r>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d1f3      	bne.n	80074ec <__sfputs_r+0xa>
 8007504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007508 <_vfiprintf_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	460d      	mov	r5, r1
 800750e:	b09d      	sub	sp, #116	@ 0x74
 8007510:	4614      	mov	r4, r2
 8007512:	4698      	mov	r8, r3
 8007514:	4606      	mov	r6, r0
 8007516:	b118      	cbz	r0, 8007520 <_vfiprintf_r+0x18>
 8007518:	6a03      	ldr	r3, [r0, #32]
 800751a:	b90b      	cbnz	r3, 8007520 <_vfiprintf_r+0x18>
 800751c:	f7ff fcd8 	bl	8006ed0 <__sinit>
 8007520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007522:	07d9      	lsls	r1, r3, #31
 8007524:	d405      	bmi.n	8007532 <_vfiprintf_r+0x2a>
 8007526:	89ab      	ldrh	r3, [r5, #12]
 8007528:	059a      	lsls	r2, r3, #22
 800752a:	d402      	bmi.n	8007532 <_vfiprintf_r+0x2a>
 800752c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800752e:	f7ff fec6 	bl	80072be <__retarget_lock_acquire_recursive>
 8007532:	89ab      	ldrh	r3, [r5, #12]
 8007534:	071b      	lsls	r3, r3, #28
 8007536:	d501      	bpl.n	800753c <_vfiprintf_r+0x34>
 8007538:	692b      	ldr	r3, [r5, #16]
 800753a:	b99b      	cbnz	r3, 8007564 <_vfiprintf_r+0x5c>
 800753c:	4629      	mov	r1, r5
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff fdee 	bl	8007120 <__swsetup_r>
 8007544:	b170      	cbz	r0, 8007564 <_vfiprintf_r+0x5c>
 8007546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007548:	07dc      	lsls	r4, r3, #31
 800754a:	d504      	bpl.n	8007556 <_vfiprintf_r+0x4e>
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	b01d      	add	sp, #116	@ 0x74
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	0598      	lsls	r0, r3, #22
 800755a:	d4f7      	bmi.n	800754c <_vfiprintf_r+0x44>
 800755c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800755e:	f7ff feaf 	bl	80072c0 <__retarget_lock_release_recursive>
 8007562:	e7f3      	b.n	800754c <_vfiprintf_r+0x44>
 8007564:	2300      	movs	r3, #0
 8007566:	9309      	str	r3, [sp, #36]	@ 0x24
 8007568:	2320      	movs	r3, #32
 800756a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800756e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007572:	2330      	movs	r3, #48	@ 0x30
 8007574:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007724 <_vfiprintf_r+0x21c>
 8007578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800757c:	f04f 0901 	mov.w	r9, #1
 8007580:	4623      	mov	r3, r4
 8007582:	469a      	mov	sl, r3
 8007584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007588:	b10a      	cbz	r2, 800758e <_vfiprintf_r+0x86>
 800758a:	2a25      	cmp	r2, #37	@ 0x25
 800758c:	d1f9      	bne.n	8007582 <_vfiprintf_r+0x7a>
 800758e:	ebba 0b04 	subs.w	fp, sl, r4
 8007592:	d00b      	beq.n	80075ac <_vfiprintf_r+0xa4>
 8007594:	465b      	mov	r3, fp
 8007596:	4622      	mov	r2, r4
 8007598:	4629      	mov	r1, r5
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff ffa1 	bl	80074e2 <__sfputs_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	f000 80a7 	beq.w	80076f4 <_vfiprintf_r+0x1ec>
 80075a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a8:	445a      	add	r2, fp
 80075aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80075ac:	f89a 3000 	ldrb.w	r3, [sl]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 809f 	beq.w	80076f4 <_vfiprintf_r+0x1ec>
 80075b6:	2300      	movs	r3, #0
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c0:	f10a 0a01 	add.w	sl, sl, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ce:	4654      	mov	r4, sl
 80075d0:	2205      	movs	r2, #5
 80075d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d6:	4853      	ldr	r0, [pc, #332]	@ (8007724 <_vfiprintf_r+0x21c>)
 80075d8:	f7f8 fe32 	bl	8000240 <memchr>
 80075dc:	9a04      	ldr	r2, [sp, #16]
 80075de:	b9d8      	cbnz	r0, 8007618 <_vfiprintf_r+0x110>
 80075e0:	06d1      	lsls	r1, r2, #27
 80075e2:	bf44      	itt	mi
 80075e4:	2320      	movmi	r3, #32
 80075e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ea:	0713      	lsls	r3, r2, #28
 80075ec:	bf44      	itt	mi
 80075ee:	232b      	movmi	r3, #43	@ 0x2b
 80075f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075f4:	f89a 3000 	ldrb.w	r3, [sl]
 80075f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80075fa:	d015      	beq.n	8007628 <_vfiprintf_r+0x120>
 80075fc:	9a07      	ldr	r2, [sp, #28]
 80075fe:	4654      	mov	r4, sl
 8007600:	2000      	movs	r0, #0
 8007602:	f04f 0c0a 	mov.w	ip, #10
 8007606:	4621      	mov	r1, r4
 8007608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800760c:	3b30      	subs	r3, #48	@ 0x30
 800760e:	2b09      	cmp	r3, #9
 8007610:	d94b      	bls.n	80076aa <_vfiprintf_r+0x1a2>
 8007612:	b1b0      	cbz	r0, 8007642 <_vfiprintf_r+0x13a>
 8007614:	9207      	str	r2, [sp, #28]
 8007616:	e014      	b.n	8007642 <_vfiprintf_r+0x13a>
 8007618:	eba0 0308 	sub.w	r3, r0, r8
 800761c:	fa09 f303 	lsl.w	r3, r9, r3
 8007620:	4313      	orrs	r3, r2
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	46a2      	mov	sl, r4
 8007626:	e7d2      	b.n	80075ce <_vfiprintf_r+0xc6>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	1d19      	adds	r1, r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	9103      	str	r1, [sp, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfbb      	ittet	lt
 8007634:	425b      	neglt	r3, r3
 8007636:	f042 0202 	orrlt.w	r2, r2, #2
 800763a:	9307      	strge	r3, [sp, #28]
 800763c:	9307      	strlt	r3, [sp, #28]
 800763e:	bfb8      	it	lt
 8007640:	9204      	strlt	r2, [sp, #16]
 8007642:	7823      	ldrb	r3, [r4, #0]
 8007644:	2b2e      	cmp	r3, #46	@ 0x2e
 8007646:	d10a      	bne.n	800765e <_vfiprintf_r+0x156>
 8007648:	7863      	ldrb	r3, [r4, #1]
 800764a:	2b2a      	cmp	r3, #42	@ 0x2a
 800764c:	d132      	bne.n	80076b4 <_vfiprintf_r+0x1ac>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	1d1a      	adds	r2, r3, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	9203      	str	r2, [sp, #12]
 8007656:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800765a:	3402      	adds	r4, #2
 800765c:	9305      	str	r3, [sp, #20]
 800765e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007734 <_vfiprintf_r+0x22c>
 8007662:	7821      	ldrb	r1, [r4, #0]
 8007664:	2203      	movs	r2, #3
 8007666:	4650      	mov	r0, sl
 8007668:	f7f8 fdea 	bl	8000240 <memchr>
 800766c:	b138      	cbz	r0, 800767e <_vfiprintf_r+0x176>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	eba0 000a 	sub.w	r0, r0, sl
 8007674:	2240      	movs	r2, #64	@ 0x40
 8007676:	4082      	lsls	r2, r0
 8007678:	4313      	orrs	r3, r2
 800767a:	3401      	adds	r4, #1
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007682:	4829      	ldr	r0, [pc, #164]	@ (8007728 <_vfiprintf_r+0x220>)
 8007684:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007688:	2206      	movs	r2, #6
 800768a:	f7f8 fdd9 	bl	8000240 <memchr>
 800768e:	2800      	cmp	r0, #0
 8007690:	d03f      	beq.n	8007712 <_vfiprintf_r+0x20a>
 8007692:	4b26      	ldr	r3, [pc, #152]	@ (800772c <_vfiprintf_r+0x224>)
 8007694:	bb1b      	cbnz	r3, 80076de <_vfiprintf_r+0x1d6>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	3307      	adds	r3, #7
 800769a:	f023 0307 	bic.w	r3, r3, #7
 800769e:	3308      	adds	r3, #8
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a4:	443b      	add	r3, r7
 80076a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a8:	e76a      	b.n	8007580 <_vfiprintf_r+0x78>
 80076aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ae:	460c      	mov	r4, r1
 80076b0:	2001      	movs	r0, #1
 80076b2:	e7a8      	b.n	8007606 <_vfiprintf_r+0xfe>
 80076b4:	2300      	movs	r3, #0
 80076b6:	3401      	adds	r4, #1
 80076b8:	9305      	str	r3, [sp, #20]
 80076ba:	4619      	mov	r1, r3
 80076bc:	f04f 0c0a 	mov.w	ip, #10
 80076c0:	4620      	mov	r0, r4
 80076c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c6:	3a30      	subs	r2, #48	@ 0x30
 80076c8:	2a09      	cmp	r2, #9
 80076ca:	d903      	bls.n	80076d4 <_vfiprintf_r+0x1cc>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0c6      	beq.n	800765e <_vfiprintf_r+0x156>
 80076d0:	9105      	str	r1, [sp, #20]
 80076d2:	e7c4      	b.n	800765e <_vfiprintf_r+0x156>
 80076d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d8:	4604      	mov	r4, r0
 80076da:	2301      	movs	r3, #1
 80076dc:	e7f0      	b.n	80076c0 <_vfiprintf_r+0x1b8>
 80076de:	ab03      	add	r3, sp, #12
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	462a      	mov	r2, r5
 80076e4:	4b12      	ldr	r3, [pc, #72]	@ (8007730 <_vfiprintf_r+0x228>)
 80076e6:	a904      	add	r1, sp, #16
 80076e8:	4630      	mov	r0, r6
 80076ea:	f3af 8000 	nop.w
 80076ee:	4607      	mov	r7, r0
 80076f0:	1c78      	adds	r0, r7, #1
 80076f2:	d1d6      	bne.n	80076a2 <_vfiprintf_r+0x19a>
 80076f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076f6:	07d9      	lsls	r1, r3, #31
 80076f8:	d405      	bmi.n	8007706 <_vfiprintf_r+0x1fe>
 80076fa:	89ab      	ldrh	r3, [r5, #12]
 80076fc:	059a      	lsls	r2, r3, #22
 80076fe:	d402      	bmi.n	8007706 <_vfiprintf_r+0x1fe>
 8007700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007702:	f7ff fddd 	bl	80072c0 <__retarget_lock_release_recursive>
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	065b      	lsls	r3, r3, #25
 800770a:	f53f af1f 	bmi.w	800754c <_vfiprintf_r+0x44>
 800770e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007710:	e71e      	b.n	8007550 <_vfiprintf_r+0x48>
 8007712:	ab03      	add	r3, sp, #12
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	462a      	mov	r2, r5
 8007718:	4b05      	ldr	r3, [pc, #20]	@ (8007730 <_vfiprintf_r+0x228>)
 800771a:	a904      	add	r1, sp, #16
 800771c:	4630      	mov	r0, r6
 800771e:	f000 f879 	bl	8007814 <_printf_i>
 8007722:	e7e4      	b.n	80076ee <_vfiprintf_r+0x1e6>
 8007724:	08007d90 	.word	0x08007d90
 8007728:	08007d9a 	.word	0x08007d9a
 800772c:	00000000 	.word	0x00000000
 8007730:	080074e3 	.word	0x080074e3
 8007734:	08007d96 	.word	0x08007d96

08007738 <_printf_common>:
 8007738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	4616      	mov	r6, r2
 800773e:	4698      	mov	r8, r3
 8007740:	688a      	ldr	r2, [r1, #8]
 8007742:	690b      	ldr	r3, [r1, #16]
 8007744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007748:	4293      	cmp	r3, r2
 800774a:	bfb8      	it	lt
 800774c:	4613      	movlt	r3, r2
 800774e:	6033      	str	r3, [r6, #0]
 8007750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007754:	4607      	mov	r7, r0
 8007756:	460c      	mov	r4, r1
 8007758:	b10a      	cbz	r2, 800775e <_printf_common+0x26>
 800775a:	3301      	adds	r3, #1
 800775c:	6033      	str	r3, [r6, #0]
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	0699      	lsls	r1, r3, #26
 8007762:	bf42      	ittt	mi
 8007764:	6833      	ldrmi	r3, [r6, #0]
 8007766:	3302      	addmi	r3, #2
 8007768:	6033      	strmi	r3, [r6, #0]
 800776a:	6825      	ldr	r5, [r4, #0]
 800776c:	f015 0506 	ands.w	r5, r5, #6
 8007770:	d106      	bne.n	8007780 <_printf_common+0x48>
 8007772:	f104 0a19 	add.w	sl, r4, #25
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	6832      	ldr	r2, [r6, #0]
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	42ab      	cmp	r3, r5
 800777e:	dc26      	bgt.n	80077ce <_printf_common+0x96>
 8007780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	3b00      	subs	r3, #0
 8007788:	bf18      	it	ne
 800778a:	2301      	movne	r3, #1
 800778c:	0692      	lsls	r2, r2, #26
 800778e:	d42b      	bmi.n	80077e8 <_printf_common+0xb0>
 8007790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007794:	4641      	mov	r1, r8
 8007796:	4638      	mov	r0, r7
 8007798:	47c8      	blx	r9
 800779a:	3001      	adds	r0, #1
 800779c:	d01e      	beq.n	80077dc <_printf_common+0xa4>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	6922      	ldr	r2, [r4, #16]
 80077a2:	f003 0306 	and.w	r3, r3, #6
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	bf02      	ittt	eq
 80077aa:	68e5      	ldreq	r5, [r4, #12]
 80077ac:	6833      	ldreq	r3, [r6, #0]
 80077ae:	1aed      	subeq	r5, r5, r3
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	bf0c      	ite	eq
 80077b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b8:	2500      	movne	r5, #0
 80077ba:	4293      	cmp	r3, r2
 80077bc:	bfc4      	itt	gt
 80077be:	1a9b      	subgt	r3, r3, r2
 80077c0:	18ed      	addgt	r5, r5, r3
 80077c2:	2600      	movs	r6, #0
 80077c4:	341a      	adds	r4, #26
 80077c6:	42b5      	cmp	r5, r6
 80077c8:	d11a      	bne.n	8007800 <_printf_common+0xc8>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e008      	b.n	80077e0 <_printf_common+0xa8>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4652      	mov	r2, sl
 80077d2:	4641      	mov	r1, r8
 80077d4:	4638      	mov	r0, r7
 80077d6:	47c8      	blx	r9
 80077d8:	3001      	adds	r0, #1
 80077da:	d103      	bne.n	80077e4 <_printf_common+0xac>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	3501      	adds	r5, #1
 80077e6:	e7c6      	b.n	8007776 <_printf_common+0x3e>
 80077e8:	18e1      	adds	r1, r4, r3
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	2030      	movs	r0, #48	@ 0x30
 80077ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077f2:	4422      	add	r2, r4
 80077f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077fc:	3302      	adds	r3, #2
 80077fe:	e7c7      	b.n	8007790 <_printf_common+0x58>
 8007800:	2301      	movs	r3, #1
 8007802:	4622      	mov	r2, r4
 8007804:	4641      	mov	r1, r8
 8007806:	4638      	mov	r0, r7
 8007808:	47c8      	blx	r9
 800780a:	3001      	adds	r0, #1
 800780c:	d0e6      	beq.n	80077dc <_printf_common+0xa4>
 800780e:	3601      	adds	r6, #1
 8007810:	e7d9      	b.n	80077c6 <_printf_common+0x8e>
	...

08007814 <_printf_i>:
 8007814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	7e0f      	ldrb	r7, [r1, #24]
 800781a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800781c:	2f78      	cmp	r7, #120	@ 0x78
 800781e:	4691      	mov	r9, r2
 8007820:	4680      	mov	r8, r0
 8007822:	460c      	mov	r4, r1
 8007824:	469a      	mov	sl, r3
 8007826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800782a:	d807      	bhi.n	800783c <_printf_i+0x28>
 800782c:	2f62      	cmp	r7, #98	@ 0x62
 800782e:	d80a      	bhi.n	8007846 <_printf_i+0x32>
 8007830:	2f00      	cmp	r7, #0
 8007832:	f000 80d2 	beq.w	80079da <_printf_i+0x1c6>
 8007836:	2f58      	cmp	r7, #88	@ 0x58
 8007838:	f000 80b9 	beq.w	80079ae <_printf_i+0x19a>
 800783c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007844:	e03a      	b.n	80078bc <_printf_i+0xa8>
 8007846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800784a:	2b15      	cmp	r3, #21
 800784c:	d8f6      	bhi.n	800783c <_printf_i+0x28>
 800784e:	a101      	add	r1, pc, #4	@ (adr r1, 8007854 <_printf_i+0x40>)
 8007850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007854:	080078ad 	.word	0x080078ad
 8007858:	080078c1 	.word	0x080078c1
 800785c:	0800783d 	.word	0x0800783d
 8007860:	0800783d 	.word	0x0800783d
 8007864:	0800783d 	.word	0x0800783d
 8007868:	0800783d 	.word	0x0800783d
 800786c:	080078c1 	.word	0x080078c1
 8007870:	0800783d 	.word	0x0800783d
 8007874:	0800783d 	.word	0x0800783d
 8007878:	0800783d 	.word	0x0800783d
 800787c:	0800783d 	.word	0x0800783d
 8007880:	080079c1 	.word	0x080079c1
 8007884:	080078eb 	.word	0x080078eb
 8007888:	0800797b 	.word	0x0800797b
 800788c:	0800783d 	.word	0x0800783d
 8007890:	0800783d 	.word	0x0800783d
 8007894:	080079e3 	.word	0x080079e3
 8007898:	0800783d 	.word	0x0800783d
 800789c:	080078eb 	.word	0x080078eb
 80078a0:	0800783d 	.word	0x0800783d
 80078a4:	0800783d 	.word	0x0800783d
 80078a8:	08007983 	.word	0x08007983
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6032      	str	r2, [r6, #0]
 80078b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078bc:	2301      	movs	r3, #1
 80078be:	e09d      	b.n	80079fc <_printf_i+0x1e8>
 80078c0:	6833      	ldr	r3, [r6, #0]
 80078c2:	6820      	ldr	r0, [r4, #0]
 80078c4:	1d19      	adds	r1, r3, #4
 80078c6:	6031      	str	r1, [r6, #0]
 80078c8:	0606      	lsls	r6, r0, #24
 80078ca:	d501      	bpl.n	80078d0 <_printf_i+0xbc>
 80078cc:	681d      	ldr	r5, [r3, #0]
 80078ce:	e003      	b.n	80078d8 <_printf_i+0xc4>
 80078d0:	0645      	lsls	r5, r0, #25
 80078d2:	d5fb      	bpl.n	80078cc <_printf_i+0xb8>
 80078d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078d8:	2d00      	cmp	r5, #0
 80078da:	da03      	bge.n	80078e4 <_printf_i+0xd0>
 80078dc:	232d      	movs	r3, #45	@ 0x2d
 80078de:	426d      	negs	r5, r5
 80078e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e4:	4859      	ldr	r0, [pc, #356]	@ (8007a4c <_printf_i+0x238>)
 80078e6:	230a      	movs	r3, #10
 80078e8:	e011      	b.n	800790e <_printf_i+0xfa>
 80078ea:	6821      	ldr	r1, [r4, #0]
 80078ec:	6833      	ldr	r3, [r6, #0]
 80078ee:	0608      	lsls	r0, r1, #24
 80078f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80078f4:	d402      	bmi.n	80078fc <_printf_i+0xe8>
 80078f6:	0649      	lsls	r1, r1, #25
 80078f8:	bf48      	it	mi
 80078fa:	b2ad      	uxthmi	r5, r5
 80078fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80078fe:	4853      	ldr	r0, [pc, #332]	@ (8007a4c <_printf_i+0x238>)
 8007900:	6033      	str	r3, [r6, #0]
 8007902:	bf14      	ite	ne
 8007904:	230a      	movne	r3, #10
 8007906:	2308      	moveq	r3, #8
 8007908:	2100      	movs	r1, #0
 800790a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800790e:	6866      	ldr	r6, [r4, #4]
 8007910:	60a6      	str	r6, [r4, #8]
 8007912:	2e00      	cmp	r6, #0
 8007914:	bfa2      	ittt	ge
 8007916:	6821      	ldrge	r1, [r4, #0]
 8007918:	f021 0104 	bicge.w	r1, r1, #4
 800791c:	6021      	strge	r1, [r4, #0]
 800791e:	b90d      	cbnz	r5, 8007924 <_printf_i+0x110>
 8007920:	2e00      	cmp	r6, #0
 8007922:	d04b      	beq.n	80079bc <_printf_i+0x1a8>
 8007924:	4616      	mov	r6, r2
 8007926:	fbb5 f1f3 	udiv	r1, r5, r3
 800792a:	fb03 5711 	mls	r7, r3, r1, r5
 800792e:	5dc7      	ldrb	r7, [r0, r7]
 8007930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007934:	462f      	mov	r7, r5
 8007936:	42bb      	cmp	r3, r7
 8007938:	460d      	mov	r5, r1
 800793a:	d9f4      	bls.n	8007926 <_printf_i+0x112>
 800793c:	2b08      	cmp	r3, #8
 800793e:	d10b      	bne.n	8007958 <_printf_i+0x144>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	07df      	lsls	r7, r3, #31
 8007944:	d508      	bpl.n	8007958 <_printf_i+0x144>
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	6861      	ldr	r1, [r4, #4]
 800794a:	4299      	cmp	r1, r3
 800794c:	bfde      	ittt	le
 800794e:	2330      	movle	r3, #48	@ 0x30
 8007950:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007954:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007958:	1b92      	subs	r2, r2, r6
 800795a:	6122      	str	r2, [r4, #16]
 800795c:	f8cd a000 	str.w	sl, [sp]
 8007960:	464b      	mov	r3, r9
 8007962:	aa03      	add	r2, sp, #12
 8007964:	4621      	mov	r1, r4
 8007966:	4640      	mov	r0, r8
 8007968:	f7ff fee6 	bl	8007738 <_printf_common>
 800796c:	3001      	adds	r0, #1
 800796e:	d14a      	bne.n	8007a06 <_printf_i+0x1f2>
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	b004      	add	sp, #16
 8007976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	f043 0320 	orr.w	r3, r3, #32
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	4833      	ldr	r0, [pc, #204]	@ (8007a50 <_printf_i+0x23c>)
 8007984:	2778      	movs	r7, #120	@ 0x78
 8007986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	6831      	ldr	r1, [r6, #0]
 800798e:	061f      	lsls	r7, r3, #24
 8007990:	f851 5b04 	ldr.w	r5, [r1], #4
 8007994:	d402      	bmi.n	800799c <_printf_i+0x188>
 8007996:	065f      	lsls	r7, r3, #25
 8007998:	bf48      	it	mi
 800799a:	b2ad      	uxthmi	r5, r5
 800799c:	6031      	str	r1, [r6, #0]
 800799e:	07d9      	lsls	r1, r3, #31
 80079a0:	bf44      	itt	mi
 80079a2:	f043 0320 	orrmi.w	r3, r3, #32
 80079a6:	6023      	strmi	r3, [r4, #0]
 80079a8:	b11d      	cbz	r5, 80079b2 <_printf_i+0x19e>
 80079aa:	2310      	movs	r3, #16
 80079ac:	e7ac      	b.n	8007908 <_printf_i+0xf4>
 80079ae:	4827      	ldr	r0, [pc, #156]	@ (8007a4c <_printf_i+0x238>)
 80079b0:	e7e9      	b.n	8007986 <_printf_i+0x172>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	f023 0320 	bic.w	r3, r3, #32
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	e7f6      	b.n	80079aa <_printf_i+0x196>
 80079bc:	4616      	mov	r6, r2
 80079be:	e7bd      	b.n	800793c <_printf_i+0x128>
 80079c0:	6833      	ldr	r3, [r6, #0]
 80079c2:	6825      	ldr	r5, [r4, #0]
 80079c4:	6961      	ldr	r1, [r4, #20]
 80079c6:	1d18      	adds	r0, r3, #4
 80079c8:	6030      	str	r0, [r6, #0]
 80079ca:	062e      	lsls	r6, r5, #24
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	d501      	bpl.n	80079d4 <_printf_i+0x1c0>
 80079d0:	6019      	str	r1, [r3, #0]
 80079d2:	e002      	b.n	80079da <_printf_i+0x1c6>
 80079d4:	0668      	lsls	r0, r5, #25
 80079d6:	d5fb      	bpl.n	80079d0 <_printf_i+0x1bc>
 80079d8:	8019      	strh	r1, [r3, #0]
 80079da:	2300      	movs	r3, #0
 80079dc:	6123      	str	r3, [r4, #16]
 80079de:	4616      	mov	r6, r2
 80079e0:	e7bc      	b.n	800795c <_printf_i+0x148>
 80079e2:	6833      	ldr	r3, [r6, #0]
 80079e4:	1d1a      	adds	r2, r3, #4
 80079e6:	6032      	str	r2, [r6, #0]
 80079e8:	681e      	ldr	r6, [r3, #0]
 80079ea:	6862      	ldr	r2, [r4, #4]
 80079ec:	2100      	movs	r1, #0
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7f8 fc26 	bl	8000240 <memchr>
 80079f4:	b108      	cbz	r0, 80079fa <_printf_i+0x1e6>
 80079f6:	1b80      	subs	r0, r0, r6
 80079f8:	6060      	str	r0, [r4, #4]
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	2300      	movs	r3, #0
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a04:	e7aa      	b.n	800795c <_printf_i+0x148>
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	4632      	mov	r2, r6
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	47d0      	blx	sl
 8007a10:	3001      	adds	r0, #1
 8007a12:	d0ad      	beq.n	8007970 <_printf_i+0x15c>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	079b      	lsls	r3, r3, #30
 8007a18:	d413      	bmi.n	8007a42 <_printf_i+0x22e>
 8007a1a:	68e0      	ldr	r0, [r4, #12]
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	4298      	cmp	r0, r3
 8007a20:	bfb8      	it	lt
 8007a22:	4618      	movlt	r0, r3
 8007a24:	e7a6      	b.n	8007974 <_printf_i+0x160>
 8007a26:	2301      	movs	r3, #1
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	47d0      	blx	sl
 8007a30:	3001      	adds	r0, #1
 8007a32:	d09d      	beq.n	8007970 <_printf_i+0x15c>
 8007a34:	3501      	adds	r5, #1
 8007a36:	68e3      	ldr	r3, [r4, #12]
 8007a38:	9903      	ldr	r1, [sp, #12]
 8007a3a:	1a5b      	subs	r3, r3, r1
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	dcf2      	bgt.n	8007a26 <_printf_i+0x212>
 8007a40:	e7eb      	b.n	8007a1a <_printf_i+0x206>
 8007a42:	2500      	movs	r5, #0
 8007a44:	f104 0619 	add.w	r6, r4, #25
 8007a48:	e7f5      	b.n	8007a36 <_printf_i+0x222>
 8007a4a:	bf00      	nop
 8007a4c:	08007da1 	.word	0x08007da1
 8007a50:	08007db2 	.word	0x08007db2

08007a54 <__sflush_r>:
 8007a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	0716      	lsls	r6, r2, #28
 8007a5e:	4605      	mov	r5, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	d454      	bmi.n	8007b0e <__sflush_r+0xba>
 8007a64:	684b      	ldr	r3, [r1, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dc02      	bgt.n	8007a70 <__sflush_r+0x1c>
 8007a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dd48      	ble.n	8007b02 <__sflush_r+0xae>
 8007a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a72:	2e00      	cmp	r6, #0
 8007a74:	d045      	beq.n	8007b02 <__sflush_r+0xae>
 8007a76:	2300      	movs	r3, #0
 8007a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a7c:	682f      	ldr	r7, [r5, #0]
 8007a7e:	6a21      	ldr	r1, [r4, #32]
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	d030      	beq.n	8007ae6 <__sflush_r+0x92>
 8007a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	0759      	lsls	r1, r3, #29
 8007a8a:	d505      	bpl.n	8007a98 <__sflush_r+0x44>
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a92:	b10b      	cbz	r3, 8007a98 <__sflush_r+0x44>
 8007a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	2300      	movs	r3, #0
 8007a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a9c:	6a21      	ldr	r1, [r4, #32]
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b0      	blx	r6
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	d106      	bne.n	8007ab6 <__sflush_r+0x62>
 8007aa8:	6829      	ldr	r1, [r5, #0]
 8007aaa:	291d      	cmp	r1, #29
 8007aac:	d82b      	bhi.n	8007b06 <__sflush_r+0xb2>
 8007aae:	4a2a      	ldr	r2, [pc, #168]	@ (8007b58 <__sflush_r+0x104>)
 8007ab0:	410a      	asrs	r2, r1
 8007ab2:	07d6      	lsls	r6, r2, #31
 8007ab4:	d427      	bmi.n	8007b06 <__sflush_r+0xb2>
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	6062      	str	r2, [r4, #4]
 8007aba:	04d9      	lsls	r1, r3, #19
 8007abc:	6922      	ldr	r2, [r4, #16]
 8007abe:	6022      	str	r2, [r4, #0]
 8007ac0:	d504      	bpl.n	8007acc <__sflush_r+0x78>
 8007ac2:	1c42      	adds	r2, r0, #1
 8007ac4:	d101      	bne.n	8007aca <__sflush_r+0x76>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	b903      	cbnz	r3, 8007acc <__sflush_r+0x78>
 8007aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8007acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ace:	602f      	str	r7, [r5, #0]
 8007ad0:	b1b9      	cbz	r1, 8007b02 <__sflush_r+0xae>
 8007ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	d002      	beq.n	8007ae0 <__sflush_r+0x8c>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7ff fbf2 	bl	80072c4 <_free_r>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ae4:	e00d      	b.n	8007b02 <__sflush_r+0xae>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	4602      	mov	r2, r0
 8007aee:	1c50      	adds	r0, r2, #1
 8007af0:	d1c9      	bne.n	8007a86 <__sflush_r+0x32>
 8007af2:	682b      	ldr	r3, [r5, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0c6      	beq.n	8007a86 <__sflush_r+0x32>
 8007af8:	2b1d      	cmp	r3, #29
 8007afa:	d001      	beq.n	8007b00 <__sflush_r+0xac>
 8007afc:	2b16      	cmp	r3, #22
 8007afe:	d11e      	bne.n	8007b3e <__sflush_r+0xea>
 8007b00:	602f      	str	r7, [r5, #0]
 8007b02:	2000      	movs	r0, #0
 8007b04:	e022      	b.n	8007b4c <__sflush_r+0xf8>
 8007b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b0a:	b21b      	sxth	r3, r3
 8007b0c:	e01b      	b.n	8007b46 <__sflush_r+0xf2>
 8007b0e:	690f      	ldr	r7, [r1, #16]
 8007b10:	2f00      	cmp	r7, #0
 8007b12:	d0f6      	beq.n	8007b02 <__sflush_r+0xae>
 8007b14:	0793      	lsls	r3, r2, #30
 8007b16:	680e      	ldr	r6, [r1, #0]
 8007b18:	bf08      	it	eq
 8007b1a:	694b      	ldreq	r3, [r1, #20]
 8007b1c:	600f      	str	r7, [r1, #0]
 8007b1e:	bf18      	it	ne
 8007b20:	2300      	movne	r3, #0
 8007b22:	eba6 0807 	sub.w	r8, r6, r7
 8007b26:	608b      	str	r3, [r1, #8]
 8007b28:	f1b8 0f00 	cmp.w	r8, #0
 8007b2c:	dde9      	ble.n	8007b02 <__sflush_r+0xae>
 8007b2e:	6a21      	ldr	r1, [r4, #32]
 8007b30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b32:	4643      	mov	r3, r8
 8007b34:	463a      	mov	r2, r7
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b0      	blx	r6
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	dc08      	bgt.n	8007b50 <__sflush_r+0xfc>
 8007b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b46:	81a3      	strh	r3, [r4, #12]
 8007b48:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	4407      	add	r7, r0
 8007b52:	eba8 0800 	sub.w	r8, r8, r0
 8007b56:	e7e7      	b.n	8007b28 <__sflush_r+0xd4>
 8007b58:	dfbffffe 	.word	0xdfbffffe

08007b5c <_fflush_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	690b      	ldr	r3, [r1, #16]
 8007b60:	4605      	mov	r5, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	b913      	cbnz	r3, 8007b6c <_fflush_r+0x10>
 8007b66:	2500      	movs	r5, #0
 8007b68:	4628      	mov	r0, r5
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	b118      	cbz	r0, 8007b76 <_fflush_r+0x1a>
 8007b6e:	6a03      	ldr	r3, [r0, #32]
 8007b70:	b90b      	cbnz	r3, 8007b76 <_fflush_r+0x1a>
 8007b72:	f7ff f9ad 	bl	8006ed0 <__sinit>
 8007b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f3      	beq.n	8007b66 <_fflush_r+0xa>
 8007b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b80:	07d0      	lsls	r0, r2, #31
 8007b82:	d404      	bmi.n	8007b8e <_fflush_r+0x32>
 8007b84:	0599      	lsls	r1, r3, #22
 8007b86:	d402      	bmi.n	8007b8e <_fflush_r+0x32>
 8007b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b8a:	f7ff fb98 	bl	80072be <__retarget_lock_acquire_recursive>
 8007b8e:	4628      	mov	r0, r5
 8007b90:	4621      	mov	r1, r4
 8007b92:	f7ff ff5f 	bl	8007a54 <__sflush_r>
 8007b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b98:	07da      	lsls	r2, r3, #31
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	d4e4      	bmi.n	8007b68 <_fflush_r+0xc>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	059b      	lsls	r3, r3, #22
 8007ba2:	d4e1      	bmi.n	8007b68 <_fflush_r+0xc>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ba6:	f7ff fb8b 	bl	80072c0 <__retarget_lock_release_recursive>
 8007baa:	e7dd      	b.n	8007b68 <_fflush_r+0xc>

08007bac <__swhatbuf_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	460c      	mov	r4, r1
 8007bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	b096      	sub	sp, #88	@ 0x58
 8007bb8:	4615      	mov	r5, r2
 8007bba:	461e      	mov	r6, r3
 8007bbc:	da0d      	bge.n	8007bda <__swhatbuf_r+0x2e>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bc4:	f04f 0100 	mov.w	r1, #0
 8007bc8:	bf14      	ite	ne
 8007bca:	2340      	movne	r3, #64	@ 0x40
 8007bcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	6031      	str	r1, [r6, #0]
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	b016      	add	sp, #88	@ 0x58
 8007bd8:	bd70      	pop	{r4, r5, r6, pc}
 8007bda:	466a      	mov	r2, sp
 8007bdc:	f000 f848 	bl	8007c70 <_fstat_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	dbec      	blt.n	8007bbe <__swhatbuf_r+0x12>
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bee:	4259      	negs	r1, r3
 8007bf0:	4159      	adcs	r1, r3
 8007bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bf6:	e7eb      	b.n	8007bd0 <__swhatbuf_r+0x24>

08007bf8 <__smakebuf_r>:
 8007bf8:	898b      	ldrh	r3, [r1, #12]
 8007bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bfc:	079d      	lsls	r5, r3, #30
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	d507      	bpl.n	8007c14 <__smakebuf_r+0x1c>
 8007c04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	6163      	str	r3, [r4, #20]
 8007c10:	b003      	add	sp, #12
 8007c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c14:	ab01      	add	r3, sp, #4
 8007c16:	466a      	mov	r2, sp
 8007c18:	f7ff ffc8 	bl	8007bac <__swhatbuf_r>
 8007c1c:	9f00      	ldr	r7, [sp, #0]
 8007c1e:	4605      	mov	r5, r0
 8007c20:	4639      	mov	r1, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff fbba 	bl	800739c <_malloc_r>
 8007c28:	b948      	cbnz	r0, 8007c3e <__smakebuf_r+0x46>
 8007c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2e:	059a      	lsls	r2, r3, #22
 8007c30:	d4ee      	bmi.n	8007c10 <__smakebuf_r+0x18>
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	e7e2      	b.n	8007c04 <__smakebuf_r+0xc>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	6020      	str	r0, [r4, #0]
 8007c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c46:	81a3      	strh	r3, [r4, #12]
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c4e:	b15b      	cbz	r3, 8007c68 <__smakebuf_r+0x70>
 8007c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 f81d 	bl	8007c94 <_isatty_r>
 8007c5a:	b128      	cbz	r0, 8007c68 <__smakebuf_r+0x70>
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f023 0303 	bic.w	r3, r3, #3
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	431d      	orrs	r5, r3
 8007c6c:	81a5      	strh	r5, [r4, #12]
 8007c6e:	e7cf      	b.n	8007c10 <__smakebuf_r+0x18>

08007c70 <_fstat_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	@ (8007c90 <_fstat_r+0x20>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	f7fa fc36 	bl	80024ee <_fstat>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d102      	bne.n	8007c8c <_fstat_r+0x1c>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	b103      	cbz	r3, 8007c8c <_fstat_r+0x1c>
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	bf00      	nop
 8007c90:	200007d8 	.word	0x200007d8

08007c94 <_isatty_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d06      	ldr	r5, [pc, #24]	@ (8007cb0 <_isatty_r+0x1c>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7fa fc35 	bl	800250e <_isatty>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_isatty_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_isatty_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	200007d8 	.word	0x200007d8

08007cb4 <_sbrk_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d06      	ldr	r5, [pc, #24]	@ (8007cd0 <_sbrk_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7fa fc3e 	bl	8002540 <_sbrk>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_sbrk_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_sbrk_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	200007d8 	.word	0x200007d8

08007cd4 <_init>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

08007ce0 <_fini>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr
