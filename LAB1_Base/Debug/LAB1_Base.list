
LAB1_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b24  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e04  08007e04  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e08  08007e08  00008e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007e0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  20000068  08007e74  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007e74  000097e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016340  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a37  00000000  00000000  0001f3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00021e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001035  00000000  00000000  000232a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5f5  00000000  00000000  000242dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001952a  00000000  00000000  0004e8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001073be  00000000  00000000  00067dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016f1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  0016f200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001751a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d0c 	.word	0x08007d0c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08007d0c 	.word	0x08007d0c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000614:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000618:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d013      	beq.n	800064c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000624:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000628:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800062c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00b      	beq.n	800064c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000634:	e000      	b.n	8000638 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000636:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000638:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000642:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800064c:	687b      	ldr	r3, [r7, #4]
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	e009      	b.n	8000680 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	60ba      	str	r2, [r7, #8]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffc9 	bl	800060c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf1      	blt.n	800066c <_write+0x12>
	}
	return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af04      	add	r7, sp, #16
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]

	  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	4619      	mov	r1, r3
 80006a2:	481f      	ldr	r0, [pc, #124]	@ (8000720 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006a4:	f006 fc68 	bl	8006f78 <iprintf>
      uint8_t data;
      data = 0x1B;
 80006a8:	231b      	movs	r3, #27
 80006aa:	737b      	strb	r3, [r7, #13]

      HAL_StatusTypeDef status_col = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &data, 1, I2C_TIMEOUT);
 80006ac:	23c8      	movs	r3, #200	@ 0xc8
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	2301      	movs	r3, #1
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	f107 030d 	add.w	r3, r7, #13
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	2227      	movs	r2, #39	@ 0x27
 80006be:	217e      	movs	r1, #126	@ 0x7e
 80006c0:	4818      	ldr	r0, [pc, #96]	@ (8000724 <HAL_GPIO_EXTI_Callback+0x90>)
 80006c2:	f002 fe9f 	bl	8003404 <HAL_I2C_Mem_Write>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73fb      	strb	r3, [r7, #15]

      if (status_col != HAL_OK){
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d004      	beq.n	80006da <HAL_GPIO_EXTI_Callback+0x46>
          printf("I2C communication error (%X)",status_col);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4814      	ldr	r0, [pc, #80]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x94>)
 80006d6:	f006 fc4f 	bl	8006f78 <iprintf>

      }

      printf("Column Pressed: (%d).\n", REG_KEY_DATA_1);
 80006da:	2127      	movs	r1, #39	@ 0x27
 80006dc:	4813      	ldr	r0, [pc, #76]	@ (800072c <HAL_GPIO_EXTI_Callback+0x98>)
 80006de:	f006 fc4b 	bl	8006f78 <iprintf>


      HAL_StatusTypeDef status_row = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &data, 1, I2C_TIMEOUT);
 80006e2:	23c8      	movs	r3, #200	@ 0xc8
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	2301      	movs	r3, #1
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	f107 030d 	add.w	r3, r7, #13
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2228      	movs	r2, #40	@ 0x28
 80006f4:	217e      	movs	r1, #126	@ 0x7e
 80006f6:	480b      	ldr	r0, [pc, #44]	@ (8000724 <HAL_GPIO_EXTI_Callback+0x90>)
 80006f8:	f002 fe84 	bl	8003404 <HAL_I2C_Mem_Write>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73bb      	strb	r3, [r7, #14]

      if (status_row != HAL_OK){
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x7c>
          printf("I2C communication error (%X)", status_row);
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	4619      	mov	r1, r3
 800070a:	4807      	ldr	r0, [pc, #28]	@ (8000728 <HAL_GPIO_EXTI_Callback+0x94>)
 800070c:	f006 fc34 	bl	8006f78 <iprintf>
		}

      printf("Row Pressed: (%d).\n", REG_KEY_DATA_2);
 8000710:	2128      	movs	r1, #40	@ 0x28
 8000712:	4807      	ldr	r0, [pc, #28]	@ (8000730 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000714:	f006 fc30 	bl	8006f78 <iprintf>

}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08007d24 	.word	0x08007d24
 8000724:	200000cc 	.word	0x200000cc
 8000728:	08007d3c 	.word	0x08007d3c
 800072c:	08007d5c 	.word	0x08007d5c
 8000730:	08007d74 	.word	0x08007d74

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f001 ff90 	bl	800265e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 fa05 	bl	8000b4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f001 f825 	bl	8001790 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000746:	f000 fff3 	bl	8001730 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800074a:	f000 fa71 	bl	8000c30 <MX_ADC1_Init>
  MX_I2C1_Init();
 800074e:	f000 fac1 	bl	8000cd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000752:	f000 faff 	bl	8000d54 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000756:	f000 fb3d 	bl	8000dd4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800075a:	f000 fb79 	bl	8000e50 <MX_TIM1_Init>
  MX_TIM2_Init();
 800075e:	f000 fc47 	bl	8000ff0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000762:	f000 fcdf 	bl	8001124 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000766:	f000 fd33 	bl	80011d0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800076a:	f000 fd87 	bl	800127c <MX_TIM5_Init>
  MX_TIM8_Init();
 800076e:	f000 fdfd 	bl	800136c <MX_TIM8_Init>
  MX_UART4_Init();
 8000772:	f000 ff1d 	bl	80015b0 <MX_UART4_Init>
  MX_UART5_Init();
 8000776:	f000 ff4b 	bl	8001610 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800077a:	f000 ff79 	bl	8001670 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800077e:	f000 ffa7 	bl	80016d0 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000782:	f000 fec5 	bl	8001510 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2110      	movs	r1, #16
 800078a:	48bc      	ldr	r0, [pc, #752]	@ (8000a7c <main+0x348>)
 800078c:	f002 fd6c 	bl	8003268 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000790:	200a      	movs	r0, #10
 8000792:	f002 fba2 	bl	8002eda <HAL_NVIC_DisableIRQ>

  ITM_SendChar('h');
 8000796:	2068      	movs	r0, #104	@ 0x68
 8000798:	f7ff ff38 	bl	800060c <ITM_SendChar>

  /* Software reset */
  data = 0x12;
 800079c:	2312      	movs	r3, #18
 800079e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80007a0:	23c8      	movs	r3, #200	@ 0xc8
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	227d      	movs	r2, #125	@ 0x7d
 80007b0:	217e      	movs	r1, #126	@ 0x7e
 80007b2:	48b3      	ldr	r0, [pc, #716]	@ (8000a80 <main+0x34c>)
 80007b4:	f002 fe26 	bl	8003404 <HAL_I2C_Mem_Write>
 80007b8:	4603      	mov	r3, r0
 80007ba:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d004      	beq.n	80007cc <main+0x98>
    printf("I2C communication error (%X).\n", status);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4619      	mov	r1, r3
 80007c6:	48af      	ldr	r0, [pc, #700]	@ (8000a84 <main+0x350>)
 80007c8:	f006 fbd6 	bl	8006f78 <iprintf>

  data = 0x34;
 80007cc:	2334      	movs	r3, #52	@ 0x34
 80007ce:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80007d0:	23c8      	movs	r3, #200	@ 0xc8
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	227d      	movs	r2, #125	@ 0x7d
 80007e0:	217e      	movs	r1, #126	@ 0x7e
 80007e2:	48a7      	ldr	r0, [pc, #668]	@ (8000a80 <main+0x34c>)
 80007e4:	f002 fe0e 	bl	8003404 <HAL_I2C_Mem_Write>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <main+0xc8>
    printf("I2C communication error (%X).\n", status);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4619      	mov	r1, r3
 80007f6:	48a3      	ldr	r0, [pc, #652]	@ (8000a84 <main+0x350>)
 80007f8:	f006 fbbe 	bl	8006f78 <iprintf>

  HAL_Delay(100);
 80007fc:	2064      	movs	r0, #100	@ 0x64
 80007fe:	f001 ff8b 	bl	8002718 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000806:	23c8      	movs	r3, #200	@ 0xc8
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	2301      	movs	r3, #1
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	221e      	movs	r2, #30
 8000816:	217e      	movs	r1, #126	@ 0x7e
 8000818:	4899      	ldr	r0, [pc, #612]	@ (8000a80 <main+0x34c>)
 800081a:	f002 fdf3 	bl	8003404 <HAL_I2C_Mem_Write>
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d004      	beq.n	8000832 <main+0xfe>
    printf("I2C communication error (%X).\n", status);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4619      	mov	r1, r3
 800082c:	4895      	ldr	r0, [pc, #596]	@ (8000a84 <main+0x350>)
 800082e:	f006 fba3 	bl	8006f78 <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000832:	23f0      	movs	r3, #240	@ 0xf0
 8000834:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000836:	23c8      	movs	r3, #200	@ 0xc8
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	2301      	movs	r3, #1
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	1dbb      	adds	r3, r7, #6
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2301      	movs	r3, #1
 8000844:	220f      	movs	r2, #15
 8000846:	217e      	movs	r1, #126	@ 0x7e
 8000848:	488d      	ldr	r0, [pc, #564]	@ (8000a80 <main+0x34c>)
 800084a:	f002 fddb 	bl	8003404 <HAL_I2C_Mem_Write>
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <main+0x12e>
    printf("I2C communication error (%X).\n", status);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4619      	mov	r1, r3
 800085c:	4889      	ldr	r0, [pc, #548]	@ (8000a84 <main+0x350>)
 800085e:	f006 fb8b 	bl	8006f78 <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 8000862:	230f      	movs	r3, #15
 8000864:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000866:	23c8      	movs	r3, #200	@ 0xc8
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	1dbb      	adds	r3, r7, #6
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	220e      	movs	r2, #14
 8000876:	217e      	movs	r1, #126	@ 0x7e
 8000878:	4881      	ldr	r0, [pc, #516]	@ (8000a80 <main+0x34c>)
 800087a:	f002 fdc3 	bl	8003404 <HAL_I2C_Mem_Write>
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d004      	beq.n	8000892 <main+0x15e>
    printf("I2C communication error (%X).\n", status);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4619      	mov	r1, r3
 800088c:	487d      	ldr	r0, [pc, #500]	@ (8000a84 <main+0x350>)
 800088e:	f006 fb73 	bl	8006f78 <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 8000892:	230f      	movs	r3, #15
 8000894:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 8000896:	23c8      	movs	r3, #200	@ 0xc8
 8000898:	9302      	str	r3, [sp, #8]
 800089a:	2301      	movs	r3, #1
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2301      	movs	r3, #1
 80008a4:	220b      	movs	r2, #11
 80008a6:	217e      	movs	r1, #126	@ 0x7e
 80008a8:	4875      	ldr	r0, [pc, #468]	@ (8000a80 <main+0x34c>)
 80008aa:	f002 fdab 	bl	8003404 <HAL_I2C_Mem_Write>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d004      	beq.n	80008c2 <main+0x18e>
    printf("I2C communication error (%X).\n", status);
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4871      	ldr	r0, [pc, #452]	@ (8000a84 <main+0x350>)
 80008be:	f006 fb5b 	bl	8006f78 <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 80008c2:	230f      	movs	r3, #15
 80008c4:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80008c6:	23c8      	movs	r3, #200	@ 0xc8
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	1dbb      	adds	r3, r7, #6
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	2206      	movs	r2, #6
 80008d6:	217e      	movs	r1, #126	@ 0x7e
 80008d8:	4869      	ldr	r0, [pc, #420]	@ (8000a80 <main+0x34c>)
 80008da:	f002 fd93 	bl	8003404 <HAL_I2C_Mem_Write>
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <main+0x1be>
    printf("I2C communication error (%X).\n", status);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4619      	mov	r1, r3
 80008ec:	4865      	ldr	r0, [pc, #404]	@ (8000a84 <main+0x350>)
 80008ee:	f006 fb43 	bl	8006f78 <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 80008f2:	230f      	movs	r3, #15
 80008f4:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 80008f6:	23c8      	movs	r3, #200	@ 0xc8
 80008f8:	9302      	str	r3, [sp, #8]
 80008fa:	2301      	movs	r3, #1
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	1dbb      	adds	r3, r7, #6
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	2223      	movs	r2, #35	@ 0x23
 8000906:	217e      	movs	r1, #126	@ 0x7e
 8000908:	485d      	ldr	r0, [pc, #372]	@ (8000a80 <main+0x34c>)
 800090a:	f002 fd7b 	bl	8003404 <HAL_I2C_Mem_Write>
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <main+0x1ee>
    printf("I2C communication error (%X).\n", status);
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4619      	mov	r1, r3
 800091c:	4859      	ldr	r0, [pc, #356]	@ (8000a84 <main+0x350>)
 800091e:	f006 fb2b 	bl	8006f78 <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000922:	2305      	movs	r3, #5
 8000924:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000926:	23c8      	movs	r3, #200	@ 0xc8
 8000928:	9302      	str	r3, [sp, #8]
 800092a:	2301      	movs	r3, #1
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2301      	movs	r3, #1
 8000934:	2222      	movs	r2, #34	@ 0x22
 8000936:	217e      	movs	r1, #126	@ 0x7e
 8000938:	4851      	ldr	r0, [pc, #324]	@ (8000a80 <main+0x34c>)
 800093a:	f002 fd63 	bl	8003404 <HAL_I2C_Mem_Write>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d004      	beq.n	8000952 <main+0x21e>
    printf("I2C communication error (%X).\n", status);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4619      	mov	r1, r3
 800094c:	484d      	ldr	r0, [pc, #308]	@ (8000a84 <main+0x350>)
 800094e:	f006 fb13 	bl	8006f78 <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 8000952:	237d      	movs	r3, #125	@ 0x7d
 8000954:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000956:	23c8      	movs	r3, #200	@ 0xc8
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	2301      	movs	r3, #1
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	2225      	movs	r2, #37	@ 0x25
 8000966:	217e      	movs	r1, #126	@ 0x7e
 8000968:	4845      	ldr	r0, [pc, #276]	@ (8000a80 <main+0x34c>)
 800096a:	f002 fd4b 	bl	8003404 <HAL_I2C_Mem_Write>
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <main+0x24e>
    printf("I2C communication error (%X).\n", status);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4619      	mov	r1, r3
 800097c:	4841      	ldr	r0, [pc, #260]	@ (8000a84 <main+0x350>)
 800097e:	f006 fafb 	bl	8006f78 <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 8000982:	231b      	movs	r3, #27
 8000984:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 8000986:	23c8      	movs	r3, #200	@ 0xc8
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2301      	movs	r3, #1
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	1dbb      	adds	r3, r7, #6
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2226      	movs	r2, #38	@ 0x26
 8000996:	217e      	movs	r1, #126	@ 0x7e
 8000998:	4839      	ldr	r0, [pc, #228]	@ (8000a80 <main+0x34c>)
 800099a:	f002 fd33 	bl	8003404 <HAL_I2C_Mem_Write>
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <main+0x27e>
    printf("I2C communication error (%X).\n", status);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4835      	ldr	r0, [pc, #212]	@ (8000a84 <main+0x350>)
 80009ae:	f006 fae3 	bl	8006f78 <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	@ 0x64
 80009b4:	f001 feb0 	bl	8002718 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009b8:	200a      	movs	r0, #10
 80009ba:	f002 fa80 	bl	8002ebe <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80009be:	2008      	movs	r0, #8
 80009c0:	f002 fa8b 	bl	8002eda <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80009c4:	2312      	movs	r3, #18
 80009c6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009c8:	23c8      	movs	r3, #200	@ 0xc8
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	2301      	movs	r3, #1
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	227d      	movs	r2, #125	@ 0x7d
 80009d8:	217c      	movs	r1, #124	@ 0x7c
 80009da:	4829      	ldr	r0, [pc, #164]	@ (8000a80 <main+0x34c>)
 80009dc:	f002 fd12 	bl	8003404 <HAL_I2C_Mem_Write>
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d004      	beq.n	80009f4 <main+0x2c0>
    printf("I2C communication error (%X).\n", status);
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4619      	mov	r1, r3
 80009ee:	4825      	ldr	r0, [pc, #148]	@ (8000a84 <main+0x350>)
 80009f0:	f006 fac2 	bl	8006f78 <iprintf>

  data = 0x34;
 80009f4:	2334      	movs	r3, #52	@ 0x34
 80009f6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009f8:	23c8      	movs	r3, #200	@ 0xc8
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	227d      	movs	r2, #125	@ 0x7d
 8000a08:	217c      	movs	r1, #124	@ 0x7c
 8000a0a:	481d      	ldr	r0, [pc, #116]	@ (8000a80 <main+0x34c>)
 8000a0c:	f002 fcfa 	bl	8003404 <HAL_I2C_Mem_Write>
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d004      	beq.n	8000a24 <main+0x2f0>
    printf("I2C communication error (%X).\n", status);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	@ (8000a84 <main+0x350>)
 8000a20:	f006 faaa 	bl	8006f78 <iprintf>

  HAL_Delay(100);
 8000a24:	2064      	movs	r0, #100	@ 0x64
 8000a26:	f001 fe77 	bl	8002718 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a2a:	23ff      	movs	r3, #255	@ 0xff
 8000a2c:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000a2e:	23c8      	movs	r3, #200	@ 0xc8
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	1dbb      	adds	r3, r7, #6
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	217c      	movs	r1, #124	@ 0x7c
 8000a40:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <main+0x34c>)
 8000a42:	f002 fcdf 	bl	8003404 <HAL_I2C_Mem_Write>
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <main+0x326>
    printf("I2C communication error (%X).\n", status);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4619      	mov	r1, r3
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <main+0x350>)
 8000a56:	f006 fa8f 	bl	8006f78 <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a5a:	23ff      	movs	r3, #255	@ 0xff
 8000a5c:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000a5e:	23c8      	movs	r3, #200	@ 0xc8
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2301      	movs	r3, #1
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	220e      	movs	r2, #14
 8000a6e:	217c      	movs	r1, #124	@ 0x7c
 8000a70:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <main+0x34c>)
 8000a72:	f002 fcc7 	bl	8003404 <HAL_I2C_Mem_Write>
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	e005      	b.n	8000a88 <main+0x354>
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	200000cc 	.word	0x200000cc
 8000a84:	08007d88 	.word	0x08007d88
  if (status != HAL_OK)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <main+0x364>
    printf("I2C communication error (%X).\n", status);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4619      	mov	r1, r3
 8000a92:	482b      	ldr	r0, [pc, #172]	@ (8000b40 <main+0x40c>)
 8000a94:	f006 fa70 	bl	8006f78 <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000a9c:	23c8      	movs	r3, #200	@ 0xc8
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	1dbb      	adds	r3, r7, #6
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	2213      	movs	r2, #19
 8000aac:	217c      	movs	r1, #124	@ 0x7c
 8000aae:	4825      	ldr	r0, [pc, #148]	@ (8000b44 <main+0x410>)
 8000ab0:	f002 fca8 	bl	8003404 <HAL_I2C_Mem_Write>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d004      	beq.n	8000ac8 <main+0x394>
    printf("I2C communication error (%X).\n", status);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481f      	ldr	r0, [pc, #124]	@ (8000b40 <main+0x40c>)
 8000ac4:	f006 fa58 	bl	8006f78 <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000ac8:	23aa      	movs	r3, #170	@ 0xaa
 8000aca:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000acc:	23c8      	movs	r3, #200	@ 0xc8
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2216      	movs	r2, #22
 8000adc:	217c      	movs	r1, #124	@ 0x7c
 8000ade:	4819      	ldr	r0, [pc, #100]	@ (8000b44 <main+0x410>)
 8000ae0:	f002 fc90 	bl	8003404 <HAL_I2C_Mem_Write>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <main+0x3c4>
    printf("I2C communication error (%X).\n", status);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <main+0x40c>)
 8000af4:	f006 fa40 	bl	8006f78 <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000af8:	23aa      	movs	r3, #170	@ 0xaa
 8000afa:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000afc:	23c8      	movs	r3, #200	@ 0xc8
 8000afe:	9302      	str	r3, [sp, #8]
 8000b00:	2301      	movs	r3, #1
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2217      	movs	r2, #23
 8000b0c:	217c      	movs	r1, #124	@ 0x7c
 8000b0e:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <main+0x410>)
 8000b10:	f002 fc78 	bl	8003404 <HAL_I2C_Mem_Write>
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <main+0x3f4>
    printf("I2C communication error (%X).\n", status);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4619      	mov	r1, r3
 8000b22:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <main+0x40c>)
 8000b24:	f006 fa28 	bl	8006f78 <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000b28:	2064      	movs	r0, #100	@ 0x64
 8000b2a:	f001 fdf5 	bl	8002718 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f002 f9c5 	bl	8002ebe <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <main+0x414>)
 8000b36:	f006 fa87 	bl	8007048 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3a:	bf00      	nop
 8000b3c:	e7fd      	b.n	8000b3a <main+0x406>
 8000b3e:	bf00      	nop
 8000b40:	08007d88 	.word	0x08007d88
 8000b44:	200000cc 	.word	0x200000cc
 8000b48:	08007da8 	.word	0x08007da8

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	@ 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2234      	movs	r2, #52	@ 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 fb54 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b70:	f003 f862 	bl	8003c38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemClock_Config+0xdc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b8c:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <SystemClock_Config+0xe0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b94:	4a25      	ldr	r2, [pc, #148]	@ (8000c2c <SystemClock_Config+0xe0>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <SystemClock_Config+0xe0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 f88f 	bl	8003cf8 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000be0:	f000 ff1e 	bl	8001a20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000be4:	f003 f838 	bl	8003c58 <HAL_PWREx_EnableOverDrive>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bee:	f000 ff17 	bl	8001a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fb20 	bl	8004254 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c1a:	f000 ff01 	bl	8001a20 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3750      	adds	r7, #80	@ 0x50
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <MX_ADC1_Init+0x9c>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c72:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <MX_ADC1_Init+0xa0>)
 8000c74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000c92:	f001 fd65 	bl	8002760 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c9c:	f000 fec0 	bl	8001a20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_ADC1_Init+0x98>)
 8000cb2:	f001 fd99 	bl	80027e8 <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cbc:	f000 feb0 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000084 	.word	0x20000084
 8000ccc:	40012000 	.word	0x40012000
 8000cd0:	0f000001 	.word	0x0f000001

08000cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <MX_I2C1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <MX_I2C1_Init+0x7c>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d10:	f002 fadc 	bl	80032cc <HAL_I2C_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 fe81 	bl	8001a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d22:	f002 fef1 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 fe78 	bl	8001a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_I2C1_Init+0x74>)
 8000d34:	f002 ff33 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 fe6f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200000cc 	.word	0x200000cc
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	20303e5d 	.word	0x20303e5d

08000d54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <MX_I2C2_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <MX_I2C2_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000d90:	f002 fa9c 	bl	80032cc <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 fe41 	bl	8001a20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000da2:	f002 feb1 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fe38 	bl	8001a20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_I2C2_Init+0x74>)
 8000db4:	f002 fef3 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fe2f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000120 	.word	0x20000120
 8000dcc:	40005800 	.word	0x40005800
 8000dd0:	20303e5d 	.word	0x20303e5d

08000dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <MX_SPI1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000de0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000dee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000df2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e22:	2207      	movs	r2, #7
 8000e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_SPI1_Init+0x74>)
 8000e34:	f004 f85c 	bl	8004ef0 <HAL_SPI_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fdef 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000174 	.word	0x20000174
 8000e4c:	40013000 	.word	0x40013000

08000e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09a      	sub	sp, #104	@ 0x68
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	222c      	movs	r2, #44	@ 0x2c
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 f9bc 	bl	8007208 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e90:	4b55      	ldr	r3, [pc, #340]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000e92:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <MX_TIM1_Init+0x19c>)
 8000e94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000e96:	4b54      	ldr	r3, [pc, #336]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000e98:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000e9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b52      	ldr	r3, [pc, #328]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000ea4:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000ea6:	22c8      	movs	r2, #200	@ 0xc8
 8000ea8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ebc:	484a      	ldr	r0, [pc, #296]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000ebe:	f004 f8c2 	bl	8005046 <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ec8:	f000 fdaa 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ed2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4843      	ldr	r0, [pc, #268]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000eda:	f004 fc19 	bl	8005710 <HAL_TIM_ConfigClockSource>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee4:	f000 fd9c 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ee8:	483f      	ldr	r0, [pc, #252]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000eea:	f004 f903 	bl	80050f4 <HAL_TIM_PWM_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ef4:	f000 fd94 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4837      	ldr	r0, [pc, #220]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000f0c:	f005 f998 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f16:	f000 fd83 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1a:	2360      	movs	r3, #96	@ 0x60
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	482a      	ldr	r0, [pc, #168]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000f40:	f004 fad2 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f4a:	f000 fd69 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f52:	2204      	movs	r2, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000f58:	f004 fac6 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000f62:	f000 fd5d 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	481e      	ldr	r0, [pc, #120]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000f70:	f004 faba 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000f7a:	f000 fd51 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f82:	220c      	movs	r2, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	4818      	ldr	r0, [pc, #96]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000f88:	f004 faae 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000f92:	f000 fd45 	bl	8001a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000fcc:	f005 f9c6 	bl	800635c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000fd6:	f000 fd23 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fda:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <MX_TIM1_Init+0x198>)
 8000fdc:	f000 ffc6 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8000fe0:	bf00      	nop
 8000fe2:	3768      	adds	r7, #104	@ 0x68
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001d8 	.word	0x200001d8
 8000fec:	40010000 	.word	0x40010000

08000ff0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b092      	sub	sp, #72	@ 0x48
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001038:	4b39      	ldr	r3, [pc, #228]	@ (8001120 <MX_TIM2_Init+0x130>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001044:	4b36      	ldr	r3, [pc, #216]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b34      	ldr	r3, [pc, #208]	@ (8001120 <MX_TIM2_Init+0x130>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001058:	4831      	ldr	r0, [pc, #196]	@ (8001120 <MX_TIM2_Init+0x130>)
 800105a:	f003 fff4 	bl	8005046 <HAL_TIM_Base_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001064:	f000 fcdc 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001072:	4619      	mov	r1, r3
 8001074:	482a      	ldr	r0, [pc, #168]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001076:	f004 fb4b 	bl	8005710 <HAL_TIM_ConfigClockSource>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001080:	f000 fcce 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001084:	4826      	ldr	r0, [pc, #152]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001086:	f004 f835 	bl	80050f4 <HAL_TIM_PWM_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001090:	f000 fcc6 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001094:	4822      	ldr	r0, [pc, #136]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001096:	f004 f884 	bl	80051a2 <HAL_TIM_IC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010a0:	f000 fcbe 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	481b      	ldr	r0, [pc, #108]	@ (8001120 <MX_TIM2_Init+0x130>)
 80010b4:	f005 f8c4 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fcaf 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	@ 0x60
 80010c4:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <MX_TIM2_Init+0x130>)
 80010dc:	f004 fa04 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80010e6:	f000 fc9b 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ee:	2301      	movs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	2208      	movs	r2, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001102:	f004 f955 	bl	80053b0 <HAL_TIM_IC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800110c:	f000 fc88 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <MX_TIM2_Init+0x130>)
 8001112:	f000 ff2b 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8001116:	bf00      	nop
 8001118:	3748      	adds	r7, #72	@ 0x48
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000224 	.word	0x20000224

08001124 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	@ 0x30
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2224      	movs	r2, #36	@ 0x24
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f006 f868 	bl	8007208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <MX_TIM3_Init+0xa8>)
 8001146:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 8001156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001168:	2301      	movs	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001180:	2301      	movs	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 8001194:	f004 f866 	bl	8005264 <HAL_TIM_Encoder_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800119e:	f000 fc3f 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_TIM3_Init+0xa4>)
 80011b0:	f005 f846 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011ba:	f000 fc31 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000270 	.word	0x20000270
 80011cc:	40000400 	.word	0x40000400

080011d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	2224      	movs	r2, #36	@ 0x24
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 f812 	bl	8007208 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <MX_TIM4_Init+0xa4>)
 80011f0:	4a21      	ldr	r2, [pc, #132]	@ (8001278 <MX_TIM4_Init+0xa8>)
 80011f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <MX_TIM4_Init+0xa4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_TIM4_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_TIM4_Init+0xa4>)
 8001202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001206:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_TIM4_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_TIM4_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001214:	2301      	movs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800122c:	2301      	movs	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_TIM4_Init+0xa4>)
 8001240:	f004 f810 	bl	8005264 <HAL_TIM_Encoder_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800124a:	f000 fbe9 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	@ (8001274 <MX_TIM4_Init+0xa4>)
 800125c:	f004 fff0 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001266:	f000 fbdb 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3730      	adds	r7, #48	@ 0x30
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002bc 	.word	0x200002bc
 8001278:	40000800 	.word	0x40000800

0800127c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	@ 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001368 <MX_TIM5_Init+0xec>)
 80012b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012c2:	f04f 32ff 	mov.w	r2, #4294967295
 80012c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012d4:	4823      	ldr	r0, [pc, #140]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012d6:	f003 feb6 	bl	8005046 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012e0:	f000 fb9e 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012ee:	4619      	mov	r1, r3
 80012f0:	481c      	ldr	r0, [pc, #112]	@ (8001364 <MX_TIM5_Init+0xe8>)
 80012f2:	f004 fa0d 	bl	8005710 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80012fc:	f000 fb90 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001300:	4818      	ldr	r0, [pc, #96]	@ (8001364 <MX_TIM5_Init+0xe8>)
 8001302:	f003 fef7 	bl	80050f4 <HAL_TIM_PWM_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 fb88 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	@ (8001364 <MX_TIM5_Init+0xe8>)
 8001320:	f004 ff8e 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800132a:	f000 fb79 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	@ 0x60
 8001330:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4807      	ldr	r0, [pc, #28]	@ (8001364 <MX_TIM5_Init+0xe8>)
 8001346:	f004 f8cf 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001350:	f000 fb66 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <MX_TIM5_Init+0xe8>)
 8001356:	f000 fe09 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 800135a:	bf00      	nop
 800135c:	3738      	adds	r7, #56	@ 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000308 	.word	0x20000308
 8001368:	40000c00 	.word	0x40000c00

0800136c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b09a      	sub	sp, #104	@ 0x68
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	222c      	movs	r2, #44	@ 0x2c
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 ff2e 	bl	8007208 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013ac:	4b56      	ldr	r3, [pc, #344]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013ae:	4a57      	ldr	r2, [pc, #348]	@ (800150c <MX_TIM8_Init+0x1a0>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80013b2:	4b55      	ldr	r3, [pc, #340]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013b4:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80013b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b53      	ldr	r3, [pc, #332]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 80013c0:	4b51      	ldr	r3, [pc, #324]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013c2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80013c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013da:	484b      	ldr	r0, [pc, #300]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013dc:	f003 fe33 	bl	8005046 <HAL_TIM_Base_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80013e6:	f000 fb1b 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013f4:	4619      	mov	r1, r3
 80013f6:	4844      	ldr	r0, [pc, #272]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80013f8:	f004 f98a 	bl	8005710 <HAL_TIM_ConfigClockSource>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001402:	f000 fb0d 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001406:	4840      	ldr	r0, [pc, #256]	@ (8001508 <MX_TIM8_Init+0x19c>)
 8001408:	f003 fe74 	bl	80050f4 <HAL_TIM_PWM_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001412:	f000 fb05 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001422:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001426:	4619      	mov	r1, r3
 8001428:	4837      	ldr	r0, [pc, #220]	@ (8001508 <MX_TIM8_Init+0x19c>)
 800142a:	f004 ff09 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001434:	f000 faf4 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	@ 0x60
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001454:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	482a      	ldr	r0, [pc, #168]	@ (8001508 <MX_TIM8_Init+0x19c>)
 800145e:	f004 f843 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001468:	f000 fada 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800146c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001470:	2204      	movs	r2, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4824      	ldr	r0, [pc, #144]	@ (8001508 <MX_TIM8_Init+0x19c>)
 8001476:	f004 f837 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001480:	f000 face 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001484:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001488:	2208      	movs	r2, #8
 800148a:	4619      	mov	r1, r3
 800148c:	481e      	ldr	r0, [pc, #120]	@ (8001508 <MX_TIM8_Init+0x19c>)
 800148e:	f004 f82b 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001498:	f000 fac2 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800149c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014a0:	220c      	movs	r2, #12
 80014a2:	4619      	mov	r1, r3
 80014a4:	4818      	ldr	r0, [pc, #96]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80014a6:	f004 f81f 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80014b0:	f000 fab6 	bl	8001a20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80014ea:	f004 ff37 	bl	800635c <HAL_TIMEx_ConfigBreakDeadTime>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80014f4:	f000 fa94 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80014f8:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_TIM8_Init+0x19c>)
 80014fa:	f000 fd37 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80014fe:	bf00      	nop
 8001500:	3768      	adds	r7, #104	@ 0x68
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000354 	.word	0x20000354
 800150c:	40010400 	.word	0x40010400

08001510 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]
 8001526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_TIM9_Init+0x98>)
 800152a:	4a20      	ldr	r2, [pc, #128]	@ (80015ac <MX_TIM9_Init+0x9c>)
 800152c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <MX_TIM9_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_TIM9_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <MX_TIM9_Init+0x98>)
 800153c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001540:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_TIM9_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <MX_TIM9_Init+0x98>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800154e:	4816      	ldr	r0, [pc, #88]	@ (80015a8 <MX_TIM9_Init+0x98>)
 8001550:	f003 fdd0 	bl	80050f4 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800155a:	f000 fa61 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155e:	2360      	movs	r3, #96	@ 0x60
 8001560:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <MX_TIM9_Init+0x98>)
 8001576:	f003 ffb7 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001580:	f000 fa4e 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2204      	movs	r2, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MX_TIM9_Init+0x98>)
 800158c:	f003 ffac 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001596:	f000 fa43 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_TIM9_Init+0x98>)
 800159c:	f000 fce6 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200003a0 	.word	0x200003a0
 80015ac:	40014000 	.word	0x40014000

080015b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_UART4_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	@ (800160c <MX_UART4_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_UART4_Init+0x58>)
 80015bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_UART4_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_UART4_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_UART4_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_UART4_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_UART4_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_UART4_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_UART4_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_UART4_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_UART4_Init+0x58>)
 80015f4:	f004 ff30 	bl	8006458 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 fa0f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200003ec 	.word	0x200003ec
 800160c:	40004c00 	.word	0x40004c00

08001610 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_UART5_Init+0x58>)
 8001616:	4a15      	ldr	r2, [pc, #84]	@ (800166c <MX_UART5_Init+0x5c>)
 8001618:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_UART5_Init+0x58>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_UART5_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_UART5_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_UART5_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_UART5_Init+0x58>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_UART5_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_UART5_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <MX_UART5_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_UART5_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_UART5_Init+0x58>)
 8001654:	f004 ff00 	bl	8006458 <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 f9df 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000474 	.word	0x20000474
 800166c:	40005000 	.word	0x40005000

08001670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <MX_USART1_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_USART1_UART_Init+0x58>)
 80016b4:	f004 fed0 	bl	8006458 <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f000 f9af 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200004fc 	.word	0x200004fc
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <MX_USART2_UART_Init+0x5c>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001714:	f004 fea0 	bl	8006458 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800171e:	f000 f97f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000584 	.word	0x20000584
 800172c:	40004400 	.word	0x40004400

08001730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001736:	4a15      	ldr	r2, [pc, #84]	@ (800178c <MX_USART3_UART_Init+0x5c>)
 8001738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_USART3_UART_Init+0x58>)
 8001774:	f004 fe70 	bl	8006458 <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800177e:	f000 f94f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000060c 	.word	0x2000060c
 800178c:	40004800 	.word	0x40004800

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	@ 0x38
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	4b97      	ldr	r3, [pc, #604]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a96      	ldr	r2, [pc, #600]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017ac:	f043 0310 	orr.w	r3, r3, #16
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b94      	ldr	r3, [pc, #592]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	623b      	str	r3, [r7, #32]
 80017bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	4b91      	ldr	r3, [pc, #580]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a90      	ldr	r2, [pc, #576]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b8e      	ldr	r3, [pc, #568]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a8a      	ldr	r2, [pc, #552]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017dc:	f043 0320 	orr.w	r3, r3, #32
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b88      	ldr	r3, [pc, #544]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	4b85      	ldr	r3, [pc, #532]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a84      	ldr	r2, [pc, #528]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b82      	ldr	r3, [pc, #520]	@ (8001a04 <MX_GPIO_Init+0x274>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b7f      	ldr	r3, [pc, #508]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a04 <MX_GPIO_Init+0x274>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b7c      	ldr	r3, [pc, #496]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b79      	ldr	r3, [pc, #484]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a78      	ldr	r2, [pc, #480]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b76      	ldr	r3, [pc, #472]	@ (8001a04 <MX_GPIO_Init+0x274>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	4b73      	ldr	r3, [pc, #460]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a72      	ldr	r2, [pc, #456]	@ (8001a04 <MX_GPIO_Init+0x274>)
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b70      	ldr	r3, [pc, #448]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800184e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a6c      	ldr	r2, [pc, #432]	@ (8001a04 <MX_GPIO_Init+0x274>)
 8001854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <MX_GPIO_Init+0x274>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2118      	movs	r1, #24
 800186a:	4867      	ldr	r0, [pc, #412]	@ (8001a08 <MX_GPIO_Init+0x278>)
 800186c:	f001 fcfc 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001876:	4865      	ldr	r0, [pc, #404]	@ (8001a0c <MX_GPIO_Init+0x27c>)
 8001878:	f001 fcf6 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2140      	movs	r1, #64	@ 0x40
 8001880:	4863      	ldr	r0, [pc, #396]	@ (8001a10 <MX_GPIO_Init+0x280>)
 8001882:	f001 fcf1 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001886:	2318      	movs	r3, #24
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	485a      	ldr	r0, [pc, #360]	@ (8001a08 <MX_GPIO_Init+0x278>)
 800189e:	f001 fb37 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80018a2:	f643 7308 	movw	r3, #16136	@ 0x3f08
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4856      	ldr	r0, [pc, #344]	@ (8001a14 <MX_GPIO_Init+0x284>)
 80018ba:	f001 fb29 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 80018be:	2310      	movs	r3, #16
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4850      	ldr	r0, [pc, #320]	@ (8001a14 <MX_GPIO_Init+0x284>)
 80018d4:	f001 fb1c 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018d8:	2332      	movs	r3, #50	@ 0x32
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e8:	230b      	movs	r3, #11
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4849      	ldr	r0, [pc, #292]	@ (8001a18 <MX_GPIO_Init+0x288>)
 80018f4:	f001 fb0c 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018f8:	2386      	movs	r3, #134	@ 0x86
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001908:	230b      	movs	r3, #11
 800190a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	4842      	ldr	r0, [pc, #264]	@ (8001a1c <MX_GPIO_Init+0x28c>)
 8001914:	f001 fafc 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001918:	f244 0381 	movw	r3, #16513	@ 0x4081
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4836      	ldr	r0, [pc, #216]	@ (8001a0c <MX_GPIO_Init+0x27c>)
 8001932:	f001 faed 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001948:	230b      	movs	r3, #11
 800194a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001950:	4619      	mov	r1, r3
 8001952:	482e      	ldr	r0, [pc, #184]	@ (8001a0c <MX_GPIO_Init+0x27c>)
 8001954:	f001 fadc 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001958:	2340      	movs	r3, #64	@ 0x40
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4828      	ldr	r0, [pc, #160]	@ (8001a10 <MX_GPIO_Init+0x280>)
 8001970:	f001 face 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4822      	ldr	r0, [pc, #136]	@ (8001a10 <MX_GPIO_Init+0x280>)
 8001988:	f001 fac2 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800198c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800199e:	230a      	movs	r3, #10
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	481c      	ldr	r0, [pc, #112]	@ (8001a1c <MX_GPIO_Init+0x28c>)
 80019aa:	f001 fab1 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4816      	ldr	r0, [pc, #88]	@ (8001a1c <MX_GPIO_Init+0x28c>)
 80019c4:	f001 faa4 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019c8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019da:	230b      	movs	r3, #11
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	480a      	ldr	r0, [pc, #40]	@ (8001a10 <MX_GPIO_Init+0x280>)
 80019e6:	f001 fa93 	bl	8002f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	200a      	movs	r0, #10
 80019f0:	f001 fa49 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019f4:	200a      	movs	r0, #10
 80019f6:	f001 fa62 	bl	8002ebe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	@ 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40021800 	.word	0x40021800
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <Error_Handler+0x8>

08001a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	4a0e      	ldr	r2, [pc, #56]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_ADC_MspInit+0x74>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d123      	bne.n	8001ade <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_ADC_MspInit+0x78>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <HAL_ADC_MspInit+0x78>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_ADC_MspInit+0x78>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <HAL_ADC_MspInit+0x78>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <HAL_ADC_MspInit+0x78>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_ADC_MspInit+0x78>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aca:	2303      	movs	r3, #3
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_ADC_MspInit+0x7c>)
 8001ada:	f001 fa19 	bl	8002f10 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	@ 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0b0      	sub	sp, #192	@ 0xc0
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	2290      	movs	r2, #144	@ 0x90
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f005 fb77 	bl	8007208 <memset>
  if(hi2c->Instance==I2C1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a44      	ldr	r2, [pc, #272]	@ (8001c30 <HAL_I2C_MspInit+0x13c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d13e      	bne.n	8001ba2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fdb3 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b40:	f7ff ff6e 	bl	8001a20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b48:	4a3a      	ldr	r2, [pc, #232]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b50:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b64:	2312      	movs	r3, #18
 8001b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b76:	2304      	movs	r3, #4
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b80:	4619      	mov	r1, r3
 8001b82:	482d      	ldr	r0, [pc, #180]	@ (8001c38 <HAL_I2C_MspInit+0x144>)
 8001b84:	f001 f9c4 	bl	8002f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b88:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	4a29      	ldr	r2, [pc, #164]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b94:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ba0:	e041      	b.n	8001c26 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	@ (8001c3c <HAL_I2C_MspInit+0x148>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d13c      	bne.n	8001c26 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fd6f 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001bc8:	f7ff ff2a 	bl	8001a20 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001bd2:	f043 0320 	orr.w	r3, r3, #32
 8001bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c02:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c06:	4619      	mov	r1, r3
 8001c08:	480d      	ldr	r0, [pc, #52]	@ (8001c40 <HAL_I2C_MspInit+0x14c>)
 8001c0a:	f001 f981 	bl	8002f10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_I2C_MspInit+0x140>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	bf00      	nop
 8001c28:	37c0      	adds	r7, #192	@ 0xc0
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40005800 	.word	0x40005800
 8001c40:	40021400 	.word	0x40021400

08001c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	@ 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a33      	ldr	r2, [pc, #204]	@ (8001d30 <HAL_SPI_MspInit+0xec>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d160      	bne.n	8001d28 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a32      	ldr	r2, [pc, #200]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a2c      	ldr	r2, [pc, #176]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c96:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_SPI_MspInit+0xf0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <HAL_SPI_MspInit+0xf4>)
 8001ce2:	f001 f915 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <HAL_SPI_MspInit+0xf8>)
 8001d02:	f001 f905 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d18:	2305      	movs	r3, #5
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <HAL_SPI_MspInit+0xfc>)
 8001d24:	f001 f8f4 	bl	8002f10 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	@ 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013000 	.word	0x40013000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021800 	.word	0x40021800

08001d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a32      	ldr	r2, [pc, #200]	@ (8001e2c <HAL_TIM_Base_MspInit+0xe8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10c      	bne.n	8001d80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d66:	4b32      	ldr	r3, [pc, #200]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a31      	ldr	r2, [pc, #196]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b2f      	ldr	r3, [pc, #188]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d7e:	e051      	b.n	8001e24 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d88:	d129      	bne.n	8001dde <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a28      	ldr	r2, [pc, #160]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b26      	ldr	r3, [pc, #152]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a22      	ldr	r2, [pc, #136]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4817      	ldr	r0, [pc, #92]	@ (8001e34 <HAL_TIM_Base_MspInit+0xf0>)
 8001dd8:	f001 f89a 	bl	8002f10 <HAL_GPIO_Init>
}
 8001ddc:	e022      	b.n	8001e24 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <HAL_TIM_Base_MspInit+0xf4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d10c      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a10      	ldr	r2, [pc, #64]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	e010      	b.n	8001e24 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <HAL_TIM_Base_MspInit+0xf8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10b      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	4a07      	ldr	r2, [pc, #28]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_TIM_Base_MspInit+0xec>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
}
 8001e24:	bf00      	nop
 8001e26:	3730      	adds	r7, #48	@ 0x30
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400
 8001e38:	40000c00 	.word	0x40000c00
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	@ 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f18 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d128      	bne.n	8001eb4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e62:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a27      	ldr	r2, [pc, #156]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001e92:	2330      	movs	r3, #48	@ 0x30
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481c      	ldr	r0, [pc, #112]	@ (8001f20 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001eae:	f001 f82f 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001eb2:	e02d      	b.n	8001f10 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f24 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d128      	bne.n	8001f10 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebe:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a16      	ldr	r2, [pc, #88]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	4a10      	ldr	r2, [pc, #64]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001eee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f0c:	f001 f800 	bl	8002f10 <HAL_GPIO_Init>
}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	@ 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40020c00 	.word	0x40020c00

08001f2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_TIM_PWM_MspInit+0x38>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10b      	bne.n	8001f56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40014000 	.word	0x40014000
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a56      	ldr	r2, [pc, #344]	@ (80020e4 <HAL_TIM_MspPostInit+0x178>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d11d      	bne.n	8001fca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f8e:	4b56      	ldr	r3, [pc, #344]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a55      	ldr	r2, [pc, #340]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001fa6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	484a      	ldr	r0, [pc, #296]	@ (80020ec <HAL_TIM_MspPostInit+0x180>)
 8001fc4:	f000 ffa4 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001fc8:	e088      	b.n	80020dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd2:	d11d      	bne.n	8002010 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	4a43      	ldr	r2, [pc, #268]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ffe:	2301      	movs	r3, #1
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4839      	ldr	r0, [pc, #228]	@ (80020f0 <HAL_TIM_MspPostInit+0x184>)
 800200a:	f000 ff81 	bl	8002f10 <HAL_GPIO_Init>
}
 800200e:	e065      	b.n	80020dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a37      	ldr	r2, [pc, #220]	@ (80020f4 <HAL_TIM_MspPostInit+0x188>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d11c      	bne.n	8002054 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	4b33      	ldr	r3, [pc, #204]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a32      	ldr	r2, [pc, #200]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002042:	2302      	movs	r3, #2
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4828      	ldr	r0, [pc, #160]	@ (80020f0 <HAL_TIM_MspPostInit+0x184>)
 800204e:	f000 ff5f 	bl	8002f10 <HAL_GPIO_Init>
}
 8002052:	e043      	b.n	80020dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a27      	ldr	r2, [pc, #156]	@ (80020f8 <HAL_TIM_MspPostInit+0x18c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d11d      	bne.n	800209a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002076:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002088:	2303      	movs	r3, #3
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	4619      	mov	r1, r3
 8002092:	481a      	ldr	r0, [pc, #104]	@ (80020fc <HAL_TIM_MspPostInit+0x190>)
 8002094:	f000 ff3c 	bl	8002f10 <HAL_GPIO_Init>
}
 8002098:	e020      	b.n	80020dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_TIM_MspPostInit+0x194>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d11b      	bne.n	80020dc <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_TIM_MspPostInit+0x17c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80020bc:	2360      	movs	r3, #96	@ 0x60
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020cc:	2303      	movs	r3, #3
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <HAL_TIM_MspPostInit+0x180>)
 80020d8:	f000 ff1a 	bl	8002f10 <HAL_GPIO_Init>
}
 80020dc:	bf00      	nop
 80020de:	3730      	adds	r7, #48	@ 0x30
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40014000 	.word	0x40014000

08002104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0b6      	sub	sp, #216	@ 0xd8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002120:	2290      	movs	r2, #144	@ 0x90
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f005 f86f 	bl	8007208 <memset>
  if(huart->Instance==UART4)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4aa0      	ldr	r2, [pc, #640]	@ (80023b0 <HAL_UART_MspInit+0x2ac>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d13e      	bne.n	80021b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002140:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002144:	4618      	mov	r0, r3
 8002146:	f002 faab 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002150:	f7ff fc66 	bl	8001a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002154:	4b97      	ldr	r3, [pc, #604]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	4a96      	ldr	r2, [pc, #600]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 800215a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800215e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002160:	4b94      	ldr	r3, [pc, #592]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002168:	633b      	str	r3, [r7, #48]	@ 0x30
 800216a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216c:	4b91      	ldr	r3, [pc, #580]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4a90      	ldr	r2, [pc, #576]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6313      	str	r3, [r2, #48]	@ 0x30
 8002178:	4b8e      	ldr	r3, [pc, #568]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002184:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218c:	2302      	movs	r3, #2
 800218e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800219e:	2308      	movs	r3, #8
 80021a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4883      	ldr	r0, [pc, #524]	@ (80023b8 <HAL_UART_MspInit+0x2b4>)
 80021ac:	f000 feb0 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021b0:	e151      	b.n	8002456 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a81      	ldr	r2, [pc, #516]	@ (80023bc <HAL_UART_MspInit+0x2b8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d160      	bne.n	800227e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80021bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 fa67 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80021d8:	f7ff fc22 	bl	8001a20 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80021dc:	4b75      	ldr	r3, [pc, #468]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	4a74      	ldr	r2, [pc, #464]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e8:	4b72      	ldr	r3, [pc, #456]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4b6f      	ldr	r3, [pc, #444]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	4a6e      	ldr	r2, [pc, #440]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002200:	4b6c      	ldr	r3, [pc, #432]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800220c:	4b69      	ldr	r3, [pc, #420]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4a68      	ldr	r2, [pc, #416]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6313      	str	r3, [r2, #48]	@ 0x30
 8002218:	4b66      	ldr	r3, [pc, #408]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	623b      	str	r3, [r7, #32]
 8002222:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800223e:	2308      	movs	r3, #8
 8002240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002248:	4619      	mov	r1, r3
 800224a:	485d      	ldr	r0, [pc, #372]	@ (80023c0 <HAL_UART_MspInit+0x2bc>)
 800224c:	f000 fe60 	bl	8002f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800226a:	2308      	movs	r3, #8
 800226c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002274:	4619      	mov	r1, r3
 8002276:	4850      	ldr	r0, [pc, #320]	@ (80023b8 <HAL_UART_MspInit+0x2b4>)
 8002278:	f000 fe4a 	bl	8002f10 <HAL_GPIO_Init>
}
 800227c:	e0eb      	b.n	8002456 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a50      	ldr	r2, [pc, #320]	@ (80023c4 <HAL_UART_MspInit+0x2c0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d151      	bne.n	800232c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002288:	2340      	movs	r3, #64	@ 0x40
 800228a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800228c:	2300      	movs	r3, #0
 800228e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002290:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fa03 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80022a0:	f7ff fbbe 	bl	8001a20 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a4:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	4a42      	ldr	r2, [pc, #264]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b0:	4b40      	ldr	r3, [pc, #256]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022bc:	4b3d      	ldr	r3, [pc, #244]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	4a3c      	ldr	r2, [pc, #240]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c8:	4b3a      	ldr	r3, [pc, #232]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022ee:	2304      	movs	r3, #4
 80022f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4831      	ldr	r0, [pc, #196]	@ (80023c0 <HAL_UART_MspInit+0x2bc>)
 80022fc:	f000 fe08 	bl	8002f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002300:	2340      	movs	r3, #64	@ 0x40
 8002302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002318:	2307      	movs	r3, #7
 800231a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002322:	4619      	mov	r1, r3
 8002324:	4826      	ldr	r0, [pc, #152]	@ (80023c0 <HAL_UART_MspInit+0x2bc>)
 8002326:	f000 fdf3 	bl	8002f10 <HAL_GPIO_Init>
}
 800232a:	e094      	b.n	8002456 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <HAL_UART_MspInit+0x2c4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d14c      	bne.n	80023d0 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800233a:	2300      	movs	r3, #0
 800233c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002342:	4618      	mov	r0, r3
 8002344:	f002 f9ac 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800234e:	f7ff fb67 	bl	8001a20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <HAL_UART_MspInit+0x2b0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002382:	2360      	movs	r3, #96	@ 0x60
 8002384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800239a:	2307      	movs	r3, #7
 800239c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4809      	ldr	r0, [pc, #36]	@ (80023cc <HAL_UART_MspInit+0x2c8>)
 80023a8:	f000 fdb2 	bl	8002f10 <HAL_GPIO_Init>
}
 80023ac:	e053      	b.n	8002456 <HAL_UART_MspInit+0x352>
 80023ae:	bf00      	nop
 80023b0:	40004c00 	.word	0x40004c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40005000 	.word	0x40005000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40004400 	.word	0x40004400
 80023cc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_UART_MspInit+0x35c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d13d      	bne.n	8002456 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 f958 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80023f6:	f7ff fb13 	bl	8001a20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <HAL_UART_MspInit+0x360>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <HAL_UART_MspInit+0x360>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_UART_MspInit+0x360>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_UART_MspInit+0x360>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a13      	ldr	r2, [pc, #76]	@ (8002464 <HAL_UART_MspInit+0x360>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_UART_MspInit+0x360>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800242a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800242e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002444:	2307      	movs	r3, #7
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <HAL_UART_MspInit+0x364>)
 8002452:	f000 fd5d 	bl	8002f10 <HAL_GPIO_Init>
}
 8002456:	bf00      	nop
 8002458:	37d8      	adds	r7, #216	@ 0xd8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40004800 	.word	0x40004800
 8002464:	40023800 	.word	0x40023800
 8002468:	40020c00 	.word	0x40020c00

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <NMI_Handler+0x4>

08002474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <MemManage_Handler+0x4>

08002484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <BusFault_Handler+0x4>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <UsageFault_Handler+0x4>

08002494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c2:	f000 f909 	bl	80026d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}

080024ca <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 80024ce:	2010      	movs	r0, #16
 80024d0:	f000 fee4 	bl	800329c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e00a      	b.n	8002500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ea:	f3af 8000 	nop.w
 80024ee:	4601      	mov	r1, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	b2ca      	uxtb	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	dbf0      	blt.n	80024ea <_read+0x12>
  }

  return len;
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800253a:	605a      	str	r2, [r3, #4]
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_isatty>:

int _isatty(int file)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f004 fe7a 	bl	80072a4 <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a05      	ldr	r2, [pc, #20]	@ (80025e0 <_sbrk+0x64>)
 80025cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20080000 	.word	0x20080000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	20000694 	.word	0x20000694
 80025e4:	200007e8 	.word	0x200007e8

080025e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <SystemInit+0x20>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <SystemInit+0x20>)
 80025f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800260c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002610:	480d      	ldr	r0, [pc, #52]	@ (8002648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002612:	490e      	ldr	r1, [pc, #56]	@ (800264c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002614:	4a0e      	ldr	r2, [pc, #56]	@ (8002650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0b      	ldr	r2, [pc, #44]	@ (8002654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002628:	4c0b      	ldr	r4, [pc, #44]	@ (8002658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002636:	f7ff ffd7 	bl	80025e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f004 fe39 	bl	80072b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263e:	f7fe f879 	bl	8000734 <main>
  bx  lr    
 8002642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002644:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002650:	08007e0c 	.word	0x08007e0c
  ldr r2, =_sbss
 8002654:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002658:	200007e8 	.word	0x200007e8

0800265c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC_IRQHandler>

0800265e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002662:	2003      	movs	r0, #3
 8002664:	f000 fc04 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002668:	2000      	movs	r0, #0
 800266a:	f000 f805 	bl	8002678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800266e:	f7ff f9dd 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_InitTick+0x54>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_InitTick+0x58>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fc2d 	bl	8002ef6 <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00e      	b.n	80026c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b0f      	cmp	r3, #15
 80026aa:	d80a      	bhi.n	80026c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ac:	2200      	movs	r2, #0
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f000 fbe7 	bl	8002e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b8:	4a06      	ldr	r2, [pc, #24]	@ (80026d4 <HAL_InitTick+0x5c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_IncTick+0x20>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x24>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a04      	ldr	r2, [pc, #16]	@ (80026fc <HAL_IncTick+0x24>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000008 	.word	0x20000008
 80026fc:	20000698 	.word	0x20000698

08002700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return uwTick;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_GetTick+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000698 	.word	0x20000698

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff ffee 	bl	8002700 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_Delay+0x44>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffde 	bl	8002700 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000008 	.word	0x20000008

08002760 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e031      	b.n	80027da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff f978 	bl	8001a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_ADC_Init+0x84>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f970 	bl	8002a94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027ca:	e001      	b.n	80027d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	ffffeefd 	.word	0xffffeefd

080027e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1c>
 8002800:	2302      	movs	r3, #2
 8002802:	e136      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x28a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b09      	cmp	r3, #9
 8002812:	d93a      	bls.n	800288a <HAL_ADC_ConfigChannel+0xa2>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800281c:	d035      	beq.n	800288a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68d9      	ldr	r1, [r3, #12]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	3b1e      	subs	r3, #30
 8002834:	2207      	movs	r2, #7
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a8d      	ldr	r2, [pc, #564]	@ (8002a80 <HAL_ADC_ConfigChannel+0x298>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10a      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68d9      	ldr	r1, [r3, #12]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	061a      	lsls	r2, r3, #24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002862:	e035      	b.n	80028d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	4603      	mov	r3, r0
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4403      	add	r3, r0
 800287c:	3b1e      	subs	r3, #30
 800287e:	409a      	lsls	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002888:	e022      	b.n	80028d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	2207      	movs	r2, #7
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43da      	mvns	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	400a      	ands	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6919      	ldr	r1, [r3, #16]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	4603      	mov	r3, r0
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4403      	add	r3, r0
 80028c6:	409a      	lsls	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d824      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b05      	subs	r3, #5
 80028ea:	221f      	movs	r2, #31
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	400a      	ands	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	4618      	mov	r0, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b05      	subs	r3, #5
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002920:	e04c      	b.n	80029bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d824      	bhi.n	8002974 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b23      	subs	r3, #35	@ 0x23
 800293c:	221f      	movs	r2, #31
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	400a      	ands	r2, r1
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3b23      	subs	r3, #35	@ 0x23
 8002966:	fa00 f203 	lsl.w	r2, r0, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
 8002972:	e023      	b.n	80029bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	3b41      	subs	r3, #65	@ 0x41
 8002986:	221f      	movs	r2, #31
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43da      	mvns	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	400a      	ands	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	3b41      	subs	r3, #65	@ 0x41
 80029b0:	fa00 f203 	lsl.w	r2, r0, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a30      	ldr	r2, [pc, #192]	@ (8002a84 <HAL_ADC_ConfigChannel+0x29c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10a      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1f4>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ce:	d105      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80029d6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80029da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a28      	ldr	r2, [pc, #160]	@ (8002a84 <HAL_ADC_ConfigChannel+0x29c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10f      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x21e>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b12      	cmp	r3, #18
 80029ec:	d10b      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029ee:	4b26      	ldr	r3, [pc, #152]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a25      	ldr	r2, [pc, #148]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80029f8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029fa:	4b23      	ldr	r3, [pc, #140]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a04:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a84 <HAL_ADC_ConfigChannel+0x29c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d12b      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x280>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_ADC_ConfigChannel+0x298>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x23a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b11      	cmp	r3, #17
 8002a20:	d122      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a22:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a28:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a2c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a38:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_ADC_ConfigChannel+0x298>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a44:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <HAL_ADC_ConfigChannel+0x2a4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0c9a      	lsrs	r2, r3, #18
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a5a:	e002      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f9      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	10000012 	.word	0x10000012
 8002a84:	40012000 	.word	0x40012000
 8002a88:	40012300 	.word	0x40012300
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	431bde83 	.word	0x431bde83

08002a94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a9c:	4b78      	ldr	r3, [pc, #480]	@ (8002c80 <ADC_Init+0x1ec>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a77      	ldr	r2, [pc, #476]	@ (8002c80 <ADC_Init+0x1ec>)
 8002aa2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002aa6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002aa8:	4b75      	ldr	r3, [pc, #468]	@ (8002c80 <ADC_Init+0x1ec>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4973      	ldr	r1, [pc, #460]	@ (8002c80 <ADC_Init+0x1ec>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	021a      	lsls	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6899      	ldr	r1, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	4a58      	ldr	r2, [pc, #352]	@ (8002c84 <ADC_Init+0x1f0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d022      	beq.n	8002b6e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	e00f      	b.n	8002b8e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0202 	bic.w	r2, r2, #2
 8002b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	005a      	lsls	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	3b01      	subs	r3, #1
 8002be8:	035a      	lsls	r2, r3, #13
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e007      	b.n	8002c04 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	051a      	lsls	r2, r3, #20
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6899      	ldr	r1, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c46:	025a      	lsls	r2, r3, #9
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6899      	ldr	r1, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	029a      	lsls	r2, r3, #10
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40012300 	.word	0x40012300
 8002c84:	0f000001 	.word	0x0f000001

08002c88 <__NVIC_SetPriorityGrouping>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <__NVIC_SetPriorityGrouping+0x44>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00
 8002ccc:	05fa0000 	.word	0x05fa0000

08002cd0 <__NVIC_GetPriorityGrouping>:
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd4:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	f003 0307 	and.w	r3, r3, #7
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_EnableIRQ>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db0b      	blt.n	8002d16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4907      	ldr	r1, [pc, #28]	@ (8002d24 <__NVIC_EnableIRQ+0x38>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100

08002d28 <__NVIC_DisableIRQ>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db12      	blt.n	8002d60 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	490a      	ldr	r1, [pc, #40]	@ (8002d6c <__NVIC_DisableIRQ+0x44>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	3320      	adds	r3, #32
 8002d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d54:	f3bf 8f4f 	dsb	sy
}
 8002d58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d5a:	f3bf 8f6f 	isb	sy
}
 8002d5e:	bf00      	nop
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <__NVIC_SetPriority>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	@ (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	@ (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	@ 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <SysTick_Config>:
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3c:	d301      	bcc.n	8002e42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00f      	b.n	8002e62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e42:	4a0a      	ldr	r2, [pc, #40]	@ (8002e6c <SysTick_Config+0x40>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f7ff ff8e 	bl	8002d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <SysTick_Config+0x40>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <SysTick_Config+0x40>)
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010

08002e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff05 	bl	8002c88 <__NVIC_SetPriorityGrouping>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e98:	f7ff ff1a 	bl	8002cd0 <__NVIC_GetPriorityGrouping>
 8002e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff8e 	bl	8002dc4 <NVIC_EncodePriority>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff5d 	bl	8002d70 <__NVIC_SetPriority>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff0d 	bl	8002cec <__NVIC_EnableIRQ>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff1d 	bl	8002d28 <__NVIC_DisableIRQ>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff94 	bl	8002e2c <SysTick_Config>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	@ 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e175      	b.n	800321c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 8164 	bne.w	8003216 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d005      	beq.n	8002f66 <HAL_GPIO_Init+0x56>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d017      	beq.n	8003004 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d123      	bne.n	8003058 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80be 	beq.w	8003216 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <HAL_GPIO_Init+0x324>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	4a65      	ldr	r2, [pc, #404]	@ (8003234 <HAL_GPIO_Init+0x324>)
 80030a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a6:	4b63      	ldr	r3, [pc, #396]	@ (8003234 <HAL_GPIO_Init+0x324>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030b2:	4a61      	ldr	r2, [pc, #388]	@ (8003238 <HAL_GPIO_Init+0x328>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_GPIO_Init+0x32c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d037      	beq.n	800314e <HAL_GPIO_Init+0x23e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a57      	ldr	r2, [pc, #348]	@ (8003240 <HAL_GPIO_Init+0x330>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_GPIO_Init+0x23a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a56      	ldr	r2, [pc, #344]	@ (8003244 <HAL_GPIO_Init+0x334>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02b      	beq.n	8003146 <HAL_GPIO_Init+0x236>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a55      	ldr	r2, [pc, #340]	@ (8003248 <HAL_GPIO_Init+0x338>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d025      	beq.n	8003142 <HAL_GPIO_Init+0x232>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a54      	ldr	r2, [pc, #336]	@ (800324c <HAL_GPIO_Init+0x33c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <HAL_GPIO_Init+0x22e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a53      	ldr	r2, [pc, #332]	@ (8003250 <HAL_GPIO_Init+0x340>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d019      	beq.n	800313a <HAL_GPIO_Init+0x22a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a52      	ldr	r2, [pc, #328]	@ (8003254 <HAL_GPIO_Init+0x344>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0x226>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a51      	ldr	r2, [pc, #324]	@ (8003258 <HAL_GPIO_Init+0x348>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00d      	beq.n	8003132 <HAL_GPIO_Init+0x222>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a50      	ldr	r2, [pc, #320]	@ (800325c <HAL_GPIO_Init+0x34c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <HAL_GPIO_Init+0x21e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4f      	ldr	r2, [pc, #316]	@ (8003260 <HAL_GPIO_Init+0x350>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_GPIO_Init+0x21a>
 8003126:	2309      	movs	r3, #9
 8003128:	e012      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800312a:	230a      	movs	r3, #10
 800312c:	e010      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800312e:	2308      	movs	r3, #8
 8003130:	e00e      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003132:	2307      	movs	r3, #7
 8003134:	e00c      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003136:	2306      	movs	r3, #6
 8003138:	e00a      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800313a:	2305      	movs	r3, #5
 800313c:	e008      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800313e:	2304      	movs	r3, #4
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003142:	2303      	movs	r3, #3
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800314e:	2300      	movs	r3, #0
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003160:	4935      	ldr	r1, [pc, #212]	@ (8003238 <HAL_GPIO_Init+0x328>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316e:	4b3d      	ldr	r3, [pc, #244]	@ (8003264 <HAL_GPIO_Init+0x354>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003192:	4a34      	ldr	r2, [pc, #208]	@ (8003264 <HAL_GPIO_Init+0x354>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003198:	4b32      	ldr	r3, [pc, #200]	@ (8003264 <HAL_GPIO_Init+0x354>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031bc:	4a29      	ldr	r2, [pc, #164]	@ (8003264 <HAL_GPIO_Init+0x354>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c2:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <HAL_GPIO_Init+0x354>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003264 <HAL_GPIO_Init+0x354>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <HAL_GPIO_Init+0x354>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003210:	4a14      	ldr	r2, [pc, #80]	@ (8003264 <HAL_GPIO_Init+0x354>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f67f ae86 	bls.w	8002f30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	@ 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40013800 	.word	0x40013800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400
 8003244:	40020800 	.word	0x40020800
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40021000 	.word	0x40021000
 8003250:	40021400 	.word	0x40021400
 8003254:	40021800 	.word	0x40021800
 8003258:	40021c00 	.word	0x40021c00
 800325c:	40022000 	.word	0x40022000
 8003260:	40022400 	.word	0x40022400
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003284:	e003      	b.n	800328e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f9ea 	bl	8000694 <HAL_GPIO_EXTI_Callback>
  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e08b      	b.n	80033f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe fbfe 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	@ 0x24
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800331c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800332c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e006      	b.n	8003354 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003352:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d108      	bne.n	800336e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	e007      	b.n	800337e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800337c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_I2C_Init+0x134>)
 800338a:	430b      	orrs	r3, r1
 800338c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800339c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69d9      	ldr	r1, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	02008000 	.word	0x02008000

08003404 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af02      	add	r7, sp, #8
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	461a      	mov	r2, r3
 8003412:	4603      	mov	r3, r0
 8003414:	817b      	strh	r3, [r7, #10]
 8003416:	460b      	mov	r3, r1
 8003418:	813b      	strh	r3, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b20      	cmp	r3, #32
 8003428:	f040 80f9 	bne.w	800361e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_I2C_Mem_Write+0x34>
 8003432:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0ed      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Mem_Write+0x4e>
 800344e:	2302      	movs	r3, #2
 8003450:	e0e6      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800345a:	f7ff f951 	bl	8002700 <HAL_GetTick>
 800345e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2319      	movs	r3, #25
 8003466:	2201      	movs	r2, #1
 8003468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f955 	bl	800371c <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0d1      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2221      	movs	r2, #33	@ 0x21
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2240      	movs	r2, #64	@ 0x40
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800349c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a4:	88f8      	ldrh	r0, [r7, #6]
 80034a6:	893a      	ldrh	r2, [r7, #8]
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4603      	mov	r3, r0
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8b9 	bl	800362c <I2C_RequestMemoryWrite>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0a9      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2bff      	cmp	r3, #255	@ 0xff
 80034d4:	d90e      	bls.n	80034f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	22ff      	movs	r2, #255	@ 0xff
 80034da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	8979      	ldrh	r1, [r7, #10]
 80034e4:	2300      	movs	r3, #0
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fad9 	bl	8003aa4 <I2C_TransferConfig>
 80034f2:	e00f      	b.n	8003514 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003502:	b2da      	uxtb	r2, r3
 8003504:	8979      	ldrh	r1, [r7, #10]
 8003506:	2300      	movs	r3, #0
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fac8 	bl	8003aa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f958 	bl	80037ce <I2C_WaitOnTXISFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e07b      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d034      	beq.n	80035cc <HAL_I2C_Mem_Write+0x1c8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d130      	bne.n	80035cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f8d1 	bl	800371c <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04d      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2bff      	cmp	r3, #255	@ 0xff
 800358c:	d90e      	bls.n	80035ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	22ff      	movs	r2, #255	@ 0xff
 8003592:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003598:	b2da      	uxtb	r2, r3
 800359a:	8979      	ldrh	r1, [r7, #10]
 800359c:	2300      	movs	r3, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fa7d 	bl	8003aa4 <I2C_TransferConfig>
 80035aa:	e00f      	b.n	80035cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	8979      	ldrh	r1, [r7, #10]
 80035be:	2300      	movs	r3, #0
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fa6c 	bl	8003aa4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d19e      	bne.n	8003514 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f93e 	bl	800385c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e01a      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2220      	movs	r2, #32
 80035f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <HAL_I2C_Mem_Write+0x224>)
 80035fe:	400b      	ands	r3, r1
 8003600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
  }
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	fe00e800 	.word	0xfe00e800

0800362c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	8979      	ldrh	r1, [r7, #10]
 800364c:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <I2C_RequestMemoryWrite+0xa4>)
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fa25 	bl	8003aa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8b5 	bl	80037ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e02c      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	629a      	str	r2, [r3, #40]	@ 0x28
 800367e:	e015      	b.n	80036ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003680:	893b      	ldrh	r3, [r7, #8]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	b29b      	uxth	r3, r3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f89b 	bl	80037ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e012      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	@ 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f830 	bl	800371c <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	80002000 	.word	0x80002000

080036d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d103      	bne.n	80036f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d007      	beq.n	8003710 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	619a      	str	r2, [r3, #24]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800372c:	e03b      	b.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f8d6 	bl	80038e4 <I2C_IsErrorOccurred>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e041      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d02d      	beq.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fe ffd9 	bl	8002700 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x44>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d122      	bne.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	429a      	cmp	r2, r3
 800377c:	d113      	bne.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00f      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d0b4      	beq.n	800372e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037da:	e033      	b.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f87f 	bl	80038e4 <I2C_IsErrorOccurred>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e031      	b.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d025      	beq.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fe ff82 	bl	8002700 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11a      	bne.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d013      	beq.n	8003844 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d1c4      	bne.n	80037dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003868:	e02f      	b.n	80038ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f838 	bl	80038e4 <I2C_IsErrorOccurred>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e02d      	b.n	80038da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fe ff3f 	bl	8002700 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d11a      	bne.n	80038ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d013      	beq.n	80038ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e007      	b.n	80038da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d1c8      	bne.n	800386a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08a      	sub	sp, #40	@ 0x28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d068      	beq.n	80039e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2210      	movs	r2, #16
 8003916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003918:	e049      	b.n	80039ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d045      	beq.n	80039ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe feed 	bl	8002700 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_IsErrorOccurred+0x54>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13a      	bne.n	80039ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800394a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800395a:	d121      	bne.n	80039a0 <I2C_IsErrorOccurred+0xbc>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003962:	d01d      	beq.n	80039a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b20      	cmp	r3, #32
 8003968:	d01a      	beq.n	80039a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003978:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800397a:	f7fe fec1 	bl	8002700 <HAL_GetTick>
 800397e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003980:	e00e      	b.n	80039a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003982:	f7fe febd 	bl	8002700 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b19      	cmp	r3, #25
 800398e:	d907      	bls.n	80039a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f043 0320 	orr.w	r3, r3, #32
 8003996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800399e:	e006      	b.n	80039ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d1e9      	bne.n	8003982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d003      	beq.n	80039c4 <I2C_IsErrorOccurred+0xe0>
 80039bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0aa      	beq.n	800391a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2220      	movs	r2, #32
 80039d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01c      	beq.n	8003a92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fe3b 	bl	80036d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <I2C_IsErrorOccurred+0x1bc>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3728      	adds	r7, #40	@ 0x28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003abc:	7a7b      	ldrb	r3, [r7, #9]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ad2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	0d5b      	lsrs	r3, r3, #21
 8003ade:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ae2:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <I2C_TransferConfig+0x60>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	03ff63ff 	.word	0x03ff63ff

08003b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d138      	bne.n	8003b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e032      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	@ 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d139      	bne.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e033      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2224      	movs	r2, #36	@ 0x24
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a04      	ldr	r2, [pc, #16]	@ (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40007000 	.word	0x40007000

08003c58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	4b23      	ldr	r3, [pc, #140]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	4a22      	ldr	r2, [pc, #136]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c86:	f7fe fd3b 	bl	8002700 <HAL_GetTick>
 8003c8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c8c:	e009      	b.n	8003ca2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c8e:	f7fe fd37 	bl	8002700 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c9c:	d901      	bls.n	8003ca2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e022      	b.n	8003ce8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ca2:	4b14      	ldr	r3, [pc, #80]	@ (8003cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cae:	d1ee      	bne.n	8003c8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cbc:	f7fe fd20 	bl	8002700 <HAL_GetTick>
 8003cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cc2:	e009      	b.n	8003cd8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cc4:	f7fe fd1c 	bl	8002700 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cd2:	d901      	bls.n	8003cd8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e007      	b.n	8003ce8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ce4:	d1ee      	bne.n	8003cc4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d00:	2300      	movs	r3, #0
 8003d02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e29b      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8087 	beq.w	8003e2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d1c:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d00c      	beq.n	8003d42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d28:	4b93      	ldr	r3, [pc, #588]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d112      	bne.n	8003d5a <HAL_RCC_OscConfig+0x62>
 8003d34:	4b90      	ldr	r3, [pc, #576]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d40:	d10b      	bne.n	8003d5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d42:	4b8d      	ldr	r3, [pc, #564]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d06c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x130>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d168      	bne.n	8003e28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e275      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x7a>
 8003d64:	4b84      	ldr	r3, [pc, #528]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a83      	ldr	r2, [pc, #524]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	e02e      	b.n	8003dd0 <HAL_RCC_OscConfig+0xd8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x9c>
 8003d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b7c      	ldr	r3, [pc, #496]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7b      	ldr	r2, [pc, #492]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e01d      	b.n	8003dd0 <HAL_RCC_OscConfig+0xd8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	4b76      	ldr	r3, [pc, #472]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a75      	ldr	r2, [pc, #468]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b73      	ldr	r3, [pc, #460]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a72      	ldr	r2, [pc, #456]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	e00b      	b.n	8003dd0 <HAL_RCC_OscConfig+0xd8>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fc92 	bl	8002700 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fe fc8e 	bl	8002700 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	@ 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e229      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0xe8>
 8003dfe:	e014      	b.n	8003e2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fc7e 	bl	8002700 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fe fc7a 	bl	8002700 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	@ 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e215      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	4b57      	ldr	r3, [pc, #348]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x110>
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d069      	beq.n	8003f0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e36:	4b50      	ldr	r3, [pc, #320]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e42:	4b4d      	ldr	r3, [pc, #308]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d11c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x190>
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d116      	bne.n	8003e88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_RCC_OscConfig+0x17a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e1e9      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e72:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	493d      	ldr	r1, [pc, #244]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e86:	e040      	b.n	8003f0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d023      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e90:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a38      	ldr	r2, [pc, #224]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fe fc30 	bl	8002700 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7fe fc2c 	bl	8002700 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e1c7      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b30      	ldr	r3, [pc, #192]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4929      	ldr	r1, [pc, #164]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
 8003ed6:	e018      	b.n	8003f0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed8:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fc0c 	bl	8002700 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fe fc08 	bl	8002700 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1a3      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d038      	beq.n	8003f88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d019      	beq.n	8003f52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1e:	4b16      	ldr	r3, [pc, #88]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fe fbe9 	bl	8002700 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fe fbe5 	bl	8002700 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e180      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x23a>
 8003f50:	e01a      	b.n	8003f88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f52:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f56:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fbcf 	bl	8002700 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	e00a      	b.n	8003f7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe fbcb 	bl	8002700 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d903      	bls.n	8003f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e166      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
 8003f78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	4b92      	ldr	r3, [pc, #584]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ee      	bne.n	8003f66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a4 	beq.w	80040de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f96:	4b8c      	ldr	r3, [pc, #560]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b89      	ldr	r3, [pc, #548]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	4a88      	ldr	r2, [pc, #544]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fae:	4b86      	ldr	r3, [pc, #536]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fbe:	4b83      	ldr	r3, [pc, #524]	@ (80041cc <HAL_RCC_OscConfig+0x4d4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fca:	4b80      	ldr	r3, [pc, #512]	@ (80041cc <HAL_RCC_OscConfig+0x4d4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7f      	ldr	r2, [pc, #508]	@ (80041cc <HAL_RCC_OscConfig+0x4d4>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fb93 	bl	8002700 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe fb8f 	bl	8002700 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b64      	cmp	r3, #100	@ 0x64
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e12a      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff0:	4b76      	ldr	r3, [pc, #472]	@ (80041cc <HAL_RCC_OscConfig+0x4d4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x31a>
 8004004:	4b70      	ldr	r3, [pc, #448]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a6f      	ldr	r2, [pc, #444]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	e02d      	b.n	800406e <HAL_RCC_OscConfig+0x376>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x33c>
 800401a:	4b6b      	ldr	r3, [pc, #428]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	4a6a      	ldr	r2, [pc, #424]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	@ 0x70
 8004026:	4b68      	ldr	r3, [pc, #416]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a67      	ldr	r2, [pc, #412]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
 8004032:	e01c      	b.n	800406e <HAL_RCC_OscConfig+0x376>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x35e>
 800403c:	4b62      	ldr	r3, [pc, #392]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a61      	ldr	r2, [pc, #388]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
 8004048:	4b5f      	ldr	r3, [pc, #380]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	4a5e      	ldr	r2, [pc, #376]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70
 8004054:	e00b      	b.n	800406e <HAL_RCC_OscConfig+0x376>
 8004056:	4b5c      	ldr	r3, [pc, #368]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	4a5b      	ldr	r2, [pc, #364]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	6713      	str	r3, [r2, #112]	@ 0x70
 8004062:	4b59      	ldr	r3, [pc, #356]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004066:	4a58      	ldr	r2, [pc, #352]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d015      	beq.n	80040a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fe fb43 	bl	8002700 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe fb3f 	bl	8002700 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0d8      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	4b4c      	ldr	r3, [pc, #304]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ee      	beq.n	800407e <HAL_RCC_OscConfig+0x386>
 80040a0:	e014      	b.n	80040cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7fe fb2d 	bl	8002700 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe fb29 	bl	8002700 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0c2      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	4b41      	ldr	r3, [pc, #260]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ee      	bne.n	80040aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040cc:	7dfb      	ldrb	r3, [r7, #23]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b3d      	ldr	r3, [pc, #244]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	4a3c      	ldr	r2, [pc, #240]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80ae 	beq.w	8004244 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040e8:	4b37      	ldr	r3, [pc, #220]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d06d      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d14b      	bne.n	8004194 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b32      	ldr	r3, [pc, #200]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a31      	ldr	r2, [pc, #196]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe fafa 	bl	8002700 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004110:	f7fe faf6 	bl	8002700 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e091      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	019b      	lsls	r3, r3, #6
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	3b01      	subs	r3, #1
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	491b      	ldr	r1, [pc, #108]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a18      	ldr	r2, [pc, #96]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fac8 	bl	8002700 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe fac4 	bl	8002700 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e05f      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x47c>
 8004192:	e057      	b.n	8004244 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0b      	ldr	r2, [pc, #44]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 800419a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fe faae 	bl	8002700 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fe faaa 	bl	8002700 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e045      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_RCC_OscConfig+0x4d0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4b0>
 80041c6:	e03d      	b.n	8004244 <HAL_RCC_OscConfig+0x54c>
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004250 <HAL_RCC_OscConfig+0x558>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d030      	beq.n	8004240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d129      	bne.n	8004240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d122      	bne.n	8004240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004200:	4013      	ands	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004206:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004208:	4293      	cmp	r3, r2
 800420a:	d119      	bne.n	8004240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	3b01      	subs	r3, #1
 800421a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d10f      	bne.n	8004240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800

08004254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0d0      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426c:	4b6a      	ldr	r3, [pc, #424]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d910      	bls.n	800429c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b67      	ldr	r3, [pc, #412]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 020f 	bic.w	r2, r3, #15
 8004282:	4965      	ldr	r1, [pc, #404]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428a:	4b63      	ldr	r3, [pc, #396]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d001      	beq.n	800429c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0b8      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d020      	beq.n	80042ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b4:	4b59      	ldr	r3, [pc, #356]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a58      	ldr	r2, [pc, #352]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042cc:	4b53      	ldr	r3, [pc, #332]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a52      	ldr	r2, [pc, #328]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80042d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d8:	4b50      	ldr	r3, [pc, #320]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	494d      	ldr	r1, [pc, #308]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d040      	beq.n	8004378 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d115      	bne.n	8004336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e07f      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	4b41      	ldr	r3, [pc, #260]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e073      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004326:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e06b      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b39      	ldr	r3, [pc, #228]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4936      	ldr	r1, [pc, #216]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	4313      	orrs	r3, r2
 8004346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004348:	f7fe f9da 	bl	8002700 <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fe f9d6 	bl	8002700 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e053      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b2d      	ldr	r3, [pc, #180]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004378:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d210      	bcs.n	80043a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	4922      	ldr	r1, [pc, #136]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	@ (8004418 <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e032      	b.n	800440e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b4:	4b19      	ldr	r3, [pc, #100]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4916      	ldr	r1, [pc, #88]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	490e      	ldr	r1, [pc, #56]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e6:	f000 f821 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <HAL_RCC_ClockConfig+0x1c8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	490a      	ldr	r1, [pc, #40]	@ (8004420 <HAL_RCC_ClockConfig+0x1cc>)
 80043f8:	5ccb      	ldrb	r3, [r1, r3]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <HAL_RCC_ClockConfig+0x1d0>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004402:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_ClockConfig+0x1d4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe f936 	bl	8002678 <HAL_InitTick>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023c00 	.word	0x40023c00
 800441c:	40023800 	.word	0x40023800
 8004420:	08007db0 	.word	0x08007db0
 8004424:	20000000 	.word	0x20000000
 8004428:	20000004 	.word	0x20000004

0800442c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b094      	sub	sp, #80	@ 0x50
 8004432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	647b      	str	r3, [r7, #68]	@ 0x44
 8004438:	2300      	movs	r3, #0
 800443a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443c:	2300      	movs	r3, #0
 800443e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004444:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d00d      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x40>
 8004450:	2b08      	cmp	r3, #8
 8004452:	f200 80e1 	bhi.w	8004618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x34>
 800445a:	2b04      	cmp	r3, #4
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0x3a>
 800445e:	e0db      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b73      	ldr	r3, [pc, #460]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004464:	e0db      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004466:	4b73      	ldr	r3, [pc, #460]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x208>)
 8004468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800446a:	e0d8      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800446c:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004474:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004476:	4b6d      	ldr	r3, [pc, #436]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2200      	movs	r2, #0
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800448c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	633b      	str	r3, [r7, #48]	@ 0x30
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
 800449a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b0:	0150      	lsls	r0, r2, #5
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4621      	mov	r1, r4
 80044b8:	1a51      	subs	r1, r2, r1
 80044ba:	6139      	str	r1, [r7, #16]
 80044bc:	4629      	mov	r1, r5
 80044be:	eb63 0301 	sbc.w	r3, r3, r1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d0:	4659      	mov	r1, fp
 80044d2:	018b      	lsls	r3, r1, #6
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044da:	4651      	mov	r1, sl
 80044dc:	018a      	lsls	r2, r1, #6
 80044de:	4651      	mov	r1, sl
 80044e0:	ebb2 0801 	subs.w	r8, r2, r1
 80044e4:	4659      	mov	r1, fp
 80044e6:	eb63 0901 	sbc.w	r9, r3, r1
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fe:	4690      	mov	r8, r2
 8004500:	4699      	mov	r9, r3
 8004502:	4623      	mov	r3, r4
 8004504:	eb18 0303 	adds.w	r3, r8, r3
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	462b      	mov	r3, r5
 800450c:	eb49 0303 	adc.w	r3, r9, r3
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800451e:	4629      	mov	r1, r5
 8004520:	024b      	lsls	r3, r1, #9
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004528:	4621      	mov	r1, r4
 800452a:	024a      	lsls	r2, r1, #9
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004532:	2200      	movs	r2, #0
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800453c:	f7fb fed0 	bl	80002e0 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	e058      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b38      	ldr	r3, [pc, #224]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	4618      	mov	r0, r3
 8004554:	4611      	mov	r1, r2
 8004556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	f04f 0000 	mov.w	r0, #0
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	0159      	lsls	r1, r3, #5
 8004572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004576:	0150      	lsls	r0, r2, #5
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4641      	mov	r1, r8
 800457e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb63 0b01 	sbc.w	fp, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800459c:	ebb2 040a 	subs.w	r4, r2, sl
 80045a0:	eb63 050b 	sbc.w	r5, r3, fp
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	00eb      	lsls	r3, r5, #3
 80045ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b2:	00e2      	lsls	r2, r4, #3
 80045b4:	4614      	mov	r4, r2
 80045b6:	461d      	mov	r5, r3
 80045b8:	4643      	mov	r3, r8
 80045ba:	18e3      	adds	r3, r4, r3
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	464b      	mov	r3, r9
 80045c0:	eb45 0303 	adc.w	r3, r5, r3
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045d2:	4629      	mov	r1, r5
 80045d4:	028b      	lsls	r3, r1, #10
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045dc:	4621      	mov	r1, r4
 80045de:	028a      	lsls	r2, r1, #10
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045e6:	2200      	movs	r2, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	61fa      	str	r2, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	f7fb fe76 	bl	80002e0 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	3301      	adds	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800460c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004616:	e002      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800461c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004620:	4618      	mov	r0, r3
 8004622:	3750      	adds	r7, #80	@ 0x50
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	00f42400 	.word	0x00f42400
 8004634:	007a1200 	.word	0x007a1200

08004638 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b03      	ldr	r3, [pc, #12]	@ (800464c <HAL_RCC_GetHCLKFreq+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000000 	.word	0x20000000

08004650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004654:	f7ff fff0 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0a9b      	lsrs	r3, r3, #10
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08007dc0 	.word	0x08007dc0

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800467c:	f7ff ffdc 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0b5b      	lsrs	r3, r3, #13
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <HAL_RCC_GetPCLK2Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08007dc0 	.word	0x08007dc0

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046c8:	4b69      	ldr	r3, [pc, #420]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a68      	ldr	r2, [pc, #416]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046d2:	6093      	str	r3, [r2, #8]
 80046d4:	4b66      	ldr	r3, [pc, #408]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046dc:	4964      	ldr	r1, [pc, #400]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004700:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	4959      	ldr	r1, [pc, #356]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004718:	d101      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004726:	2301      	movs	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d017      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004736:	4b4e      	ldr	r3, [pc, #312]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800473c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	494a      	ldr	r1, [pc, #296]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004754:	d101      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 808b 	beq.w	800489a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	4b3a      	ldr	r3, [pc, #232]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	4a39      	ldr	r2, [pc, #228]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004790:	4b37      	ldr	r3, [pc, #220]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800479c:	4b35      	ldr	r3, [pc, #212]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a34      	ldr	r2, [pc, #208]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a8:	f7fd ffaa 	bl	8002700 <HAL_GetTick>
 80047ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fd ffa6 	bl	8002700 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	@ 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e38f      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ce:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d035      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d02e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ec:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004800:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	4a1a      	ldr	r2, [pc, #104]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800480c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800480e:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004814:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d114      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fd ff6e 	bl	8002700 <HAL_GetTick>
 8004824:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd ff6a 	bl	8002700 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e351      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ee      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d111      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004864:	4b04      	ldr	r3, [pc, #16]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004866:	400b      	ands	r3, r1
 8004868:	4901      	ldr	r1, [pc, #4]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	e00b      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004870:	40023800 	.word	0x40023800
 8004874:	40007000 	.word	0x40007000
 8004878:	0ffffcff 	.word	0x0ffffcff
 800487c:	4bac      	ldr	r3, [pc, #688]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4aab      	ldr	r2, [pc, #684]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004886:	6093      	str	r3, [r2, #8]
 8004888:	4ba9      	ldr	r3, [pc, #676]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004894:	49a6      	ldr	r1, [pc, #664]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004896:	4313      	orrs	r3, r2
 8004898:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d010      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048a6:	4ba2      	ldr	r3, [pc, #648]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ac:	4aa0      	ldr	r2, [pc, #640]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	499b      	ldr	r1, [pc, #620]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d4:	4b96      	ldr	r3, [pc, #600]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e2:	4993      	ldr	r1, [pc, #588]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048f6:	4b8e      	ldr	r3, [pc, #568]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004904:	498a      	ldr	r1, [pc, #552]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004918:	4b85      	ldr	r3, [pc, #532]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004926:	4982      	ldr	r1, [pc, #520]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800493a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	4979      	ldr	r1, [pc, #484]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800495c:	4b74      	ldr	r3, [pc, #464]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496a:	4971      	ldr	r1, [pc, #452]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800497e:	4b6c      	ldr	r3, [pc, #432]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f023 020c 	bic.w	r2, r3, #12
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498c:	4968      	ldr	r1, [pc, #416]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049a0:	4b63      	ldr	r3, [pc, #396]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ae:	4960      	ldr	r1, [pc, #384]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d0:	4957      	ldr	r1, [pc, #348]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e4:	4b52      	ldr	r3, [pc, #328]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f2:	494f      	ldr	r1, [pc, #316]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a06:	4b4a      	ldr	r3, [pc, #296]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	4946      	ldr	r1, [pc, #280]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a28:	4b41      	ldr	r3, [pc, #260]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a36:	493e      	ldr	r1, [pc, #248]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	4935      	ldr	r1, [pc, #212]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a6c:	4b30      	ldr	r3, [pc, #192]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a7a:	492d      	ldr	r1, [pc, #180]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a8e:	4b28      	ldr	r3, [pc, #160]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a94:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a9c:	4924      	ldr	r1, [pc, #144]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ace:	4b18      	ldr	r3, [pc, #96]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004adc:	4914      	ldr	r1, [pc, #80]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004af0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b00:	490b      	ldr	r1, [pc, #44]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00f      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b24:	4902      	ldr	r1, [pc, #8]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00b      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b40:	4b8a      	ldr	r3, [pc, #552]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	4986      	ldr	r1, [pc, #536]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b64:	4b81      	ldr	r3, [pc, #516]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b74:	497d      	ldr	r1, [pc, #500]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d006      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80d6 	beq.w	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b90:	4b76      	ldr	r3, [pc, #472]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a75      	ldr	r2, [pc, #468]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9c:	f7fd fdb0 	bl	8002700 <HAL_GetTick>
 8004ba0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ba4:	f7fd fdac 	bl	8002700 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e195      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d021      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bd6:	4b65      	ldr	r3, [pc, #404]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004be4:	4b61      	ldr	r3, [pc, #388]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bea:	0e1b      	lsrs	r3, r3, #24
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	019a      	lsls	r2, r3, #6
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	4958      	ldr	r1, [pc, #352]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02e      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c3c:	d129      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c44:	0c1b      	lsrs	r3, r3, #16
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c4c:	4b47      	ldr	r3, [pc, #284]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c52:	0f1b      	lsrs	r3, r3, #28
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	019a      	lsls	r2, r3, #6
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	071b      	lsls	r3, r3, #28
 8004c72:	493e      	ldr	r1, [pc, #248]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c80:	f023 021f 	bic.w	r2, r3, #31
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	4938      	ldr	r1, [pc, #224]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01d      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c9e:	4b33      	ldr	r3, [pc, #204]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ca4:	0e1b      	lsrs	r3, r3, #24
 8004ca6:	f003 030f 	and.w	r3, r3, #15
 8004caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cac:	4b2f      	ldr	r3, [pc, #188]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb2:	0f1b      	lsrs	r3, r3, #28
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	019a      	lsls	r2, r3, #6
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	071b      	lsls	r3, r3, #28
 8004cd2:	4926      	ldr	r1, [pc, #152]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	019a      	lsls	r2, r3, #6
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	491a      	ldr	r1, [pc, #104]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d0a:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d16:	f7fd fcf3 	bl	8002700 <HAL_GetTick>
 8004d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d1e:	f7fd fcef 	bl	8002700 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b64      	cmp	r3, #100	@ 0x64
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e0d8      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d30:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	f040 80ce 	bne.w	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d44:	4b09      	ldr	r3, [pc, #36]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d50:	f7fd fcd6 	bl	8002700 <HAL_GetTick>
 8004d54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d56:	e00b      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d58:	f7fd fcd2 	bl	8002700 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d904      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0bb      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d70:	4b5e      	ldr	r3, [pc, #376]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d7c:	d0ec      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d02e      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d12a      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004da6:	4b51      	ldr	r3, [pc, #324]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004db4:	4b4d      	ldr	r3, [pc, #308]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	0f1b      	lsrs	r3, r3, #28
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	019a      	lsls	r2, r3, #6
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	071b      	lsls	r3, r3, #28
 8004dda:	4944      	ldr	r1, [pc, #272]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004de2:	4b42      	ldr	r3, [pc, #264]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	493d      	ldr	r1, [pc, #244]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d022      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e10:	d11d      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e12:	4b36      	ldr	r3, [pc, #216]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e20:	4b32      	ldr	r3, [pc, #200]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	0f1b      	lsrs	r3, r3, #28
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	019a      	lsls	r2, r3, #6
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	061b      	lsls	r3, r3, #24
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	071b      	lsls	r3, r3, #28
 8004e46:	4929      	ldr	r1, [pc, #164]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d028      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e60:	0e1b      	lsrs	r3, r3, #24
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e68:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	019a      	lsls	r2, r3, #6
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	4917      	ldr	r1, [pc, #92]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e96:	4b15      	ldr	r3, [pc, #84]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	4911      	ldr	r1, [pc, #68]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eac:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fd fc22 	bl	8002700 <HAL_GetTick>
 8004ebc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ec0:	f7fd fc1e 	bl	8002700 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	@ 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e007      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ed2:	4b06      	ldr	r3, [pc, #24]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ede:	d1ef      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e09d      	b.n	800503e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f12:	d009      	beq.n	8004f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	61da      	str	r2, [r3, #28]
 8004f1a:	e005      	b.n	8004f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fe7e 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f68:	d902      	bls.n	8004f70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e002      	b.n	8004f76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f7e:	d007      	beq.n	8004f90 <HAL_SPI_Init+0xa0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f88:	d002      	beq.n	8004f90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd2:	ea42 0103 	orr.w	r1, r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	0c1b      	lsrs	r3, r3, #16
 8004fec:	f003 0204 	and.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800500c:	ea42 0103 	orr.w	r1, r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800502c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e049      	b.n	80050ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc fe69 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 fc0d 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e049      	b.n	800519a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d106      	bne.n	8005120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fc ff06 	bl	8001f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f000 fbb6 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e049      	b.n	8005248 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f841 	bl	8005250 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3304      	adds	r3, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f000 fb5f 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e08f      	b.n	8005398 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fc fdd7 	bl	8001e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6899      	ldr	r1, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b3e      	ldr	r3, [pc, #248]	@ (80053a0 <HAL_TIM_Encoder_Init+0x13c>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f000 faf5 	bl	80058a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4b31      	ldr	r3, [pc, #196]	@ (80053a4 <HAL_TIM_Encoder_Init+0x140>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	4313      	orrs	r3, r2
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4b2b      	ldr	r3, [pc, #172]	@ (80053a8 <HAL_TIM_Encoder_Init+0x144>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4b2a      	ldr	r3, [pc, #168]	@ (80053ac <HAL_TIM_Encoder_Init+0x148>)
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	4313      	orrs	r3, r2
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	031b      	lsls	r3, r3, #12
 8005324:	4313      	orrs	r3, r2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4313      	orrs	r3, r2
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	fffebff8 	.word	0xfffebff8
 80053a4:	fffffcfc 	.word	0xfffffcfc
 80053a8:	fffff3f3 	.word	0xfffff3f3
 80053ac:	ffff0f0f 	.word	0xffff0f0f

080053b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e088      	b.n	80054e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053ec:	f000 fd64 	bl	8005eb8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 020c 	bic.w	r2, r2, #12
 80053fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6999      	ldr	r1, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	619a      	str	r2, [r3, #24]
 8005412:	e060      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d11c      	bne.n	8005454 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800542a:	f000 fde8 	bl	8005ffe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800543c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6999      	ldr	r1, [r3, #24]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	021a      	lsls	r2, r3, #8
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
 8005452:	e040      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b08      	cmp	r3, #8
 8005458:	d11b      	bne.n	8005492 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800546a:	f000 fe35 	bl	80060d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 020c 	bic.w	r2, r2, #12
 800547c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
 8005490:	e021      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d11c      	bne.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80054a8:	f000 fe52 	bl	8006150 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80054ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69d9      	ldr	r1, [r3, #28]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	021a      	lsls	r2, r3, #8
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
 80054d0:	e001      	b.n	80054d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005502:	2302      	movs	r3, #2
 8005504:	e0ff      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b14      	cmp	r3, #20
 8005512:	f200 80f0 	bhi.w	80056f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005571 	.word	0x08005571
 8005520:	080056f7 	.word	0x080056f7
 8005524:	080056f7 	.word	0x080056f7
 8005528:	080056f7 	.word	0x080056f7
 800552c:	080055b1 	.word	0x080055b1
 8005530:	080056f7 	.word	0x080056f7
 8005534:	080056f7 	.word	0x080056f7
 8005538:	080056f7 	.word	0x080056f7
 800553c:	080055f3 	.word	0x080055f3
 8005540:	080056f7 	.word	0x080056f7
 8005544:	080056f7 	.word	0x080056f7
 8005548:	080056f7 	.word	0x080056f7
 800554c:	08005633 	.word	0x08005633
 8005550:	080056f7 	.word	0x080056f7
 8005554:	080056f7 	.word	0x080056f7
 8005558:	080056f7 	.word	0x080056f7
 800555c:	08005675 	.word	0x08005675
 8005560:	080056f7 	.word	0x080056f7
 8005564:	080056f7 	.word	0x080056f7
 8005568:	080056f7 	.word	0x080056f7
 800556c:	080056b5 	.word	0x080056b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fa40 	bl	80059fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0208 	orr.w	r2, r2, #8
 800558a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0204 	bic.w	r2, r2, #4
 800559a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6999      	ldr	r1, [r3, #24]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	619a      	str	r2, [r3, #24]
      break;
 80055ae:	e0a5      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa92 	bl	8005ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	021a      	lsls	r2, r3, #8
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]
      break;
 80055f0:	e084      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fae9 	bl	8005bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0208 	orr.w	r2, r2, #8
 800560c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0204 	bic.w	r2, r2, #4
 800561c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69d9      	ldr	r1, [r3, #28]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	61da      	str	r2, [r3, #28]
      break;
 8005630:	e064      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fb3f 	bl	8005cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800564c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	021a      	lsls	r2, r3, #8
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	61da      	str	r2, [r3, #28]
      break;
 8005672:	e043      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fb76 	bl	8005d6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0208 	orr.w	r2, r2, #8
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0204 	bic.w	r2, r2, #4
 800569e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056b2:	e023      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fba8 	bl	8005e10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80056f4:	e002      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
      break;
 80056fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop

08005710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIM_ConfigClockSource+0x1c>
 8005728:	2302      	movs	r3, #2
 800572a:	e0b4      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x186>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	4b56      	ldr	r3, [pc, #344]	@ (80058a0 <HAL_TIM_ConfigClockSource+0x190>)
 8005748:	4013      	ands	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005764:	d03e      	beq.n	80057e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800576a:	f200 8087 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005772:	f000 8086 	beq.w	8005882 <HAL_TIM_ConfigClockSource+0x172>
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577a:	d87f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b70      	cmp	r3, #112	@ 0x70
 800577e:	d01a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005780:	2b70      	cmp	r3, #112	@ 0x70
 8005782:	d87b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b60      	cmp	r3, #96	@ 0x60
 8005786:	d050      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x11a>
 8005788:	2b60      	cmp	r3, #96	@ 0x60
 800578a:	d877      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800578c:	2b50      	cmp	r3, #80	@ 0x50
 800578e:	d03c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0xfa>
 8005790:	2b50      	cmp	r3, #80	@ 0x50
 8005792:	d873      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b40      	cmp	r3, #64	@ 0x40
 8005796:	d058      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x13a>
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	d86f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b30      	cmp	r3, #48	@ 0x30
 800579e:	d064      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057a0:	2b30      	cmp	r3, #48	@ 0x30
 80057a2:	d86b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d060      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d867      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05c      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d05a      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057b4:	e062      	b.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057c6:	f000 fd1b 	bl	8006200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	609a      	str	r2, [r3, #8]
      break;
 80057e2:	e04f      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057f4:	f000 fd04 	bl	8006200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005806:	609a      	str	r2, [r3, #8]
      break;
 8005808:	e03c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005816:	461a      	mov	r2, r3
 8005818:	f000 fbc2 	bl	8005fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2150      	movs	r1, #80	@ 0x50
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fcd1 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005828:	e02c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fc1e 	bl	8006078 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2160      	movs	r1, #96	@ 0x60
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fcc1 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005848:	e01c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fba2 	bl	8005fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2140      	movs	r1, #64	@ 0x40
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fcb1 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 8005868:	e00c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f000 fca8 	bl	80061ca <TIM_ITRx_SetConfig>
      break;
 800587a:	e003      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      break;
 8005880:	e000      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	fffeff88 	.word	0xfffeff88

080058a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a46      	ldr	r2, [pc, #280]	@ (80059d0 <TIM_Base_SetConfig+0x12c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c2:	d00f      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a43      	ldr	r2, [pc, #268]	@ (80059d4 <TIM_Base_SetConfig+0x130>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a42      	ldr	r2, [pc, #264]	@ (80059d8 <TIM_Base_SetConfig+0x134>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a41      	ldr	r2, [pc, #260]	@ (80059dc <TIM_Base_SetConfig+0x138>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_Base_SetConfig+0x40>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a40      	ldr	r2, [pc, #256]	@ (80059e0 <TIM_Base_SetConfig+0x13c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d108      	bne.n	80058f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a35      	ldr	r2, [pc, #212]	@ (80059d0 <TIM_Base_SetConfig+0x12c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d02b      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005904:	d027      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a32      	ldr	r2, [pc, #200]	@ (80059d4 <TIM_Base_SetConfig+0x130>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d023      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a31      	ldr	r2, [pc, #196]	@ (80059d8 <TIM_Base_SetConfig+0x134>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01f      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a30      	ldr	r2, [pc, #192]	@ (80059dc <TIM_Base_SetConfig+0x138>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01b      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2f      	ldr	r2, [pc, #188]	@ (80059e0 <TIM_Base_SetConfig+0x13c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d017      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a2e      	ldr	r2, [pc, #184]	@ (80059e4 <TIM_Base_SetConfig+0x140>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2d      	ldr	r2, [pc, #180]	@ (80059e8 <TIM_Base_SetConfig+0x144>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00f      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2c      	ldr	r2, [pc, #176]	@ (80059ec <TIM_Base_SetConfig+0x148>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00b      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2b      	ldr	r2, [pc, #172]	@ (80059f0 <TIM_Base_SetConfig+0x14c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d007      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2a      	ldr	r2, [pc, #168]	@ (80059f4 <TIM_Base_SetConfig+0x150>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a29      	ldr	r2, [pc, #164]	@ (80059f8 <TIM_Base_SetConfig+0x154>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d108      	bne.n	8005968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a10      	ldr	r2, [pc, #64]	@ (80059d0 <TIM_Base_SetConfig+0x12c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0xf8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a12      	ldr	r2, [pc, #72]	@ (80059e0 <TIM_Base_SetConfig+0x13c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d103      	bne.n	80059a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d105      	bne.n	80059c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f023 0201 	bic.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	611a      	str	r2, [r3, #16]
  }
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800
 80059f0:	40001800 	.word	0x40001800
 80059f4:	40001c00 	.word	0x40001c00
 80059f8:	40002000 	.word	0x40002000

080059fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f023 0201 	bic.w	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad4 <TIM_OC1_SetConfig+0xd8>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0302 	bic.w	r3, r3, #2
 8005a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a21      	ldr	r2, [pc, #132]	@ (8005ad8 <TIM_OC1_SetConfig+0xdc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC1_SetConfig+0x64>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	@ (8005adc <TIM_OC1_SetConfig+0xe0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10c      	bne.n	8005a7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0308 	bic.w	r3, r3, #8
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f023 0304 	bic.w	r3, r3, #4
 8005a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ad8 <TIM_OC1_SetConfig+0xdc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_OC1_SetConfig+0x8e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	@ (8005adc <TIM_OC1_SetConfig+0xe0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d111      	bne.n	8005aae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	fffeff8f 	.word	0xfffeff8f
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40010400 	.word	0x40010400

08005ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f023 0210 	bic.w	r2, r3, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8005bc4 <TIM_OC2_SetConfig+0xe4>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0320 	bic.w	r3, r3, #32
 8005b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a23      	ldr	r2, [pc, #140]	@ (8005bc8 <TIM_OC2_SetConfig+0xe8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC2_SetConfig+0x68>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <TIM_OC2_SetConfig+0xec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10d      	bne.n	8005b64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <TIM_OC2_SetConfig+0xe8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC2_SetConfig+0x94>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <TIM_OC2_SetConfig+0xec>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d113      	bne.n	8005b9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	feff8fff 	.word	0xfeff8fff
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb0 <TIM_OC3_SetConfig+0xe0>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a22      	ldr	r2, [pc, #136]	@ (8005cb4 <TIM_OC3_SetConfig+0xe4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC3_SetConfig+0x66>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a21      	ldr	r2, [pc, #132]	@ (8005cb8 <TIM_OC3_SetConfig+0xe8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d10d      	bne.n	8005c52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a17      	ldr	r2, [pc, #92]	@ (8005cb4 <TIM_OC3_SetConfig+0xe4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC3_SetConfig+0x92>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a16      	ldr	r2, [pc, #88]	@ (8005cb8 <TIM_OC3_SetConfig+0xe8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d113      	bne.n	8005c8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	011b      	lsls	r3, r3, #4
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	fffeff8f 	.word	0xfffeff8f
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40010400 	.word	0x40010400

08005cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d60 <TIM_OC4_SetConfig+0xa4>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	031b      	lsls	r3, r3, #12
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a13      	ldr	r2, [pc, #76]	@ (8005d64 <TIM_OC4_SetConfig+0xa8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC4_SetConfig+0x68>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a12      	ldr	r2, [pc, #72]	@ (8005d68 <TIM_OC4_SetConfig+0xac>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d109      	bne.n	8005d38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	feff8fff 	.word	0xfeff8fff
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40010400 	.word	0x40010400

08005d6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <TIM_OC5_SetConfig+0x98>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a12      	ldr	r2, [pc, #72]	@ (8005e08 <TIM_OC5_SetConfig+0x9c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC5_SetConfig+0x5e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a11      	ldr	r2, [pc, #68]	@ (8005e0c <TIM_OC5_SetConfig+0xa0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d109      	bne.n	8005dde <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	621a      	str	r2, [r3, #32]
}
 8005df8:	bf00      	nop
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	fffeff8f 	.word	0xfffeff8f
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40010400 	.word	0x40010400

08005e10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005eac <TIM_OC6_SetConfig+0x9c>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	051b      	lsls	r3, r3, #20
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a13      	ldr	r2, [pc, #76]	@ (8005eb0 <TIM_OC6_SetConfig+0xa0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC6_SetConfig+0x60>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <TIM_OC6_SetConfig+0xa4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d109      	bne.n	8005e84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	feff8fff 	.word	0xfeff8fff
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 0201 	bic.w	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	@ (8005f84 <TIM_TI1_SetConfig+0xcc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01b      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eec:	d017      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a25      	ldr	r2, [pc, #148]	@ (8005f88 <TIM_TI1_SetConfig+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4a24      	ldr	r2, [pc, #144]	@ (8005f8c <TIM_TI1_SetConfig+0xd4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a23      	ldr	r2, [pc, #140]	@ (8005f90 <TIM_TI1_SetConfig+0xd8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a22      	ldr	r2, [pc, #136]	@ (8005f94 <TIM_TI1_SetConfig+0xdc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a21      	ldr	r2, [pc, #132]	@ (8005f98 <TIM_TI1_SetConfig+0xe0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_TI1_SetConfig+0x66>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a20      	ldr	r2, [pc, #128]	@ (8005f9c <TIM_TI1_SetConfig+0xe4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d101      	bne.n	8005f22 <TIM_TI1_SetConfig+0x6a>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <TIM_TI1_SetConfig+0x6c>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e003      	b.n	8005f42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f023 030a 	bic.w	r3, r3, #10
 8005f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f003 030a 	and.w	r3, r3, #10
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	621a      	str	r2, [r3, #32]
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40010400 	.word	0x40010400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40001800 	.word	0x40001800

08005fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f023 030a 	bic.w	r3, r3, #10
 8005fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b087      	sub	sp, #28
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f023 0210 	bic.w	r2, r3, #16
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800602a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800603c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	b29b      	uxth	r3, r3
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006050:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	031b      	lsls	r3, r3, #12
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	621a      	str	r2, [r3, #32]
}
 80060cc:	bf00      	nop
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f023 0303 	bic.w	r3, r3, #3
 8006104:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006114:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	b2db      	uxtb	r3, r3
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006128:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	621a      	str	r2, [r3, #32]
}
 8006144:	bf00      	nop
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800617c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800618e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	031b      	lsls	r3, r3, #12
 8006194:	b29b      	uxth	r3, r3
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	031b      	lsls	r3, r3, #12
 80061a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f043 0307 	orr.w	r3, r3, #7
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	609a      	str	r2, [r3, #8]
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800621a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	021a      	lsls	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	431a      	orrs	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006254:	2302      	movs	r3, #2
 8006256:	e06d      	b.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a30      	ldr	r2, [pc, #192]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d004      	beq.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2f      	ldr	r2, [pc, #188]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d108      	bne.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a20      	ldr	r2, [pc, #128]	@ (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ca:	d01d      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a16      	ldr	r2, [pc, #88]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10c      	bne.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800630e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	40010000 	.word	0x40010000
 8006344:	40010400 	.word	0x40010400
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40014000 	.word	0x40014000
 8006358:	40001800 	.word	0x40001800

0800635c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006374:	2302      	movs	r3, #2
 8006376:	e065      	b.n	8006444 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a16      	ldr	r2, [pc, #88]	@ (8006450 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a14      	ldr	r2, [pc, #80]	@ (8006454 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d115      	bne.n	8006432 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	051b      	lsls	r3, r3, #20
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40010000 	.word	0x40010000
 8006454:	40010400 	.word	0x40010400

08006458 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e040      	b.n	80064ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb fe42 	bl	8002104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	@ 0x24
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa8c 	bl	80069bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f825 	bl	80064f4 <UART_SetConfig>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e01b      	b.n	80064ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fb0b 	bl	8006b00 <UART_CheckIdleState>
 80064ea:	4603      	mov	r3, r0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4ba6      	ldr	r3, [pc, #664]	@ (80067b8 <UART_SetConfig+0x2c4>)
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a94      	ldr	r2, [pc, #592]	@ (80067bc <UART_SetConfig+0x2c8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d120      	bne.n	80065b2 <UART_SetConfig+0xbe>
 8006570:	4b93      	ldr	r3, [pc, #588]	@ (80067c0 <UART_SetConfig+0x2cc>)
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d816      	bhi.n	80065ac <UART_SetConfig+0xb8>
 800657e:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <UART_SetConfig+0x90>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	08006595 	.word	0x08006595
 8006588:	080065a1 	.word	0x080065a1
 800658c:	0800659b 	.word	0x0800659b
 8006590:	080065a7 	.word	0x080065a7
 8006594:	2301      	movs	r3, #1
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e150      	b.n	800683c <UART_SetConfig+0x348>
 800659a:	2302      	movs	r3, #2
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e14d      	b.n	800683c <UART_SetConfig+0x348>
 80065a0:	2304      	movs	r3, #4
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e14a      	b.n	800683c <UART_SetConfig+0x348>
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e147      	b.n	800683c <UART_SetConfig+0x348>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e144      	b.n	800683c <UART_SetConfig+0x348>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a83      	ldr	r2, [pc, #524]	@ (80067c4 <UART_SetConfig+0x2d0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d132      	bne.n	8006622 <UART_SetConfig+0x12e>
 80065bc:	4b80      	ldr	r3, [pc, #512]	@ (80067c0 <UART_SetConfig+0x2cc>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	d828      	bhi.n	800661c <UART_SetConfig+0x128>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0xdc>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006605 	.word	0x08006605
 80065d4:	0800661d 	.word	0x0800661d
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	08006611 	.word	0x08006611
 80065e4:	0800661d 	.word	0x0800661d
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	0800661d 	.word	0x0800661d
 80065f0:	0800660b 	.word	0x0800660b
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	0800661d 	.word	0x0800661d
 8006600:	08006617 	.word	0x08006617
 8006604:	2300      	movs	r3, #0
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e118      	b.n	800683c <UART_SetConfig+0x348>
 800660a:	2302      	movs	r3, #2
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e115      	b.n	800683c <UART_SetConfig+0x348>
 8006610:	2304      	movs	r3, #4
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e112      	b.n	800683c <UART_SetConfig+0x348>
 8006616:	2308      	movs	r3, #8
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e10f      	b.n	800683c <UART_SetConfig+0x348>
 800661c:	2310      	movs	r3, #16
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e10c      	b.n	800683c <UART_SetConfig+0x348>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a68      	ldr	r2, [pc, #416]	@ (80067c8 <UART_SetConfig+0x2d4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d120      	bne.n	800666e <UART_SetConfig+0x17a>
 800662c:	4b64      	ldr	r3, [pc, #400]	@ (80067c0 <UART_SetConfig+0x2cc>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006632:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006636:	2b30      	cmp	r3, #48	@ 0x30
 8006638:	d013      	beq.n	8006662 <UART_SetConfig+0x16e>
 800663a:	2b30      	cmp	r3, #48	@ 0x30
 800663c:	d814      	bhi.n	8006668 <UART_SetConfig+0x174>
 800663e:	2b20      	cmp	r3, #32
 8006640:	d009      	beq.n	8006656 <UART_SetConfig+0x162>
 8006642:	2b20      	cmp	r3, #32
 8006644:	d810      	bhi.n	8006668 <UART_SetConfig+0x174>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <UART_SetConfig+0x15c>
 800664a:	2b10      	cmp	r3, #16
 800664c:	d006      	beq.n	800665c <UART_SetConfig+0x168>
 800664e:	e00b      	b.n	8006668 <UART_SetConfig+0x174>
 8006650:	2300      	movs	r3, #0
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e0f2      	b.n	800683c <UART_SetConfig+0x348>
 8006656:	2302      	movs	r3, #2
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e0ef      	b.n	800683c <UART_SetConfig+0x348>
 800665c:	2304      	movs	r3, #4
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e0ec      	b.n	800683c <UART_SetConfig+0x348>
 8006662:	2308      	movs	r3, #8
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e0e9      	b.n	800683c <UART_SetConfig+0x348>
 8006668:	2310      	movs	r3, #16
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e0e6      	b.n	800683c <UART_SetConfig+0x348>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a56      	ldr	r2, [pc, #344]	@ (80067cc <UART_SetConfig+0x2d8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d120      	bne.n	80066ba <UART_SetConfig+0x1c6>
 8006678:	4b51      	ldr	r3, [pc, #324]	@ (80067c0 <UART_SetConfig+0x2cc>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006682:	2bc0      	cmp	r3, #192	@ 0xc0
 8006684:	d013      	beq.n	80066ae <UART_SetConfig+0x1ba>
 8006686:	2bc0      	cmp	r3, #192	@ 0xc0
 8006688:	d814      	bhi.n	80066b4 <UART_SetConfig+0x1c0>
 800668a:	2b80      	cmp	r3, #128	@ 0x80
 800668c:	d009      	beq.n	80066a2 <UART_SetConfig+0x1ae>
 800668e:	2b80      	cmp	r3, #128	@ 0x80
 8006690:	d810      	bhi.n	80066b4 <UART_SetConfig+0x1c0>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <UART_SetConfig+0x1a8>
 8006696:	2b40      	cmp	r3, #64	@ 0x40
 8006698:	d006      	beq.n	80066a8 <UART_SetConfig+0x1b4>
 800669a:	e00b      	b.n	80066b4 <UART_SetConfig+0x1c0>
 800669c:	2300      	movs	r3, #0
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e0cc      	b.n	800683c <UART_SetConfig+0x348>
 80066a2:	2302      	movs	r3, #2
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e0c9      	b.n	800683c <UART_SetConfig+0x348>
 80066a8:	2304      	movs	r3, #4
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e0c6      	b.n	800683c <UART_SetConfig+0x348>
 80066ae:	2308      	movs	r3, #8
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e0c3      	b.n	800683c <UART_SetConfig+0x348>
 80066b4:	2310      	movs	r3, #16
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e0c0      	b.n	800683c <UART_SetConfig+0x348>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a44      	ldr	r2, [pc, #272]	@ (80067d0 <UART_SetConfig+0x2dc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d125      	bne.n	8006710 <UART_SetConfig+0x21c>
 80066c4:	4b3e      	ldr	r3, [pc, #248]	@ (80067c0 <UART_SetConfig+0x2cc>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d2:	d017      	beq.n	8006704 <UART_SetConfig+0x210>
 80066d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d8:	d817      	bhi.n	800670a <UART_SetConfig+0x216>
 80066da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066de:	d00b      	beq.n	80066f8 <UART_SetConfig+0x204>
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e4:	d811      	bhi.n	800670a <UART_SetConfig+0x216>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <UART_SetConfig+0x1fe>
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ee:	d006      	beq.n	80066fe <UART_SetConfig+0x20a>
 80066f0:	e00b      	b.n	800670a <UART_SetConfig+0x216>
 80066f2:	2300      	movs	r3, #0
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e0a1      	b.n	800683c <UART_SetConfig+0x348>
 80066f8:	2302      	movs	r3, #2
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e09e      	b.n	800683c <UART_SetConfig+0x348>
 80066fe:	2304      	movs	r3, #4
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e09b      	b.n	800683c <UART_SetConfig+0x348>
 8006704:	2308      	movs	r3, #8
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e098      	b.n	800683c <UART_SetConfig+0x348>
 800670a:	2310      	movs	r3, #16
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e095      	b.n	800683c <UART_SetConfig+0x348>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2f      	ldr	r2, [pc, #188]	@ (80067d4 <UART_SetConfig+0x2e0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d125      	bne.n	8006766 <UART_SetConfig+0x272>
 800671a:	4b29      	ldr	r3, [pc, #164]	@ (80067c0 <UART_SetConfig+0x2cc>)
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006728:	d017      	beq.n	800675a <UART_SetConfig+0x266>
 800672a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800672e:	d817      	bhi.n	8006760 <UART_SetConfig+0x26c>
 8006730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006734:	d00b      	beq.n	800674e <UART_SetConfig+0x25a>
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800673a:	d811      	bhi.n	8006760 <UART_SetConfig+0x26c>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <UART_SetConfig+0x254>
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006744:	d006      	beq.n	8006754 <UART_SetConfig+0x260>
 8006746:	e00b      	b.n	8006760 <UART_SetConfig+0x26c>
 8006748:	2301      	movs	r3, #1
 800674a:	77fb      	strb	r3, [r7, #31]
 800674c:	e076      	b.n	800683c <UART_SetConfig+0x348>
 800674e:	2302      	movs	r3, #2
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	e073      	b.n	800683c <UART_SetConfig+0x348>
 8006754:	2304      	movs	r3, #4
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e070      	b.n	800683c <UART_SetConfig+0x348>
 800675a:	2308      	movs	r3, #8
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e06d      	b.n	800683c <UART_SetConfig+0x348>
 8006760:	2310      	movs	r3, #16
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e06a      	b.n	800683c <UART_SetConfig+0x348>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <UART_SetConfig+0x2e4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d138      	bne.n	80067e2 <UART_SetConfig+0x2ee>
 8006770:	4b13      	ldr	r3, [pc, #76]	@ (80067c0 <UART_SetConfig+0x2cc>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006776:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800677a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800677e:	d017      	beq.n	80067b0 <UART_SetConfig+0x2bc>
 8006780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006784:	d82a      	bhi.n	80067dc <UART_SetConfig+0x2e8>
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800678a:	d00b      	beq.n	80067a4 <UART_SetConfig+0x2b0>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d824      	bhi.n	80067dc <UART_SetConfig+0x2e8>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <UART_SetConfig+0x2aa>
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679a:	d006      	beq.n	80067aa <UART_SetConfig+0x2b6>
 800679c:	e01e      	b.n	80067dc <UART_SetConfig+0x2e8>
 800679e:	2300      	movs	r3, #0
 80067a0:	77fb      	strb	r3, [r7, #31]
 80067a2:	e04b      	b.n	800683c <UART_SetConfig+0x348>
 80067a4:	2302      	movs	r3, #2
 80067a6:	77fb      	strb	r3, [r7, #31]
 80067a8:	e048      	b.n	800683c <UART_SetConfig+0x348>
 80067aa:	2304      	movs	r3, #4
 80067ac:	77fb      	strb	r3, [r7, #31]
 80067ae:	e045      	b.n	800683c <UART_SetConfig+0x348>
 80067b0:	2308      	movs	r3, #8
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e042      	b.n	800683c <UART_SetConfig+0x348>
 80067b6:	bf00      	nop
 80067b8:	efff69f3 	.word	0xefff69f3
 80067bc:	40011000 	.word	0x40011000
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40004400 	.word	0x40004400
 80067c8:	40004800 	.word	0x40004800
 80067cc:	40004c00 	.word	0x40004c00
 80067d0:	40005000 	.word	0x40005000
 80067d4:	40011400 	.word	0x40011400
 80067d8:	40007800 	.word	0x40007800
 80067dc:	2310      	movs	r3, #16
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e02c      	b.n	800683c <UART_SetConfig+0x348>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a72      	ldr	r2, [pc, #456]	@ (80069b0 <UART_SetConfig+0x4bc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d125      	bne.n	8006838 <UART_SetConfig+0x344>
 80067ec:	4b71      	ldr	r3, [pc, #452]	@ (80069b4 <UART_SetConfig+0x4c0>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067fa:	d017      	beq.n	800682c <UART_SetConfig+0x338>
 80067fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006800:	d817      	bhi.n	8006832 <UART_SetConfig+0x33e>
 8006802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006806:	d00b      	beq.n	8006820 <UART_SetConfig+0x32c>
 8006808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800680c:	d811      	bhi.n	8006832 <UART_SetConfig+0x33e>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <UART_SetConfig+0x326>
 8006812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006816:	d006      	beq.n	8006826 <UART_SetConfig+0x332>
 8006818:	e00b      	b.n	8006832 <UART_SetConfig+0x33e>
 800681a:	2300      	movs	r3, #0
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e00d      	b.n	800683c <UART_SetConfig+0x348>
 8006820:	2302      	movs	r3, #2
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e00a      	b.n	800683c <UART_SetConfig+0x348>
 8006826:	2304      	movs	r3, #4
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e007      	b.n	800683c <UART_SetConfig+0x348>
 800682c:	2308      	movs	r3, #8
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e004      	b.n	800683c <UART_SetConfig+0x348>
 8006832:	2310      	movs	r3, #16
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e001      	b.n	800683c <UART_SetConfig+0x348>
 8006838:	2310      	movs	r3, #16
 800683a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006844:	d15b      	bne.n	80068fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006846:	7ffb      	ldrb	r3, [r7, #31]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d828      	bhi.n	800689e <UART_SetConfig+0x3aa>
 800684c:	a201      	add	r2, pc, #4	@ (adr r2, 8006854 <UART_SetConfig+0x360>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006879 	.word	0x08006879
 8006858:	08006881 	.word	0x08006881
 800685c:	08006889 	.word	0x08006889
 8006860:	0800689f 	.word	0x0800689f
 8006864:	0800688f 	.word	0x0800688f
 8006868:	0800689f 	.word	0x0800689f
 800686c:	0800689f 	.word	0x0800689f
 8006870:	0800689f 	.word	0x0800689f
 8006874:	08006897 	.word	0x08006897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fd feea 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 800687c:	61b8      	str	r0, [r7, #24]
        break;
 800687e:	e013      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fd fefa 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8006884:	61b8      	str	r0, [r7, #24]
        break;
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006888:	4b4b      	ldr	r3, [pc, #300]	@ (80069b8 <UART_SetConfig+0x4c4>)
 800688a:	61bb      	str	r3, [r7, #24]
        break;
 800688c:	e00c      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688e:	f7fd fdcd 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8006892:	61b8      	str	r0, [r7, #24]
        break;
 8006894:	e008      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800689a:	61bb      	str	r3, [r7, #24]
        break;
 800689c:	e004      	b.n	80068a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77bb      	strb	r3, [r7, #30]
        break;
 80068a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d074      	beq.n	8006998 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	005a      	lsls	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d916      	bls.n	80068f8 <UART_SetConfig+0x404>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d0:	d212      	bcs.n	80068f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f023 030f 	bic.w	r3, r3, #15
 80068da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	89fa      	ldrh	r2, [r7, #14]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e04f      	b.n	8006998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	77bb      	strb	r3, [r7, #30]
 80068fc:	e04c      	b.n	8006998 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068fe:	7ffb      	ldrb	r3, [r7, #31]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d828      	bhi.n	8006956 <UART_SetConfig+0x462>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x418>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7fd fe8e 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8006934:	61b8      	str	r0, [r7, #24]
        break;
 8006936:	e013      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7fd fe9e 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 800693c:	61b8      	str	r0, [r7, #24]
        break;
 800693e:	e00f      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <UART_SetConfig+0x4c4>)
 8006942:	61bb      	str	r3, [r7, #24]
        break;
 8006944:	e00c      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7fd fd71 	bl	800442c <HAL_RCC_GetSysClockFreq>
 800694a:	61b8      	str	r0, [r7, #24]
        break;
 800694c:	e008      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006952:	61bb      	str	r3, [r7, #24]
        break;
 8006954:	e004      	b.n	8006960 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	77bb      	strb	r3, [r7, #30]
        break;
 800695e:	bf00      	nop
    }

    if (pclk != 0U)
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085a      	lsrs	r2, r3, #1
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b0f      	cmp	r3, #15
 800697e:	d909      	bls.n	8006994 <UART_SetConfig+0x4a0>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006986:	d205      	bcs.n	8006994 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	e001      	b.n	8006998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40007c00 	.word	0x40007c00
 80069b4:	40023800 	.word	0x40023800
 80069b8:	00f42400 	.word	0x00f42400

080069bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01a      	beq.n	8006ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aba:	d10a      	bne.n	8006ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
  }
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b098      	sub	sp, #96	@ 0x60
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b10:	f7fb fdf6 	bl	8002700 <HAL_GetTick>
 8006b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d12e      	bne.n	8006b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f88c 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d021      	beq.n	8006b82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e062      	b.n	8006c48 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d149      	bne.n	8006c24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f856 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03c      	beq.n	8006c24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfc:	61fa      	str	r2, [r7, #28]
 8006bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	69b9      	ldr	r1, [r7, #24]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e011      	b.n	8006c48 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3758      	adds	r7, #88	@ 0x58
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c60:	e04f      	b.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d04b      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6a:	f7fb fd49 	bl	8002700 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e04e      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d037      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d034      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b40      	cmp	r3, #64	@ 0x40
 8006c9c:	d031      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d110      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f838 	bl	8006d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e029      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cdc:	d111      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f81e 	bl	8006d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e00f      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d0a0      	beq.n	8006c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b095      	sub	sp, #84	@ 0x54
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d118      	bne.n	8006dd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0310 	bic.w	r3, r3, #16
 8006db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006de6:	bf00      	nop
 8006de8:	3754      	adds	r7, #84	@ 0x54
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <std>:
 8006df4:	2300      	movs	r3, #0
 8006df6:	b510      	push	{r4, lr}
 8006df8:	4604      	mov	r4, r0
 8006dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8006dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e02:	6083      	str	r3, [r0, #8]
 8006e04:	8181      	strh	r1, [r0, #12]
 8006e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e08:	81c2      	strh	r2, [r0, #14]
 8006e0a:	6183      	str	r3, [r0, #24]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	2208      	movs	r2, #8
 8006e10:	305c      	adds	r0, #92	@ 0x5c
 8006e12:	f000 f9f9 	bl	8007208 <memset>
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <std+0x58>)
 8006e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <std+0x5c>)
 8006e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <std+0x60>)
 8006e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e22:	4b0d      	ldr	r3, [pc, #52]	@ (8006e58 <std+0x64>)
 8006e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <std+0x68>)
 8006e28:	6224      	str	r4, [r4, #32]
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d006      	beq.n	8006e3c <std+0x48>
 8006e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e32:	4294      	cmp	r4, r2
 8006e34:	d002      	beq.n	8006e3c <std+0x48>
 8006e36:	33d0      	adds	r3, #208	@ 0xd0
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	d105      	bne.n	8006e48 <std+0x54>
 8006e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f000 ba58 	b.w	80072f8 <__retarget_lock_init_recursive>
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08007059 	.word	0x08007059
 8006e50:	0800707b 	.word	0x0800707b
 8006e54:	080070b3 	.word	0x080070b3
 8006e58:	080070d7 	.word	0x080070d7
 8006e5c:	2000069c 	.word	0x2000069c

08006e60 <stdio_exit_handler>:
 8006e60:	4a02      	ldr	r2, [pc, #8]	@ (8006e6c <stdio_exit_handler+0xc>)
 8006e62:	4903      	ldr	r1, [pc, #12]	@ (8006e70 <stdio_exit_handler+0x10>)
 8006e64:	4803      	ldr	r0, [pc, #12]	@ (8006e74 <stdio_exit_handler+0x14>)
 8006e66:	f000 b869 	b.w	8006f3c <_fwalk_sglue>
 8006e6a:	bf00      	nop
 8006e6c:	2000000c 	.word	0x2000000c
 8006e70:	08007b95 	.word	0x08007b95
 8006e74:	2000001c 	.word	0x2000001c

08006e78 <cleanup_stdio>:
 8006e78:	6841      	ldr	r1, [r0, #4]
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006eac <cleanup_stdio+0x34>)
 8006e7c:	4299      	cmp	r1, r3
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	d001      	beq.n	8006e88 <cleanup_stdio+0x10>
 8006e84:	f000 fe86 	bl	8007b94 <_fflush_r>
 8006e88:	68a1      	ldr	r1, [r4, #8]
 8006e8a:	4b09      	ldr	r3, [pc, #36]	@ (8006eb0 <cleanup_stdio+0x38>)
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d002      	beq.n	8006e96 <cleanup_stdio+0x1e>
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fe7f 	bl	8007b94 <_fflush_r>
 8006e96:	68e1      	ldr	r1, [r4, #12]
 8006e98:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <cleanup_stdio+0x3c>)
 8006e9a:	4299      	cmp	r1, r3
 8006e9c:	d004      	beq.n	8006ea8 <cleanup_stdio+0x30>
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f000 be76 	b.w	8007b94 <_fflush_r>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	2000069c 	.word	0x2000069c
 8006eb0:	20000704 	.word	0x20000704
 8006eb4:	2000076c 	.word	0x2000076c

08006eb8 <global_stdio_init.part.0>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <global_stdio_init.part.0+0x30>)
 8006ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8006eec <global_stdio_init.part.0+0x34>)
 8006ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef0 <global_stdio_init.part.0+0x38>)
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	f7ff ff94 	bl	8006df4 <std>
 8006ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	2109      	movs	r1, #9
 8006ed4:	f7ff ff8e 	bl	8006df4 <std>
 8006ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006edc:	2202      	movs	r2, #2
 8006ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee2:	2112      	movs	r1, #18
 8006ee4:	f7ff bf86 	b.w	8006df4 <std>
 8006ee8:	200007d4 	.word	0x200007d4
 8006eec:	2000069c 	.word	0x2000069c
 8006ef0:	08006e61 	.word	0x08006e61

08006ef4 <__sfp_lock_acquire>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	@ (8006efc <__sfp_lock_acquire+0x8>)
 8006ef6:	f000 ba00 	b.w	80072fa <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	200007dd 	.word	0x200007dd

08006f00 <__sfp_lock_release>:
 8006f00:	4801      	ldr	r0, [pc, #4]	@ (8006f08 <__sfp_lock_release+0x8>)
 8006f02:	f000 b9fb 	b.w	80072fc <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	200007dd 	.word	0x200007dd

08006f0c <__sinit>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4604      	mov	r4, r0
 8006f10:	f7ff fff0 	bl	8006ef4 <__sfp_lock_acquire>
 8006f14:	6a23      	ldr	r3, [r4, #32]
 8006f16:	b11b      	cbz	r3, 8006f20 <__sinit+0x14>
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1c:	f7ff bff0 	b.w	8006f00 <__sfp_lock_release>
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <__sinit+0x28>)
 8006f22:	6223      	str	r3, [r4, #32]
 8006f24:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <__sinit+0x2c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f5      	bne.n	8006f18 <__sinit+0xc>
 8006f2c:	f7ff ffc4 	bl	8006eb8 <global_stdio_init.part.0>
 8006f30:	e7f2      	b.n	8006f18 <__sinit+0xc>
 8006f32:	bf00      	nop
 8006f34:	08006e79 	.word	0x08006e79
 8006f38:	200007d4 	.word	0x200007d4

08006f3c <_fwalk_sglue>:
 8006f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4607      	mov	r7, r0
 8006f42:	4688      	mov	r8, r1
 8006f44:	4614      	mov	r4, r2
 8006f46:	2600      	movs	r6, #0
 8006f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f50:	d505      	bpl.n	8006f5e <_fwalk_sglue+0x22>
 8006f52:	6824      	ldr	r4, [r4, #0]
 8006f54:	2c00      	cmp	r4, #0
 8006f56:	d1f7      	bne.n	8006f48 <_fwalk_sglue+0xc>
 8006f58:	4630      	mov	r0, r6
 8006f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d907      	bls.n	8006f74 <_fwalk_sglue+0x38>
 8006f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	d003      	beq.n	8006f74 <_fwalk_sglue+0x38>
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4638      	mov	r0, r7
 8006f70:	47c0      	blx	r8
 8006f72:	4306      	orrs	r6, r0
 8006f74:	3568      	adds	r5, #104	@ 0x68
 8006f76:	e7e9      	b.n	8006f4c <_fwalk_sglue+0x10>

08006f78 <iprintf>:
 8006f78:	b40f      	push	{r0, r1, r2, r3}
 8006f7a:	b507      	push	{r0, r1, r2, lr}
 8006f7c:	4906      	ldr	r1, [pc, #24]	@ (8006f98 <iprintf+0x20>)
 8006f7e:	ab04      	add	r3, sp, #16
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f86:	6881      	ldr	r1, [r0, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	f000 fadb 	bl	8007544 <_vfiprintf_r>
 8006f8e:	b003      	add	sp, #12
 8006f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f94:	b004      	add	sp, #16
 8006f96:	4770      	bx	lr
 8006f98:	20000018 	.word	0x20000018

08006f9c <_puts_r>:
 8006f9c:	6a03      	ldr	r3, [r0, #32]
 8006f9e:	b570      	push	{r4, r5, r6, lr}
 8006fa0:	6884      	ldr	r4, [r0, #8]
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	460e      	mov	r6, r1
 8006fa6:	b90b      	cbnz	r3, 8006fac <_puts_r+0x10>
 8006fa8:	f7ff ffb0 	bl	8006f0c <__sinit>
 8006fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fae:	07db      	lsls	r3, r3, #31
 8006fb0:	d405      	bmi.n	8006fbe <_puts_r+0x22>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	0598      	lsls	r0, r3, #22
 8006fb6:	d402      	bmi.n	8006fbe <_puts_r+0x22>
 8006fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fba:	f000 f99e 	bl	80072fa <__retarget_lock_acquire_recursive>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	0719      	lsls	r1, r3, #28
 8006fc2:	d502      	bpl.n	8006fca <_puts_r+0x2e>
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d135      	bne.n	8007036 <_puts_r+0x9a>
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4628      	mov	r0, r5
 8006fce:	f000 f8c5 	bl	800715c <__swsetup_r>
 8006fd2:	b380      	cbz	r0, 8007036 <_puts_r+0x9a>
 8006fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8006fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fda:	07da      	lsls	r2, r3, #31
 8006fdc:	d405      	bmi.n	8006fea <_puts_r+0x4e>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	059b      	lsls	r3, r3, #22
 8006fe2:	d402      	bmi.n	8006fea <_puts_r+0x4e>
 8006fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fe6:	f000 f989 	bl	80072fc <__retarget_lock_release_recursive>
 8006fea:	4628      	mov	r0, r5
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da04      	bge.n	8006ffc <_puts_r+0x60>
 8006ff2:	69a2      	ldr	r2, [r4, #24]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	dc17      	bgt.n	8007028 <_puts_r+0x8c>
 8006ff8:	290a      	cmp	r1, #10
 8006ffa:	d015      	beq.n	8007028 <_puts_r+0x8c>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	6022      	str	r2, [r4, #0]
 8007002:	7019      	strb	r1, [r3, #0]
 8007004:	68a3      	ldr	r3, [r4, #8]
 8007006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800700a:	3b01      	subs	r3, #1
 800700c:	60a3      	str	r3, [r4, #8]
 800700e:	2900      	cmp	r1, #0
 8007010:	d1ed      	bne.n	8006fee <_puts_r+0x52>
 8007012:	2b00      	cmp	r3, #0
 8007014:	da11      	bge.n	800703a <_puts_r+0x9e>
 8007016:	4622      	mov	r2, r4
 8007018:	210a      	movs	r1, #10
 800701a:	4628      	mov	r0, r5
 800701c:	f000 f85f 	bl	80070de <__swbuf_r>
 8007020:	3001      	adds	r0, #1
 8007022:	d0d7      	beq.n	8006fd4 <_puts_r+0x38>
 8007024:	250a      	movs	r5, #10
 8007026:	e7d7      	b.n	8006fd8 <_puts_r+0x3c>
 8007028:	4622      	mov	r2, r4
 800702a:	4628      	mov	r0, r5
 800702c:	f000 f857 	bl	80070de <__swbuf_r>
 8007030:	3001      	adds	r0, #1
 8007032:	d1e7      	bne.n	8007004 <_puts_r+0x68>
 8007034:	e7ce      	b.n	8006fd4 <_puts_r+0x38>
 8007036:	3e01      	subs	r6, #1
 8007038:	e7e4      	b.n	8007004 <_puts_r+0x68>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	6022      	str	r2, [r4, #0]
 8007040:	220a      	movs	r2, #10
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	e7ee      	b.n	8007024 <_puts_r+0x88>
	...

08007048 <puts>:
 8007048:	4b02      	ldr	r3, [pc, #8]	@ (8007054 <puts+0xc>)
 800704a:	4601      	mov	r1, r0
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	f7ff bfa5 	b.w	8006f9c <_puts_r>
 8007052:	bf00      	nop
 8007054:	20000018 	.word	0x20000018

08007058 <__sread>:
 8007058:	b510      	push	{r4, lr}
 800705a:	460c      	mov	r4, r1
 800705c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007060:	f000 f8fc 	bl	800725c <_read_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	bfab      	itete	ge
 8007068:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800706a:	89a3      	ldrhlt	r3, [r4, #12]
 800706c:	181b      	addge	r3, r3, r0
 800706e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007072:	bfac      	ite	ge
 8007074:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007076:	81a3      	strhlt	r3, [r4, #12]
 8007078:	bd10      	pop	{r4, pc}

0800707a <__swrite>:
 800707a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707e:	461f      	mov	r7, r3
 8007080:	898b      	ldrh	r3, [r1, #12]
 8007082:	05db      	lsls	r3, r3, #23
 8007084:	4605      	mov	r5, r0
 8007086:	460c      	mov	r4, r1
 8007088:	4616      	mov	r6, r2
 800708a:	d505      	bpl.n	8007098 <__swrite+0x1e>
 800708c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007090:	2302      	movs	r3, #2
 8007092:	2200      	movs	r2, #0
 8007094:	f000 f8d0 	bl	8007238 <_lseek_r>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	4632      	mov	r2, r6
 80070a6:	463b      	mov	r3, r7
 80070a8:	4628      	mov	r0, r5
 80070aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ae:	f000 b8e7 	b.w	8007280 <_write_r>

080070b2 <__sseek>:
 80070b2:	b510      	push	{r4, lr}
 80070b4:	460c      	mov	r4, r1
 80070b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ba:	f000 f8bd 	bl	8007238 <_lseek_r>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	bf15      	itete	ne
 80070c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070ce:	81a3      	strheq	r3, [r4, #12]
 80070d0:	bf18      	it	ne
 80070d2:	81a3      	strhne	r3, [r4, #12]
 80070d4:	bd10      	pop	{r4, pc}

080070d6 <__sclose>:
 80070d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070da:	f000 b89d 	b.w	8007218 <_close_r>

080070de <__swbuf_r>:
 80070de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e0:	460e      	mov	r6, r1
 80070e2:	4614      	mov	r4, r2
 80070e4:	4605      	mov	r5, r0
 80070e6:	b118      	cbz	r0, 80070f0 <__swbuf_r+0x12>
 80070e8:	6a03      	ldr	r3, [r0, #32]
 80070ea:	b90b      	cbnz	r3, 80070f0 <__swbuf_r+0x12>
 80070ec:	f7ff ff0e 	bl	8006f0c <__sinit>
 80070f0:	69a3      	ldr	r3, [r4, #24]
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	071a      	lsls	r2, r3, #28
 80070f8:	d501      	bpl.n	80070fe <__swbuf_r+0x20>
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	b943      	cbnz	r3, 8007110 <__swbuf_r+0x32>
 80070fe:	4621      	mov	r1, r4
 8007100:	4628      	mov	r0, r5
 8007102:	f000 f82b 	bl	800715c <__swsetup_r>
 8007106:	b118      	cbz	r0, 8007110 <__swbuf_r+0x32>
 8007108:	f04f 37ff 	mov.w	r7, #4294967295
 800710c:	4638      	mov	r0, r7
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	6922      	ldr	r2, [r4, #16]
 8007114:	1a98      	subs	r0, r3, r2
 8007116:	6963      	ldr	r3, [r4, #20]
 8007118:	b2f6      	uxtb	r6, r6
 800711a:	4283      	cmp	r3, r0
 800711c:	4637      	mov	r7, r6
 800711e:	dc05      	bgt.n	800712c <__swbuf_r+0x4e>
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f000 fd36 	bl	8007b94 <_fflush_r>
 8007128:	2800      	cmp	r0, #0
 800712a:	d1ed      	bne.n	8007108 <__swbuf_r+0x2a>
 800712c:	68a3      	ldr	r3, [r4, #8]
 800712e:	3b01      	subs	r3, #1
 8007130:	60a3      	str	r3, [r4, #8]
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	6022      	str	r2, [r4, #0]
 8007138:	701e      	strb	r6, [r3, #0]
 800713a:	6962      	ldr	r2, [r4, #20]
 800713c:	1c43      	adds	r3, r0, #1
 800713e:	429a      	cmp	r2, r3
 8007140:	d004      	beq.n	800714c <__swbuf_r+0x6e>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	07db      	lsls	r3, r3, #31
 8007146:	d5e1      	bpl.n	800710c <__swbuf_r+0x2e>
 8007148:	2e0a      	cmp	r6, #10
 800714a:	d1df      	bne.n	800710c <__swbuf_r+0x2e>
 800714c:	4621      	mov	r1, r4
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fd20 	bl	8007b94 <_fflush_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	d0d9      	beq.n	800710c <__swbuf_r+0x2e>
 8007158:	e7d6      	b.n	8007108 <__swbuf_r+0x2a>
	...

0800715c <__swsetup_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4b29      	ldr	r3, [pc, #164]	@ (8007204 <__swsetup_r+0xa8>)
 8007160:	4605      	mov	r5, r0
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	460c      	mov	r4, r1
 8007166:	b118      	cbz	r0, 8007170 <__swsetup_r+0x14>
 8007168:	6a03      	ldr	r3, [r0, #32]
 800716a:	b90b      	cbnz	r3, 8007170 <__swsetup_r+0x14>
 800716c:	f7ff fece 	bl	8006f0c <__sinit>
 8007170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007174:	0719      	lsls	r1, r3, #28
 8007176:	d422      	bmi.n	80071be <__swsetup_r+0x62>
 8007178:	06da      	lsls	r2, r3, #27
 800717a:	d407      	bmi.n	800718c <__swsetup_r+0x30>
 800717c:	2209      	movs	r2, #9
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	f04f 30ff 	mov.w	r0, #4294967295
 800718a:	e033      	b.n	80071f4 <__swsetup_r+0x98>
 800718c:	0758      	lsls	r0, r3, #29
 800718e:	d512      	bpl.n	80071b6 <__swsetup_r+0x5a>
 8007190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007192:	b141      	cbz	r1, 80071a6 <__swsetup_r+0x4a>
 8007194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007198:	4299      	cmp	r1, r3
 800719a:	d002      	beq.n	80071a2 <__swsetup_r+0x46>
 800719c:	4628      	mov	r0, r5
 800719e:	f000 f8af 	bl	8007300 <_free_r>
 80071a2:	2300      	movs	r3, #0
 80071a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	2300      	movs	r3, #0
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	6923      	ldr	r3, [r4, #16]
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f043 0308 	orr.w	r3, r3, #8
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	6923      	ldr	r3, [r4, #16]
 80071c0:	b94b      	cbnz	r3, 80071d6 <__swsetup_r+0x7a>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071cc:	d003      	beq.n	80071d6 <__swsetup_r+0x7a>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 fd2d 	bl	8007c30 <__smakebuf_r>
 80071d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071da:	f013 0201 	ands.w	r2, r3, #1
 80071de:	d00a      	beq.n	80071f6 <__swsetup_r+0x9a>
 80071e0:	2200      	movs	r2, #0
 80071e2:	60a2      	str	r2, [r4, #8]
 80071e4:	6962      	ldr	r2, [r4, #20]
 80071e6:	4252      	negs	r2, r2
 80071e8:	61a2      	str	r2, [r4, #24]
 80071ea:	6922      	ldr	r2, [r4, #16]
 80071ec:	b942      	cbnz	r2, 8007200 <__swsetup_r+0xa4>
 80071ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071f2:	d1c5      	bne.n	8007180 <__swsetup_r+0x24>
 80071f4:	bd38      	pop	{r3, r4, r5, pc}
 80071f6:	0799      	lsls	r1, r3, #30
 80071f8:	bf58      	it	pl
 80071fa:	6962      	ldrpl	r2, [r4, #20]
 80071fc:	60a2      	str	r2, [r4, #8]
 80071fe:	e7f4      	b.n	80071ea <__swsetup_r+0x8e>
 8007200:	2000      	movs	r0, #0
 8007202:	e7f7      	b.n	80071f4 <__swsetup_r+0x98>
 8007204:	20000018 	.word	0x20000018

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <_close_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d06      	ldr	r5, [pc, #24]	@ (8007234 <_close_r+0x1c>)
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fb f975 	bl	8002512 <_close>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_close_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_close_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	200007d8 	.word	0x200007d8

08007238 <_lseek_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d07      	ldr	r5, [pc, #28]	@ (8007258 <_lseek_r+0x20>)
 800723c:	4604      	mov	r4, r0
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	2200      	movs	r2, #0
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7fb f98a 	bl	8002560 <_lseek>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_lseek_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_lseek_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	200007d8 	.word	0x200007d8

0800725c <_read_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	@ (800727c <_read_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fb f934 	bl	80024d8 <_read>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_read_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_read_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200007d8 	.word	0x200007d8

08007280 <_write_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	@ (80072a0 <_write_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7f9 f9e3 	bl	800065a <_write>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_write_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_write_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	200007d8 	.word	0x200007d8

080072a4 <__errno>:
 80072a4:	4b01      	ldr	r3, [pc, #4]	@ (80072ac <__errno+0x8>)
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000018 	.word	0x20000018

080072b0 <__libc_init_array>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4d0d      	ldr	r5, [pc, #52]	@ (80072e8 <__libc_init_array+0x38>)
 80072b4:	4c0d      	ldr	r4, [pc, #52]	@ (80072ec <__libc_init_array+0x3c>)
 80072b6:	1b64      	subs	r4, r4, r5
 80072b8:	10a4      	asrs	r4, r4, #2
 80072ba:	2600      	movs	r6, #0
 80072bc:	42a6      	cmp	r6, r4
 80072be:	d109      	bne.n	80072d4 <__libc_init_array+0x24>
 80072c0:	4d0b      	ldr	r5, [pc, #44]	@ (80072f0 <__libc_init_array+0x40>)
 80072c2:	4c0c      	ldr	r4, [pc, #48]	@ (80072f4 <__libc_init_array+0x44>)
 80072c4:	f000 fd22 	bl	8007d0c <_init>
 80072c8:	1b64      	subs	r4, r4, r5
 80072ca:	10a4      	asrs	r4, r4, #2
 80072cc:	2600      	movs	r6, #0
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	d105      	bne.n	80072de <__libc_init_array+0x2e>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d8:	4798      	blx	r3
 80072da:	3601      	adds	r6, #1
 80072dc:	e7ee      	b.n	80072bc <__libc_init_array+0xc>
 80072de:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e2:	4798      	blx	r3
 80072e4:	3601      	adds	r6, #1
 80072e6:	e7f2      	b.n	80072ce <__libc_init_array+0x1e>
 80072e8:	08007e04 	.word	0x08007e04
 80072ec:	08007e04 	.word	0x08007e04
 80072f0:	08007e04 	.word	0x08007e04
 80072f4:	08007e08 	.word	0x08007e08

080072f8 <__retarget_lock_init_recursive>:
 80072f8:	4770      	bx	lr

080072fa <__retarget_lock_acquire_recursive>:
 80072fa:	4770      	bx	lr

080072fc <__retarget_lock_release_recursive>:
 80072fc:	4770      	bx	lr
	...

08007300 <_free_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4605      	mov	r5, r0
 8007304:	2900      	cmp	r1, #0
 8007306:	d041      	beq.n	800738c <_free_r+0x8c>
 8007308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730c:	1f0c      	subs	r4, r1, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	18e4      	addlt	r4, r4, r3
 8007314:	f000 f8e0 	bl	80074d8 <__malloc_lock>
 8007318:	4a1d      	ldr	r2, [pc, #116]	@ (8007390 <_free_r+0x90>)
 800731a:	6813      	ldr	r3, [r2, #0]
 800731c:	b933      	cbnz	r3, 800732c <_free_r+0x2c>
 800731e:	6063      	str	r3, [r4, #4]
 8007320:	6014      	str	r4, [r2, #0]
 8007322:	4628      	mov	r0, r5
 8007324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007328:	f000 b8dc 	b.w	80074e4 <__malloc_unlock>
 800732c:	42a3      	cmp	r3, r4
 800732e:	d908      	bls.n	8007342 <_free_r+0x42>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	1821      	adds	r1, r4, r0
 8007334:	428b      	cmp	r3, r1
 8007336:	bf01      	itttt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	1809      	addeq	r1, r1, r0
 800733e:	6021      	streq	r1, [r4, #0]
 8007340:	e7ed      	b.n	800731e <_free_r+0x1e>
 8007342:	461a      	mov	r2, r3
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	b10b      	cbz	r3, 800734c <_free_r+0x4c>
 8007348:	42a3      	cmp	r3, r4
 800734a:	d9fa      	bls.n	8007342 <_free_r+0x42>
 800734c:	6811      	ldr	r1, [r2, #0]
 800734e:	1850      	adds	r0, r2, r1
 8007350:	42a0      	cmp	r0, r4
 8007352:	d10b      	bne.n	800736c <_free_r+0x6c>
 8007354:	6820      	ldr	r0, [r4, #0]
 8007356:	4401      	add	r1, r0
 8007358:	1850      	adds	r0, r2, r1
 800735a:	4283      	cmp	r3, r0
 800735c:	6011      	str	r1, [r2, #0]
 800735e:	d1e0      	bne.n	8007322 <_free_r+0x22>
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	6053      	str	r3, [r2, #4]
 8007366:	4408      	add	r0, r1
 8007368:	6010      	str	r0, [r2, #0]
 800736a:	e7da      	b.n	8007322 <_free_r+0x22>
 800736c:	d902      	bls.n	8007374 <_free_r+0x74>
 800736e:	230c      	movs	r3, #12
 8007370:	602b      	str	r3, [r5, #0]
 8007372:	e7d6      	b.n	8007322 <_free_r+0x22>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	1821      	adds	r1, r4, r0
 8007378:	428b      	cmp	r3, r1
 800737a:	bf04      	itt	eq
 800737c:	6819      	ldreq	r1, [r3, #0]
 800737e:	685b      	ldreq	r3, [r3, #4]
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	bf04      	itt	eq
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	6054      	str	r4, [r2, #4]
 800738a:	e7ca      	b.n	8007322 <_free_r+0x22>
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	bf00      	nop
 8007390:	200007e4 	.word	0x200007e4

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0f      	ldr	r6, [pc, #60]	@ (80073d4 <sbrk_aligned+0x40>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f000 fca4 	bl	8007cec <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 fc9f 	bl	8007cec <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <sbrk_aligned+0x26>
 80073b2:	f04f 34ff 	mov.w	r4, #4294967295
 80073b6:	4620      	mov	r0, r4
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0f8      	beq.n	80073b6 <sbrk_aligned+0x22>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 fc90 	bl	8007cec <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1f2      	bne.n	80073b6 <sbrk_aligned+0x22>
 80073d0:	e7ef      	b.n	80073b2 <sbrk_aligned+0x1e>
 80073d2:	bf00      	nop
 80073d4:	200007e0 	.word	0x200007e0

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4606      	mov	r6, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d904      	bls.n	80073fe <_malloc_r+0x26>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d4 <_malloc_r+0xfc>
 8007402:	f000 f869 	bl	80074d8 <__malloc_lock>
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	461c      	mov	r4, r3
 800740c:	bb44      	cbnz	r4, 8007460 <_malloc_r+0x88>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbf 	bl	8007394 <sbrk_aligned>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	4604      	mov	r4, r0
 800741a:	d158      	bne.n	80074ce <_malloc_r+0xf6>
 800741c:	f8d8 4000 	ldr.w	r4, [r8]
 8007420:	4627      	mov	r7, r4
 8007422:	2f00      	cmp	r7, #0
 8007424:	d143      	bne.n	80074ae <_malloc_r+0xd6>
 8007426:	2c00      	cmp	r4, #0
 8007428:	d04b      	beq.n	80074c2 <_malloc_r+0xea>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	eb04 0903 	add.w	r9, r4, r3
 8007434:	f000 fc5a 	bl	8007cec <_sbrk_r>
 8007438:	4581      	cmp	r9, r0
 800743a:	d142      	bne.n	80074c2 <_malloc_r+0xea>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	1a6d      	subs	r5, r5, r1
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ffa6 	bl	8007394 <sbrk_aligned>
 8007448:	3001      	adds	r0, #1
 800744a:	d03a      	beq.n	80074c2 <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	442b      	add	r3, r5
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f8d8 3000 	ldr.w	r3, [r8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	bb62      	cbnz	r2, 80074b4 <_malloc_r+0xdc>
 800745a:	f8c8 7000 	str.w	r7, [r8]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xa8>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d420      	bmi.n	80074a8 <_malloc_r+0xd0>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xc2>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f82f 	bl	80074e4 <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	bf1c      	itt	ne
 8007494:	1a1b      	subne	r3, r3, r0
 8007496:	50a3      	strne	r3, [r4, r2]
 8007498:	e7af      	b.n	80073fa <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	f8c8 2000 	streq.w	r2, [r8]
 80074a4:	605a      	strne	r2, [r3, #4]
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0xa8>
 80074a8:	4623      	mov	r3, r4
 80074aa:	6864      	ldr	r4, [r4, #4]
 80074ac:	e7ae      	b.n	800740c <_malloc_r+0x34>
 80074ae:	463c      	mov	r4, r7
 80074b0:	687f      	ldr	r7, [r7, #4]
 80074b2:	e7b6      	b.n	8007422 <_malloc_r+0x4a>
 80074b4:	461a      	mov	r2, r3
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d1fb      	bne.n	80074b4 <_malloc_r+0xdc>
 80074bc:	2300      	movs	r3, #0
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa8>
 80074c2:	230c      	movs	r3, #12
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f80c 	bl	80074e4 <__malloc_unlock>
 80074cc:	e794      	b.n	80073f8 <_malloc_r+0x20>
 80074ce:	6005      	str	r5, [r0, #0]
 80074d0:	e7d6      	b.n	8007480 <_malloc_r+0xa8>
 80074d2:	bf00      	nop
 80074d4:	200007e4 	.word	0x200007e4

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff bf0e 	b.w	80072fa <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	200007dc 	.word	0x200007dc

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	@ (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff bf09 	b.w	80072fc <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	200007dc 	.word	0x200007dc

080074f0 <__sfputc_r>:
 80074f0:	6893      	ldr	r3, [r2, #8]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	b410      	push	{r4}
 80074f8:	6093      	str	r3, [r2, #8]
 80074fa:	da08      	bge.n	800750e <__sfputc_r+0x1e>
 80074fc:	6994      	ldr	r4, [r2, #24]
 80074fe:	42a3      	cmp	r3, r4
 8007500:	db01      	blt.n	8007506 <__sfputc_r+0x16>
 8007502:	290a      	cmp	r1, #10
 8007504:	d103      	bne.n	800750e <__sfputc_r+0x1e>
 8007506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800750a:	f7ff bde8 	b.w	80070de <__swbuf_r>
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	1c58      	adds	r0, r3, #1
 8007512:	6010      	str	r0, [r2, #0]
 8007514:	7019      	strb	r1, [r3, #0]
 8007516:	4608      	mov	r0, r1
 8007518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800751c:	4770      	bx	lr

0800751e <__sfputs_r>:
 800751e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	4614      	mov	r4, r2
 8007526:	18d5      	adds	r5, r2, r3
 8007528:	42ac      	cmp	r4, r5
 800752a:	d101      	bne.n	8007530 <__sfputs_r+0x12>
 800752c:	2000      	movs	r0, #0
 800752e:	e007      	b.n	8007540 <__sfputs_r+0x22>
 8007530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007534:	463a      	mov	r2, r7
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff ffda 	bl	80074f0 <__sfputc_r>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d1f3      	bne.n	8007528 <__sfputs_r+0xa>
 8007540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007544 <_vfiprintf_r>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	460d      	mov	r5, r1
 800754a:	b09d      	sub	sp, #116	@ 0x74
 800754c:	4614      	mov	r4, r2
 800754e:	4698      	mov	r8, r3
 8007550:	4606      	mov	r6, r0
 8007552:	b118      	cbz	r0, 800755c <_vfiprintf_r+0x18>
 8007554:	6a03      	ldr	r3, [r0, #32]
 8007556:	b90b      	cbnz	r3, 800755c <_vfiprintf_r+0x18>
 8007558:	f7ff fcd8 	bl	8006f0c <__sinit>
 800755c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x2a>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x2a>
 8007568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800756a:	f7ff fec6 	bl	80072fa <__retarget_lock_acquire_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	071b      	lsls	r3, r3, #28
 8007572:	d501      	bpl.n	8007578 <_vfiprintf_r+0x34>
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	b99b      	cbnz	r3, 80075a0 <_vfiprintf_r+0x5c>
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff fdee 	bl	800715c <__swsetup_r>
 8007580:	b170      	cbz	r0, 80075a0 <_vfiprintf_r+0x5c>
 8007582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007584:	07dc      	lsls	r4, r3, #31
 8007586:	d504      	bpl.n	8007592 <_vfiprintf_r+0x4e>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b01d      	add	sp, #116	@ 0x74
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	0598      	lsls	r0, r3, #22
 8007596:	d4f7      	bmi.n	8007588 <_vfiprintf_r+0x44>
 8007598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800759a:	f7ff feaf 	bl	80072fc <__retarget_lock_release_recursive>
 800759e:	e7f3      	b.n	8007588 <_vfiprintf_r+0x44>
 80075a0:	2300      	movs	r3, #0
 80075a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a4:	2320      	movs	r3, #32
 80075a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ae:	2330      	movs	r3, #48	@ 0x30
 80075b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007760 <_vfiprintf_r+0x21c>
 80075b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075b8:	f04f 0901 	mov.w	r9, #1
 80075bc:	4623      	mov	r3, r4
 80075be:	469a      	mov	sl, r3
 80075c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c4:	b10a      	cbz	r2, 80075ca <_vfiprintf_r+0x86>
 80075c6:	2a25      	cmp	r2, #37	@ 0x25
 80075c8:	d1f9      	bne.n	80075be <_vfiprintf_r+0x7a>
 80075ca:	ebba 0b04 	subs.w	fp, sl, r4
 80075ce:	d00b      	beq.n	80075e8 <_vfiprintf_r+0xa4>
 80075d0:	465b      	mov	r3, fp
 80075d2:	4622      	mov	r2, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	4630      	mov	r0, r6
 80075d8:	f7ff ffa1 	bl	800751e <__sfputs_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	f000 80a7 	beq.w	8007730 <_vfiprintf_r+0x1ec>
 80075e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075e4:	445a      	add	r2, fp
 80075e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80075e8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 809f 	beq.w	8007730 <_vfiprintf_r+0x1ec>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075fc:	f10a 0a01 	add.w	sl, sl, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007608:	931a      	str	r3, [sp, #104]	@ 0x68
 800760a:	4654      	mov	r4, sl
 800760c:	2205      	movs	r2, #5
 800760e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007612:	4853      	ldr	r0, [pc, #332]	@ (8007760 <_vfiprintf_r+0x21c>)
 8007614:	f7f8 fe14 	bl	8000240 <memchr>
 8007618:	9a04      	ldr	r2, [sp, #16]
 800761a:	b9d8      	cbnz	r0, 8007654 <_vfiprintf_r+0x110>
 800761c:	06d1      	lsls	r1, r2, #27
 800761e:	bf44      	itt	mi
 8007620:	2320      	movmi	r3, #32
 8007622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007626:	0713      	lsls	r3, r2, #28
 8007628:	bf44      	itt	mi
 800762a:	232b      	movmi	r3, #43	@ 0x2b
 800762c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007630:	f89a 3000 	ldrb.w	r3, [sl]
 8007634:	2b2a      	cmp	r3, #42	@ 0x2a
 8007636:	d015      	beq.n	8007664 <_vfiprintf_r+0x120>
 8007638:	9a07      	ldr	r2, [sp, #28]
 800763a:	4654      	mov	r4, sl
 800763c:	2000      	movs	r0, #0
 800763e:	f04f 0c0a 	mov.w	ip, #10
 8007642:	4621      	mov	r1, r4
 8007644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007648:	3b30      	subs	r3, #48	@ 0x30
 800764a:	2b09      	cmp	r3, #9
 800764c:	d94b      	bls.n	80076e6 <_vfiprintf_r+0x1a2>
 800764e:	b1b0      	cbz	r0, 800767e <_vfiprintf_r+0x13a>
 8007650:	9207      	str	r2, [sp, #28]
 8007652:	e014      	b.n	800767e <_vfiprintf_r+0x13a>
 8007654:	eba0 0308 	sub.w	r3, r0, r8
 8007658:	fa09 f303 	lsl.w	r3, r9, r3
 800765c:	4313      	orrs	r3, r2
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	46a2      	mov	sl, r4
 8007662:	e7d2      	b.n	800760a <_vfiprintf_r+0xc6>
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	1d19      	adds	r1, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	9103      	str	r1, [sp, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfbb      	ittet	lt
 8007670:	425b      	neglt	r3, r3
 8007672:	f042 0202 	orrlt.w	r2, r2, #2
 8007676:	9307      	strge	r3, [sp, #28]
 8007678:	9307      	strlt	r3, [sp, #28]
 800767a:	bfb8      	it	lt
 800767c:	9204      	strlt	r2, [sp, #16]
 800767e:	7823      	ldrb	r3, [r4, #0]
 8007680:	2b2e      	cmp	r3, #46	@ 0x2e
 8007682:	d10a      	bne.n	800769a <_vfiprintf_r+0x156>
 8007684:	7863      	ldrb	r3, [r4, #1]
 8007686:	2b2a      	cmp	r3, #42	@ 0x2a
 8007688:	d132      	bne.n	80076f0 <_vfiprintf_r+0x1ac>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	1d1a      	adds	r2, r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	9203      	str	r2, [sp, #12]
 8007692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007696:	3402      	adds	r4, #2
 8007698:	9305      	str	r3, [sp, #20]
 800769a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007770 <_vfiprintf_r+0x22c>
 800769e:	7821      	ldrb	r1, [r4, #0]
 80076a0:	2203      	movs	r2, #3
 80076a2:	4650      	mov	r0, sl
 80076a4:	f7f8 fdcc 	bl	8000240 <memchr>
 80076a8:	b138      	cbz	r0, 80076ba <_vfiprintf_r+0x176>
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	eba0 000a 	sub.w	r0, r0, sl
 80076b0:	2240      	movs	r2, #64	@ 0x40
 80076b2:	4082      	lsls	r2, r0
 80076b4:	4313      	orrs	r3, r2
 80076b6:	3401      	adds	r4, #1
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076be:	4829      	ldr	r0, [pc, #164]	@ (8007764 <_vfiprintf_r+0x220>)
 80076c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076c4:	2206      	movs	r2, #6
 80076c6:	f7f8 fdbb 	bl	8000240 <memchr>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d03f      	beq.n	800774e <_vfiprintf_r+0x20a>
 80076ce:	4b26      	ldr	r3, [pc, #152]	@ (8007768 <_vfiprintf_r+0x224>)
 80076d0:	bb1b      	cbnz	r3, 800771a <_vfiprintf_r+0x1d6>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	3307      	adds	r3, #7
 80076d6:	f023 0307 	bic.w	r3, r3, #7
 80076da:	3308      	adds	r3, #8
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e0:	443b      	add	r3, r7
 80076e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e4:	e76a      	b.n	80075bc <_vfiprintf_r+0x78>
 80076e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ea:	460c      	mov	r4, r1
 80076ec:	2001      	movs	r0, #1
 80076ee:	e7a8      	b.n	8007642 <_vfiprintf_r+0xfe>
 80076f0:	2300      	movs	r3, #0
 80076f2:	3401      	adds	r4, #1
 80076f4:	9305      	str	r3, [sp, #20]
 80076f6:	4619      	mov	r1, r3
 80076f8:	f04f 0c0a 	mov.w	ip, #10
 80076fc:	4620      	mov	r0, r4
 80076fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007702:	3a30      	subs	r2, #48	@ 0x30
 8007704:	2a09      	cmp	r2, #9
 8007706:	d903      	bls.n	8007710 <_vfiprintf_r+0x1cc>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0c6      	beq.n	800769a <_vfiprintf_r+0x156>
 800770c:	9105      	str	r1, [sp, #20]
 800770e:	e7c4      	b.n	800769a <_vfiprintf_r+0x156>
 8007710:	fb0c 2101 	mla	r1, ip, r1, r2
 8007714:	4604      	mov	r4, r0
 8007716:	2301      	movs	r3, #1
 8007718:	e7f0      	b.n	80076fc <_vfiprintf_r+0x1b8>
 800771a:	ab03      	add	r3, sp, #12
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	462a      	mov	r2, r5
 8007720:	4b12      	ldr	r3, [pc, #72]	@ (800776c <_vfiprintf_r+0x228>)
 8007722:	a904      	add	r1, sp, #16
 8007724:	4630      	mov	r0, r6
 8007726:	f3af 8000 	nop.w
 800772a:	4607      	mov	r7, r0
 800772c:	1c78      	adds	r0, r7, #1
 800772e:	d1d6      	bne.n	80076de <_vfiprintf_r+0x19a>
 8007730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007732:	07d9      	lsls	r1, r3, #31
 8007734:	d405      	bmi.n	8007742 <_vfiprintf_r+0x1fe>
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	059a      	lsls	r2, r3, #22
 800773a:	d402      	bmi.n	8007742 <_vfiprintf_r+0x1fe>
 800773c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800773e:	f7ff fddd 	bl	80072fc <__retarget_lock_release_recursive>
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	065b      	lsls	r3, r3, #25
 8007746:	f53f af1f 	bmi.w	8007588 <_vfiprintf_r+0x44>
 800774a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800774c:	e71e      	b.n	800758c <_vfiprintf_r+0x48>
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4b05      	ldr	r3, [pc, #20]	@ (800776c <_vfiprintf_r+0x228>)
 8007756:	a904      	add	r1, sp, #16
 8007758:	4630      	mov	r0, r6
 800775a:	f000 f879 	bl	8007850 <_printf_i>
 800775e:	e7e4      	b.n	800772a <_vfiprintf_r+0x1e6>
 8007760:	08007dc8 	.word	0x08007dc8
 8007764:	08007dd2 	.word	0x08007dd2
 8007768:	00000000 	.word	0x00000000
 800776c:	0800751f 	.word	0x0800751f
 8007770:	08007dce 	.word	0x08007dce

08007774 <_printf_common>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	4616      	mov	r6, r2
 800777a:	4698      	mov	r8, r3
 800777c:	688a      	ldr	r2, [r1, #8]
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007784:	4293      	cmp	r3, r2
 8007786:	bfb8      	it	lt
 8007788:	4613      	movlt	r3, r2
 800778a:	6033      	str	r3, [r6, #0]
 800778c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b10a      	cbz	r2, 800779a <_printf_common+0x26>
 8007796:	3301      	adds	r3, #1
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	6833      	ldrmi	r3, [r6, #0]
 80077a2:	3302      	addmi	r3, #2
 80077a4:	6033      	strmi	r3, [r6, #0]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d106      	bne.n	80077bc <_printf_common+0x48>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	6832      	ldr	r2, [r6, #0]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc26      	bgt.n	800780a <_printf_common+0x96>
 80077bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	3b00      	subs	r3, #0
 80077c4:	bf18      	it	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	0692      	lsls	r2, r2, #26
 80077ca:	d42b      	bmi.n	8007824 <_printf_common+0xb0>
 80077cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077d0:	4641      	mov	r1, r8
 80077d2:	4638      	mov	r0, r7
 80077d4:	47c8      	blx	r9
 80077d6:	3001      	adds	r0, #1
 80077d8:	d01e      	beq.n	8007818 <_printf_common+0xa4>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	6922      	ldr	r2, [r4, #16]
 80077de:	f003 0306 	and.w	r3, r3, #6
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	bf02      	ittt	eq
 80077e6:	68e5      	ldreq	r5, [r4, #12]
 80077e8:	6833      	ldreq	r3, [r6, #0]
 80077ea:	1aed      	subeq	r5, r5, r3
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	bf0c      	ite	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	2500      	movne	r5, #0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfc4      	itt	gt
 80077fa:	1a9b      	subgt	r3, r3, r2
 80077fc:	18ed      	addgt	r5, r5, r3
 80077fe:	2600      	movs	r6, #0
 8007800:	341a      	adds	r4, #26
 8007802:	42b5      	cmp	r5, r6
 8007804:	d11a      	bne.n	800783c <_printf_common+0xc8>
 8007806:	2000      	movs	r0, #0
 8007808:	e008      	b.n	800781c <_printf_common+0xa8>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4641      	mov	r1, r8
 8007810:	4638      	mov	r0, r7
 8007812:	47c8      	blx	r9
 8007814:	3001      	adds	r0, #1
 8007816:	d103      	bne.n	8007820 <_printf_common+0xac>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007820:	3501      	adds	r5, #1
 8007822:	e7c6      	b.n	80077b2 <_printf_common+0x3e>
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	2030      	movs	r0, #48	@ 0x30
 800782a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800782e:	4422      	add	r2, r4
 8007830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007838:	3302      	adds	r3, #2
 800783a:	e7c7      	b.n	80077cc <_printf_common+0x58>
 800783c:	2301      	movs	r3, #1
 800783e:	4622      	mov	r2, r4
 8007840:	4641      	mov	r1, r8
 8007842:	4638      	mov	r0, r7
 8007844:	47c8      	blx	r9
 8007846:	3001      	adds	r0, #1
 8007848:	d0e6      	beq.n	8007818 <_printf_common+0xa4>
 800784a:	3601      	adds	r6, #1
 800784c:	e7d9      	b.n	8007802 <_printf_common+0x8e>
	...

08007850 <_printf_i>:
 8007850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	7e0f      	ldrb	r7, [r1, #24]
 8007856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007858:	2f78      	cmp	r7, #120	@ 0x78
 800785a:	4691      	mov	r9, r2
 800785c:	4680      	mov	r8, r0
 800785e:	460c      	mov	r4, r1
 8007860:	469a      	mov	sl, r3
 8007862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007866:	d807      	bhi.n	8007878 <_printf_i+0x28>
 8007868:	2f62      	cmp	r7, #98	@ 0x62
 800786a:	d80a      	bhi.n	8007882 <_printf_i+0x32>
 800786c:	2f00      	cmp	r7, #0
 800786e:	f000 80d1 	beq.w	8007a14 <_printf_i+0x1c4>
 8007872:	2f58      	cmp	r7, #88	@ 0x58
 8007874:	f000 80b8 	beq.w	80079e8 <_printf_i+0x198>
 8007878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800787c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007880:	e03a      	b.n	80078f8 <_printf_i+0xa8>
 8007882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007886:	2b15      	cmp	r3, #21
 8007888:	d8f6      	bhi.n	8007878 <_printf_i+0x28>
 800788a:	a101      	add	r1, pc, #4	@ (adr r1, 8007890 <_printf_i+0x40>)
 800788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078fd 	.word	0x080078fd
 8007898:	08007879 	.word	0x08007879
 800789c:	08007879 	.word	0x08007879
 80078a0:	08007879 	.word	0x08007879
 80078a4:	08007879 	.word	0x08007879
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007879 	.word	0x08007879
 80078b0:	08007879 	.word	0x08007879
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	080079fb 	.word	0x080079fb
 80078c0:	08007927 	.word	0x08007927
 80078c4:	080079b5 	.word	0x080079b5
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	08007a1d 	.word	0x08007a1d
 80078d4:	08007879 	.word	0x08007879
 80078d8:	08007927 	.word	0x08007927
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079bd 	.word	0x080079bd
 80078e8:	6833      	ldr	r3, [r6, #0]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6032      	str	r2, [r6, #0]
 80078f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f8:	2301      	movs	r3, #1
 80078fa:	e09c      	b.n	8007a36 <_printf_i+0x1e6>
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	1d19      	adds	r1, r3, #4
 8007902:	6031      	str	r1, [r6, #0]
 8007904:	0606      	lsls	r6, r0, #24
 8007906:	d501      	bpl.n	800790c <_printf_i+0xbc>
 8007908:	681d      	ldr	r5, [r3, #0]
 800790a:	e003      	b.n	8007914 <_printf_i+0xc4>
 800790c:	0645      	lsls	r5, r0, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0xb8>
 8007910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007914:	2d00      	cmp	r5, #0
 8007916:	da03      	bge.n	8007920 <_printf_i+0xd0>
 8007918:	232d      	movs	r3, #45	@ 0x2d
 800791a:	426d      	negs	r5, r5
 800791c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007920:	4858      	ldr	r0, [pc, #352]	@ (8007a84 <_printf_i+0x234>)
 8007922:	230a      	movs	r3, #10
 8007924:	e011      	b.n	800794a <_printf_i+0xfa>
 8007926:	6821      	ldr	r1, [r4, #0]
 8007928:	6833      	ldr	r3, [r6, #0]
 800792a:	0608      	lsls	r0, r1, #24
 800792c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007930:	d402      	bmi.n	8007938 <_printf_i+0xe8>
 8007932:	0649      	lsls	r1, r1, #25
 8007934:	bf48      	it	mi
 8007936:	b2ad      	uxthmi	r5, r5
 8007938:	2f6f      	cmp	r7, #111	@ 0x6f
 800793a:	4852      	ldr	r0, [pc, #328]	@ (8007a84 <_printf_i+0x234>)
 800793c:	6033      	str	r3, [r6, #0]
 800793e:	bf14      	ite	ne
 8007940:	230a      	movne	r3, #10
 8007942:	2308      	moveq	r3, #8
 8007944:	2100      	movs	r1, #0
 8007946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800794a:	6866      	ldr	r6, [r4, #4]
 800794c:	60a6      	str	r6, [r4, #8]
 800794e:	2e00      	cmp	r6, #0
 8007950:	db05      	blt.n	800795e <_printf_i+0x10e>
 8007952:	6821      	ldr	r1, [r4, #0]
 8007954:	432e      	orrs	r6, r5
 8007956:	f021 0104 	bic.w	r1, r1, #4
 800795a:	6021      	str	r1, [r4, #0]
 800795c:	d04b      	beq.n	80079f6 <_printf_i+0x1a6>
 800795e:	4616      	mov	r6, r2
 8007960:	fbb5 f1f3 	udiv	r1, r5, r3
 8007964:	fb03 5711 	mls	r7, r3, r1, r5
 8007968:	5dc7      	ldrb	r7, [r0, r7]
 800796a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800796e:	462f      	mov	r7, r5
 8007970:	42bb      	cmp	r3, r7
 8007972:	460d      	mov	r5, r1
 8007974:	d9f4      	bls.n	8007960 <_printf_i+0x110>
 8007976:	2b08      	cmp	r3, #8
 8007978:	d10b      	bne.n	8007992 <_printf_i+0x142>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	07df      	lsls	r7, r3, #31
 800797e:	d508      	bpl.n	8007992 <_printf_i+0x142>
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	6861      	ldr	r1, [r4, #4]
 8007984:	4299      	cmp	r1, r3
 8007986:	bfde      	ittt	le
 8007988:	2330      	movle	r3, #48	@ 0x30
 800798a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800798e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007992:	1b92      	subs	r2, r2, r6
 8007994:	6122      	str	r2, [r4, #16]
 8007996:	f8cd a000 	str.w	sl, [sp]
 800799a:	464b      	mov	r3, r9
 800799c:	aa03      	add	r2, sp, #12
 800799e:	4621      	mov	r1, r4
 80079a0:	4640      	mov	r0, r8
 80079a2:	f7ff fee7 	bl	8007774 <_printf_common>
 80079a6:	3001      	adds	r0, #1
 80079a8:	d14a      	bne.n	8007a40 <_printf_i+0x1f0>
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	b004      	add	sp, #16
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	f043 0320 	orr.w	r3, r3, #32
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	4832      	ldr	r0, [pc, #200]	@ (8007a88 <_printf_i+0x238>)
 80079be:	2778      	movs	r7, #120	@ 0x78
 80079c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	6831      	ldr	r1, [r6, #0]
 80079c8:	061f      	lsls	r7, r3, #24
 80079ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80079ce:	d402      	bmi.n	80079d6 <_printf_i+0x186>
 80079d0:	065f      	lsls	r7, r3, #25
 80079d2:	bf48      	it	mi
 80079d4:	b2ad      	uxthmi	r5, r5
 80079d6:	6031      	str	r1, [r6, #0]
 80079d8:	07d9      	lsls	r1, r3, #31
 80079da:	bf44      	itt	mi
 80079dc:	f043 0320 	orrmi.w	r3, r3, #32
 80079e0:	6023      	strmi	r3, [r4, #0]
 80079e2:	b11d      	cbz	r5, 80079ec <_printf_i+0x19c>
 80079e4:	2310      	movs	r3, #16
 80079e6:	e7ad      	b.n	8007944 <_printf_i+0xf4>
 80079e8:	4826      	ldr	r0, [pc, #152]	@ (8007a84 <_printf_i+0x234>)
 80079ea:	e7e9      	b.n	80079c0 <_printf_i+0x170>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	f023 0320 	bic.w	r3, r3, #32
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	e7f6      	b.n	80079e4 <_printf_i+0x194>
 80079f6:	4616      	mov	r6, r2
 80079f8:	e7bd      	b.n	8007976 <_printf_i+0x126>
 80079fa:	6833      	ldr	r3, [r6, #0]
 80079fc:	6825      	ldr	r5, [r4, #0]
 80079fe:	6961      	ldr	r1, [r4, #20]
 8007a00:	1d18      	adds	r0, r3, #4
 8007a02:	6030      	str	r0, [r6, #0]
 8007a04:	062e      	lsls	r6, r5, #24
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	d501      	bpl.n	8007a0e <_printf_i+0x1be>
 8007a0a:	6019      	str	r1, [r3, #0]
 8007a0c:	e002      	b.n	8007a14 <_printf_i+0x1c4>
 8007a0e:	0668      	lsls	r0, r5, #25
 8007a10:	d5fb      	bpl.n	8007a0a <_printf_i+0x1ba>
 8007a12:	8019      	strh	r1, [r3, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	4616      	mov	r6, r2
 8007a1a:	e7bc      	b.n	8007996 <_printf_i+0x146>
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	1d1a      	adds	r2, r3, #4
 8007a20:	6032      	str	r2, [r6, #0]
 8007a22:	681e      	ldr	r6, [r3, #0]
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	2100      	movs	r1, #0
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7f8 fc09 	bl	8000240 <memchr>
 8007a2e:	b108      	cbz	r0, 8007a34 <_printf_i+0x1e4>
 8007a30:	1b80      	subs	r0, r0, r6
 8007a32:	6060      	str	r0, [r4, #4]
 8007a34:	6863      	ldr	r3, [r4, #4]
 8007a36:	6123      	str	r3, [r4, #16]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3e:	e7aa      	b.n	8007996 <_printf_i+0x146>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	4632      	mov	r2, r6
 8007a44:	4649      	mov	r1, r9
 8007a46:	4640      	mov	r0, r8
 8007a48:	47d0      	blx	sl
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d0ad      	beq.n	80079aa <_printf_i+0x15a>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	079b      	lsls	r3, r3, #30
 8007a52:	d413      	bmi.n	8007a7c <_printf_i+0x22c>
 8007a54:	68e0      	ldr	r0, [r4, #12]
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	bfb8      	it	lt
 8007a5c:	4618      	movlt	r0, r3
 8007a5e:	e7a6      	b.n	80079ae <_printf_i+0x15e>
 8007a60:	2301      	movs	r3, #1
 8007a62:	4632      	mov	r2, r6
 8007a64:	4649      	mov	r1, r9
 8007a66:	4640      	mov	r0, r8
 8007a68:	47d0      	blx	sl
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d09d      	beq.n	80079aa <_printf_i+0x15a>
 8007a6e:	3501      	adds	r5, #1
 8007a70:	68e3      	ldr	r3, [r4, #12]
 8007a72:	9903      	ldr	r1, [sp, #12]
 8007a74:	1a5b      	subs	r3, r3, r1
 8007a76:	42ab      	cmp	r3, r5
 8007a78:	dcf2      	bgt.n	8007a60 <_printf_i+0x210>
 8007a7a:	e7eb      	b.n	8007a54 <_printf_i+0x204>
 8007a7c:	2500      	movs	r5, #0
 8007a7e:	f104 0619 	add.w	r6, r4, #25
 8007a82:	e7f5      	b.n	8007a70 <_printf_i+0x220>
 8007a84:	08007dd9 	.word	0x08007dd9
 8007a88:	08007dea 	.word	0x08007dea

08007a8c <__sflush_r>:
 8007a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a94:	0716      	lsls	r6, r2, #28
 8007a96:	4605      	mov	r5, r0
 8007a98:	460c      	mov	r4, r1
 8007a9a:	d454      	bmi.n	8007b46 <__sflush_r+0xba>
 8007a9c:	684b      	ldr	r3, [r1, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dc02      	bgt.n	8007aa8 <__sflush_r+0x1c>
 8007aa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dd48      	ble.n	8007b3a <__sflush_r+0xae>
 8007aa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	d045      	beq.n	8007b3a <__sflush_r+0xae>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ab4:	682f      	ldr	r7, [r5, #0]
 8007ab6:	6a21      	ldr	r1, [r4, #32]
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	d030      	beq.n	8007b1e <__sflush_r+0x92>
 8007abc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	0759      	lsls	r1, r3, #29
 8007ac2:	d505      	bpl.n	8007ad0 <__sflush_r+0x44>
 8007ac4:	6863      	ldr	r3, [r4, #4]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aca:	b10b      	cbz	r3, 8007ad0 <__sflush_r+0x44>
 8007acc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ad4:	6a21      	ldr	r1, [r4, #32]
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b0      	blx	r6
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	d106      	bne.n	8007aee <__sflush_r+0x62>
 8007ae0:	6829      	ldr	r1, [r5, #0]
 8007ae2:	291d      	cmp	r1, #29
 8007ae4:	d82b      	bhi.n	8007b3e <__sflush_r+0xb2>
 8007ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8007b90 <__sflush_r+0x104>)
 8007ae8:	40ca      	lsrs	r2, r1
 8007aea:	07d6      	lsls	r6, r2, #31
 8007aec:	d527      	bpl.n	8007b3e <__sflush_r+0xb2>
 8007aee:	2200      	movs	r2, #0
 8007af0:	6062      	str	r2, [r4, #4]
 8007af2:	04d9      	lsls	r1, r3, #19
 8007af4:	6922      	ldr	r2, [r4, #16]
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	d504      	bpl.n	8007b04 <__sflush_r+0x78>
 8007afa:	1c42      	adds	r2, r0, #1
 8007afc:	d101      	bne.n	8007b02 <__sflush_r+0x76>
 8007afe:	682b      	ldr	r3, [r5, #0]
 8007b00:	b903      	cbnz	r3, 8007b04 <__sflush_r+0x78>
 8007b02:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b06:	602f      	str	r7, [r5, #0]
 8007b08:	b1b9      	cbz	r1, 8007b3a <__sflush_r+0xae>
 8007b0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	d002      	beq.n	8007b18 <__sflush_r+0x8c>
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7ff fbf4 	bl	8007300 <_free_r>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b1c:	e00d      	b.n	8007b3a <__sflush_r+0xae>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b0      	blx	r6
 8007b24:	4602      	mov	r2, r0
 8007b26:	1c50      	adds	r0, r2, #1
 8007b28:	d1c9      	bne.n	8007abe <__sflush_r+0x32>
 8007b2a:	682b      	ldr	r3, [r5, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0c6      	beq.n	8007abe <__sflush_r+0x32>
 8007b30:	2b1d      	cmp	r3, #29
 8007b32:	d001      	beq.n	8007b38 <__sflush_r+0xac>
 8007b34:	2b16      	cmp	r3, #22
 8007b36:	d11e      	bne.n	8007b76 <__sflush_r+0xea>
 8007b38:	602f      	str	r7, [r5, #0]
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e022      	b.n	8007b84 <__sflush_r+0xf8>
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b42:	b21b      	sxth	r3, r3
 8007b44:	e01b      	b.n	8007b7e <__sflush_r+0xf2>
 8007b46:	690f      	ldr	r7, [r1, #16]
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	d0f6      	beq.n	8007b3a <__sflush_r+0xae>
 8007b4c:	0793      	lsls	r3, r2, #30
 8007b4e:	680e      	ldr	r6, [r1, #0]
 8007b50:	bf08      	it	eq
 8007b52:	694b      	ldreq	r3, [r1, #20]
 8007b54:	600f      	str	r7, [r1, #0]
 8007b56:	bf18      	it	ne
 8007b58:	2300      	movne	r3, #0
 8007b5a:	eba6 0807 	sub.w	r8, r6, r7
 8007b5e:	608b      	str	r3, [r1, #8]
 8007b60:	f1b8 0f00 	cmp.w	r8, #0
 8007b64:	dde9      	ble.n	8007b3a <__sflush_r+0xae>
 8007b66:	6a21      	ldr	r1, [r4, #32]
 8007b68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b6a:	4643      	mov	r3, r8
 8007b6c:	463a      	mov	r2, r7
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b0      	blx	r6
 8007b72:	2800      	cmp	r0, #0
 8007b74:	dc08      	bgt.n	8007b88 <__sflush_r+0xfc>
 8007b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	4407      	add	r7, r0
 8007b8a:	eba8 0800 	sub.w	r8, r8, r0
 8007b8e:	e7e7      	b.n	8007b60 <__sflush_r+0xd4>
 8007b90:	20400001 	.word	0x20400001

08007b94 <_fflush_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	690b      	ldr	r3, [r1, #16]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b913      	cbnz	r3, 8007ba4 <_fflush_r+0x10>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	b118      	cbz	r0, 8007bae <_fflush_r+0x1a>
 8007ba6:	6a03      	ldr	r3, [r0, #32]
 8007ba8:	b90b      	cbnz	r3, 8007bae <_fflush_r+0x1a>
 8007baa:	f7ff f9af 	bl	8006f0c <__sinit>
 8007bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f3      	beq.n	8007b9e <_fflush_r+0xa>
 8007bb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bb8:	07d0      	lsls	r0, r2, #31
 8007bba:	d404      	bmi.n	8007bc6 <_fflush_r+0x32>
 8007bbc:	0599      	lsls	r1, r3, #22
 8007bbe:	d402      	bmi.n	8007bc6 <_fflush_r+0x32>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bc2:	f7ff fb9a 	bl	80072fa <__retarget_lock_acquire_recursive>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	4621      	mov	r1, r4
 8007bca:	f7ff ff5f 	bl	8007a8c <__sflush_r>
 8007bce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bd0:	07da      	lsls	r2, r3, #31
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	d4e4      	bmi.n	8007ba0 <_fflush_r+0xc>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	059b      	lsls	r3, r3, #22
 8007bda:	d4e1      	bmi.n	8007ba0 <_fflush_r+0xc>
 8007bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bde:	f7ff fb8d 	bl	80072fc <__retarget_lock_release_recursive>
 8007be2:	e7dd      	b.n	8007ba0 <_fflush_r+0xc>

08007be4 <__swhatbuf_r>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	2900      	cmp	r1, #0
 8007bee:	b096      	sub	sp, #88	@ 0x58
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	461e      	mov	r6, r3
 8007bf4:	da0d      	bge.n	8007c12 <__swhatbuf_r+0x2e>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bfc:	f04f 0100 	mov.w	r1, #0
 8007c00:	bf14      	ite	ne
 8007c02:	2340      	movne	r3, #64	@ 0x40
 8007c04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c08:	2000      	movs	r0, #0
 8007c0a:	6031      	str	r1, [r6, #0]
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	b016      	add	sp, #88	@ 0x58
 8007c10:	bd70      	pop	{r4, r5, r6, pc}
 8007c12:	466a      	mov	r2, sp
 8007c14:	f000 f848 	bl	8007ca8 <_fstat_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dbec      	blt.n	8007bf6 <__swhatbuf_r+0x12>
 8007c1c:	9901      	ldr	r1, [sp, #4]
 8007c1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c26:	4259      	negs	r1, r3
 8007c28:	4159      	adcs	r1, r3
 8007c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c2e:	e7eb      	b.n	8007c08 <__swhatbuf_r+0x24>

08007c30 <__smakebuf_r>:
 8007c30:	898b      	ldrh	r3, [r1, #12]
 8007c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c34:	079d      	lsls	r5, r3, #30
 8007c36:	4606      	mov	r6, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	d507      	bpl.n	8007c4c <__smakebuf_r+0x1c>
 8007c3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	2301      	movs	r3, #1
 8007c46:	6163      	str	r3, [r4, #20]
 8007c48:	b003      	add	sp, #12
 8007c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4c:	ab01      	add	r3, sp, #4
 8007c4e:	466a      	mov	r2, sp
 8007c50:	f7ff ffc8 	bl	8007be4 <__swhatbuf_r>
 8007c54:	9f00      	ldr	r7, [sp, #0]
 8007c56:	4605      	mov	r5, r0
 8007c58:	4639      	mov	r1, r7
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7ff fbbc 	bl	80073d8 <_malloc_r>
 8007c60:	b948      	cbnz	r0, 8007c76 <__smakebuf_r+0x46>
 8007c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c66:	059a      	lsls	r2, r3, #22
 8007c68:	d4ee      	bmi.n	8007c48 <__smakebuf_r+0x18>
 8007c6a:	f023 0303 	bic.w	r3, r3, #3
 8007c6e:	f043 0302 	orr.w	r3, r3, #2
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	e7e2      	b.n	8007c3c <__smakebuf_r+0xc>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	6020      	str	r0, [r4, #0]
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c86:	b15b      	cbz	r3, 8007ca0 <__smakebuf_r+0x70>
 8007c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 f81d 	bl	8007ccc <_isatty_r>
 8007c92:	b128      	cbz	r0, 8007ca0 <__smakebuf_r+0x70>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	431d      	orrs	r5, r3
 8007ca4:	81a5      	strh	r5, [r4, #12]
 8007ca6:	e7cf      	b.n	8007c48 <__smakebuf_r+0x18>

08007ca8 <_fstat_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	@ (8007cc8 <_fstat_r+0x20>)
 8007cac:	2300      	movs	r3, #0
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	f7fa fc38 	bl	800252a <_fstat>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d102      	bne.n	8007cc4 <_fstat_r+0x1c>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	b103      	cbz	r3, 8007cc4 <_fstat_r+0x1c>
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	bd38      	pop	{r3, r4, r5, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200007d8 	.word	0x200007d8

08007ccc <_isatty_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4d06      	ldr	r5, [pc, #24]	@ (8007ce8 <_isatty_r+0x1c>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	602b      	str	r3, [r5, #0]
 8007cd8:	f7fa fc37 	bl	800254a <_isatty>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_isatty_r+0x1a>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_isatty_r+0x1a>
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	200007d8 	.word	0x200007d8

08007cec <_sbrk_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4d06      	ldr	r5, [pc, #24]	@ (8007d08 <_sbrk_r+0x1c>)
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4608      	mov	r0, r1
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	f7fa fc40 	bl	800257c <_sbrk>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_sbrk_r+0x1a>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_sbrk_r+0x1a>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	200007d8 	.word	0x200007d8

08007d0c <_init>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr

08007d18 <_fini>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr
