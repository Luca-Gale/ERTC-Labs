
LAB0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006c1c  08006c1c  00007c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c3c  08006c3c  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c3c  08006c3c  00007c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c44  08006c44  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006c4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000010  08006c5c  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a0  08006c5c  000086a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ac5  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad8  00000000  00000000  0001eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000215e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102f  00000000  00000000  00022a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ab6  00000000  00000000  00023a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d27  00000000  00000000  0004c545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010155e  00000000  00000000  0006626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001677ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  00167810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016cfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08006c04 	.word	0x08006c04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08006c04 	.word	0x08006c04

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int delaytime = 1000;
void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	delaytime -= 100;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_GPIO_EXTI_Callback+0x30>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3b64      	subs	r3, #100	@ 0x64
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_GPIO_EXTI_Callback+0x30>)
 800053a:	6013      	str	r3, [r2, #0]
	if (delaytime <= 0) delaytime = 1000;
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_GPIO_EXTI_Callback+0x30>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	dc03      	bgt.n	800054c <HAL_GPIO_EXTI_Callback+0x24>
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <HAL_GPIO_EXTI_Callback+0x30>)
 8000546:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	20000000 	.word	0x20000000

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f001 fde5 	bl	800212e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f848 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 fe72 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 fe52 	bl	8001214 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000570:	f000 fe20 	bl	80011b4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000574:	f000 f8b2 	bl	80006dc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000578:	f000 f902 	bl	8000780 <MX_I2C1_Init>
  MX_I2C2_Init();
 800057c:	f000 f940 	bl	8000800 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000580:	f000 f97e 	bl	8000880 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000584:	f000 f9ba 	bl	80008fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000588:	f000 fa8a 	bl	8000aa0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800058c:	f000 fb24 	bl	8000bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000590:	f000 fb78 	bl	8000c84 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000594:	f000 fbcc 	bl	8000d30 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000598:	f000 fc7a 	bl	8000e90 <MX_TIM8_Init>
  MX_UART4_Init();
 800059c:	f000 fd4a 	bl	8001034 <MX_UART4_Init>
  MX_UART5_Init();
 80005a0:	f000 fd78 	bl	8001094 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 fda6 	bl	80010f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 fdd4 	bl	8001154 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80005ac:	f000 fc38 	bl	8000e20 <MX_TIM6_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <main+0x94>)
 80005b6:	f002 fe77 	bl	80032a8 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <main+0x94>)
 80005c0:	f002 fe72 	bl	80032a8 <HAL_GPIO_WritePin>
	 HAL_Delay(delaytime);
 80005c4:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <main+0x98>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fe0d 	bl	80021e8 <HAL_Delay>

	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <main+0x94>)
 80005d4:	f002 fe68 	bl	80032a8 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	@ 0x40
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <main+0x94>)
 80005de:	f002 fe63 	bl	80032a8 <HAL_GPIO_WritePin>
	 HAL_Delay(delaytime);
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <main+0x98>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fdfe 	bl	80021e8 <HAL_Delay>
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 80005ec:	bf00      	nop
 80005ee:	e7df      	b.n	80005b0 <main+0x54>
 80005f0:	40021000 	.word	0x40021000
 80005f4:	20000000 	.word	0x20000000

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	@ 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 facf 	bl	8006baa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f002 ffaa 	bl	8003574 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <SystemClock_Config+0xdc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a2b      	ldr	r2, [pc, #172]	@ (80006d4 <SystemClock_Config+0xdc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <SystemClock_Config+0xdc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <SystemClock_Config+0xe0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000640:	4a25      	ldr	r2, [pc, #148]	@ (80006d8 <SystemClock_Config+0xe0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <SystemClock_Config+0xe0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800065c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800066c:	2360      	movs	r3, #96	@ 0x60
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4618      	mov	r0, r3
 8000682:	f002 ffd7 	bl	8003634 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068c:	f000 ff54 	bl	8001538 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000690:	f002 ff80 	bl	8003594 <HAL_PWREx_EnableOverDrive>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069a:	f000 ff4d 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2103      	movs	r1, #3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fa68 	bl	8003b90 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006c6:	f000 ff37 	bl	8001538 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	@ 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ee:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <MX_ADC1_Init+0x98>)
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <MX_ADC1_Init+0x9c>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_ADC1_Init+0x98>)
 80006f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_ADC1_Init+0x98>)
 800071e:	4a17      	ldr	r2, [pc, #92]	@ (800077c <MX_ADC1_Init+0xa0>)
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <MX_ADC1_Init+0x98>)
 800073e:	f001 fd77 	bl	8002230 <HAL_ADC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000748:	f000 fef6 	bl	8001538 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800074c:	2303      	movs	r3, #3
 800074e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000750:	2301      	movs	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_ADC1_Init+0x98>)
 800075e:	f001 fdab 	bl	80022b8 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000768:	f000 fee6 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000002c 	.word	0x2000002c
 8000778:	40012000 	.word	0x40012000
 800077c:	0f000001 	.word	0x0f000001

08000780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_I2C1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	@ (80007f8 <MX_I2C1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_I2C1_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	@ (80007fc <MX_I2C1_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_I2C1_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007bc:	f002 fda6 	bl	800330c <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 feb7 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007ce:	f002 fe39 	bl	8003444 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 feae 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007e0:	f002 fe7b 	bl	80034da <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fea5 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000074 	.word	0x20000074
 80007f8:	40005400 	.word	0x40005400
 80007fc:	20303e5d 	.word	0x20303e5d

08000800 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <MX_I2C2_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_I2C2_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	@ (800087c <MX_I2C2_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	@ (8000874 <MX_I2C2_Init+0x74>)
 800083c:	f002 fd66 	bl	800330c <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 fe77 	bl	8001538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	@ (8000874 <MX_I2C2_Init+0x74>)
 800084e:	f002 fdf9 	bl	8003444 <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 fe6e 	bl	8001538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000860:	f002 fe3b 	bl	80034da <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 fe65 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000c8 	.word	0x200000c8
 8000878:	40005800 	.word	0x40005800
 800087c:	20303e5d 	.word	0x20303e5d

08000880 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_SPI1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <MX_SPI1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_SPI1_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SPI1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI1_Init+0x74>)
 800089a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800089e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008da:	2208      	movs	r2, #8
 80008dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_SPI1_Init+0x74>)
 80008e0:	f003 ffa4 	bl	800482c <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 fe25 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000011c 	.word	0x2000011c
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09a      	sub	sp, #104	@ 0x68
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	222c      	movs	r2, #44	@ 0x2c
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f006 f937 	bl	8006baa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093c:	4b56      	ldr	r3, [pc, #344]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 800093e:	4a57      	ldr	r2, [pc, #348]	@ (8000a9c <MX_TIM1_Init+0x1a0>)
 8000940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000942:	4b55      	ldr	r3, [pc, #340]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000944:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000948:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b53      	ldr	r3, [pc, #332]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000950:	4b51      	ldr	r3, [pc, #324]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000952:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000956:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b4f      	ldr	r3, [pc, #316]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095e:	4b4e      	ldr	r3, [pc, #312]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b4c      	ldr	r3, [pc, #304]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096a:	484b      	ldr	r0, [pc, #300]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 800096c:	f004 f809 	bl	8004982 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000976:	f000 fddf 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000984:	4619      	mov	r1, r3
 8000986:	4844      	ldr	r0, [pc, #272]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000988:	f004 fd4e 	bl	8005428 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000992:	f000 fdd1 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000996:	4840      	ldr	r0, [pc, #256]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000998:	f004 f84a 	bl	8004a30 <HAL_TIM_OC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80009a2:	f000 fdc9 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4837      	ldr	r0, [pc, #220]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 80009ba:	f005 faff 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80009c4:	f000 fdb8 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80009c8:	2350      	movs	r3, #80	@ 0x50
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009d0:	2302      	movs	r3, #2
 80009d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	482a      	ldr	r0, [pc, #168]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 80009ee:	f004 faf1 	bl	8004fd4 <HAL_TIM_OC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80009f8:	f000 fd9e 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a00:	2204      	movs	r2, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4824      	ldr	r0, [pc, #144]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000a06:	f004 fae5 	bl	8004fd4 <HAL_TIM_OC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000a10:	f000 fd92 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a18:	2208      	movs	r2, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000a1e:	f004 fad9 	bl	8004fd4 <HAL_TIM_OC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000a28:	f000 fd86 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a30:	220c      	movs	r2, #12
 8000a32:	4619      	mov	r1, r3
 8000a34:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000a36:	f004 facd 	bl	8004fd4 <HAL_TIM_OC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000a40:	f000 fd7a 	bl	8001538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000a7a:	f005 fb2d 	bl	80060d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000a84:	f000 fd58 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a88:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <MX_TIM1_Init+0x19c>)
 8000a8a:	f001 f83b 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8000a8e:	bf00      	nop
 8000a90:	3768      	adds	r7, #104	@ 0x68
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000180 	.word	0x20000180
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b092      	sub	sp, #72	@ 0x48
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	f107 0310 	add.w	r3, r7, #16
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PSC_VALUE;
 8000ae8:	4b39      	ldr	r3, [pc, #228]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000aea:	225f      	movs	r2, #95	@ 0x5f
 8000aec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_ARR_VALUE;
 8000af4:	4b36      	ldr	r3, [pc, #216]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000af6:	4a37      	ldr	r2, [pc, #220]	@ (8000bd4 <MX_TIM2_Init+0x134>)
 8000af8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afa:	4b35      	ldr	r3, [pc, #212]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b33      	ldr	r3, [pc, #204]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b06:	4832      	ldr	r0, [pc, #200]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b08:	f003 ff3b 	bl	8004982 <HAL_TIM_Base_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000b12:	f000 fd11 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b20:	4619      	mov	r1, r3
 8000b22:	482b      	ldr	r0, [pc, #172]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b24:	f004 fc80 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b2e:	f000 fd03 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b32:	4827      	ldr	r0, [pc, #156]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b34:	f003 ffdd 	bl	8004af2 <HAL_TIM_PWM_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b3e:	f000 fcfb 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b42:	4823      	ldr	r0, [pc, #140]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b44:	f004 f836 	bl	8004bb4 <HAL_TIM_IC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b4e:	f000 fcf3 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481b      	ldr	r0, [pc, #108]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b62:	f005 fa2b 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000b6c:	f000 fce4 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	@ 0x60
 8000b72:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = TIM2_CCR1_VALUE;
 8000b74:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000b78:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000b8c:	f004 fb38 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000b96:	f000 fccf 	bl	8001538 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000baa:	463b      	mov	r3, r7
 8000bac:	2208      	movs	r2, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000bb2:	f004 fa89 	bl	80050c8 <HAL_TIM_IC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000bbc:	f000 fcbc 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM2_Init+0x130>)
 8000bc2:	f000 ff9f 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8000bc6:	bf00      	nop
 8000bc8:	3748      	adds	r7, #72	@ 0x48
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200001cc 	.word	0x200001cc
 8000bd4:	000186a0 	.word	0x000186a0

08000bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	@ 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 ffdf 	bl	8006baa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <MX_TIM3_Init+0xa8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000c48:	f004 f816 	bl	8004c78 <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f000 fc71 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM3_Init+0xa4>)
 8000c64:	f005 f9aa 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 fc63 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	@ 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000218 	.word	0x20000218
 8000c80:	40000400 	.word	0x40000400

08000c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2224      	movs	r2, #36	@ 0x24
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f005 ff89 	bl	8006baa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000ca4:	4a21      	ldr	r2, [pc, #132]	@ (8000d2c <MX_TIM4_Init+0xa8>)
 8000ca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000cb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000cd8:	230f      	movs	r3, #15
 8000cda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000cf4:	f003 ffc0 	bl	8004c78 <HAL_TIM_Encoder_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 fc1b 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_TIM4_Init+0xa4>)
 8000d10:	f005 f954 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d1a:	f000 fc0d 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000264 	.word	0x20000264
 8000d2c:	40000800 	.word	0x40000800

08000d30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	@ 0x38
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
 8000d60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d64:	4a2d      	ldr	r2, [pc, #180]	@ (8000e1c <MX_TIM5_Init+0xec>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = TIM5_PSC_VALUE;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d6a:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000d6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = TIM5_ARR_VALUE;
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d78:	22c8      	movs	r2, #200	@ 0xc8
 8000d7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000d88:	4823      	ldr	r0, [pc, #140]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000d8a:	f003 fdfa 	bl	8004982 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000d94:	f000 fbd0 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000da2:	4619      	mov	r1, r3
 8000da4:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000da6:	f004 fb3f 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000db0:	f000 fbc2 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000db4:	4818      	ldr	r0, [pc, #96]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000db6:	f003 fe9c 	bl	8004af2 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000dc0:	f000 fbba 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4811      	ldr	r0, [pc, #68]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000dd4:	f005 f8f2 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000dde:	f000 fbab 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	@ 0x60
 8000de4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = TIM5_CCR1_VALUE;
 8000de6:	2364      	movs	r3, #100	@ 0x64
 8000de8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000dfa:	f004 fa01 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000e04:	f000 fb98 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <MX_TIM5_Init+0xe8>)
 8000e0a:	f000 fe7b 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3738      	adds	r7, #56	@ 0x38
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200002b0 	.word	0x200002b0
 8000e1c:	40000c00 	.word	0x40000c00

08000e20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e30:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e32:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <MX_TIM6_Init+0x6c>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e38:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000e3c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e54:	f003 fd95 	bl	8004982 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e5e:	f000 fb6b 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_TIM6_Init+0x68>)
 8000e70:	f005 f8a4 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e7a:	f000 fb5d 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200002fc 	.word	0x200002fc
 8000e8c:	40001000 	.word	0x40001000

08000e90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09a      	sub	sp, #104	@ 0x68
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	222c      	movs	r2, #44	@ 0x2c
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f005 fe6d 	bl	8006baa <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ed0:	4b56      	ldr	r3, [pc, #344]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000ed2:	4a57      	ldr	r2, [pc, #348]	@ (8001030 <MX_TIM8_Init+0x1a0>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8000ed6:	4b55      	ldr	r3, [pc, #340]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000ed8:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8000edc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b53      	ldr	r3, [pc, #332]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8000ee4:	4b51      	ldr	r3, [pc, #324]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000ee6:	f240 128f 	movw	r2, #399	@ 0x18f
 8000eea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b4f      	ldr	r3, [pc, #316]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000efe:	484b      	ldr	r0, [pc, #300]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000f00:	f003 fd3f 	bl	8004982 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8000f0a:	f000 fb15 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f12:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4844      	ldr	r0, [pc, #272]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000f1c:	f004 fa84 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8000f26:	f000 fb07 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f2a:	4840      	ldr	r0, [pc, #256]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000f2c:	f003 fde1 	bl	8004af2 <HAL_TIM_PWM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8000f36:	f000 faff 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4837      	ldr	r0, [pc, #220]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000f4e:	f005 f835 	bl	8005fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8000f58:	f000 faee 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5c:	2360      	movs	r3, #96	@ 0x60
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	482a      	ldr	r0, [pc, #168]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000f82:	f004 f93d 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8000f8c:	f000 fad4 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f94:	2204      	movs	r2, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4824      	ldr	r0, [pc, #144]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000f9a:	f004 f931 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8000fa4:	f000 fac8 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fac:	2208      	movs	r2, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481e      	ldr	r0, [pc, #120]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000fb2:	f004 f925 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8000fbc:	f000 fabc 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4818      	ldr	r0, [pc, #96]	@ (800102c <MX_TIM8_Init+0x19c>)
 8000fca:	f004 f919 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8000fd4:	f000 fab0 	bl	8001538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ffa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4807      	ldr	r0, [pc, #28]	@ (800102c <MX_TIM8_Init+0x19c>)
 800100e:	f005 f863 	bl	80060d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001018:	f000 fa8e 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <MX_TIM8_Init+0x19c>)
 800101e:	f000 fd71 	bl	8001b04 <HAL_TIM_MspPostInit>

}
 8001022:	bf00      	nop
 8001024:	3768      	adds	r7, #104	@ 0x68
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000348 	.word	0x20000348
 8001030:	40010400 	.word	0x40010400

08001034 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_UART4_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <MX_UART4_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_UART4_Init+0x58>)
 8001040:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001044:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_UART4_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_UART4_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_UART4_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_UART4_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_UART4_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_UART4_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_UART4_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_UART4_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_UART4_Init+0x58>)
 8001078:	f005 f8ca 	bl	8006210 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 fa59 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200003f4 	.word	0x200003f4
 8001090:	40004c00 	.word	0x40004c00

08001094 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_UART5_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <MX_UART5_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_UART5_Init+0x58>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_UART5_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_UART5_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_UART5_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_UART5_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <MX_UART5_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_UART5_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <MX_UART5_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_UART5_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_UART5_Init+0x58>)
 80010d8:	f005 f89a 	bl	8006210 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 fa29 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000047c 	.word	0x2000047c
 80010f0:	40005000 	.word	0x40005000

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_USART1_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <MX_USART1_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001138:	f005 f86a 	bl	8006210 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f9f9 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000504 	.word	0x20000504
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <MX_USART2_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001198:	f005 f83a 	bl	8006210 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 f9c9 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000058c 	.word	0x2000058c
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011ba:	4a15      	ldr	r2, [pc, #84]	@ (8001210 <MX_USART3_UART_Init+0x5c>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART3_UART_Init+0x58>)
 80011f8:	f005 f80a 	bl	8006210 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001202:	f000 f999 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000614 	.word	0x20000614
 8001210:	40004800 	.word	0x40004800

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_DMA_Init+0x38>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <MX_DMA_Init+0x38>)
 8001220:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_DMA_Init+0x38>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	200c      	movs	r0, #12
 8001238:	f001 fb69 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800123c:	200c      	movs	r0, #12
 800123e:	f001 fb82 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4bad      	ldr	r3, [pc, #692]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4aac      	ldr	r2, [pc, #688]	@ (800151c <MX_GPIO_Init+0x2cc>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4baa      	ldr	r3, [pc, #680]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4ba7      	ldr	r3, [pc, #668]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4aa6      	ldr	r2, [pc, #664]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4ba4      	ldr	r3, [pc, #656]	@ (800151c <MX_GPIO_Init+0x2cc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001296:	4ba1      	ldr	r3, [pc, #644]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4aa0      	ldr	r2, [pc, #640]	@ (800151c <MX_GPIO_Init+0x2cc>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b9e      	ldr	r3, [pc, #632]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	4b9b      	ldr	r3, [pc, #620]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a9a      	ldr	r2, [pc, #616]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b98      	ldr	r3, [pc, #608]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b95      	ldr	r3, [pc, #596]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a94      	ldr	r2, [pc, #592]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b92      	ldr	r3, [pc, #584]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b8f      	ldr	r3, [pc, #572]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a8e      	ldr	r2, [pc, #568]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b8c      	ldr	r3, [pc, #560]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b89      	ldr	r3, [pc, #548]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a88      	ldr	r2, [pc, #544]	@ (800151c <MX_GPIO_Init+0x2cc>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b86      	ldr	r3, [pc, #536]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800130e:	4b83      	ldr	r3, [pc, #524]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a82      	ldr	r2, [pc, #520]	@ (800151c <MX_GPIO_Init+0x2cc>)
 8001314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b80      	ldr	r3, [pc, #512]	@ (800151c <MX_GPIO_Init+0x2cc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2178      	movs	r1, #120	@ 0x78
 800132a:	487d      	ldr	r0, [pc, #500]	@ (8001520 <MX_GPIO_Init+0x2d0>)
 800132c:	f001 ffbc 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001336:	487b      	ldr	r0, [pc, #492]	@ (8001524 <MX_GPIO_Init+0x2d4>)
 8001338:	f001 ffb6 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2140      	movs	r1, #64	@ 0x40
 8001340:	4879      	ldr	r0, [pc, #484]	@ (8001528 <MX_GPIO_Init+0x2d8>)
 8001342:	f001 ffb1 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|GPIO_PIN_5|GPIO_PIN_6;
 8001346:	2378      	movs	r3, #120	@ 0x78
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4870      	ldr	r0, [pc, #448]	@ (8001520 <MX_GPIO_Init+0x2d0>)
 800135e:	f001 fdf7 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin;
 8001362:	2314      	movs	r3, #20
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001366:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	486d      	ldr	r0, [pc, #436]	@ (800152c <MX_GPIO_Init+0x2dc>)
 8001378:	f001 fdea 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin PF8 GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin
                           GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_PIN_8|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin
 800137c:	f643 5308 	movw	r3, #15624	@ 0x3d08
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4866      	ldr	r0, [pc, #408]	@ (800152c <MX_GPIO_Init+0x2dc>)
 8001394:	f001 fddc 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	485f      	ldr	r0, [pc, #380]	@ (800152c <MX_GPIO_Init+0x2dc>)
 80013ae:	f001 fdcf 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013b2:	2332      	movs	r3, #50	@ 0x32
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c2:	230b      	movs	r3, #11
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	4858      	ldr	r0, [pc, #352]	@ (8001530 <MX_GPIO_Init+0x2e0>)
 80013ce:	f001 fdbf 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013d2:	2386      	movs	r3, #134	@ 0x86
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e2:	230b      	movs	r3, #11
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4851      	ldr	r0, [pc, #324]	@ (8001534 <MX_GPIO_Init+0x2e4>)
 80013ee:	f001 fdaf 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013f2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4846      	ldr	r0, [pc, #280]	@ (8001524 <MX_GPIO_Init+0x2d4>)
 800140c:	f001 fda0 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001422:	230b      	movs	r3, #11
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	483d      	ldr	r0, [pc, #244]	@ (8001524 <MX_GPIO_Init+0x2d4>)
 800142e:	f001 fd8f 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001432:	2340      	movs	r3, #64	@ 0x40
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4837      	ldr	r0, [pc, #220]	@ (8001528 <MX_GPIO_Init+0x2d8>)
 800144a:	f001 fd81 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4831      	ldr	r0, [pc, #196]	@ (8001528 <MX_GPIO_Init+0x2d8>)
 8001462:	f001 fd75 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001466:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001478:	230a      	movs	r3, #10
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001480:	4619      	mov	r1, r3
 8001482:	482c      	ldr	r0, [pc, #176]	@ (8001534 <MX_GPIO_Init+0x2e4>)
 8001484:	f001 fd64 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	4825      	ldr	r0, [pc, #148]	@ (8001534 <MX_GPIO_Init+0x2e4>)
 800149e:	f001 fd57 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014a2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014b4:	230b      	movs	r3, #11
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	481a      	ldr	r0, [pc, #104]	@ (8001528 <MX_GPIO_Init+0x2d8>)
 80014c0:	f001 fd46 	bl	8002f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2102      	movs	r1, #2
 80014c8:	2008      	movs	r0, #8
 80014ca:	f001 fa20 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014ce:	2008      	movs	r0, #8
 80014d0:	f001 fa39 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2102      	movs	r1, #2
 80014d8:	2009      	movs	r0, #9
 80014da:	f001 fa18 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014de:	2009      	movs	r0, #9
 80014e0:	f001 fa31 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2102      	movs	r1, #2
 80014e8:	200a      	movs	r0, #10
 80014ea:	f001 fa10 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014ee:	200a      	movs	r0, #10
 80014f0:	f001 fa29 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2017      	movs	r0, #23
 80014fa:	f001 fa08 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014fe:	2017      	movs	r0, #23
 8001500:	f001 fa21 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2028      	movs	r0, #40	@ 0x28
 800150a:	f001 fa00 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800150e:	2028      	movs	r0, #40	@ 0x28
 8001510:	f001 fa19 	bl	8002946 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001514:	bf00      	nop
 8001516:	3738      	adds	r7, #56	@ 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40021000 	.word	0x40021000
 8001524:	40020400 	.word	0x40020400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021400 	.word	0x40021400
 8001530:	40020800 	.word	0x40020800
 8001534:	40020000 	.word	0x40020000

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <Error_Handler+0x8>

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <HAL_MspInit+0x44>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <HAL_MspInit+0x44>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_MspInit+0x44>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a08      	ldr	r2, [pc, #32]	@ (8001588 <HAL_MspInit+0x44>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_MspInit+0x44>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <HAL_ADC_MspInit+0x74>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d123      	bne.n	80015f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_ADC_MspInit+0x78>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <HAL_ADC_MspInit+0x78>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_ADC_MspInit+0x78>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_ADC_MspInit+0x78>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <HAL_ADC_MspInit+0x78>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_ADC_MspInit+0x78>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 80015de:	2308      	movs	r3, #8
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e2:	2303      	movs	r3, #3
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <HAL_ADC_MspInit+0x7c>)
 80015f2:	f001 fcad 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	@ 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40012000 	.word	0x40012000
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0b0      	sub	sp, #192	@ 0xc0
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2290      	movs	r2, #144	@ 0x90
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f005 fabc 	bl	8006baa <memset>
  if(hi2c->Instance==I2C1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a44      	ldr	r2, [pc, #272]	@ (8001748 <HAL_I2C_MspInit+0x13c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d13e      	bne.n	80016ba <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800163c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001640:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4618      	mov	r0, r3
 800164e:	f002 fcc5 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001658:	f7ff ff6e 	bl	8001538 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_I2C_MspInit+0x140>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	4a3a      	ldr	r2, [pc, #232]	@ (800174c <HAL_I2C_MspInit+0x140>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	6313      	str	r3, [r2, #48]	@ 0x30
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <HAL_I2C_MspInit+0x140>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001674:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001682:	2301      	movs	r3, #1
 8001684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168e:	2304      	movs	r3, #4
 8001690:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001698:	4619      	mov	r1, r3
 800169a:	482d      	ldr	r0, [pc, #180]	@ (8001750 <HAL_I2C_MspInit+0x144>)
 800169c:	f001 fc58 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_I2C_MspInit+0x140>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a29      	ldr	r2, [pc, #164]	@ (800174c <HAL_I2C_MspInit+0x140>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <HAL_I2C_MspInit+0x140>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016b8:	e041      	b.n	800173e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a25      	ldr	r2, [pc, #148]	@ (8001754 <HAL_I2C_MspInit+0x148>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d13c      	bne.n	800173e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fc81 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80016e0:	f7ff ff2a 	bl	8001538 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_I2C_MspInit+0x140>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <HAL_I2C_MspInit+0x140>)
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f0:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_I2C_MspInit+0x140>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	f003 0320 	and.w	r3, r3, #32
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001702:	2312      	movs	r3, #18
 8001704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001714:	2304      	movs	r3, #4
 8001716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800171a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800171e:	4619      	mov	r1, r3
 8001720:	480d      	ldr	r0, [pc, #52]	@ (8001758 <HAL_I2C_MspInit+0x14c>)
 8001722:	f001 fc15 	bl	8002f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_I2C_MspInit+0x140>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <HAL_I2C_MspInit+0x140>)
 800172c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_I2C_MspInit+0x140>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	37c0      	adds	r7, #192	@ 0xc0
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400
 8001754:	40005800 	.word	0x40005800
 8001758:	40021400 	.word	0x40021400

0800175c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a33      	ldr	r2, [pc, #204]	@ (8001848 <HAL_SPI_MspInit+0xec>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d160      	bne.n	8001840 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800177e:	4b33      	ldr	r3, [pc, #204]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a32      	ldr	r2, [pc, #200]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 8001784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b30      	ldr	r3, [pc, #192]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a2c      	ldr	r2, [pc, #176]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a26      	ldr	r2, [pc, #152]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c6:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <HAL_SPI_MspInit+0xf0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017de:	2320      	movs	r3, #32
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ee:	2305      	movs	r3, #5
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4815      	ldr	r0, [pc, #84]	@ (8001850 <HAL_SPI_MspInit+0xf4>)
 80017fa:	f001 fba9 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017fe:	2380      	movs	r3, #128	@ 0x80
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800180e:	2305      	movs	r3, #5
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	480e      	ldr	r0, [pc, #56]	@ (8001854 <HAL_SPI_MspInit+0xf8>)
 800181a:	f001 fb99 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001830:	2305      	movs	r3, #5
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	@ (8001858 <HAL_SPI_MspInit+0xfc>)
 800183c:	f001 fb88 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001840:	bf00      	nop
 8001842:	3730      	adds	r7, #48	@ 0x30
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40013000 	.word	0x40013000
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020c00 	.word	0x40020c00
 8001858:	40021800 	.word	0x40021800

0800185c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	@ 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5f      	ldr	r2, [pc, #380]	@ (80019f8 <HAL_TIM_Base_MspInit+0x19c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10c      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	4b5f      	ldr	r3, [pc, #380]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a5e      	ldr	r2, [pc, #376]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b5c      	ldr	r3, [pc, #368]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001896:	e0aa      	b.n	80019ee <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a0:	d168      	bne.n	8001974 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	4b56      	ldr	r3, [pc, #344]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a55      	ldr	r2, [pc, #340]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a4f      	ldr	r2, [pc, #316]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b4d      	ldr	r3, [pc, #308]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80018d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018e4:	2301      	movs	r3, #1
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	4844      	ldr	r0, [pc, #272]	@ (8001a00 <HAL_TIM_Base_MspInit+0x1a4>)
 80018f0:	f001 fb2e 	bl	8002f50 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80018f4:	4b43      	ldr	r3, [pc, #268]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 80018f6:	4a44      	ldr	r2, [pc, #272]	@ (8001a08 <HAL_TIM_Base_MspInit+0x1ac>)
 80018f8:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80018fa:	4b42      	ldr	r3, [pc, #264]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 80018fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001900:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001902:	4b40      	ldr	r3, [pc, #256]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b3e      	ldr	r3, [pc, #248]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001910:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001914:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001916:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001918:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800191c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800191e:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001920:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001924:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8001926:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192c:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b35      	ldr	r3, [pc, #212]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001934:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800193a:	4832      	ldr	r0, [pc, #200]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 800193c:	f001 f81e 	bl	800297c <HAL_DMA_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_TIM_Base_MspInit+0xee>
      Error_Handler();
 8001946:	f7ff fdf7 	bl	8001538 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 800194e:	621a      	str	r2, [r3, #32]
 8001950:	4a2c      	ldr	r2, [pc, #176]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a2a      	ldr	r2, [pc, #168]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800195c:	4a29      	ldr	r2, [pc, #164]	@ (8001a04 <HAL_TIM_Base_MspInit+0x1a8>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2101      	movs	r1, #1
 8001966:	201c      	movs	r0, #28
 8001968:	f000 ffd1 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800196c:	201c      	movs	r0, #28
 800196e:	f000 ffea 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 8001972:	e03c      	b.n	80019ee <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM5)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <HAL_TIM_Base_MspInit+0x1b0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10c      	bne.n	8001998 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800197e:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	4a1e      	ldr	r2, [pc, #120]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6413      	str	r3, [r2, #64]	@ 0x40
 800198a:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
}
 8001996:	e02a      	b.n	80019ee <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM6)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_TIM_Base_MspInit+0x1b4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d114      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	4a15      	ldr	r2, [pc, #84]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2103      	movs	r1, #3
 80019be:	2036      	movs	r0, #54	@ 0x36
 80019c0:	f000 ffa5 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c4:	2036      	movs	r0, #54	@ 0x36
 80019c6:	f000 ffbe 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 80019ca:	e010      	b.n	80019ee <HAL_TIM_Base_MspInit+0x192>
  else if(htim_base->Instance==TIM8)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <HAL_TIM_Base_MspInit+0x1b8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10b      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_TIM_Base_MspInit+0x1a0>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
}
 80019ee:	bf00      	nop
 80019f0:	3738      	adds	r7, #56	@ 0x38
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40010000 	.word	0x40010000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020400 	.word	0x40020400
 8001a04:	20000394 	.word	0x20000394
 8001a08:	40026028 	.word	0x40026028
 8001a0c:	40000c00 	.word	0x40000c00
 8001a10:	40001000 	.word	0x40001000
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	@ 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2e      	ldr	r2, [pc, #184]	@ (8001af0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d128      	bne.n	8001a8c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a27      	ldr	r2, [pc, #156]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001a6a:	2330      	movs	r3, #48	@ 0x30
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	481c      	ldr	r0, [pc, #112]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001a86:	f001 fa63 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a8a:	e02d      	b.n	8001ae8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d128      	bne.n	8001ae8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a96:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a16      	ldr	r2, [pc, #88]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a10      	ldr	r2, [pc, #64]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001ac6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ae4:	f001 fa34 	bl	8002f50 <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3730      	adds	r7, #48	@ 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40020c00 	.word	0x40020c00

08001b04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a45      	ldr	r2, [pc, #276]	@ (8001c38 <HAL_TIM_MspPostInit+0x134>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d11d      	bne.n	8001b62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b26:	4b45      	ldr	r3, [pc, #276]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a44      	ldr	r2, [pc, #272]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b42      	ldr	r3, [pc, #264]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001b3e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4839      	ldr	r0, [pc, #228]	@ (8001c40 <HAL_TIM_MspPostInit+0x13c>)
 8001b5c:	f001 f9f8 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b60:	e066      	b.n	8001c30 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b33      	ldr	r3, [pc, #204]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	4a32      	ldr	r2, [pc, #200]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b78:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b96:	2301      	movs	r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4828      	ldr	r0, [pc, #160]	@ (8001c44 <HAL_TIM_MspPostInit+0x140>)
 8001ba2:	f001 f9d5 	bl	8002f50 <HAL_GPIO_Init>
}
 8001ba6:	e043      	b.n	8001c30 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a26      	ldr	r2, [pc, #152]	@ (8001c48 <HAL_TIM_MspPostInit+0x144>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d11c      	bne.n	8001bec <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a21      	ldr	r2, [pc, #132]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	4817      	ldr	r0, [pc, #92]	@ (8001c44 <HAL_TIM_MspPostInit+0x140>)
 8001be6:	f001 f9b3 	bl	8002f50 <HAL_GPIO_Init>
}
 8001bea:	e021      	b.n	8001c30 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM8)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a16      	ldr	r2, [pc, #88]	@ (8001c4c <HAL_TIM_MspPostInit+0x148>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11c      	bne.n	8001c30 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a10      	ldr	r2, [pc, #64]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_TIM_MspPostInit+0x138>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001c0e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c20:	2303      	movs	r3, #3
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <HAL_TIM_MspPostInit+0x14c>)
 8001c2c:	f001 f990 	bl	8002f50 <HAL_GPIO_Init>
}
 8001c30:	bf00      	nop
 8001c32:	3730      	adds	r7, #48	@ 0x30
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40000c00 	.word	0x40000c00
 8001c4c:	40010400 	.word	0x40010400
 8001c50:	40020800 	.word	0x40020800

08001c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0b6      	sub	sp, #216	@ 0xd8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c70:	2290      	movs	r2, #144	@ 0x90
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 ff98 	bl	8006baa <memset>
  if(huart->Instance==UART4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4aa0      	ldr	r2, [pc, #640]	@ (8001f00 <HAL_UART_MspInit+0x2ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13e      	bne.n	8001d02 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c88:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 f9a1 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ca0:	f7ff fc4a 	bl	8001538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ca4:	4b97      	ldr	r3, [pc, #604]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	4a96      	ldr	r2, [pc, #600]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001caa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb0:	4b94      	ldr	r3, [pc, #592]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	4b91      	ldr	r3, [pc, #580]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4a90      	ldr	r2, [pc, #576]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8001cd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4883      	ldr	r0, [pc, #524]	@ (8001f08 <HAL_UART_MspInit+0x2b4>)
 8001cfc:	f001 f928 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d00:	e151      	b.n	8001fa6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a81      	ldr	r2, [pc, #516]	@ (8001f0c <HAL_UART_MspInit+0x2b8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d160      	bne.n	8001dce <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d18:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 f95d 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001d28:	f7ff fc06 	bl	8001538 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d2c:	4b75      	ldr	r3, [pc, #468]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a74      	ldr	r2, [pc, #464]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d38:	4b72      	ldr	r3, [pc, #456]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	4b6f      	ldr	r3, [pc, #444]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d50:	4b6c      	ldr	r3, [pc, #432]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5c:	4b69      	ldr	r3, [pc, #420]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	4a68      	ldr	r2, [pc, #416]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d8e:	2308      	movs	r3, #8
 8001d90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	485d      	ldr	r0, [pc, #372]	@ (8001f10 <HAL_UART_MspInit+0x2bc>)
 8001d9c:	f001 f8d8 	bl	8002f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4850      	ldr	r0, [pc, #320]	@ (8001f08 <HAL_UART_MspInit+0x2b4>)
 8001dc8:	f001 f8c2 	bl	8002f50 <HAL_GPIO_Init>
}
 8001dcc:	e0eb      	b.n	8001fa6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a50      	ldr	r2, [pc, #320]	@ (8001f14 <HAL_UART_MspInit+0x2c0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d151      	bne.n	8001e7c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dd8:	2340      	movs	r3, #64	@ 0x40
 8001dda:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 f8f9 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001df0:	f7ff fba2 	bl	8001538 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df4:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e00:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4a3c      	ldr	r2, [pc, #240]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e18:	4b3a      	ldr	r3, [pc, #232]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4831      	ldr	r0, [pc, #196]	@ (8001f10 <HAL_UART_MspInit+0x2bc>)
 8001e4c:	f001 f880 	bl	8002f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e50:	2340      	movs	r3, #64	@ 0x40
 8001e52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4826      	ldr	r0, [pc, #152]	@ (8001f10 <HAL_UART_MspInit+0x2bc>)
 8001e76:	f001 f86b 	bl	8002f50 <HAL_GPIO_Init>
}
 8001e7a:	e094      	b.n	8001fa6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a25      	ldr	r2, [pc, #148]	@ (8001f18 <HAL_UART_MspInit+0x2c4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d14c      	bne.n	8001f20 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 f8a2 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8001e9e:	f7ff fb4b 	bl	8001538 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a11      	ldr	r2, [pc, #68]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_UART_MspInit+0x2b0>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ed2:	2360      	movs	r3, #96	@ 0x60
 8001ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eea:	2307      	movs	r3, #7
 8001eec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <HAL_UART_MspInit+0x2c8>)
 8001ef8:	f001 f82a 	bl	8002f50 <HAL_GPIO_Init>
}
 8001efc:	e053      	b.n	8001fa6 <HAL_UART_MspInit+0x352>
 8001efe:	bf00      	nop
 8001f00:	40004c00 	.word	0x40004c00
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40005000 	.word	0x40005000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a22      	ldr	r2, [pc, #136]	@ (8001fb0 <HAL_UART_MspInit+0x35c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d13d      	bne.n	8001fa6 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 f84e 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8001f46:	f7ff faf7 	bl	8001538 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb4 <HAL_UART_MspInit+0x360>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_UART_MspInit+0x360>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_UART_MspInit+0x360>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_UART_MspInit+0x360>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_UART_MspInit+0x360>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_UART_MspInit+0x360>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f94:	2307      	movs	r3, #7
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <HAL_UART_MspInit+0x364>)
 8001fa2:	f000 ffd5 	bl	8002f50 <HAL_GPIO_Init>
}
 8001fa6:	bf00      	nop
 8001fa8:	37d8      	adds	r7, #216	@ 0xd8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40004800 	.word	0x40004800
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40020c00 	.word	0x40020c00

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002012:	f000 f8c9 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}

0800201a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin);
 800201e:	2004      	movs	r0, #4
 8002020:	f001 f95c 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI3_IMU_IRQ_Pin);
 800202c:	2008      	movs	r0, #8
 800202e:	f001 f955 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}

08002036 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 800203a:	2010      	movs	r0, #16
 800203c:	f001 f94e 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <DMA1_Stream1_IRQHandler+0x10>)
 800204a:	f000 fd45 	bl	8002ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000394 	.word	0x20000394

08002058 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800205c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002060:	f001 f93c 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800206c:	4802      	ldr	r0, [pc, #8]	@ (8002078 <TIM2_IRQHandler+0x10>)
 800206e:	f002 fea9 	bl	8004dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200001cc 	.word	0x200001cc

0800207c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI10_BUMP1_IRQ_Pin);
 8002080:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002084:	f001 f92a 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI11_BUMP2_IRQ_Pin);
 8002088:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800208c:	f001 f926 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI12_BUMP3_IRQ_Pin);
 8002090:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002094:	f001 f922 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI13_BUMP4_IRQ_Pin);
 8002098:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800209c:	f001 f91e 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <TIM6_DAC_IRQHandler+0x10>)
 80020aa:	f002 fe8b 	bl	8004dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200002fc 	.word	0x200002fc

080020b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <SystemInit+0x20>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <SystemInit+0x20>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e0:	f7ff ffea 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800210a:	f004 fd57 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7fe fa25 	bl	800055c <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002120:	08006c4c 	.word	0x08006c4c
  ldr r2, =_sbss
 8002124:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002128:	200006a0 	.word	0x200006a0

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>

0800212e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002132:	2003      	movs	r0, #3
 8002134:	f000 fbe0 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002138:	2000      	movs	r0, #0
 800213a:	f000 f805 	bl	8002148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213e:	f7ff fa01 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_InitTick+0x54>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fbfb 	bl	8002962 <HAL_SYSTICK_Config>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00e      	b.n	8002194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d80a      	bhi.n	8002192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f000 fbc3 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002188:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_InitTick+0x5c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000004 	.word	0x20000004
 80021a0:	2000000c 	.word	0x2000000c
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x24>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <HAL_IncTick+0x24>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	2000069c 	.word	0x2000069c

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000069c 	.word	0x2000069c

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d005      	beq.n	800220e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_Delay+0x44>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220e:	bf00      	nop
 8002210:	f7ff ffde 	bl	80021d0 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8f7      	bhi.n	8002210 <HAL_Delay+0x28>
  {
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000000c 	.word	0x2000000c

08002230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e031      	b.n	80022aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff f99c 	bl	800158c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d116      	bne.n	800229c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_ADC_Init+0x84>)
 8002274:	4013      	ands	r3, r2
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f970 	bl	8002564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	ffffeefd 	.word	0xffffeefd

080022b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1c>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e136      	b.n	8002542 <HAL_ADC_ConfigChannel+0x28a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d93a      	bls.n	800235a <HAL_ADC_ConfigChannel+0xa2>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022ec:	d035      	beq.n	800235a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68d9      	ldr	r1, [r3, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	3b1e      	subs	r3, #30
 8002304:	2207      	movs	r2, #7
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	400a      	ands	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a8d      	ldr	r2, [pc, #564]	@ (8002550 <HAL_ADC_ConfigChannel+0x298>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10a      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68d9      	ldr	r1, [r3, #12]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	061a      	lsls	r2, r3, #24
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002332:	e035      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68d9      	ldr	r1, [r3, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	4603      	mov	r3, r0
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4403      	add	r3, r0
 800234c:	3b1e      	subs	r3, #30
 800234e:	409a      	lsls	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002358:	e022      	b.n	80023a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6919      	ldr	r1, [r3, #16]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	2207      	movs	r2, #7
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43da      	mvns	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	400a      	ands	r2, r1
 800237c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	4603      	mov	r3, r0
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4403      	add	r3, r0
 8002396:	409a      	lsls	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d824      	bhi.n	80023f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b05      	subs	r3, #5
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43da      	mvns	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	400a      	ands	r2, r1
 80023c8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b05      	subs	r3, #5
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80023f0:	e04c      	b.n	800248c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b0c      	cmp	r3, #12
 80023f8:	d824      	bhi.n	8002444 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3b23      	subs	r3, #35	@ 0x23
 800240c:	221f      	movs	r2, #31
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	400a      	ands	r2, r1
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b23      	subs	r3, #35	@ 0x23
 8002436:	fa00 f203 	lsl.w	r2, r0, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
 8002442:	e023      	b.n	800248c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	3b41      	subs	r3, #65	@ 0x41
 8002456:	221f      	movs	r2, #31
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43da      	mvns	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	400a      	ands	r2, r1
 8002464:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b41      	subs	r3, #65	@ 0x41
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a30      	ldr	r2, [pc, #192]	@ (8002554 <HAL_ADC_ConfigChannel+0x29c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d10a      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1f4>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800249e:	d105      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80024aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_ADC_ConfigChannel+0x29c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10f      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x21e>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b12      	cmp	r3, #18
 80024bc:	d10b      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80024be:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a25      	ldr	r2, [pc, #148]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024c8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80024ca:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a22      	ldr	r2, [pc, #136]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_ADC_ConfigChannel+0x29c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d12b      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x280>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002550 <HAL_ADC_ConfigChannel+0x298>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x23a>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b11      	cmp	r3, #17
 80024f0:	d122      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024f2:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 80024f8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024fc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <HAL_ADC_ConfigChannel+0x2a0>)
 8002504:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002508:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <HAL_ADC_ConfigChannel+0x298>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d111      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_ADC_ConfigChannel+0x2a4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <HAL_ADC_ConfigChannel+0x2a8>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0c9a      	lsrs	r2, r3, #18
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800252a:	e002      	b.n	8002532 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3b01      	subs	r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f9      	bne.n	800252c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	10000012 	.word	0x10000012
 8002554:	40012000 	.word	0x40012000
 8002558:	40012300 	.word	0x40012300
 800255c:	20000004 	.word	0x20000004
 8002560:	431bde83 	.word	0x431bde83

08002564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800256c:	4b78      	ldr	r3, [pc, #480]	@ (8002750 <ADC_Init+0x1ec>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a77      	ldr	r2, [pc, #476]	@ (8002750 <ADC_Init+0x1ec>)
 8002572:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002576:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002578:	4b75      	ldr	r3, [pc, #468]	@ (8002750 <ADC_Init+0x1ec>)
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4973      	ldr	r1, [pc, #460]	@ (8002750 <ADC_Init+0x1ec>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	4a58      	ldr	r2, [pc, #352]	@ (8002754 <ADC_Init+0x1f0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e00f      	b.n	800265e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800265c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0202 	bic.w	r2, r2, #2
 800266c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	3b01      	subs	r3, #1
 80026b8:	035a      	lsls	r2, r3, #13
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e007      	b.n	80026d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	051a      	lsls	r2, r3, #20
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002716:	025a      	lsls	r2, r3, #9
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	029a      	lsls	r2, r3, #10
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	0f000001 	.word	0x0f000001

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <__NVIC_SetPriorityGrouping+0x40>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	4313      	orrs	r3, r2
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <__NVIC_SetPriorityGrouping+0x40>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	05fa0000 	.word	0x05fa0000

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff fc22 	bl	80021d0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e099      	b.n	8002acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff fc09 	bl	80021d0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d908      	bls.n	80029da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e078      	b.n	8002acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e8      	bne.n	80029ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f9e9 	bl	8002e58 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9a0 	bl	8002dec <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	223f      	movs	r2, #63	@ 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	e010803f 	.word	0xe010803f

08002ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ae4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d20 <HAL_DMA_IRQHandler+0x248>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a8e      	ldr	r2, [pc, #568]	@ (8002d24 <HAL_DMA_IRQHandler+0x24c>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a9b      	lsrs	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	2208      	movs	r2, #8
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0204 	bic.w	r2, r2, #4
 8002b2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	2208      	movs	r2, #8
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	2201      	movs	r2, #1
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	2204      	movs	r2, #4
 8002b80:	409a      	lsls	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f043 0204 	orr.w	r2, r3, #4
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d043      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03c      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
 8002c06:	e01f      	b.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
 8002c18:	e016      	b.n	8002c48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0208 	bic.w	r2, r2, #8
 8002c36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 808f 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 8087 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6e:	2220      	movs	r2, #32
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d136      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0216 	bic.w	r2, r2, #22
 8002c90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ca0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_DMA_IRQHandler+0x1da>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0208 	bic.w	r2, r2, #8
 8002cc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	223f      	movs	r2, #63	@ 0x3f
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d07e      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
        }
        return;
 8002cee:	e079      	b.n	8002de4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01d      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d031      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	4798      	blx	r3
 8002d1c:	e02c      	b.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
 8002d1e:	bf00      	nop
 8002d20:	20000004 	.word	0x20000004
 8002d24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d023      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
 8002d38:	e01e      	b.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10f      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0210 	bic.w	r2, r2, #16
 8002d56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d032      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d307      	bcc.n	8002dc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f2      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x2cc>
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002de4:	bf00      	nop
    }
  }
}
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3b10      	subs	r3, #16
 8002dfc:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <DMA_CalcBaseAndBitshift+0x60>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e06:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <DMA_CalcBaseAndBitshift+0x64>)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d908      	bls.n	8002e2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <DMA_CalcBaseAndBitshift+0x68>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	1d1a      	adds	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e2a:	e006      	b.n	8002e3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <DMA_CalcBaseAndBitshift+0x68>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	aaaaaaab 	.word	0xaaaaaaab
 8002e50:	08006c34 	.word	0x08006c34
 8002e54:	fffffc00 	.word	0xfffffc00

08002e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11f      	bne.n	8002eb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d856      	bhi.n	8002f26 <DMA_CheckFifoParam+0xce>
 8002e78:	a201      	add	r2, pc, #4	@ (adr r2, 8002e80 <DMA_CheckFifoParam+0x28>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002ea3 	.word	0x08002ea3
 8002e88:	08002e91 	.word	0x08002e91
 8002e8c:	08002f27 	.word	0x08002f27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d046      	beq.n	8002f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e043      	b.n	8002f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eaa:	d140      	bne.n	8002f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e03d      	b.n	8002f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eba:	d121      	bne.n	8002f00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d837      	bhi.n	8002f32 <DMA_CheckFifoParam+0xda>
 8002ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec8 <DMA_CheckFifoParam+0x70>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002edf 	.word	0x08002edf
 8002ed0:	08002ed9 	.word	0x08002ed9
 8002ed4:	08002ef1 	.word	0x08002ef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e030      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d025      	beq.n	8002f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eee:	e022      	b.n	8002f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ef8:	d11f      	bne.n	8002f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002efe:	e01c      	b.n	8002f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d903      	bls.n	8002f0e <DMA_CheckFifoParam+0xb6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0c:	e018      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      break;
 8002f12:	e015      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      break;
 8002f24:	e00b      	b.n	8002f3e <DMA_CheckFifoParam+0xe6>
      break;
 8002f26:	bf00      	nop
 8002f28:	e00a      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e008      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e006      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e004      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e175      	b.n	800325c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8164 	bne.w	8003256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x56>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80be 	beq.w	8003256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	4b66      	ldr	r3, [pc, #408]	@ (8003274 <HAL_GPIO_Init+0x324>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_GPIO_Init+0x324>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e6:	4b63      	ldr	r3, [pc, #396]	@ (8003274 <HAL_GPIO_Init+0x324>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030f2:	4a61      	ldr	r2, [pc, #388]	@ (8003278 <HAL_GPIO_Init+0x328>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_GPIO_Init+0x32c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d037      	beq.n	800318e <HAL_GPIO_Init+0x23e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a57      	ldr	r2, [pc, #348]	@ (8003280 <HAL_GPIO_Init+0x330>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_GPIO_Init+0x23a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a56      	ldr	r2, [pc, #344]	@ (8003284 <HAL_GPIO_Init+0x334>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <HAL_GPIO_Init+0x236>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a55      	ldr	r2, [pc, #340]	@ (8003288 <HAL_GPIO_Init+0x338>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d025      	beq.n	8003182 <HAL_GPIO_Init+0x232>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_GPIO_Init+0x33c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01f      	beq.n	800317e <HAL_GPIO_Init+0x22e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a53      	ldr	r2, [pc, #332]	@ (8003290 <HAL_GPIO_Init+0x340>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_GPIO_Init+0x22a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_GPIO_Init+0x344>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0x226>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a51      	ldr	r2, [pc, #324]	@ (8003298 <HAL_GPIO_Init+0x348>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x222>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a50      	ldr	r2, [pc, #320]	@ (800329c <HAL_GPIO_Init+0x34c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x21e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4f      	ldr	r2, [pc, #316]	@ (80032a0 <HAL_GPIO_Init+0x350>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x21a>
 8003166:	2309      	movs	r3, #9
 8003168:	e012      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316a:	230a      	movs	r3, #10
 800316c:	e010      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316e:	2308      	movs	r3, #8
 8003170:	e00e      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003172:	2307      	movs	r3, #7
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003176:	2306      	movs	r3, #6
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	@ (8003278 <HAL_GPIO_Init+0x328>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b32      	ldr	r3, [pc, #200]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1f      	ldr	r2, [pc, #124]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae86 	bls.w	8002f70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40022000 	.word	0x40022000
 80032a0:	40022400 	.word	0x40022400
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032c4:	e003      	b.n	80032ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f914 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e08b      	b.n	8003436 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f96a 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800335c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800336c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e006      	b.n	8003394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d108      	bne.n	80033ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e007      	b.n	80033be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_I2C_Init+0x134>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69d9      	ldr	r1, [r3, #28]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	02008000 	.word	0x02008000

08003444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d138      	bne.n	80034cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003464:	2302      	movs	r3, #2
 8003466:	e032      	b.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	@ 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d139      	bne.n	8003564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e033      	b.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2224      	movs	r2, #36	@ 0x24
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800352c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003582:	6013      	str	r3, [r2, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40007000 	.word	0x40007000

08003594 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4b23      	ldr	r3, [pc, #140]	@ (800362c <HAL_PWREx_EnableOverDrive+0x98>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a22      	ldr	r2, [pc, #136]	@ (800362c <HAL_PWREx_EnableOverDrive+0x98>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_PWREx_EnableOverDrive+0x98>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c2:	f7fe fe05 	bl	80021d0 <HAL_GetTick>
 80035c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035c8:	e009      	b.n	80035de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035ca:	f7fe fe01 	bl	80021d0 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035d8:	d901      	bls.n	80035de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e022      	b.n	8003624 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035de:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ea:	d1ee      	bne.n	80035ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035ec:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f8:	f7fe fdea 	bl	80021d0 <HAL_GetTick>
 80035fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035fe:	e009      	b.n	8003614 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003600:	f7fe fde6 	bl	80021d0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800360e:	d901      	bls.n	8003614 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e007      	b.n	8003624 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003614:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003620:	d1ee      	bne.n	8003600 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000

08003634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e29b      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8087 	beq.w	8003766 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003658:	4b96      	ldr	r3, [pc, #600]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b04      	cmp	r3, #4
 8003662:	d00c      	beq.n	800367e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003664:	4b93      	ldr	r3, [pc, #588]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d112      	bne.n	8003696 <HAL_RCC_OscConfig+0x62>
 8003670:	4b90      	ldr	r3, [pc, #576]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800367c:	d10b      	bne.n	8003696 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367e:	4b8d      	ldr	r3, [pc, #564]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d06c      	beq.n	8003764 <HAL_RCC_OscConfig+0x130>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d168      	bne.n	8003764 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e275      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x7a>
 80036a0:	4b84      	ldr	r3, [pc, #528]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a83      	ldr	r2, [pc, #524]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e02e      	b.n	800370c <HAL_RCC_OscConfig+0xd8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x9c>
 80036b6:	4b7f      	ldr	r3, [pc, #508]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7e      	ldr	r2, [pc, #504]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b7c      	ldr	r3, [pc, #496]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7b      	ldr	r2, [pc, #492]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e01d      	b.n	800370c <HAL_RCC_OscConfig+0xd8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0xc0>
 80036da:	4b76      	ldr	r3, [pc, #472]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a75      	ldr	r2, [pc, #468]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b73      	ldr	r3, [pc, #460]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a72      	ldr	r2, [pc, #456]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0xd8>
 80036f4:	4b6f      	ldr	r3, [pc, #444]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6e      	ldr	r2, [pc, #440]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b6c      	ldr	r3, [pc, #432]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6b      	ldr	r2, [pc, #428]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800370a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe fd5c 	bl	80021d0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe fd58 	bl	80021d0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	@ 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e229      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b61      	ldr	r3, [pc, #388]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0xe8>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe fd48 	bl	80021d0 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fd44 	bl	80021d0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	@ 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e215      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	4b57      	ldr	r3, [pc, #348]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x110>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d069      	beq.n	8003846 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003772:	4b50      	ldr	r3, [pc, #320]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b4d      	ldr	r3, [pc, #308]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d11c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x190>
 800378a:	4b4a      	ldr	r3, [pc, #296]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d116      	bne.n	80037c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	4b47      	ldr	r3, [pc, #284]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_RCC_OscConfig+0x17a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e1e9      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ae:	4b41      	ldr	r3, [pc, #260]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	493d      	ldr	r1, [pc, #244]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	e040      	b.n	8003846 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d023      	beq.n	8003814 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037cc:	4b39      	ldr	r3, [pc, #228]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a38      	ldr	r2, [pc, #224]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fcfa 	bl	80021d0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e0:	f7fe fcf6 	bl	80021d0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1c7      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fe:	4b2d      	ldr	r3, [pc, #180]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4929      	ldr	r1, [pc, #164]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
 8003812:	e018      	b.n	8003846 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003814:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a26      	ldr	r2, [pc, #152]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fe fcd6 	bl	80021d0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe fcd2 	bl	80021d0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1a3      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b1e      	ldr	r3, [pc, #120]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d038      	beq.n	80038c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b16      	ldr	r3, [pc, #88]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe fcb3 	bl	80021d0 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386e:	f7fe fcaf 	bl	80021d0 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e180      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003880:	4b0c      	ldr	r3, [pc, #48]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x23a>
 800388c:	e01a      	b.n	80038c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388e:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	4a08      	ldr	r2, [pc, #32]	@ (80038b4 <HAL_RCC_OscConfig+0x280>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fe fc99 	bl	80021d0 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a2:	f7fe fc95 	bl	80021d0 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d903      	bls.n	80038b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e166      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
 80038b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	4b92      	ldr	r3, [pc, #584]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ee      	bne.n	80038a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a4 	beq.w	8003a1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d2:	4b8c      	ldr	r3, [pc, #560]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	4b89      	ldr	r3, [pc, #548]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	4a88      	ldr	r2, [pc, #544]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ea:	4b86      	ldr	r3, [pc, #536]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fa:	4b83      	ldr	r3, [pc, #524]	@ (8003b08 <HAL_RCC_OscConfig+0x4d4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003906:	4b80      	ldr	r3, [pc, #512]	@ (8003b08 <HAL_RCC_OscConfig+0x4d4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7f      	ldr	r2, [pc, #508]	@ (8003b08 <HAL_RCC_OscConfig+0x4d4>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fe fc5d 	bl	80021d0 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fe fc59 	bl	80021d0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b64      	cmp	r3, #100	@ 0x64
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e12a      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392c:	4b76      	ldr	r3, [pc, #472]	@ (8003b08 <HAL_RCC_OscConfig+0x4d4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x31a>
 8003940:	4b70      	ldr	r3, [pc, #448]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003944:	4a6f      	ldr	r2, [pc, #444]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	@ 0x70
 800394c:	e02d      	b.n	80039aa <HAL_RCC_OscConfig+0x376>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x33c>
 8003956:	4b6b      	ldr	r3, [pc, #428]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395a:	4a6a      	ldr	r2, [pc, #424]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	@ 0x70
 8003962:	4b68      	ldr	r3, [pc, #416]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	4a67      	ldr	r2, [pc, #412]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	6713      	str	r3, [r2, #112]	@ 0x70
 800396e:	e01c      	b.n	80039aa <HAL_RCC_OscConfig+0x376>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d10c      	bne.n	8003992 <HAL_RCC_OscConfig+0x35e>
 8003978:	4b62      	ldr	r3, [pc, #392]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397c:	4a61      	ldr	r2, [pc, #388]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6713      	str	r3, [r2, #112]	@ 0x70
 8003984:	4b5f      	ldr	r3, [pc, #380]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003988:	4a5e      	ldr	r2, [pc, #376]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003990:	e00b      	b.n	80039aa <HAL_RCC_OscConfig+0x376>
 8003992:	4b5c      	ldr	r3, [pc, #368]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003996:	4a5b      	ldr	r2, [pc, #364]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	@ 0x70
 800399e:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	4a58      	ldr	r2, [pc, #352]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d015      	beq.n	80039de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7fe fc0d 	bl	80021d0 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fe fc09 	bl	80021d0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0d8      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ee      	beq.n	80039ba <HAL_RCC_OscConfig+0x386>
 80039dc:	e014      	b.n	8003a08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fe fbf7 	bl	80021d0 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fe fbf3 	bl	80021d0 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0c2      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ee      	bne.n	80039e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d105      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	4a3c      	ldr	r2, [pc, #240]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80ae 	beq.w	8003b80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a24:	4b37      	ldr	r3, [pc, #220]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d06d      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d14b      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a31      	ldr	r2, [pc, #196]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fbc4 	bl	80021d0 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fe fbc0 	bl	80021d0 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e091      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	3b01      	subs	r3, #1
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	491b      	ldr	r1, [pc, #108]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe fb92 	bl	80021d0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fe fb8e 	bl	80021d0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e05f      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac2:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x47c>
 8003ace:	e057      	b.n	8003b80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe fb78 	bl	80021d0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fe fb74 	bl	80021d0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e045      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x4b0>
 8003b02:	e03d      	b.n	8003b80 <HAL_RCC_OscConfig+0x54c>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003b8c <HAL_RCC_OscConfig+0x558>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d030      	beq.n	8003b7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d129      	bne.n	8003b7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d122      	bne.n	8003b7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d119      	bne.n	8003b7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	3b01      	subs	r3, #1
 8003b56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d10f      	bne.n	8003b7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d0      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d910      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b67      	ldr	r3, [pc, #412]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 020f 	bic.w	r2, r3, #15
 8003bbe:	4965      	ldr	r1, [pc, #404]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b63      	ldr	r3, [pc, #396]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b8      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c08:	4b53      	ldr	r3, [pc, #332]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b50      	ldr	r3, [pc, #320]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	494d      	ldr	r1, [pc, #308]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d040      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e073      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3d      	ldr	r3, [pc, #244]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06b      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b39      	ldr	r3, [pc, #228]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4936      	ldr	r1, [pc, #216]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c84:	f7fe faa4 	bl	80021d0 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fe faa0 	bl	80021d0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e053      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d210      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 020f 	bic.w	r2, r3, #15
 8003cca:	4922      	ldr	r1, [pc, #136]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e032      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4916      	ldr	r1, [pc, #88]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490e      	ldr	r1, [pc, #56]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d22:	f000 f821 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490a      	ldr	r1, [pc, #40]	@ (8003d5c <HAL_RCC_ClockConfig+0x1cc>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a09      	ldr	r2, [pc, #36]	@ (8003d60 <HAL_RCC_ClockConfig+0x1d0>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_ClockConfig+0x1d4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fa00 	bl	8002148 <HAL_InitTick>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023c00 	.word	0x40023c00
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08006c1c 	.word	0x08006c1c
 8003d60:	20000004 	.word	0x20000004
 8003d64:	20000008 	.word	0x20000008

08003d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d6c:	b094      	sub	sp, #80	@ 0x50
 8003d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d74:	2300      	movs	r3, #0
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d78:	2300      	movs	r3, #0
 8003d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d80:	4b79      	ldr	r3, [pc, #484]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d00d      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x40>
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	f200 80e1 	bhi.w	8003f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x34>
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d003      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d9a:	e0db      	b.n	8003f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b73      	ldr	r3, [pc, #460]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da0:	e0db      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003da2:	4b73      	ldr	r3, [pc, #460]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8003da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003da6:	e0d8      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003db2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d063      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	099b      	lsrs	r3, r3, #6
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	0159      	lsls	r1, r3, #5
 8003de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dec:	0150      	lsls	r0, r2, #5
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4621      	mov	r1, r4
 8003df4:	1a51      	subs	r1, r2, r1
 8003df6:	6139      	str	r1, [r7, #16]
 8003df8:	4629      	mov	r1, r5
 8003dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	018b      	lsls	r3, r1, #6
 8003e10:	4651      	mov	r1, sl
 8003e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e16:	4651      	mov	r1, sl
 8003e18:	018a      	lsls	r2, r1, #6
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003e20:	4659      	mov	r1, fp
 8003e22:	eb63 0901 	sbc.w	r9, r3, r1
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3a:	4690      	mov	r8, r2
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	eb18 0303 	adds.w	r3, r8, r3
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	462b      	mov	r3, r5
 8003e48:	eb49 0303 	adc.w	r3, r9, r3
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	024b      	lsls	r3, r1, #9
 8003e5e:	4621      	mov	r1, r4
 8003e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e64:	4621      	mov	r1, r4
 8003e66:	024a      	lsls	r2, r1, #9
 8003e68:	4610      	mov	r0, r2
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e6e:	2200      	movs	r2, #0
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e78:	f7fc f9de 	bl	8000238 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e84:	e058      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e86:	4b38      	ldr	r3, [pc, #224]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	4611      	mov	r1, r2
 8003e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e96:	623b      	str	r3, [r7, #32]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	0159      	lsls	r1, r3, #5
 8003eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb2:	0150      	lsls	r0, r2, #5
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4641      	mov	r1, r8
 8003eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8003edc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	00eb      	lsls	r3, r5, #3
 8003eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eee:	00e2      	lsls	r2, r4, #3
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	4643      	mov	r3, r8
 8003ef6:	18e3      	adds	r3, r4, r3
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	464b      	mov	r3, r9
 8003efc:	eb45 0303 	adc.w	r3, r5, r3
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f0e:	4629      	mov	r1, r5
 8003f10:	028b      	lsls	r3, r1, #10
 8003f12:	4621      	mov	r1, r4
 8003f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f18:	4621      	mov	r1, r4
 8003f1a:	028a      	lsls	r2, r1, #10
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f22:	2200      	movs	r2, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	61fa      	str	r2, [r7, #28]
 8003f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f2c:	f7fc f984 	bl	8000238 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4613      	mov	r3, r2
 8003f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f38:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	3301      	adds	r3, #1
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f52:	e002      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3750      	adds	r7, #80	@ 0x50
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	007a1200 	.word	0x007a1200

08003f74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0a9b      	lsrs	r3, r3, #10
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08006c2c 	.word	0x08006c2c

08003fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fb8:	f7ff ffdc 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0b5b      	lsrs	r3, r3, #13
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	@ (8003fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08006c2c 	.word	0x08006c2c

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d012      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004004:	4b69      	ldr	r3, [pc, #420]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a68      	ldr	r2, [pc, #416]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800400e:	6093      	str	r3, [r2, #8]
 8004010:	4b66      	ldr	r3, [pc, #408]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004018:	4964      	ldr	r1, [pc, #400]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d017      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004036:	4b5d      	ldr	r3, [pc, #372]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800403c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	4959      	ldr	r1, [pc, #356]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d017      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004072:	4b4e      	ldr	r3, [pc, #312]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004078:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	494a      	ldr	r1, [pc, #296]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800409e:	2301      	movs	r3, #1
 80040a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 808b 	beq.w	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c0:	4b3a      	ldr	r3, [pc, #232]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	4a39      	ldr	r2, [pc, #228]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80040cc:	4b37      	ldr	r3, [pc, #220]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040d8:	4b35      	ldr	r3, [pc, #212]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a34      	ldr	r2, [pc, #208]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e4:	f7fe f874 	bl	80021d0 <HAL_GetTick>
 80040e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ec:	f7fe f870 	bl	80021d0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	@ 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e38f      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040fe:	4b2c      	ldr	r3, [pc, #176]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800410a:	4b28      	ldr	r3, [pc, #160]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004112:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d035      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	429a      	cmp	r2, r3
 8004126:	d02e      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004128:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004130:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004132:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	4a1d      	ldr	r2, [pc, #116]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004142:	4a1a      	ldr	r2, [pc, #104]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004148:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800414a:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d114      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fe f838 	bl	80021d0 <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	e00a      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fe f834 	bl	80021d0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e351      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0ee      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004192:	d111      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041a0:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	4901      	ldr	r1, [pc, #4]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40007000 	.word	0x40007000
 80041b4:	0ffffcff 	.word	0x0ffffcff
 80041b8:	4bac      	ldr	r3, [pc, #688]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4aab      	ldr	r2, [pc, #684]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	4ba9      	ldr	r3, [pc, #676]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d0:	49a6      	ldr	r1, [pc, #664]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041e2:	4ba2      	ldr	r3, [pc, #648]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041e8:	4aa0      	ldr	r2, [pc, #640]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80041f2:	4b9e      	ldr	r3, [pc, #632]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fc:	499b      	ldr	r1, [pc, #620]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004210:	4b96      	ldr	r3, [pc, #600]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004216:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800421e:	4993      	ldr	r1, [pc, #588]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004232:	4b8e      	ldr	r3, [pc, #568]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004240:	498a      	ldr	r1, [pc, #552]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004254:	4b85      	ldr	r3, [pc, #532]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004262:	4982      	ldr	r1, [pc, #520]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004276:	4b7d      	ldr	r3, [pc, #500]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004284:	4979      	ldr	r1, [pc, #484]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004298:	4b74      	ldr	r3, [pc, #464]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	4971      	ldr	r1, [pc, #452]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ba:	4b6c      	ldr	r3, [pc, #432]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c0:	f023 020c 	bic.w	r2, r3, #12
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	4968      	ldr	r1, [pc, #416]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042dc:	4b63      	ldr	r3, [pc, #396]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	4960      	ldr	r1, [pc, #384]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042fe:	4b5b      	ldr	r3, [pc, #364]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004304:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430c:	4957      	ldr	r1, [pc, #348]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004320:	4b52      	ldr	r3, [pc, #328]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004326:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432e:	494f      	ldr	r1, [pc, #316]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004342:	4b4a      	ldr	r3, [pc, #296]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004348:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004350:	4946      	ldr	r1, [pc, #280]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004364:	4b41      	ldr	r3, [pc, #260]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004372:	493e      	ldr	r1, [pc, #248]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004386:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004394:	4935      	ldr	r1, [pc, #212]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043a8:	4b30      	ldr	r3, [pc, #192]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b6:	492d      	ldr	r1, [pc, #180]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d011      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043ca:	4b28      	ldr	r3, [pc, #160]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d8:	4924      	ldr	r1, [pc, #144]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043e8:	d101      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b18      	ldr	r3, [pc, #96]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004410:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004418:	4914      	ldr	r1, [pc, #80]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800442c:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800443c:	490b      	ldr	r1, [pc, #44]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00f      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004450:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004456:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	4902      	ldr	r1, [pc, #8]	@ (800446c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004468:	e002      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447c:	4b8a      	ldr	r3, [pc, #552]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004482:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	4986      	ldr	r1, [pc, #536]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044a0:	4b81      	ldr	r3, [pc, #516]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b0:	497d      	ldr	r1, [pc, #500]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d006      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80d6 	beq.w	8004678 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044cc:	4b76      	ldr	r3, [pc, #472]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a75      	ldr	r2, [pc, #468]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d8:	f7fd fe7a 	bl	80021d0 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044e0:	f7fd fe76 	bl	80021d0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	@ 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e195      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f2:	4b6d      	ldr	r3, [pc, #436]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d021      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11d      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004512:	4b65      	ldr	r3, [pc, #404]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004520:	4b61      	ldr	r3, [pc, #388]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004526:	0e1b      	lsrs	r3, r3, #24
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	019a      	lsls	r2, r3, #6
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	071b      	lsls	r3, r3, #28
 8004546:	4958      	ldr	r1, [pc, #352]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004578:	d129      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800457a:	4b4b      	ldr	r3, [pc, #300]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004588:	4b47      	ldr	r3, [pc, #284]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800458e:	0f1b      	lsrs	r3, r3, #28
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	019a      	lsls	r2, r3, #6
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	431a      	orrs	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	071b      	lsls	r3, r3, #28
 80045ae:	493e      	ldr	r1, [pc, #248]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045b6:	4b3c      	ldr	r3, [pc, #240]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045bc:	f023 021f 	bic.w	r2, r3, #31
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	3b01      	subs	r3, #1
 80045c6:	4938      	ldr	r1, [pc, #224]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01d      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045da:	4b33      	ldr	r3, [pc, #204]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e0:	0e1b      	lsrs	r3, r3, #24
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045e8:	4b2f      	ldr	r3, [pc, #188]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ee:	0f1b      	lsrs	r3, r3, #28
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	019a      	lsls	r2, r3, #6
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	061b      	lsls	r3, r3, #24
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	071b      	lsls	r3, r3, #28
 800460e:	4926      	ldr	r1, [pc, #152]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	019a      	lsls	r2, r3, #6
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	041b      	lsls	r3, r3, #16
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	491a      	ldr	r1, [pc, #104]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004646:	4b18      	ldr	r3, [pc, #96]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a17      	ldr	r2, [pc, #92]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004652:	f7fd fdbd 	bl	80021d0 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800465a:	f7fd fdb9 	bl	80021d0 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	@ 0x64
 8004666:	d901      	bls.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0d8      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 80ce 	bne.w	800481c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004680:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a08      	ldr	r2, [pc, #32]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800468a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468c:	f7fd fda0 	bl	80021d0 <HAL_GetTick>
 8004690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004692:	e00b      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004694:	f7fd fd9c 	bl	80021d0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	@ 0x64
 80046a0:	d904      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0bb      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046b8:	d0ec      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02e      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d12a      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046e2:	4b51      	ldr	r3, [pc, #324]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	0f1b      	lsrs	r3, r3, #28
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	019a      	lsls	r2, r3, #6
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	071b      	lsls	r3, r3, #28
 8004716:	4944      	ldr	r1, [pc, #272]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800471e:	4b42      	ldr	r3, [pc, #264]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004724:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	493d      	ldr	r1, [pc, #244]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d022      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800474c:	d11d      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800474e:	4b36      	ldr	r3, [pc, #216]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	0e1b      	lsrs	r3, r3, #24
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800475c:	4b32      	ldr	r3, [pc, #200]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	0f1b      	lsrs	r3, r3, #28
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	019a      	lsls	r2, r3, #6
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	431a      	orrs	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	061b      	lsls	r3, r3, #24
 800477c:	431a      	orrs	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	4929      	ldr	r1, [pc, #164]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d028      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	0e1b      	lsrs	r3, r3, #24
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047a4:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	019a      	lsls	r2, r3, #6
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	431a      	orrs	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	4917      	ldr	r1, [pc, #92]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4911      	ldr	r1, [pc, #68]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f4:	f7fd fcec 	bl	80021d0 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047fc:	f7fd fce8 	bl	80021d0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b64      	cmp	r3, #100	@ 0x64
 8004808:	d901      	bls.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e007      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800481a:	d1ef      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e09d      	b.n	800497a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484e:	d009      	beq.n	8004864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
 8004856:	e005      	b.n	8004864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fc ff6c 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800489a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048a4:	d902      	bls.n	80048ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e002      	b.n	80048b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Init+0xa0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490e:	ea42 0103 	orr.w	r1, r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004916:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	f003 0204 	and.w	r2, r3, #4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004948:	ea42 0103 	orr.w	r1, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e049      	b.n	8004a28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fc ff57 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f000 fe2d 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e049      	b.n	8004ad6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f841 	bl	8004ade <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fdd6 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e049      	b.n	8004b98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f841 	bl	8004ba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 fd75 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e049      	b.n	8004c5a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f841 	bl	8004c62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fd14 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e08f      	b.n	8004dac <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fc feb9 	bl	8001a18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6899      	ldr	r1, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004db4 <HAL_TIM_Encoder_Init+0x13c>)
 8004cba:	400b      	ands	r3, r1
 8004cbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fca9 	bl	8005620 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <HAL_TIM_Encoder_Init+0x140>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	4313      	orrs	r3, r2
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dbc <HAL_TIM_Encoder_Init+0x144>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc0 <HAL_TIM_Encoder_Init+0x148>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	4313      	orrs	r3, r2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	011a      	lsls	r2, r3, #4
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	031b      	lsls	r3, r3, #12
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	fffebff8 	.word	0xfffebff8
 8004db8:	fffffcfc 	.word	0xfffffcfc
 8004dbc:	fffff3f3 	.word	0xfffff3f3
 8004dc0:	ffff0f0f 	.word	0xffff0f0f

08004dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0202 	mvn.w	r2, #2
 8004df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fbe8 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fbda 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fbeb 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0204 	mvn.w	r2, #4
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fbc2 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fbb4 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fbc5 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0208 	mvn.w	r2, #8
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2204      	movs	r2, #4
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb9c 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fb8e 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fb9f 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0210 	mvn.w	r2, #16
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fb76 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fb68 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb79 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0201 	mvn.w	r2, #1
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fb46 	bl	80055bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 f945 	bl	80061e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 f93d 	bl	80061fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fb33 	bl	800560c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f06f 0220 	mvn.w	r2, #32
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 f905 	bl	80061d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e066      	b.n	80050c0 <HAL_TIM_OC_ConfigChannel+0xec>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b14      	cmp	r3, #20
 8004ffe:	d857      	bhi.n	80050b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005000:	a201      	add	r2, pc, #4	@ (adr r2, 8005008 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800505d 	.word	0x0800505d
 800500c:	080050b1 	.word	0x080050b1
 8005010:	080050b1 	.word	0x080050b1
 8005014:	080050b1 	.word	0x080050b1
 8005018:	0800506b 	.word	0x0800506b
 800501c:	080050b1 	.word	0x080050b1
 8005020:	080050b1 	.word	0x080050b1
 8005024:	080050b1 	.word	0x080050b1
 8005028:	08005079 	.word	0x08005079
 800502c:	080050b1 	.word	0x080050b1
 8005030:	080050b1 	.word	0x080050b1
 8005034:	080050b1 	.word	0x080050b1
 8005038:	08005087 	.word	0x08005087
 800503c:	080050b1 	.word	0x080050b1
 8005040:	080050b1 	.word	0x080050b1
 8005044:	080050b1 	.word	0x080050b1
 8005048:	08005095 	.word	0x08005095
 800504c:	080050b1 	.word	0x080050b1
 8005050:	080050b1 	.word	0x080050b1
 8005054:	080050b1 	.word	0x080050b1
 8005058:	080050a3 	.word	0x080050a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fb88 	bl	8005778 <TIM_OC1_SetConfig>
      break;
 8005068:	e025      	b.n	80050b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fbf3 	bl	800585c <TIM_OC2_SetConfig>
      break;
 8005076:	e01e      	b.n	80050b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fc64 	bl	800594c <TIM_OC3_SetConfig>
      break;
 8005084:	e017      	b.n	80050b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fcd3 	bl	8005a38 <TIM_OC4_SetConfig>
      break;
 8005092:	e010      	b.n	80050b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fd24 	bl	8005ae8 <TIM_OC5_SetConfig>
      break;
 80050a0:	e009      	b.n	80050b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fd6f 	bl	8005b8c <TIM_OC6_SetConfig>
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75fb      	strb	r3, [r7, #23]
      break;
 80050b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050be:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e088      	b.n	80051f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005104:	f000 fd96 	bl	8005c34 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020c 	bic.w	r2, r2, #12
 8005116:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6999      	ldr	r1, [r3, #24]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	619a      	str	r2, [r3, #24]
 800512a:	e060      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d11c      	bne.n	800516c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005142:	f000 fe1a 	bl	8005d7a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005154:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6999      	ldr	r1, [r3, #24]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	021a      	lsls	r2, r3, #8
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	619a      	str	r2, [r3, #24]
 800516a:	e040      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b08      	cmp	r3, #8
 8005170:	d11b      	bne.n	80051aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005182:	f000 fe67 	bl	8005e54 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 020c 	bic.w	r2, r2, #12
 8005194:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69d9      	ldr	r1, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	61da      	str	r2, [r3, #28]
 80051a8:	e021      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d11c      	bne.n	80051ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051c0:	f000 fe84 	bl	8005ecc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69d9      	ldr	r1, [r3, #28]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	61da      	str	r2, [r3, #28]
 80051e8:	e001      	b.n	80051ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800521a:	2302      	movs	r3, #2
 800521c:	e0ff      	b.n	800541e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b14      	cmp	r3, #20
 800522a:	f200 80f0 	bhi.w	800540e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005289 	.word	0x08005289
 8005238:	0800540f 	.word	0x0800540f
 800523c:	0800540f 	.word	0x0800540f
 8005240:	0800540f 	.word	0x0800540f
 8005244:	080052c9 	.word	0x080052c9
 8005248:	0800540f 	.word	0x0800540f
 800524c:	0800540f 	.word	0x0800540f
 8005250:	0800540f 	.word	0x0800540f
 8005254:	0800530b 	.word	0x0800530b
 8005258:	0800540f 	.word	0x0800540f
 800525c:	0800540f 	.word	0x0800540f
 8005260:	0800540f 	.word	0x0800540f
 8005264:	0800534b 	.word	0x0800534b
 8005268:	0800540f 	.word	0x0800540f
 800526c:	0800540f 	.word	0x0800540f
 8005270:	0800540f 	.word	0x0800540f
 8005274:	0800538d 	.word	0x0800538d
 8005278:	0800540f 	.word	0x0800540f
 800527c:	0800540f 	.word	0x0800540f
 8005280:	0800540f 	.word	0x0800540f
 8005284:	080053cd 	.word	0x080053cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fa72 	bl	8005778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0208 	orr.w	r2, r2, #8
 80052a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0204 	bic.w	r2, r2, #4
 80052b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6999      	ldr	r1, [r3, #24]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	619a      	str	r2, [r3, #24]
      break;
 80052c6:	e0a5      	b.n	8005414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fac4 	bl	800585c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6999      	ldr	r1, [r3, #24]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	619a      	str	r2, [r3, #24]
      break;
 8005308:	e084      	b.n	8005414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fb1b 	bl	800594c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0208 	orr.w	r2, r2, #8
 8005324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0204 	bic.w	r2, r2, #4
 8005334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69d9      	ldr	r1, [r3, #28]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	61da      	str	r2, [r3, #28]
      break;
 8005348:	e064      	b.n	8005414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fb71 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69d9      	ldr	r1, [r3, #28]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	021a      	lsls	r2, r3, #8
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	61da      	str	r2, [r3, #28]
      break;
 800538a:	e043      	b.n	8005414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fba8 	bl	8005ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053ca:	e023      	b.n	8005414 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fbda 	bl	8005b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800540c:	e002      	b.n	8005414 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	75fb      	strb	r3, [r7, #23]
      break;
 8005412:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b4      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x186>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	4b56      	ldr	r3, [pc, #344]	@ (80055b8 <HAL_TIM_ConfigClockSource+0x190>)
 8005460:	4013      	ands	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800546a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800547c:	d03e      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0xd4>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005482:	f200 8087 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548a:	f000 8086 	beq.w	800559a <HAL_TIM_ConfigClockSource+0x172>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005492:	d87f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b70      	cmp	r3, #112	@ 0x70
 8005496:	d01a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0xa6>
 8005498:	2b70      	cmp	r3, #112	@ 0x70
 800549a:	d87b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b60      	cmp	r3, #96	@ 0x60
 800549e:	d050      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x11a>
 80054a0:	2b60      	cmp	r3, #96	@ 0x60
 80054a2:	d877      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b50      	cmp	r3, #80	@ 0x50
 80054a6:	d03c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0xfa>
 80054a8:	2b50      	cmp	r3, #80	@ 0x50
 80054aa:	d873      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b40      	cmp	r3, #64	@ 0x40
 80054ae:	d058      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x13a>
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d86f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b30      	cmp	r3, #48	@ 0x30
 80054b6:	d064      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	2b30      	cmp	r3, #48	@ 0x30
 80054ba:	d86b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d060      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d867      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d05a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	e062      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054de:	f000 fd4d 	bl	8005f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
      break;
 80054fa:	e04f      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	f000 fd36 	bl	8005f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800551e:	609a      	str	r2, [r3, #8]
      break;
 8005520:	e03c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fbf4 	bl	8005d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2150      	movs	r1, #80	@ 0x50
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fd03 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005540:	e02c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	461a      	mov	r2, r3
 8005550:	f000 fc50 	bl	8005df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2160      	movs	r1, #96	@ 0x60
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fcf3 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005560:	e01c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fbd4 	bl	8005d1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2140      	movs	r1, #64	@ 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fce3 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005580:	e00c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f000 fcda 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005592:	e003      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e000      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800559a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	fffeff88 	.word	0xfffeff88

080055bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a46      	ldr	r2, [pc, #280]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d00f      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a43      	ldr	r2, [pc, #268]	@ (8005750 <TIM_Base_SetConfig+0x130>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a42      	ldr	r2, [pc, #264]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a41      	ldr	r2, [pc, #260]	@ (8005758 <TIM_Base_SetConfig+0x138>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a40      	ldr	r2, [pc, #256]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a35      	ldr	r2, [pc, #212]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d02b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d027      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <TIM_Base_SetConfig+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d023      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a31      	ldr	r2, [pc, #196]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01f      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a30      	ldr	r2, [pc, #192]	@ (8005758 <TIM_Base_SetConfig+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2f      	ldr	r2, [pc, #188]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d017      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005760 <TIM_Base_SetConfig+0x140>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005764 <TIM_Base_SetConfig+0x144>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <TIM_Base_SetConfig+0x148>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2b      	ldr	r2, [pc, #172]	@ (800576c <TIM_Base_SetConfig+0x14c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <TIM_Base_SetConfig+0x150>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <TIM_Base_SetConfig+0x154>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a10      	ldr	r2, [pc, #64]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a12      	ldr	r2, [pc, #72]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d103      	bne.n	8005720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]
  }
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	40001800 	.word	0x40001800
 8005770:	40001c00 	.word	0x40001c00
 8005774:	40002000 	.word	0x40002000

08005778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0201 	bic.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005850 <TIM_OC1_SetConfig+0xd8>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0302 	bic.w	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <TIM_OC1_SetConfig+0xdc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC1_SetConfig+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a20      	ldr	r2, [pc, #128]	@ (8005858 <TIM_OC1_SetConfig+0xe0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0308 	bic.w	r3, r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a16      	ldr	r2, [pc, #88]	@ (8005854 <TIM_OC1_SetConfig+0xdc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC1_SetConfig+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <TIM_OC1_SetConfig+0xe0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	fffeff8f 	.word	0xfffeff8f
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f023 0210 	bic.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4b2e      	ldr	r3, [pc, #184]	@ (8005940 <TIM_OC2_SetConfig+0xe4>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0320 	bic.w	r3, r3, #32
 80058a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a23      	ldr	r2, [pc, #140]	@ (8005944 <TIM_OC2_SetConfig+0xe8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_OC2_SetConfig+0x68>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a22      	ldr	r2, [pc, #136]	@ (8005948 <TIM_OC2_SetConfig+0xec>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10d      	bne.n	80058e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a18      	ldr	r2, [pc, #96]	@ (8005944 <TIM_OC2_SetConfig+0xe8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_OC2_SetConfig+0x94>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a17      	ldr	r2, [pc, #92]	@ (8005948 <TIM_OC2_SetConfig+0xec>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d113      	bne.n	8005918 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	feff8fff 	.word	0xfeff8fff
 8005944:	40010000 	.word	0x40010000
 8005948:	40010400 	.word	0x40010400

0800594c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4b2d      	ldr	r3, [pc, #180]	@ (8005a2c <TIM_OC3_SetConfig+0xe0>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a22      	ldr	r2, [pc, #136]	@ (8005a30 <TIM_OC3_SetConfig+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_OC3_SetConfig+0x66>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a21      	ldr	r2, [pc, #132]	@ (8005a34 <TIM_OC3_SetConfig+0xe8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10d      	bne.n	80059ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a17      	ldr	r2, [pc, #92]	@ (8005a30 <TIM_OC3_SetConfig+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC3_SetConfig+0x92>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a16      	ldr	r2, [pc, #88]	@ (8005a34 <TIM_OC3_SetConfig+0xe8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d113      	bne.n	8005a06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	fffeff8f 	.word	0xfffeff8f
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4b1e      	ldr	r3, [pc, #120]	@ (8005adc <TIM_OC4_SetConfig+0xa4>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a13      	ldr	r2, [pc, #76]	@ (8005ae0 <TIM_OC4_SetConfig+0xa8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC4_SetConfig+0x68>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ae4 <TIM_OC4_SetConfig+0xac>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	feff8fff 	.word	0xfeff8fff
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400

08005ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <TIM_OC5_SetConfig+0x98>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a12      	ldr	r2, [pc, #72]	@ (8005b84 <TIM_OC5_SetConfig+0x9c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC5_SetConfig+0x5e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a11      	ldr	r2, [pc, #68]	@ (8005b88 <TIM_OC5_SetConfig+0xa0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d109      	bne.n	8005b5a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	fffeff8f 	.word	0xfffeff8f
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c28 <TIM_OC6_SetConfig+0x9c>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	051b      	lsls	r3, r3, #20
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <TIM_OC6_SetConfig+0xa0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC6_SetConfig+0x60>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	@ (8005c30 <TIM_OC6_SetConfig+0xa4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d109      	bne.n	8005c00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	feff8fff 	.word	0xfeff8fff
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f023 0201 	bic.w	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a28      	ldr	r2, [pc, #160]	@ (8005d00 <TIM_TI1_SetConfig+0xcc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c68:	d017      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	@ (8005d04 <TIM_TI1_SetConfig+0xd0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a24      	ldr	r2, [pc, #144]	@ (8005d08 <TIM_TI1_SetConfig+0xd4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	@ (8005d0c <TIM_TI1_SetConfig+0xd8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <TIM_TI1_SetConfig+0xdc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a21      	ldr	r2, [pc, #132]	@ (8005d14 <TIM_TI1_SetConfig+0xe0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_TI1_SetConfig+0x66>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a20      	ldr	r2, [pc, #128]	@ (8005d18 <TIM_TI1_SetConfig+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d101      	bne.n	8005c9e <TIM_TI1_SetConfig+0x6a>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <TIM_TI1_SetConfig+0x6c>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e003      	b.n	8005cbe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f003 030a 	and.w	r3, r3, #10
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0201 	bic.w	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 030a 	bic.w	r3, r3, #10
 8005d58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0210 	bic.w	r2, r3, #16
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f023 0210 	bic.w	r2, r3, #16
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	031b      	lsls	r3, r3, #12
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f023 0303 	bic.w	r3, r3, #3
 8005e80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	031b      	lsls	r3, r3, #12
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	031b      	lsls	r3, r3, #12
 8005f24:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0307 	orr.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e06d      	b.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a30      	ldr	r2, [pc, #192]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2f      	ldr	r2, [pc, #188]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d108      	bne.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800600e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a20      	ldr	r2, [pc, #128]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006046:	d01d      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1d      	ldr	r2, [pc, #116]	@ (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1c      	ldr	r2, [pc, #112]	@ (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1a      	ldr	r2, [pc, #104]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a16      	ldr	r2, [pc, #88]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d10c      	bne.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800608a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	4313      	orrs	r3, r2
 8006094:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40001800 	.word	0x40001800

080060d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e065      	b.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a14      	ldr	r2, [pc, #80]	@ (80061d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d115      	bne.n	80061ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	051b      	lsls	r3, r3, #20
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40010400 	.word	0x40010400

080061d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e040      	b.n	80062a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fb fd0e 	bl	8001c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2224      	movs	r2, #36	@ 0x24
 800623c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fa8c 	bl	8006774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f825 	bl	80062ac <UART_SetConfig>
 8006262:	4603      	mov	r3, r0
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e01b      	b.n	80062a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800627a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800628a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fb0b 	bl	80068b8 <UART_CheckIdleState>
 80062a2:	4603      	mov	r3, r0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4ba6      	ldr	r3, [pc, #664]	@ (8006570 <UART_SetConfig+0x2c4>)
 80062d8:	4013      	ands	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	430a      	orrs	r2, r1
 800631c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a94      	ldr	r2, [pc, #592]	@ (8006574 <UART_SetConfig+0x2c8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d120      	bne.n	800636a <UART_SetConfig+0xbe>
 8006328:	4b93      	ldr	r3, [pc, #588]	@ (8006578 <UART_SetConfig+0x2cc>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b03      	cmp	r3, #3
 8006334:	d816      	bhi.n	8006364 <UART_SetConfig+0xb8>
 8006336:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <UART_SetConfig+0x90>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006359 	.word	0x08006359
 8006344:	08006353 	.word	0x08006353
 8006348:	0800635f 	.word	0x0800635f
 800634c:	2301      	movs	r3, #1
 800634e:	77fb      	strb	r3, [r7, #31]
 8006350:	e150      	b.n	80065f4 <UART_SetConfig+0x348>
 8006352:	2302      	movs	r3, #2
 8006354:	77fb      	strb	r3, [r7, #31]
 8006356:	e14d      	b.n	80065f4 <UART_SetConfig+0x348>
 8006358:	2304      	movs	r3, #4
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e14a      	b.n	80065f4 <UART_SetConfig+0x348>
 800635e:	2308      	movs	r3, #8
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e147      	b.n	80065f4 <UART_SetConfig+0x348>
 8006364:	2310      	movs	r3, #16
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e144      	b.n	80065f4 <UART_SetConfig+0x348>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a83      	ldr	r2, [pc, #524]	@ (800657c <UART_SetConfig+0x2d0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d132      	bne.n	80063da <UART_SetConfig+0x12e>
 8006374:	4b80      	ldr	r3, [pc, #512]	@ (8006578 <UART_SetConfig+0x2cc>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d828      	bhi.n	80063d4 <UART_SetConfig+0x128>
 8006382:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <UART_SetConfig+0xdc>)
 8006384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063d5 	.word	0x080063d5
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063c9 	.word	0x080063c9
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063d5 	.word	0x080063d5
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063c3 	.word	0x080063c3
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063cf 	.word	0x080063cf
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e118      	b.n	80065f4 <UART_SetConfig+0x348>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e115      	b.n	80065f4 <UART_SetConfig+0x348>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e112      	b.n	80065f4 <UART_SetConfig+0x348>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e10f      	b.n	80065f4 <UART_SetConfig+0x348>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e10c      	b.n	80065f4 <UART_SetConfig+0x348>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a68      	ldr	r2, [pc, #416]	@ (8006580 <UART_SetConfig+0x2d4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d120      	bne.n	8006426 <UART_SetConfig+0x17a>
 80063e4:	4b64      	ldr	r3, [pc, #400]	@ (8006578 <UART_SetConfig+0x2cc>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063ee:	2b30      	cmp	r3, #48	@ 0x30
 80063f0:	d013      	beq.n	800641a <UART_SetConfig+0x16e>
 80063f2:	2b30      	cmp	r3, #48	@ 0x30
 80063f4:	d814      	bhi.n	8006420 <UART_SetConfig+0x174>
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d009      	beq.n	800640e <UART_SetConfig+0x162>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	d810      	bhi.n	8006420 <UART_SetConfig+0x174>
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <UART_SetConfig+0x15c>
 8006402:	2b10      	cmp	r3, #16
 8006404:	d006      	beq.n	8006414 <UART_SetConfig+0x168>
 8006406:	e00b      	b.n	8006420 <UART_SetConfig+0x174>
 8006408:	2300      	movs	r3, #0
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e0f2      	b.n	80065f4 <UART_SetConfig+0x348>
 800640e:	2302      	movs	r3, #2
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e0ef      	b.n	80065f4 <UART_SetConfig+0x348>
 8006414:	2304      	movs	r3, #4
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e0ec      	b.n	80065f4 <UART_SetConfig+0x348>
 800641a:	2308      	movs	r3, #8
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e0e9      	b.n	80065f4 <UART_SetConfig+0x348>
 8006420:	2310      	movs	r3, #16
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e0e6      	b.n	80065f4 <UART_SetConfig+0x348>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a56      	ldr	r2, [pc, #344]	@ (8006584 <UART_SetConfig+0x2d8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d120      	bne.n	8006472 <UART_SetConfig+0x1c6>
 8006430:	4b51      	ldr	r3, [pc, #324]	@ (8006578 <UART_SetConfig+0x2cc>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800643a:	2bc0      	cmp	r3, #192	@ 0xc0
 800643c:	d013      	beq.n	8006466 <UART_SetConfig+0x1ba>
 800643e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006440:	d814      	bhi.n	800646c <UART_SetConfig+0x1c0>
 8006442:	2b80      	cmp	r3, #128	@ 0x80
 8006444:	d009      	beq.n	800645a <UART_SetConfig+0x1ae>
 8006446:	2b80      	cmp	r3, #128	@ 0x80
 8006448:	d810      	bhi.n	800646c <UART_SetConfig+0x1c0>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <UART_SetConfig+0x1a8>
 800644e:	2b40      	cmp	r3, #64	@ 0x40
 8006450:	d006      	beq.n	8006460 <UART_SetConfig+0x1b4>
 8006452:	e00b      	b.n	800646c <UART_SetConfig+0x1c0>
 8006454:	2300      	movs	r3, #0
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e0cc      	b.n	80065f4 <UART_SetConfig+0x348>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e0c9      	b.n	80065f4 <UART_SetConfig+0x348>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e0c6      	b.n	80065f4 <UART_SetConfig+0x348>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e0c3      	b.n	80065f4 <UART_SetConfig+0x348>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e0c0      	b.n	80065f4 <UART_SetConfig+0x348>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a44      	ldr	r2, [pc, #272]	@ (8006588 <UART_SetConfig+0x2dc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d125      	bne.n	80064c8 <UART_SetConfig+0x21c>
 800647c:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <UART_SetConfig+0x2cc>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800648a:	d017      	beq.n	80064bc <UART_SetConfig+0x210>
 800648c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006490:	d817      	bhi.n	80064c2 <UART_SetConfig+0x216>
 8006492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006496:	d00b      	beq.n	80064b0 <UART_SetConfig+0x204>
 8006498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649c:	d811      	bhi.n	80064c2 <UART_SetConfig+0x216>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <UART_SetConfig+0x1fe>
 80064a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a6:	d006      	beq.n	80064b6 <UART_SetConfig+0x20a>
 80064a8:	e00b      	b.n	80064c2 <UART_SetConfig+0x216>
 80064aa:	2300      	movs	r3, #0
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e0a1      	b.n	80065f4 <UART_SetConfig+0x348>
 80064b0:	2302      	movs	r3, #2
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e09e      	b.n	80065f4 <UART_SetConfig+0x348>
 80064b6:	2304      	movs	r3, #4
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e09b      	b.n	80065f4 <UART_SetConfig+0x348>
 80064bc:	2308      	movs	r3, #8
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e098      	b.n	80065f4 <UART_SetConfig+0x348>
 80064c2:	2310      	movs	r3, #16
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e095      	b.n	80065f4 <UART_SetConfig+0x348>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2f      	ldr	r2, [pc, #188]	@ (800658c <UART_SetConfig+0x2e0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d125      	bne.n	800651e <UART_SetConfig+0x272>
 80064d2:	4b29      	ldr	r3, [pc, #164]	@ (8006578 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e0:	d017      	beq.n	8006512 <UART_SetConfig+0x266>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e6:	d817      	bhi.n	8006518 <UART_SetConfig+0x26c>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ec:	d00b      	beq.n	8006506 <UART_SetConfig+0x25a>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f2:	d811      	bhi.n	8006518 <UART_SetConfig+0x26c>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x254>
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fc:	d006      	beq.n	800650c <UART_SetConfig+0x260>
 80064fe:	e00b      	b.n	8006518 <UART_SetConfig+0x26c>
 8006500:	2301      	movs	r3, #1
 8006502:	77fb      	strb	r3, [r7, #31]
 8006504:	e076      	b.n	80065f4 <UART_SetConfig+0x348>
 8006506:	2302      	movs	r3, #2
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e073      	b.n	80065f4 <UART_SetConfig+0x348>
 800650c:	2304      	movs	r3, #4
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e070      	b.n	80065f4 <UART_SetConfig+0x348>
 8006512:	2308      	movs	r3, #8
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e06d      	b.n	80065f4 <UART_SetConfig+0x348>
 8006518:	2310      	movs	r3, #16
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e06a      	b.n	80065f4 <UART_SetConfig+0x348>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a1b      	ldr	r2, [pc, #108]	@ (8006590 <UART_SetConfig+0x2e4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d138      	bne.n	800659a <UART_SetConfig+0x2ee>
 8006528:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <UART_SetConfig+0x2cc>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006532:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006536:	d017      	beq.n	8006568 <UART_SetConfig+0x2bc>
 8006538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800653c:	d82a      	bhi.n	8006594 <UART_SetConfig+0x2e8>
 800653e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006542:	d00b      	beq.n	800655c <UART_SetConfig+0x2b0>
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006548:	d824      	bhi.n	8006594 <UART_SetConfig+0x2e8>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <UART_SetConfig+0x2aa>
 800654e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006552:	d006      	beq.n	8006562 <UART_SetConfig+0x2b6>
 8006554:	e01e      	b.n	8006594 <UART_SetConfig+0x2e8>
 8006556:	2300      	movs	r3, #0
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e04b      	b.n	80065f4 <UART_SetConfig+0x348>
 800655c:	2302      	movs	r3, #2
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e048      	b.n	80065f4 <UART_SetConfig+0x348>
 8006562:	2304      	movs	r3, #4
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e045      	b.n	80065f4 <UART_SetConfig+0x348>
 8006568:	2308      	movs	r3, #8
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e042      	b.n	80065f4 <UART_SetConfig+0x348>
 800656e:	bf00      	nop
 8006570:	efff69f3 	.word	0xefff69f3
 8006574:	40011000 	.word	0x40011000
 8006578:	40023800 	.word	0x40023800
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	40004c00 	.word	0x40004c00
 8006588:	40005000 	.word	0x40005000
 800658c:	40011400 	.word	0x40011400
 8006590:	40007800 	.word	0x40007800
 8006594:	2310      	movs	r3, #16
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e02c      	b.n	80065f4 <UART_SetConfig+0x348>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a72      	ldr	r2, [pc, #456]	@ (8006768 <UART_SetConfig+0x4bc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d125      	bne.n	80065f0 <UART_SetConfig+0x344>
 80065a4:	4b71      	ldr	r3, [pc, #452]	@ (800676c <UART_SetConfig+0x4c0>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80065ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065b2:	d017      	beq.n	80065e4 <UART_SetConfig+0x338>
 80065b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065b8:	d817      	bhi.n	80065ea <UART_SetConfig+0x33e>
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065be:	d00b      	beq.n	80065d8 <UART_SetConfig+0x32c>
 80065c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c4:	d811      	bhi.n	80065ea <UART_SetConfig+0x33e>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <UART_SetConfig+0x326>
 80065ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ce:	d006      	beq.n	80065de <UART_SetConfig+0x332>
 80065d0:	e00b      	b.n	80065ea <UART_SetConfig+0x33e>
 80065d2:	2300      	movs	r3, #0
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e00d      	b.n	80065f4 <UART_SetConfig+0x348>
 80065d8:	2302      	movs	r3, #2
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e00a      	b.n	80065f4 <UART_SetConfig+0x348>
 80065de:	2304      	movs	r3, #4
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e007      	b.n	80065f4 <UART_SetConfig+0x348>
 80065e4:	2308      	movs	r3, #8
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e004      	b.n	80065f4 <UART_SetConfig+0x348>
 80065ea:	2310      	movs	r3, #16
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e001      	b.n	80065f4 <UART_SetConfig+0x348>
 80065f0:	2310      	movs	r3, #16
 80065f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065fc:	d15b      	bne.n	80066b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d828      	bhi.n	8006656 <UART_SetConfig+0x3aa>
 8006604:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <UART_SetConfig+0x360>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006631 	.word	0x08006631
 8006610:	08006639 	.word	0x08006639
 8006614:	08006641 	.word	0x08006641
 8006618:	08006657 	.word	0x08006657
 800661c:	08006647 	.word	0x08006647
 8006620:	08006657 	.word	0x08006657
 8006624:	08006657 	.word	0x08006657
 8006628:	08006657 	.word	0x08006657
 800662c:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fd fcac 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8006634:	61b8      	str	r0, [r7, #24]
        break;
 8006636:	e013      	b.n	8006660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fd fcbc 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 800663c:	61b8      	str	r0, [r7, #24]
        break;
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b4b      	ldr	r3, [pc, #300]	@ (8006770 <UART_SetConfig+0x4c4>)
 8006642:	61bb      	str	r3, [r7, #24]
        break;
 8006644:	e00c      	b.n	8006660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fd fb8f 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 800664a:	61b8      	str	r0, [r7, #24]
        break;
 800664c:	e008      	b.n	8006660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e004      	b.n	8006660 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77bb      	strb	r3, [r7, #30]
        break;
 800665e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d074      	beq.n	8006750 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	005a      	lsls	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	441a      	add	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b0f      	cmp	r3, #15
 8006680:	d916      	bls.n	80066b0 <UART_SetConfig+0x404>
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d212      	bcs.n	80066b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f023 030f 	bic.w	r3, r3, #15
 8006692:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	b29b      	uxth	r3, r3
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	b29a      	uxth	r2, r3
 80066a0:	89fb      	ldrh	r3, [r7, #14]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	89fa      	ldrh	r2, [r7, #14]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	e04f      	b.n	8006750 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	77bb      	strb	r3, [r7, #30]
 80066b4:	e04c      	b.n	8006750 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b6:	7ffb      	ldrb	r3, [r7, #31]
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d828      	bhi.n	800670e <UART_SetConfig+0x462>
 80066bc:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <UART_SetConfig+0x418>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066e9 	.word	0x080066e9
 80066c8:	080066f1 	.word	0x080066f1
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	0800670f 	.word	0x0800670f
 80066d4:	080066ff 	.word	0x080066ff
 80066d8:	0800670f 	.word	0x0800670f
 80066dc:	0800670f 	.word	0x0800670f
 80066e0:	0800670f 	.word	0x0800670f
 80066e4:	08006707 	.word	0x08006707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e8:	f7fd fc50 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 80066ec:	61b8      	str	r0, [r7, #24]
        break;
 80066ee:	e013      	b.n	8006718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f0:	f7fd fc60 	bl	8003fb4 <HAL_RCC_GetPCLK2Freq>
 80066f4:	61b8      	str	r0, [r7, #24]
        break;
 80066f6:	e00f      	b.n	8006718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006770 <UART_SetConfig+0x4c4>)
 80066fa:	61bb      	str	r3, [r7, #24]
        break;
 80066fc:	e00c      	b.n	8006718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fe:	f7fd fb33 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8006702:	61b8      	str	r0, [r7, #24]
        break;
 8006704:	e008      	b.n	8006718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670a:	61bb      	str	r3, [r7, #24]
        break;
 800670c:	e004      	b.n	8006718 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	77bb      	strb	r3, [r7, #30]
        break;
 8006716:	bf00      	nop
    }

    if (pclk != 0U)
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d018      	beq.n	8006750 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	085a      	lsrs	r2, r3, #1
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	441a      	add	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b0f      	cmp	r3, #15
 8006736:	d909      	bls.n	800674c <UART_SetConfig+0x4a0>
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800673e:	d205      	bcs.n	800674c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	e001      	b.n	8006750 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800675c:	7fbb      	ldrb	r3, [r7, #30]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40007c00 	.word	0x40007c00
 800676c:	40023800 	.word	0x40023800
 8006770:	00f42400 	.word	0x00f42400

08006774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	f003 0304 	and.w	r3, r3, #4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006872:	d10a      	bne.n	800688a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b098      	sub	sp, #96	@ 0x60
 80068bc:	af02      	add	r7, sp, #8
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c8:	f7fb fc82 	bl	80021d0 <HAL_GetTick>
 80068cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d12e      	bne.n	800693a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e4:	2200      	movs	r2, #0
 80068e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f88c 	bl	8006a08 <UART_WaitOnFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d021      	beq.n	800693a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800690a:	653b      	str	r3, [r7, #80]	@ 0x50
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006914:	647b      	str	r3, [r7, #68]	@ 0x44
 8006916:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800691a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e062      	b.n	8006a00 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d149      	bne.n	80069dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006950:	2200      	movs	r2, #0
 8006952:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f856 	bl	8006a08 <UART_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d03c      	beq.n	80069dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	623b      	str	r3, [r7, #32]
   return(result);
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30
 8006982:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e6      	bne.n	8006962 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3308      	adds	r3, #8
 800699a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b4:	61fa      	str	r2, [r7, #28]
 80069b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	617b      	str	r3, [r7, #20]
   return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e011      	b.n	8006a00 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3758      	adds	r7, #88	@ 0x58
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a18:	e04f      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d04b      	beq.n	8006aba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a22:	f7fb fbd5 	bl	80021d0 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d302      	bcc.n	8006a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e04e      	b.n	8006ada <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d037      	beq.n	8006aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b80      	cmp	r3, #128	@ 0x80
 8006a4e:	d034      	beq.n	8006aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b40      	cmp	r3, #64	@ 0x40
 8006a54:	d031      	beq.n	8006aba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d110      	bne.n	8006a86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f838 	bl	8006ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2208      	movs	r2, #8
 8006a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e029      	b.n	8006ada <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d111      	bne.n	8006aba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f81e 	bl	8006ae2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e00f      	b.n	8006ada <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	bf0c      	ite	eq
 8006aca:	2301      	moveq	r3, #1
 8006acc:	2300      	movne	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d0a0      	beq.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b095      	sub	sp, #84	@ 0x54
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b08:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e6      	bne.n	8006aea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d118      	bne.n	8006b8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f023 0310 	bic.w	r3, r3, #16
 8006b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6979      	ldr	r1, [r7, #20]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	613b      	str	r3, [r7, #16]
   return(result);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e6      	bne.n	8006b58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b9e:	bf00      	nop
 8006ba0:	3754      	adds	r7, #84	@ 0x54
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <memset>:
 8006baa:	4402      	add	r2, r0
 8006bac:	4603      	mov	r3, r0
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d100      	bne.n	8006bb4 <memset+0xa>
 8006bb2:	4770      	bx	lr
 8006bb4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb8:	e7f9      	b.n	8006bae <memset+0x4>
	...

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8006bf4 <__libc_init_array+0x38>)
 8006bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006bf8 <__libc_init_array+0x3c>)
 8006bc2:	1b64      	subs	r4, r4, r5
 8006bc4:	10a4      	asrs	r4, r4, #2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	42a6      	cmp	r6, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8006bfc <__libc_init_array+0x40>)
 8006bce:	4c0c      	ldr	r4, [pc, #48]	@ (8006c00 <__libc_init_array+0x44>)
 8006bd0:	f000 f818 	bl	8006c04 <_init>
 8006bd4:	1b64      	subs	r4, r4, r5
 8006bd6:	10a4      	asrs	r4, r4, #2
 8006bd8:	2600      	movs	r6, #0
 8006bda:	42a6      	cmp	r6, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be4:	4798      	blx	r3
 8006be6:	3601      	adds	r6, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bee:	4798      	blx	r3
 8006bf0:	3601      	adds	r6, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	08006c44 	.word	0x08006c44
 8006bf8:	08006c44 	.word	0x08006c44
 8006bfc:	08006c44 	.word	0x08006c44
 8006c00:	08006c48 	.word	0x08006c48

08006c04 <_init>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr

08006c10 <_fini>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	bf00      	nop
 8006c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c16:	bc08      	pop	{r3}
 8006c18:	469e      	mov	lr, r3
 8006c1a:	4770      	bx	lr
