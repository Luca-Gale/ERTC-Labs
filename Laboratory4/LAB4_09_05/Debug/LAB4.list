
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b83c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800ba40  0800ba40  0000ca40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed0  0800bed0  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bed0  0800bed0  0000ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bed8  0800bed8  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bedc  0800bedc  0000cedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bee0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  200001e8  0800c0c8  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  0800c0c8  0000dac8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cfa  00000000  00000000  0000d216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e69  00000000  00000000  00024f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108f  00000000  00000000  00029298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aaca  00000000  00000000  0002a327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af65  00000000  00000000  00054df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107f1f  00000000  00000000  0006fd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b0c  00000000  00000000  00177cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017e7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ba24 	.word	0x0800ba24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800ba24 	.word	0x0800ba24

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b9a2 	b.w	80009b4 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	460c      	mov	r4, r1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d14e      	bne.n	80007a2 <__udivmoddi4+0xaa>
 8000704:	4694      	mov	ip, r2
 8000706:	458c      	cmp	ip, r1
 8000708:	4686      	mov	lr, r0
 800070a:	fab2 f282 	clz	r2, r2
 800070e:	d962      	bls.n	80007d6 <__udivmoddi4+0xde>
 8000710:	b14a      	cbz	r2, 8000726 <__udivmoddi4+0x2e>
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	4091      	lsls	r1, r2
 8000718:	fa20 f303 	lsr.w	r3, r0, r3
 800071c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000720:	4319      	orrs	r1, r3
 8000722:	fa00 fe02 	lsl.w	lr, r0, r2
 8000726:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800072a:	fa1f f68c 	uxth.w	r6, ip
 800072e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000732:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000736:	fb07 1114 	mls	r1, r7, r4, r1
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	fb04 f106 	mul.w	r1, r4, r6
 8000742:	4299      	cmp	r1, r3
 8000744:	d90a      	bls.n	800075c <__udivmoddi4+0x64>
 8000746:	eb1c 0303 	adds.w	r3, ip, r3
 800074a:	f104 30ff 	add.w	r0, r4, #4294967295
 800074e:	f080 8112 	bcs.w	8000976 <__udivmoddi4+0x27e>
 8000752:	4299      	cmp	r1, r3
 8000754:	f240 810f 	bls.w	8000976 <__udivmoddi4+0x27e>
 8000758:	3c02      	subs	r4, #2
 800075a:	4463      	add	r3, ip
 800075c:	1a59      	subs	r1, r3, r1
 800075e:	fa1f f38e 	uxth.w	r3, lr
 8000762:	fbb1 f0f7 	udiv	r0, r1, r7
 8000766:	fb07 1110 	mls	r1, r7, r0, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb00 f606 	mul.w	r6, r0, r6
 8000772:	429e      	cmp	r6, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x94>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f100 31ff 	add.w	r1, r0, #4294967295
 800077e:	f080 80fc 	bcs.w	800097a <__udivmoddi4+0x282>
 8000782:	429e      	cmp	r6, r3
 8000784:	f240 80f9 	bls.w	800097a <__udivmoddi4+0x282>
 8000788:	4463      	add	r3, ip
 800078a:	3802      	subs	r0, #2
 800078c:	1b9b      	subs	r3, r3, r6
 800078e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000792:	2100      	movs	r1, #0
 8000794:	b11d      	cbz	r5, 800079e <__udivmoddi4+0xa6>
 8000796:	40d3      	lsrs	r3, r2
 8000798:	2200      	movs	r2, #0
 800079a:	e9c5 3200 	strd	r3, r2, [r5]
 800079e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d905      	bls.n	80007b2 <__udivmoddi4+0xba>
 80007a6:	b10d      	cbz	r5, 80007ac <__udivmoddi4+0xb4>
 80007a8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ac:	2100      	movs	r1, #0
 80007ae:	4608      	mov	r0, r1
 80007b0:	e7f5      	b.n	800079e <__udivmoddi4+0xa6>
 80007b2:	fab3 f183 	clz	r1, r3
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d146      	bne.n	8000848 <__udivmoddi4+0x150>
 80007ba:	42a3      	cmp	r3, r4
 80007bc:	d302      	bcc.n	80007c4 <__udivmoddi4+0xcc>
 80007be:	4290      	cmp	r0, r2
 80007c0:	f0c0 80f0 	bcc.w	80009a4 <__udivmoddi4+0x2ac>
 80007c4:	1a86      	subs	r6, r0, r2
 80007c6:	eb64 0303 	sbc.w	r3, r4, r3
 80007ca:	2001      	movs	r0, #1
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d0e6      	beq.n	800079e <__udivmoddi4+0xa6>
 80007d0:	e9c5 6300 	strd	r6, r3, [r5]
 80007d4:	e7e3      	b.n	800079e <__udivmoddi4+0xa6>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	f040 8090 	bne.w	80008fc <__udivmoddi4+0x204>
 80007dc:	eba1 040c 	sub.w	r4, r1, ip
 80007e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007e4:	fa1f f78c 	uxth.w	r7, ip
 80007e8:	2101      	movs	r1, #1
 80007ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80007ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f2:	fb08 4416 	mls	r4, r8, r6, r4
 80007f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007fa:	fb07 f006 	mul.w	r0, r7, r6
 80007fe:	4298      	cmp	r0, r3
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x11c>
 8000802:	eb1c 0303 	adds.w	r3, ip, r3
 8000806:	f106 34ff 	add.w	r4, r6, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x11a>
 800080c:	4298      	cmp	r0, r3
 800080e:	f200 80cd 	bhi.w	80009ac <__udivmoddi4+0x2b4>
 8000812:	4626      	mov	r6, r4
 8000814:	1a1c      	subs	r4, r3, r0
 8000816:	fa1f f38e 	uxth.w	r3, lr
 800081a:	fbb4 f0f8 	udiv	r0, r4, r8
 800081e:	fb08 4410 	mls	r4, r8, r0, r4
 8000822:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000826:	fb00 f707 	mul.w	r7, r0, r7
 800082a:	429f      	cmp	r7, r3
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x148>
 800082e:	eb1c 0303 	adds.w	r3, ip, r3
 8000832:	f100 34ff 	add.w	r4, r0, #4294967295
 8000836:	d202      	bcs.n	800083e <__udivmoddi4+0x146>
 8000838:	429f      	cmp	r7, r3
 800083a:	f200 80b0 	bhi.w	800099e <__udivmoddi4+0x2a6>
 800083e:	4620      	mov	r0, r4
 8000840:	1bdb      	subs	r3, r3, r7
 8000842:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000846:	e7a5      	b.n	8000794 <__udivmoddi4+0x9c>
 8000848:	f1c1 0620 	rsb	r6, r1, #32
 800084c:	408b      	lsls	r3, r1
 800084e:	fa22 f706 	lsr.w	r7, r2, r6
 8000852:	431f      	orrs	r7, r3
 8000854:	fa20 fc06 	lsr.w	ip, r0, r6
 8000858:	fa04 f301 	lsl.w	r3, r4, r1
 800085c:	ea43 030c 	orr.w	r3, r3, ip
 8000860:	40f4      	lsrs	r4, r6
 8000862:	fa00 f801 	lsl.w	r8, r0, r1
 8000866:	0c38      	lsrs	r0, r7, #16
 8000868:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800086c:	fbb4 fef0 	udiv	lr, r4, r0
 8000870:	fa1f fc87 	uxth.w	ip, r7
 8000874:	fb00 441e 	mls	r4, r0, lr, r4
 8000878:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800087c:	fb0e f90c 	mul.w	r9, lr, ip
 8000880:	45a1      	cmp	r9, r4
 8000882:	fa02 f201 	lsl.w	r2, r2, r1
 8000886:	d90a      	bls.n	800089e <__udivmoddi4+0x1a6>
 8000888:	193c      	adds	r4, r7, r4
 800088a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800088e:	f080 8084 	bcs.w	800099a <__udivmoddi4+0x2a2>
 8000892:	45a1      	cmp	r9, r4
 8000894:	f240 8081 	bls.w	800099a <__udivmoddi4+0x2a2>
 8000898:	f1ae 0e02 	sub.w	lr, lr, #2
 800089c:	443c      	add	r4, r7
 800089e:	eba4 0409 	sub.w	r4, r4, r9
 80008a2:	fa1f f983 	uxth.w	r9, r3
 80008a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008aa:	fb00 4413 	mls	r4, r0, r3, r4
 80008ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008b6:	45a4      	cmp	ip, r4
 80008b8:	d907      	bls.n	80008ca <__udivmoddi4+0x1d2>
 80008ba:	193c      	adds	r4, r7, r4
 80008bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008c0:	d267      	bcs.n	8000992 <__udivmoddi4+0x29a>
 80008c2:	45a4      	cmp	ip, r4
 80008c4:	d965      	bls.n	8000992 <__udivmoddi4+0x29a>
 80008c6:	3b02      	subs	r3, #2
 80008c8:	443c      	add	r4, r7
 80008ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008ce:	fba0 9302 	umull	r9, r3, r0, r2
 80008d2:	eba4 040c 	sub.w	r4, r4, ip
 80008d6:	429c      	cmp	r4, r3
 80008d8:	46ce      	mov	lr, r9
 80008da:	469c      	mov	ip, r3
 80008dc:	d351      	bcc.n	8000982 <__udivmoddi4+0x28a>
 80008de:	d04e      	beq.n	800097e <__udivmoddi4+0x286>
 80008e0:	b155      	cbz	r5, 80008f8 <__udivmoddi4+0x200>
 80008e2:	ebb8 030e 	subs.w	r3, r8, lr
 80008e6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ea:	fa04 f606 	lsl.w	r6, r4, r6
 80008ee:	40cb      	lsrs	r3, r1
 80008f0:	431e      	orrs	r6, r3
 80008f2:	40cc      	lsrs	r4, r1
 80008f4:	e9c5 6400 	strd	r6, r4, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	e750      	b.n	800079e <__udivmoddi4+0xa6>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f103 	lsr.w	r1, r0, r3
 8000904:	fa0c fc02 	lsl.w	ip, ip, r2
 8000908:	fa24 f303 	lsr.w	r3, r4, r3
 800090c:	4094      	lsls	r4, r2
 800090e:	430c      	orrs	r4, r1
 8000910:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000914:	fa00 fe02 	lsl.w	lr, r0, r2
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000920:	fb08 3110 	mls	r1, r8, r0, r3
 8000924:	0c23      	lsrs	r3, r4, #16
 8000926:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800092a:	fb00 f107 	mul.w	r1, r0, r7
 800092e:	4299      	cmp	r1, r3
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x24c>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f100 36ff 	add.w	r6, r0, #4294967295
 800093a:	d22c      	bcs.n	8000996 <__udivmoddi4+0x29e>
 800093c:	4299      	cmp	r1, r3
 800093e:	d92a      	bls.n	8000996 <__udivmoddi4+0x29e>
 8000940:	3802      	subs	r0, #2
 8000942:	4463      	add	r3, ip
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b2a4      	uxth	r4, r4
 8000948:	fbb3 f1f8 	udiv	r1, r3, r8
 800094c:	fb08 3311 	mls	r3, r8, r1, r3
 8000950:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000954:	fb01 f307 	mul.w	r3, r1, r7
 8000958:	42a3      	cmp	r3, r4
 800095a:	d908      	bls.n	800096e <__udivmoddi4+0x276>
 800095c:	eb1c 0404 	adds.w	r4, ip, r4
 8000960:	f101 36ff 	add.w	r6, r1, #4294967295
 8000964:	d213      	bcs.n	800098e <__udivmoddi4+0x296>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d911      	bls.n	800098e <__udivmoddi4+0x296>
 800096a:	3902      	subs	r1, #2
 800096c:	4464      	add	r4, ip
 800096e:	1ae4      	subs	r4, r4, r3
 8000970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000974:	e739      	b.n	80007ea <__udivmoddi4+0xf2>
 8000976:	4604      	mov	r4, r0
 8000978:	e6f0      	b.n	800075c <__udivmoddi4+0x64>
 800097a:	4608      	mov	r0, r1
 800097c:	e706      	b.n	800078c <__udivmoddi4+0x94>
 800097e:	45c8      	cmp	r8, r9
 8000980:	d2ae      	bcs.n	80008e0 <__udivmoddi4+0x1e8>
 8000982:	ebb9 0e02 	subs.w	lr, r9, r2
 8000986:	eb63 0c07 	sbc.w	ip, r3, r7
 800098a:	3801      	subs	r0, #1
 800098c:	e7a8      	b.n	80008e0 <__udivmoddi4+0x1e8>
 800098e:	4631      	mov	r1, r6
 8000990:	e7ed      	b.n	800096e <__udivmoddi4+0x276>
 8000992:	4603      	mov	r3, r0
 8000994:	e799      	b.n	80008ca <__udivmoddi4+0x1d2>
 8000996:	4630      	mov	r0, r6
 8000998:	e7d4      	b.n	8000944 <__udivmoddi4+0x24c>
 800099a:	46d6      	mov	lr, sl
 800099c:	e77f      	b.n	800089e <__udivmoddi4+0x1a6>
 800099e:	4463      	add	r3, ip
 80009a0:	3802      	subs	r0, #2
 80009a2:	e74d      	b.n	8000840 <__udivmoddi4+0x148>
 80009a4:	4606      	mov	r6, r0
 80009a6:	4623      	mov	r3, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	e70f      	b.n	80007cc <__udivmoddi4+0xd4>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	e730      	b.n	8000814 <__udivmoddi4+0x11c>
 80009b2:	bf00      	nop

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	@ 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4413      	add	r3, r2
 80009ca:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 80009d4:	2301      	movs	r3, #1
 80009d6:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 80009d8:	e025      	b.n	8000a26 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d109      	bne.n	80009f6 <cobsEncode+0x3e>
            FinishBlock(code);
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	7efa      	ldrb	r2, [r7, #27]
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	2301      	movs	r3, #1
 80009f2:	76fb      	strb	r3, [r7, #27]
 80009f4:	e014      	b.n	8000a20 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	7812      	ldrb	r2, [r2, #0]
 8000a00:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000a02:	7efb      	ldrb	r3, [r7, #27]
 8000a04:	3301      	adds	r3, #1
 8000a06:	76fb      	strb	r3, [r7, #27]
 8000a08:	7efb      	ldrb	r3, [r7, #27]
 8000a0a:	2bff      	cmp	r3, #255	@ 0xff
 8000a0c:	d108      	bne.n	8000a20 <cobsEncode+0x68>
                FinishBlock(code);
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	7efa      	ldrb	r2, [r7, #27]
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3301      	adds	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d3d5      	bcc.n	80009da <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	7efa      	ldrb	r2, [r7, #27]
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	76fb      	strb	r3, [r7, #27]
}
 8000a40:	bf00      	nop
 8000a42:	3724      	adds	r7, #36	@ 0x24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
	//if (logger->tx_enable) {
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3321      	adds	r3, #33	@ 0x21
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	68b8      	ldr	r0, [r7, #8]
 8000a62:	f7ff ffa9 	bl	80009b8 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f103 0121 	add.w	r1, r3, #33	@ 0x21
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	3302      	adds	r3, #2
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	2303      	movs	r3, #3
 8000a8a:	f007 fb53 	bl	8008134 <HAL_UART_Transmit>
 8000a8e:	4603      	mov	r3, r0
	//}

	return 0;
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	1c59      	adds	r1, r3, #1
 8000aaa:	2303      	movs	r3, #3
 8000aac:	2201      	movs	r2, #1
 8000aae:	f007 fbca 	bl	8008246 <HAL_UART_Receive>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d111      	bne.n	8000adc <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	2b41      	cmp	r3, #65	@ 0x41
 8000abe:	d002      	beq.n	8000ac6 <ertc_dlog_update+0x2e>
 8000ac0:	2b42      	cmp	r3, #66	@ 0x42
 8000ac2:	d004      	beq.n	8000ace <ertc_dlog_update+0x36>
 8000ac4:	e007      	b.n	8000ad6 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
				break;
 8000acc:	e006      	b.n	8000adc <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
				break;
 8000ad4:	e002      	b.n	8000adc <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aee:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000af2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d013      	beq.n	8000b26 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000afe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b02:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b06:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b0e:	e000      	b.n	8000b12 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b10:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b12:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0f9      	beq.n	8000b10 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b26:	687b      	ldr	r3, [r7, #4]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e009      	b.n	8000b5a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	60ba      	str	r2, [r7, #8]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ffc9 	bl	8000ae6 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dbf1      	blt.n	8000b46 <_write+0x12>
	}
	return len;
 8000b62:	687b      	ldr	r3, [r7, #4]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <get_keypad_key>:
	float ref2;
	float w2;
	float eSL;
} data;

char get_keypad_key(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af04      	add	r7, sp, #16
	uint8_t col = 0xFF, row = 0xFF;
 8000b72:	23ff      	movs	r3, #255	@ 0xff
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	23ff      	movs	r3, #255	@ 0xff
 8000b78:	71bb      	strb	r3, [r7, #6]

	// Read column and row register from SX1509
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &col, 1,
 8000b7a:	2364      	movs	r3, #100	@ 0x64
 8000b7c:	9302      	str	r3, [sp, #8]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2301      	movs	r3, #1
 8000b88:	2227      	movs	r2, #39	@ 0x27
 8000b8a:	217e      	movs	r1, #126	@ 0x7e
 8000b8c:	4824      	ldr	r0, [pc, #144]	@ (8000c20 <get_keypad_key+0xb4>)
 8000b8e:	f003 fdaf 	bl	80046f0 <HAL_I2C_Mem_Read>
			100);
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &row, 1,
 8000b92:	2364      	movs	r3, #100	@ 0x64
 8000b94:	9302      	str	r3, [sp, #8]
 8000b96:	2301      	movs	r3, #1
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	1dbb      	adds	r3, r7, #6
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	2228      	movs	r2, #40	@ 0x28
 8000ba2:	217e      	movs	r1, #126	@ 0x7e
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <get_keypad_key+0xb4>)
 8000ba6:	f003 fda3 	bl	80046f0 <HAL_I2C_Mem_Read>
			100);

	// Nothing pressed (all bits HIGH)
	if (col == 0xFF || row == 0xFF)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2bff      	cmp	r3, #255	@ 0xff
 8000bae:	d002      	beq.n	8000bb6 <get_keypad_key+0x4a>
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	2bff      	cmp	r3, #255	@ 0xff
 8000bb4:	d101      	bne.n	8000bba <get_keypad_key+0x4e>
		return '\0';
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e02e      	b.n	8000c18 <get_keypad_key+0xac>

	// Find the LOW bit (indicating which row and column were pressed)
	// Tried to do both row and column at the same time
	for (int r = 0; r < 4; r++) {
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e027      	b.n	8000c10 <get_keypad_key+0xa4>
		if (!(row & (1 << r))) {
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	fa42 f303 	asr.w	r3, r2, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11b      	bne.n	8000c0a <get_keypad_key+0x9e>
			for (int c = 0; c < 4; c++) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	e015      	b.n	8000c04 <get_keypad_key+0x98>
				if (!(col & (1 << c))) {
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	fa42 f303 	asr.w	r3, r2, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d109      	bne.n	8000bfe <get_keypad_key+0x92>
					return keypad_map[3-r][c];
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1c3 0303 	rsb	r3, r3, #3
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c24 <get_keypad_key+0xb8>)
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	441a      	add	r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	e00c      	b.n	8000c18 <get_keypad_key+0xac>
			for (int c = 0; c < 4; c++) {
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	dde6      	ble.n	8000bd8 <get_keypad_key+0x6c>
	for (int r = 0; r < 4; r++) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	ddd4      	ble.n	8000bc0 <get_keypad_key+0x54>
				}
			}
		}
	}

	return '\0';
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000024c 	.word	0x2000024c
 8000c24:	0800baf0 	.word	0x0800baf0

08000c28 <handle_keypad_input>:

// Set reference speed with keypad
char input_buffer[6] = { 0 };  // To store up to 5 digits
int input_index = 0;

void handle_keypad_input() {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
	char key = get_keypad_key();
 8000c2e:	f7ff ff9d 	bl	8000b6c <get_keypad_key>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
	// Print the pressed button - safety check
	if (key != '\0') {
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <handle_keypad_input+0x1e>
		printf("Key pressed: %c\n", key);
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4838      	ldr	r0, [pc, #224]	@ (8000d24 <handle_keypad_input+0xfc>)
 8000c42:	f008 fec9 	bl	80099d8 <iprintf>
	}

	if (key >= '0' && key <= '9') {
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c4a:	d914      	bls.n	8000c76 <handle_keypad_input+0x4e>
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	2b39      	cmp	r3, #57	@ 0x39
 8000c50:	d811      	bhi.n	8000c76 <handle_keypad_input+0x4e>
		if (input_index < sizeof(input_buffer) - 1) {
 8000c52:	4b35      	ldr	r3, [pc, #212]	@ (8000d28 <handle_keypad_input+0x100>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d860      	bhi.n	8000d1c <handle_keypad_input+0xf4>
			input_buffer[input_index++] = key;
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <handle_keypad_input+0x100>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	4931      	ldr	r1, [pc, #196]	@ (8000d28 <handle_keypad_input+0x100>)
 8000c62:	600a      	str	r2, [r1, #0]
 8000c64:	4931      	ldr	r1, [pc, #196]	@ (8000d2c <handle_keypad_input+0x104>)
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	54ca      	strb	r2, [r1, r3]
			input_buffer[input_index] = '\0';
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d28 <handle_keypad_input+0x100>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d2c <handle_keypad_input+0x104>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	54d1      	strb	r1, [r2, r3]
		if (input_index < sizeof(input_buffer) - 1) {
 8000c74:	e052      	b.n	8000d1c <handle_keypad_input+0xf4>
		}
	} else if (key == '#') {
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	2b23      	cmp	r3, #35	@ 0x23
 8000c7a:	d13a      	bne.n	8000cf2 <handle_keypad_input+0xca>
		if (input_index > 0) {
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d28 <handle_keypad_input+0x100>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dd2f      	ble.n	8000ce4 <handle_keypad_input+0xbc>
			float new_ref = atof(input_buffer);  // ASCII to Float
 8000c84:	4829      	ldr	r0, [pc, #164]	@ (8000d2c <handle_keypad_input+0x104>)
 8000c86:	f008 f826 	bl	8008cd6 <atof>
 8000c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c92:	edc7 7a02 	vstr	s15, [r7, #8]
			// TODO check speed bound on reference
			ref_w1 = new_ref;
 8000c96:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <handle_keypad_input+0x108>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	6013      	str	r3, [r2, #0]
			ref_w2 = new_ref;
 8000c9c:	4a25      	ldr	r2, [pc, #148]	@ (8000d34 <handle_keypad_input+0x10c>)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	6013      	str	r3, [r2, #0]

			// Workaround the impossibility to print float
			int sp_int = (int) (new_ref * 100);
 8000ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ca6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000d38 <handle_keypad_input+0x110>
 8000caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb2:	ee17 3a90 	vmov	r3, s15
 8000cb6:	607b      	str	r3, [r7, #4]
			printf("Reference speed = %d.%02d\n RPM", sp_int / 100,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a20      	ldr	r2, [pc, #128]	@ (8000d3c <handle_keypad_input+0x114>)
 8000cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc0:	1152      	asrs	r2, r2, #5
 8000cc2:	17db      	asrs	r3, r3, #31
 8000cc4:	1ad0      	subs	r0, r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <handle_keypad_input+0x114>)
 8000cca:	fb82 1203 	smull	r1, r2, r2, r3
 8000cce:	1151      	asrs	r1, r2, #5
 8000cd0:	17da      	asrs	r2, r3, #31
 8000cd2:	1a8a      	subs	r2, r1, r2
 8000cd4:	2164      	movs	r1, #100	@ 0x64
 8000cd6:	fb01 f202 	mul.w	r2, r1, r2
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	4601      	mov	r1, r0
 8000cde:	4818      	ldr	r0, [pc, #96]	@ (8000d40 <handle_keypad_input+0x118>)
 8000ce0:	f008 fe7a 	bl	80099d8 <iprintf>
					sp_int % 100);
		}
		input_index = 0;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <handle_keypad_input+0x100>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
		input_buffer[0] = '\0';
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <handle_keypad_input+0x104>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
		ref_w2 = 0;
		input_index = 0;
		input_buffer[0] = '\0';
		printf("Input set to 0\n");
	}
}
 8000cf0:	e014      	b.n	8000d1c <handle_keypad_input+0xf4>
	} else if (key == '*') {
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cf6:	d111      	bne.n	8000d1c <handle_keypad_input+0xf4>
		ref_w1 = 0;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <handle_keypad_input+0x108>)
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
		ref_w2 = 0;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <handle_keypad_input+0x10c>)
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
		input_index = 0;
 8000d08:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <handle_keypad_input+0x100>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
		input_buffer[0] = '\0';
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <handle_keypad_input+0x104>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
		printf("Input set to 0\n");
 8000d14:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <handle_keypad_input+0x11c>)
 8000d16:	f008 fecf 	bl	8009ab8 <puts>
}
 8000d1a:	e7ff      	b.n	8000d1c <handle_keypad_input+0xf4>
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0800ba40 	.word	0x0800ba40
 8000d28:	20000964 	.word	0x20000964
 8000d2c:	2000095c 	.word	0x2000095c
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	20000010 	.word	0x20000010
 8000d38:	42c80000 	.word	0x42c80000
 8000d3c:	51eb851f 	.word	0x51eb851f
 8000d40:	0800ba54 	.word	0x0800ba54
 8000d44:	0800ba74 	.word	0x0800ba74

08000d48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	handle_keypad_input();
 8000d52:	f7ff ff69 	bl	8000c28 <handle_keypad_input>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <calc_line_error>:
/*
 * TODOs:
 * - undertand if we need strictly zero error or we can work with -1 as it is right now
 * - check for outliers: line sensor reading is not very precise and we need to take into account false positive
 */
float calc_line_error(uint8_t sensors) {
 8000d60:	b480      	push	{r7}
 8000d62:	b08b      	sub	sp, #44	@ 0x2c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	const int N = 8;
 8000d6a:	2308      	movs	r3, #8
 8000d6c:	61bb      	str	r3, [r7, #24]
	const float P = 0.008f; // distanza tra i sensori
 8000d6e:	4b35      	ldr	r3, [pc, #212]	@ (8000e44 <calc_line_error+0xe4>)
 8000d70:	617b      	str	r3, [r7, #20]
	float eSL = 0.0f;
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
	float active_sum = 0.0f;
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]

	for (int n = 0; n < N; n++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e03d      	b.n	8000e00 <calc_line_error+0xa0>
		uint8_t b_n = (sensors & (1 << n));
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	b25a      	sxtb	r2, r3
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4013      	ands	r3, r2
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	74fb      	strb	r3, [r7, #19]
		float w_n = ((N - 1) / 2.0f - n) * P;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000da8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dba:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc2:	edc7 7a03 	vstr	s15, [r7, #12]
		eSL += b_n * w_n;
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		active_sum += b_n;
 8000de4:	7cfb      	ldrb	r3, [r7, #19]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dee:	ed97 7a08 	vldr	s14, [r7, #32]
 8000df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df6:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int n = 0; n < N; n++) {
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbbd      	blt.n	8000d84 <calc_line_error+0x24>
	}

	if (active_sum != 0.0f) {
 8000e08:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	d008      	beq.n	8000e28 <calc_line_error+0xc8>
		eSL /= active_sum;
 8000e16:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000e1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000e26:	e002      	b.n	8000e2e <calc_line_error+0xce>
	} else {
		eSL = 0.0f; // Nessuna linea rilevata
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	return eSL;
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	ee07 3a90 	vmov	s15, r3
}
 8000e34:	eeb0 0a67 	vmov.f32	s0, s15
 8000e38:	372c      	adds	r7, #44	@ 0x2c
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	3c03126f 	.word	0x3c03126f

08000e48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b098      	sub	sp, #96	@ 0x60
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	6078      	str	r0, [r7, #4]

	static int kLed = 0;
	// 1. Read encoder counts with overflow/underflow handling
	int32_t TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000e50:	4bc3      	ldr	r3, [pc, #780]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e56:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 8000e58:	4bc2      	ldr	r3, [pc, #776]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5e:	643b      	str	r3, [r7, #64]	@ 0x40
	int32_t TIM3_DiffCount, TIM4_DiffCount;

	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4ac0      	ldr	r2, [pc, #768]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	f040 82fc 	bne.w	8001464 <HAL_TIM_PeriodElapsedCallback+0x61c>
	{

		// Indicate that the program is running
		if(++kLed >= 10)
 8000e6c:	4bbf      	ldr	r3, [pc, #764]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4abe      	ldr	r2, [pc, #760]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4bbd      	ldr	r3, [pc, #756]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b09      	cmp	r3, #9
 8000e7c:	dd06      	ble.n	8000e8c <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			kLed = 0;
 8000e7e:	4bbb      	ldr	r3, [pc, #748]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e84:	2180      	movs	r1, #128	@ 0x80
 8000e86:	48ba      	ldr	r0, [pc, #744]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000e88:	f003 fa4f 	bl	800432a <HAL_GPIO_TogglePin>
		}

		// get line sensor reading

		status =  HAL_I2C_Mem_Read(
 8000e8c:	23c8      	movs	r3, #200	@ 0xc8
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2301      	movs	r3, #1
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	4bb7      	ldr	r3, [pc, #732]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2210      	movs	r2, #16
 8000e9c:	217c      	movs	r1, #124	@ 0x7c
 8000e9e:	48b6      	ldr	r0, [pc, #728]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ea0:	f003 fc26 	bl	80046f0 <HAL_I2C_Mem_Read>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4bb4      	ldr	r3, [pc, #720]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000eaa:	701a      	strb	r2, [r3, #0]
				&linesensor_data,
				1,
				I2C_TIMEOUT);

		// compute line error
		float eSL = calc_line_error(linesensor_data);
 8000eac:	4bb1      	ldr	r3, [pc, #708]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff55 	bl	8000d60 <calc_line_error>
 8000eb6:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
		int eSL_int = (int) (eSL * 1000);
 8000eba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000ebe:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001180 <HAL_TIM_PeriodElapsedCallback+0x338>
 8000ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eca:	ee17 3a90 	vmov	r3, s15
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
		//printf("Reference speed = %d.%02d\n RPM", eSL_int / 100, eSL_int % 100);
		printf("Line error = %d\n", eSL_int);
 8000ed0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ed2:	48ac      	ldr	r0, [pc, #688]	@ (8001184 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000ed4:	f008 fd80 	bl	80099d8 <iprintf>

		// 3. Simple line following control (alternative to yaw controller)

		// Get abs.value of the error
		eSL = (eSL >= 0) ? eSL : -eSL;
 8000ed8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee4:	db02      	blt.n	8000eec <HAL_TIM_PeriodElapsedCallback+0xa4>
 8000ee6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000eea:	e003      	b.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0xac>
 8000eec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000ef0:	eef1 7a67 	vneg.f32	s15, s15
 8000ef4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		eSL *= 25;
 8000ef8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000efc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f04:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		if (eSL > LINE_CENTER_ERROR_THRESHOLD) {
 8000f08:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f0c:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001188 <HAL_TIM_PeriodElapsedCallback+0x340>
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd1a      	ble.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x108>
			// Line is to the left - turn left
			ref_w1 = BASE_SPEED_RPM - MAX_TURN_ADJUSTMENT * eSL;
 8000f1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f1e:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800118c <HAL_TIM_PeriodElapsedCallback+0x344>
 8000f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f26:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8001190 <HAL_TIM_PeriodElapsedCallback+0x348>
 8000f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2e:	4b99      	ldr	r3, [pc, #612]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000f30:	edc3 7a00 	vstr	s15, [r3]
			ref_w2 = BASE_SPEED_RPM + MAX_TURN_ADJUSTMENT * eSL;
 8000f34:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f38:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800118c <HAL_TIM_PeriodElapsedCallback+0x344>
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8001190 <HAL_TIM_PeriodElapsedCallback+0x348>
 8000f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f48:	4b93      	ldr	r3, [pc, #588]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
 8000f4e:	e02a      	b.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x15e>
		}
		else if (eSL < -LINE_CENTER_ERROR_THRESHOLD) {
 8000f50:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f54:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800119c <HAL_TIM_PeriodElapsedCallback+0x354>
 8000f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d51a      	bpl.n	8000f98 <HAL_TIM_PeriodElapsedCallback+0x150>
			// Line is to the right - turn right
			ref_w1 = BASE_SPEED_RPM + MAX_TURN_ADJUSTMENT * eSL;
 8000f62:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f66:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800118c <HAL_TIM_PeriodElapsedCallback+0x344>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6e:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001190 <HAL_TIM_PeriodElapsedCallback+0x348>
 8000f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f76:	4b87      	ldr	r3, [pc, #540]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
			ref_w2 = BASE_SPEED_RPM - MAX_TURN_ADJUSTMENT * eSL;
 8000f7c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f80:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800118c <HAL_TIM_PeriodElapsedCallback+0x344>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001190 <HAL_TIM_PeriodElapsedCallback+0x348>
 8000f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f90:	4b81      	ldr	r3, [pc, #516]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000f92:	edc3 7a00 	vstr	s15, [r3]
 8000f96:	e006      	b.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x15e>
		}
		else {
			// Line is centered - go straight
			ref_w1 = ref_w2 = BASE_SPEED_RPM;
 8000f98:	4b7f      	ldr	r3, [pc, #508]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000f9a:	4a81      	ldr	r2, [pc, #516]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000fa4:	6013      	str	r3, [r2, #0]
		}

		printf("ref_1: %d\n", (int)(ref_w1*1000));
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001180 <HAL_TIM_PeriodElapsedCallback+0x338>
 8000fb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb8:	ee17 1a90 	vmov	r1, s15
 8000fbc:	4879      	ldr	r0, [pc, #484]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000fbe:	f008 fd0b 	bl	80099d8 <iprintf>
		printf("ref_2: %d\n", (int)(ref_w2*1000));
 8000fc2:	4b75      	ldr	r3, [pc, #468]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001180 <HAL_TIM_PeriodElapsedCallback+0x338>
 8000fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd4:	ee17 1a90 	vmov	r1, s15
 8000fd8:	4873      	ldr	r0, [pc, #460]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000fda:	f008 fcfd 	bl	80099d8 <iprintf>


		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8000fde:	4b60      	ldr	r3, [pc, #384]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	d12e      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x202>
			if (TIM3_CurrentCount <= prev_count_w1) {
 8000fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	d80f      	bhi.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x1de>
				TIM3_DiffCount = TIM3_CurrentCount - prev_count_w1;
 8001006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001010:	4b66      	ldr	r3, [pc, #408]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001024:	e041      	b.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x262>
			} else {
				TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - prev_count_w1;
 8001026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001028:	f6a3 7301 	subw	r3, r3, #3841	@ 0xf01
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001034:	4b5d      	ldr	r3, [pc, #372]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001042:	ee17 3a90 	vmov	r3, s15
 8001046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001048:	e02f      	b.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x262>
			}
		} else {
			if (TIM3_CurrentCount >= prev_count_w1) {
 800104a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001054:	4b55      	ldr	r3, [pc, #340]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	db0f      	blt.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x23c>
				TIM3_DiffCount = TIM3_CurrentCount - prev_count_w1;
 8001064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106e:	4b4f      	ldr	r3, [pc, #316]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001082:	e012      	b.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x262>
			} else {
				TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - prev_count_w1) + TIM3_CurrentCount;
 8001084:	4b49      	ldr	r3, [pc, #292]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80011b0 <HAL_TIM_PeriodElapsedCallback+0x368>
 800108e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a4:	ee17 3a90 	vmov	r3, s15
 80010a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			}
		}
		prev_count_w1 = TIM3_CurrentCount;
 80010aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	4b3d      	ldr	r3, [pc, #244]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x364>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d12e      	bne.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x2de>
			if (TIM4_CurrentCount <= prev_count_w2) {
 80010c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	4b38      	ldr	r3, [pc, #224]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d80f      	bhi.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x2ba>
				TIM4_DiffCount = TIM4_CurrentCount - prev_count_w2;
 80010e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e4:	ee07 3a90 	vmov	s15, r3
 80010e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ec:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80010ee:	edd3 7a00 	vldr	s15, [r3]
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fa:	ee17 3a90 	vmov	r3, s15
 80010fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001100:	e06d      	b.n	80011de <HAL_TIM_PeriodElapsedCallback+0x396>
			} else {
				TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - prev_count_w2;
 8001102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001104:	f6a3 7301 	subw	r3, r3, #3841	@ 0xf01
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111e:	ee17 3a90 	vmov	r3, s15
 8001122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001124:	e05b      	b.n	80011de <HAL_TIM_PeriodElapsedCallback+0x396>
			}
		} else {
			if (TIM4_CurrentCount >= prev_count_w2) {
 8001126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	db3b      	blt.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x370>
				TIM4_DiffCount = TIM4_CurrentCount - prev_count_w2;
 8001140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 3a90 	vmov	r3, s15
 800115c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800115e:	e03e      	b.n	80011de <HAL_TIM_PeriodElapsedCallback+0x396>
 8001160:	200003f0 	.word	0x200003f0
 8001164:	2000043c 	.word	0x2000043c
 8001168:	40001000 	.word	0x40001000
 800116c:	20000968 	.word	0x20000968
 8001170:	40020400 	.word	0x40020400
 8001174:	20000945 	.word	0x20000945
 8001178:	2000024c 	.word	0x2000024c
 800117c:	20000944 	.word	0x20000944
 8001180:	447a0000 	.word	0x447a0000
 8001184:	0800ba84 	.word	0x0800ba84
 8001188:	3b03126f 	.word	0x3b03126f
 800118c:	42480000 	.word	0x42480000
 8001190:	42c80000 	.word	0x42c80000
 8001194:	2000000c 	.word	0x2000000c
 8001198:	20000010 	.word	0x20000010
 800119c:	bb03126f 	.word	0xbb03126f
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	0800ba98 	.word	0x0800ba98
 80011a8:	0800baa4 	.word	0x0800baa4
 80011ac:	20000934 	.word	0x20000934
 80011b0:	45701000 	.word	0x45701000
 80011b4:	20000938 	.word	0x20000938
			} else {
				TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - prev_count_w2) + TIM4_CurrentCount;
 80011b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8001484 <HAL_TIM_PeriodElapsedCallback+0x63c>
 80011c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d8:	ee17 3a90 	vmov	r3, s15
 80011dc:	64bb      	str	r3, [r7, #72]	@ 0x48
			}
		}
		prev_count_w2 = TIM4_CurrentCount;
 80011de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	4ba5      	ldr	r3, [pc, #660]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80011ea:	edc3 7a00 	vstr	s15, [r3]

		// 2. Calculate angular speed (rpm)
		float w1 = (TIM3_DiffCount / PPR_WHEEL) * 60.0f / TS;
 80011ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001488 <HAL_TIM_PeriodElapsedCallback+0x640>
 80011fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001200:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800148c <HAL_TIM_PeriodElapsedCallback+0x644>
 8001204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001208:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800120c:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 8001470 <HAL_TIM_PeriodElapsedCallback+0x628>
 8001210:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001218:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float w2 = (TIM4_DiffCount / PPR_WHEEL) * 60.0f / TS;
 800121c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001226:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8001488 <HAL_TIM_PeriodElapsedCallback+0x640>
 800122a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122e:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800148c <HAL_TIM_PeriodElapsedCallback+0x644>
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800123a:	ed9f 5b8d 	vldr	d5, [pc, #564]	@ 8001470 <HAL_TIM_PeriodElapsedCallback+0x628>
 800123e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001242:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001246:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// 3. Calculate error
		float error_w1 = ref_w1 - w1;
 800124a:	4b91      	ldr	r3, [pc, #580]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001258:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float error_w2 = ref_w2 - w2;
 800125c:	4b8d      	ldr	r3, [pc, #564]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		//		printf("%ld, %ld\n", (int32_t)error_w1, (int32_t)error_w2);

		// 4. Calculate proportional term
		float p_term_w1 = kp * error_w1;
 800126e:	4b8a      	ldr	r3, [pc, #552]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float p_term_w2 = kp * error_w2;
 8001280:	4b85      	ldr	r3, [pc, #532]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	edc7 7a08 	vstr	s15, [r7, #32]

		// 5. Calculate integral term
		integral_w1 += (ki * error_w1 - kw * sat_err1)* TS;
 8001292:	4b82      	ldr	r3, [pc, #520]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x654>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800129c:	4b80      	ldr	r3, [pc, #512]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800129e:	ed93 7a00 	vldr	s14, [r3]
 80012a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012aa:	4b7e      	ldr	r3, [pc, #504]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80012ac:	edd3 5a00 	vldr	s11, [r3]
 80012b0:	4b7d      	ldr	r3, [pc, #500]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c2:	ed9f 5b6b 	vldr	d5, [pc, #428]	@ 8001470 <HAL_TIM_PeriodElapsedCallback+0x628>
 80012c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012d2:	4b72      	ldr	r3, [pc, #456]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x654>)
 80012d4:	edc3 7a00 	vstr	s15, [r3]
		integral_w2 += (ki * error_w2 - kw * sat_err2) * TS;
 80012d8:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x664>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012e2:	4b6f      	ldr	r3, [pc, #444]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	4b6c      	ldr	r3, [pc, #432]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80012f2:	edd3 5a00 	vldr	s11, [r3]
 80012f6:	4b6e      	ldr	r3, [pc, #440]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001308:	ed9f 5b59 	vldr	d5, [pc, #356]	@ 8001470 <HAL_TIM_PeriodElapsedCallback+0x628>
 800130c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001310:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001314:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001318:	4b64      	ldr	r3, [pc, #400]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x664>)
 800131a:	edc3 7a00 	vstr	s15, [r3]

		// 6. Calculate control signal (u)
		float u1 = p_term_w1 + integral_w1;
 800131e:	4b5f      	ldr	r3, [pc, #380]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0x654>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	edc7 7a07 	vstr	s15, [r7, #28]
		float u2 = p_term_w2 + integral_w2;
 8001330:	4b5e      	ldr	r3, [pc, #376]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ed97 7a08 	vldr	s14, [r7, #32]
 800133a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133e:	edc7 7a06 	vstr	s15, [r7, #24]

		// 7. Saturate control signal to avoid exceeding VBATT
		float u1_sat = fminf(fmaxf(u1, -VBATT), VBATT);
 8001342:	eefa 0a08 	vmov.f32	s1, #168	@ 0xc1400000 -12.0
 8001346:	ed97 0a07 	vldr	s0, [r7, #28]
 800134a:	f00a fb15 	bl	800b978 <fmaxf>
 800134e:	eef0 7a40 	vmov.f32	s15, s0
 8001352:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f00a fb2a 	bl	800b9b2 <fminf>
 800135e:	ed87 0a05 	vstr	s0, [r7, #20]
		float u2_sat = fminf(fmaxf(u2, -VBATT), VBATT);
 8001362:	eefa 0a08 	vmov.f32	s1, #168	@ 0xc1400000 -12.0
 8001366:	ed97 0a06 	vldr	s0, [r7, #24]
 800136a:	f00a fb05 	bl	800b978 <fmaxf>
 800136e:	eef0 7a40 	vmov.f32	s15, s0
 8001372:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	f00a fb1a 	bl	800b9b2 <fminf>
 800137e:	ed87 0a04 	vstr	s0, [r7, #16]

		sat_err1 = u1 - u1_sat;
 8001382:	ed97 7a07 	vldr	s14, [r7, #28]
 8001386:	edd7 7a05 	vldr	s15, [r7, #20]
 800138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138e:	4b46      	ldr	r3, [pc, #280]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8001390:	edc3 7a00 	vstr	s15, [r3]
		sat_err2 = u2 - u2_sat;
 8001394:	ed97 7a06 	vldr	s14, [r7, #24]
 8001398:	edd7 7a04 	vldr	s15, [r7, #16]
 800139c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a0:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]

		int32_t duty1 = u1_sat * V2DUTY;
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ae:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 8001478 <HAL_TIM_PeriodElapsedCallback+0x630>
 80013b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013ba:	ee17 3a90 	vmov	r3, s15
 80013be:	60fb      	str	r3, [r7, #12]
		int32_t duty2 = u2_sat * V2DUTY;
 80013c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c8:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8001478 <HAL_TIM_PeriodElapsedCallback+0x630>
 80013cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013d4:	ee17 3a90 	vmov	r3, s15
 80013d8:	60bb      	str	r3, [r7, #8]

		/* calculate duty properly */
		if ( duty1 >= 0) { // rotate forward
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db08      	blt.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x5aa>
			/* alternate between forward and coast */
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_1 , ( uint32_t ) duty1 );
 80013e0:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_2 , 0) ;
 80013e8:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80013f0:	e008      	b.n	8001404 <HAL_TIM_PeriodElapsedCallback+0x5bc>
			/* alternate between forward and brake , TIM8_ARR_VALUE is a define */
			// __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_1 , ( uint32_t ) TIM8_ARR_VALUE );
			// __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_2 , ( uint32_t )( TIM8_ARR_VALUE - duty1 ));

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_1 , 0) ;
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_2 , ( uint32_t ) - duty1 );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	425a      	negs	r2, r3
 80013fe:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		if ( duty2 >= 0) { // rotate forward
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db08      	blt.n	800141c <HAL_TIM_PeriodElapsedCallback+0x5d4>
			/* alternate between forward and coast */
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_3 , ( uint32_t ) duty2 );
 800140a:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_4 , 0) ;
 8001412:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
 800141a:	e008      	b.n	800142e <HAL_TIM_PeriodElapsedCallback+0x5e6>
			/* alternate between forward and brake , TIM8_ARR_VALUE is a define */
			// __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_3 , ( uint32_t ) TIM8_ARR_VALUE );
			// __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_4 , ( uint32_t )( TIM8_ARR_VALUE - duty2 ));

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_3 , 0) ;
 800141c:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_4 , ( uint32_t ) - duty2 );
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	425a      	negs	r2, r3
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		// Log data
		data.ref1 = ref_w1;
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001434:	6013      	str	r3, [r2, #0]
		data.w1 = w1;
 8001436:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143a:	6053      	str	r3, [r2, #4]
		data.ref2 = ref_w2;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001442:	6093      	str	r3, [r2, #8]
		data.w2 = w2;
 8001444:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001448:	60d3      	str	r3, [r2, #12]
		data.eSL = eSL_int;
 800144a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8001456:	edc3 7a04 	vstr	s15, [r3, #16]
		ertc_dlog_send(&logger, &data, sizeof(data));
 800145a:	2214      	movs	r2, #20
 800145c:	4916      	ldr	r1, [pc, #88]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800145e:	4817      	ldr	r0, [pc, #92]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0x674>)
 8001460:	f7ff faf4 	bl	8000a4c <ertc_dlog_send>
	}
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	@ 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	47ae147b 	.word	0x47ae147b
 8001474:	3f847ae1 	.word	0x3f847ae1
 8001478:	aaaaaaab 	.word	0xaaaaaaab
 800147c:	4040aaaa 	.word	0x4040aaaa
 8001480:	20000938 	.word	0x20000938
 8001484:	45701000 	.word	0x45701000
 8001488:	45700000 	.word	0x45700000
 800148c:	42700000 	.word	0x42700000
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000010 	.word	0x20000010
 8001498:	20000000 	.word	0x20000000
 800149c:	2000092c 	.word	0x2000092c
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20000008 	.word	0x20000008
 80014a8:	2000093c 	.word	0x2000093c
 80014ac:	20000930 	.word	0x20000930
 80014b0:	20000940 	.word	0x20000940
 80014b4:	20000520 	.word	0x20000520
 80014b8:	20000948 	.word	0x20000948
 80014bc:	20000860 	.word	0x20000860

080014c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014c6:	f002 f912 	bl	80036ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014ca:	f000 fad7 	bl	8001a7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014ce:	f001 f92d 	bl	800272c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80014d2:	f001 f8fb 	bl	80026cc <MX_USART3_UART_Init>
	MX_ADC1_Init();
 80014d6:	f000 fb43 	bl	8001b60 <MX_ADC1_Init>
	MX_I2C1_Init();
 80014da:	f000 fb93 	bl	8001c04 <MX_I2C1_Init>
	MX_I2C2_Init();
 80014de:	f000 fbd1 	bl	8001c84 <MX_I2C2_Init>
	MX_SPI1_Init();
 80014e2:	f000 fc0f 	bl	8001d04 <MX_SPI1_Init>
	MX_TIM1_Init();
 80014e6:	f000 fc4b 	bl	8001d80 <MX_TIM1_Init>
	MX_TIM2_Init();
 80014ea:	f000 fd19 	bl	8001f20 <MX_TIM2_Init>
	MX_TIM3_Init();
 80014ee:	f000 fdb1 	bl	8002054 <MX_TIM3_Init>
	MX_TIM4_Init();
 80014f2:	f000 fe05 	bl	8002100 <MX_TIM4_Init>
	MX_TIM5_Init();
 80014f6:	f000 fe59 	bl	80021ac <MX_TIM5_Init>
	MX_TIM8_Init();
 80014fa:	f000 ff05 	bl	8002308 <MX_TIM8_Init>
	MX_UART4_Init();
 80014fe:	f001 f825 	bl	800254c <MX_UART4_Init>
	MX_UART5_Init();
 8001502:	f001 f853 	bl	80025ac <MX_UART5_Init>
	MX_USART1_UART_Init();
 8001506:	f001 f881 	bl	800260c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800150a:	f001 f8af 	bl	800266c <MX_USART2_UART_Init>
	MX_TIM9_Init();
 800150e:	f000 ffcd 	bl	80024ac <MX_TIM9_Init>
	MX_TIM6_Init();
 8001512:	f000 fec3 	bl	800229c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	//logger.uart_handle = huart3; // for serial
	logger.uart_handle = huart2; // for wifi
 8001516:	4bb5      	ldr	r3, [pc, #724]	@ (80017ec <main+0x32c>)
 8001518:	4ab5      	ldr	r2, [pc, #724]	@ (80017f0 <main+0x330>)
 800151a:	3344      	adds	r3, #68	@ 0x44
 800151c:	4611      	mov	r1, r2
 800151e:	2288      	movs	r2, #136	@ 0x88
 8001520:	4618      	mov	r0, r3
 8001522:	f008 fc36 	bl	8009d92 <memcpy>

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2110      	movs	r1, #16
 800152a:	48b2      	ldr	r0, [pc, #712]	@ (80017f4 <main+0x334>)
 800152c:	f002 fee4 	bl	80042f8 <HAL_GPIO_WritePin>

	/* Disable EXTI4_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001530:	200a      	movs	r0, #10
 8001532:	f002 fd1a 	bl	8003f6a <HAL_NVIC_DisableIRQ>

	ITM_SendChar('h');
 8001536:	2068      	movs	r0, #104	@ 0x68
 8001538:	f7ff fad5 	bl	8000ae6 <ITM_SendChar>

	/* Software reset */
	data = 0x12;
 800153c:	2312      	movs	r3, #18
 800153e:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8001540:	23c8      	movs	r3, #200	@ 0xc8
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2301      	movs	r3, #1
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	1cfb      	adds	r3, r7, #3
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	227d      	movs	r2, #125	@ 0x7d
 8001550:	217e      	movs	r1, #126	@ 0x7e
 8001552:	48a9      	ldr	r0, [pc, #676]	@ (80017f8 <main+0x338>)
 8001554:	f002 ffb8 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4ba7      	ldr	r3, [pc, #668]	@ (80017fc <main+0x33c>)
 800155e:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001560:	4ba6      	ldr	r3, [pc, #664]	@ (80017fc <main+0x33c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <main+0xb4>
		printf("I2C communication error (%X).\n", status);
 8001568:	4ba4      	ldr	r3, [pc, #656]	@ (80017fc <main+0x33c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	48a4      	ldr	r0, [pc, #656]	@ (8001800 <main+0x340>)
 8001570:	f008 fa32 	bl	80099d8 <iprintf>

	data = 0x34;
 8001574:	2334      	movs	r3, #52	@ 0x34
 8001576:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8001578:	23c8      	movs	r3, #200	@ 0xc8
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	1cfb      	adds	r3, r7, #3
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	227d      	movs	r2, #125	@ 0x7d
 8001588:	217e      	movs	r1, #126	@ 0x7e
 800158a:	489b      	ldr	r0, [pc, #620]	@ (80017f8 <main+0x338>)
 800158c:	f002 ff9c 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b99      	ldr	r3, [pc, #612]	@ (80017fc <main+0x33c>)
 8001596:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001598:	4b98      	ldr	r3, [pc, #608]	@ (80017fc <main+0x33c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <main+0xec>
		printf("I2C communication error (%X).\n", status);
 80015a0:	4b96      	ldr	r3, [pc, #600]	@ (80017fc <main+0x33c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4896      	ldr	r0, [pc, #600]	@ (8001800 <main+0x340>)
 80015a8:	f008 fa16 	bl	80099d8 <iprintf>

	HAL_Delay(100);
 80015ac:	2064      	movs	r0, #100	@ 0x64
 80015ae:	f002 f8fb 	bl	80037a8 <HAL_Delay>

	/* Set KeyPad scanning engine */

	/* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
	data = 0x40;
 80015b2:	2340      	movs	r3, #64	@ 0x40
 80015b4:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 80015b6:	23c8      	movs	r3, #200	@ 0xc8
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	1cfb      	adds	r3, r7, #3
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	221e      	movs	r2, #30
 80015c6:	217e      	movs	r1, #126	@ 0x7e
 80015c8:	488b      	ldr	r0, [pc, #556]	@ (80017f8 <main+0x338>)
 80015ca:	f002 ff7d 	bl	80044c8 <HAL_I2C_Mem_Write>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b8a      	ldr	r3, [pc, #552]	@ (80017fc <main+0x33c>)
 80015d4:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 80015d6:	4b89      	ldr	r3, [pc, #548]	@ (80017fc <main+0x33c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <main+0x12a>
		printf("I2C communication error (%X).\n", status);
 80015de:	4b87      	ldr	r3, [pc, #540]	@ (80017fc <main+0x33c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4886      	ldr	r0, [pc, #536]	@ (8001800 <main+0x340>)
 80015e6:	f008 f9f7 	bl	80099d8 <iprintf>

	/* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
	data = 0xF0;
 80015ea:	23f0      	movs	r3, #240	@ 0xf0
 80015ec:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 80015ee:	23c8      	movs	r3, #200	@ 0xc8
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2301      	movs	r3, #1
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	1cfb      	adds	r3, r7, #3
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	220f      	movs	r2, #15
 80015fe:	217e      	movs	r1, #126	@ 0x7e
 8001600:	487d      	ldr	r0, [pc, #500]	@ (80017f8 <main+0x338>)
 8001602:	f002 ff61 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4b7c      	ldr	r3, [pc, #496]	@ (80017fc <main+0x33c>)
 800160c:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 800160e:	4b7b      	ldr	r3, [pc, #492]	@ (80017fc <main+0x33c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <main+0x162>
		printf("I2C communication error (%X).\n", status);
 8001616:	4b79      	ldr	r3, [pc, #484]	@ (80017fc <main+0x33c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4878      	ldr	r0, [pc, #480]	@ (8001800 <main+0x340>)
 800161e:	f008 f9db 	bl	80099d8 <iprintf>

	/* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
	data = 0x0F;
 8001622:	230f      	movs	r3, #15
 8001624:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8001626:	23c8      	movs	r3, #200	@ 0xc8
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	2301      	movs	r3, #1
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	1cfb      	adds	r3, r7, #3
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2301      	movs	r3, #1
 8001634:	220e      	movs	r2, #14
 8001636:	217e      	movs	r1, #126	@ 0x7e
 8001638:	486f      	ldr	r0, [pc, #444]	@ (80017f8 <main+0x338>)
 800163a:	f002 ff45 	bl	80044c8 <HAL_I2C_Mem_Write>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b6e      	ldr	r3, [pc, #440]	@ (80017fc <main+0x33c>)
 8001644:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001646:	4b6d      	ldr	r3, [pc, #436]	@ (80017fc <main+0x33c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <main+0x19a>
		printf("I2C communication error (%X).\n", status);
 800164e:	4b6b      	ldr	r3, [pc, #428]	@ (80017fc <main+0x33c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	486a      	ldr	r0, [pc, #424]	@ (8001800 <main+0x340>)
 8001656:	f008 f9bf 	bl	80099d8 <iprintf>

	/* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
	data = 0x0F;
 800165a:	230f      	movs	r3, #15
 800165c:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 800165e:	23c8      	movs	r3, #200	@ 0xc8
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	2301      	movs	r3, #1
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	1cfb      	adds	r3, r7, #3
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2301      	movs	r3, #1
 800166c:	220b      	movs	r2, #11
 800166e:	217e      	movs	r1, #126	@ 0x7e
 8001670:	4861      	ldr	r0, [pc, #388]	@ (80017f8 <main+0x338>)
 8001672:	f002 ff29 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <main+0x33c>)
 800167c:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <main+0x33c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <main+0x1d2>
		printf("I2C communication error (%X).\n", status);
 8001686:	4b5d      	ldr	r3, [pc, #372]	@ (80017fc <main+0x33c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	485c      	ldr	r0, [pc, #368]	@ (8001800 <main+0x340>)
 800168e:	f008 f9a3 	bl	80099d8 <iprintf>

	/* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
	data = 0x0F;
 8001692:	230f      	movs	r3, #15
 8001694:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8001696:	23c8      	movs	r3, #200	@ 0xc8
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2301      	movs	r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	1cfb      	adds	r3, r7, #3
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	2206      	movs	r2, #6
 80016a6:	217e      	movs	r1, #126	@ 0x7e
 80016a8:	4853      	ldr	r0, [pc, #332]	@ (80017f8 <main+0x338>)
 80016aa:	f002 ff0d 	bl	80044c8 <HAL_I2C_Mem_Write>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b52      	ldr	r3, [pc, #328]	@ (80017fc <main+0x33c>)
 80016b4:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 80016b6:	4b51      	ldr	r3, [pc, #324]	@ (80017fc <main+0x33c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <main+0x20a>
		printf("I2C communication error (%X).\n", status);
 80016be:	4b4f      	ldr	r3, [pc, #316]	@ (80017fc <main+0x33c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	484e      	ldr	r0, [pc, #312]	@ (8001800 <main+0x340>)
 80016c6:	f008 f987 	bl	80099d8 <iprintf>

	/* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
	data = 0x0F;
 80016ca:	230f      	movs	r3, #15
 80016cc:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 80016ce:	23c8      	movs	r3, #200	@ 0xc8
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	1cfb      	adds	r3, r7, #3
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	2223      	movs	r2, #35	@ 0x23
 80016de:	217e      	movs	r1, #126	@ 0x7e
 80016e0:	4845      	ldr	r0, [pc, #276]	@ (80017f8 <main+0x338>)
 80016e2:	f002 fef1 	bl	80044c8 <HAL_I2C_Mem_Write>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b44      	ldr	r3, [pc, #272]	@ (80017fc <main+0x33c>)
 80016ec:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 80016ee:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <main+0x33c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <main+0x242>
		printf("I2C communication error (%X).\n", status);
 80016f6:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <main+0x33c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4840      	ldr	r0, [pc, #256]	@ (8001800 <main+0x340>)
 80016fe:	f008 f96b 	bl	80099d8 <iprintf>

	/* Set RegDebounceConfig to 0x05 (16ms debounce time) */
	data = 0x05;
 8001702:	2305      	movs	r3, #5
 8001704:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8001706:	23c8      	movs	r3, #200	@ 0xc8
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	1cfb      	adds	r3, r7, #3
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	2222      	movs	r2, #34	@ 0x22
 8001716:	217e      	movs	r1, #126	@ 0x7e
 8001718:	4837      	ldr	r0, [pc, #220]	@ (80017f8 <main+0x338>)
 800171a:	f002 fed5 	bl	80044c8 <HAL_I2C_Mem_Write>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <main+0x33c>)
 8001724:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001726:	4b35      	ldr	r3, [pc, #212]	@ (80017fc <main+0x33c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <main+0x27a>
		printf("I2C communication error (%X).\n", status);
 800172e:	4b33      	ldr	r3, [pc, #204]	@ (80017fc <main+0x33c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4832      	ldr	r0, [pc, #200]	@ (8001800 <main+0x340>)
 8001736:	f008 f94f 	bl	80099d8 <iprintf>

	/* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
	data = 0x7D;
 800173a:	237d      	movs	r3, #125	@ 0x7d
 800173c:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 800173e:	23c8      	movs	r3, #200	@ 0xc8
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	1cfb      	adds	r3, r7, #3
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	2225      	movs	r2, #37	@ 0x25
 800174e:	217e      	movs	r1, #126	@ 0x7e
 8001750:	4829      	ldr	r0, [pc, #164]	@ (80017f8 <main+0x338>)
 8001752:	f002 feb9 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <main+0x33c>)
 800175c:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <main+0x33c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <main+0x2b2>
		printf("I2C communication error (%X).\n", status);
 8001766:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <main+0x33c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	4824      	ldr	r0, [pc, #144]	@ (8001800 <main+0x340>)
 800176e:	f008 f933 	bl	80099d8 <iprintf>

	/* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
	data = 0x1B;
 8001772:	231b      	movs	r3, #27
 8001774:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 8001776:	23c8      	movs	r3, #200	@ 0xc8
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2301      	movs	r3, #1
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	1cfb      	adds	r3, r7, #3
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	2226      	movs	r2, #38	@ 0x26
 8001786:	217e      	movs	r1, #126	@ 0x7e
 8001788:	481b      	ldr	r0, [pc, #108]	@ (80017f8 <main+0x338>)
 800178a:	f002 fe9d 	bl	80044c8 <HAL_I2C_Mem_Write>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <main+0x33c>)
 8001794:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <main+0x33c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <main+0x2ea>
		printf("I2C communication error (%X).\n", status);
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <main+0x33c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4816      	ldr	r0, [pc, #88]	@ (8001800 <main+0x340>)
 80017a6:	f008 f917 	bl	80099d8 <iprintf>

	/* Enable EXTI4_IRQ after SX1509 initialization */
	HAL_Delay(100);
 80017aa:	2064      	movs	r0, #100	@ 0x64
 80017ac:	f001 fffc 	bl	80037a8 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f002 fbcc 	bl	8003f4e <HAL_NVIC_EnableIRQ>

	/* Disable EXTI2_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80017b6:	2008      	movs	r0, #8
 80017b8:	f002 fbd7 	bl	8003f6a <HAL_NVIC_DisableIRQ>

	/* Software reset */
	data = 0x12;
 80017bc:	2312      	movs	r3, #18
 80017be:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80017c0:	23c8      	movs	r3, #200	@ 0xc8
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	1cfb      	adds	r3, r7, #3
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	227d      	movs	r2, #125	@ 0x7d
 80017d0:	217c      	movs	r1, #124	@ 0x7c
 80017d2:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <main+0x338>)
 80017d4:	f002 fe78 	bl	80044c8 <HAL_I2C_Mem_Write>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <main+0x33c>)
 80017de:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <main+0x33c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <main+0x350>
 80017e8:	e00c      	b.n	8001804 <main+0x344>
 80017ea:	bf00      	nop
 80017ec:	20000860 	.word	0x20000860
 80017f0:	20000750 	.word	0x20000750
 80017f4:	40021000 	.word	0x40021000
 80017f8:	2000024c 	.word	0x2000024c
 80017fc:	20000944 	.word	0x20000944
 8001800:	0800bab0 	.word	0x0800bab0
		printf("I2C communication error (%X).\n", status);
 8001804:	4b8f      	ldr	r3, [pc, #572]	@ (8001a44 <main+0x584>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	488f      	ldr	r0, [pc, #572]	@ (8001a48 <main+0x588>)
 800180c:	f008 f8e4 	bl	80099d8 <iprintf>

	data = 0x34;
 8001810:	2334      	movs	r3, #52	@ 0x34
 8001812:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8001814:	23c8      	movs	r3, #200	@ 0xc8
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	2301      	movs	r3, #1
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	1cfb      	adds	r3, r7, #3
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	227d      	movs	r2, #125	@ 0x7d
 8001824:	217c      	movs	r1, #124	@ 0x7c
 8001826:	4889      	ldr	r0, [pc, #548]	@ (8001a4c <main+0x58c>)
 8001828:	f002 fe4e 	bl	80044c8 <HAL_I2C_Mem_Write>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	4b84      	ldr	r3, [pc, #528]	@ (8001a44 <main+0x584>)
 8001832:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001834:	4b83      	ldr	r3, [pc, #524]	@ (8001a44 <main+0x584>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <main+0x388>
		printf("I2C communication error (%X).\n", status);
 800183c:	4b81      	ldr	r3, [pc, #516]	@ (8001a44 <main+0x584>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	4881      	ldr	r0, [pc, #516]	@ (8001a48 <main+0x588>)
 8001844:	f008 f8c8 	bl	80099d8 <iprintf>

	HAL_Delay(100);
 8001848:	2064      	movs	r0, #100	@ 0x64
 800184a:	f001 ffad 	bl	80037a8 <HAL_Delay>

	/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 800184e:	23ff      	movs	r3, #255	@ 0xff
 8001850:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8001852:	23c8      	movs	r3, #200	@ 0xc8
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	1cfb      	adds	r3, r7, #3
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2301      	movs	r3, #1
 8001860:	220f      	movs	r2, #15
 8001862:	217c      	movs	r1, #124	@ 0x7c
 8001864:	4879      	ldr	r0, [pc, #484]	@ (8001a4c <main+0x58c>)
 8001866:	f002 fe2f 	bl	80044c8 <HAL_I2C_Mem_Write>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4b75      	ldr	r3, [pc, #468]	@ (8001a44 <main+0x584>)
 8001870:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001872:	4b74      	ldr	r3, [pc, #464]	@ (8001a44 <main+0x584>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <main+0x3c6>
		printf("I2C communication error (%X).\n", status);
 800187a:	4b72      	ldr	r3, [pc, #456]	@ (8001a44 <main+0x584>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4871      	ldr	r0, [pc, #452]	@ (8001a48 <main+0x588>)
 8001882:	f008 f8a9 	bl	80099d8 <iprintf>

	/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8001886:	23ff      	movs	r3, #255	@ 0xff
 8001888:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800188a:	23c8      	movs	r3, #200	@ 0xc8
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	2301      	movs	r3, #1
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	1cfb      	adds	r3, r7, #3
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2301      	movs	r3, #1
 8001898:	220e      	movs	r2, #14
 800189a:	217c      	movs	r1, #124	@ 0x7c
 800189c:	486b      	ldr	r0, [pc, #428]	@ (8001a4c <main+0x58c>)
 800189e:	f002 fe13 	bl	80044c8 <HAL_I2C_Mem_Write>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b67      	ldr	r3, [pc, #412]	@ (8001a44 <main+0x584>)
 80018a8:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 80018aa:	4b66      	ldr	r3, [pc, #408]	@ (8001a44 <main+0x584>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <main+0x3fe>
		printf("I2C communication error (%X).\n", status);
 80018b2:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <main+0x584>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4863      	ldr	r0, [pc, #396]	@ (8001a48 <main+0x588>)
 80018ba:	f008 f88d 	bl	80099d8 <iprintf>

	/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
	data = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 80018c2:	23c8      	movs	r3, #200	@ 0xc8
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2301      	movs	r3, #1
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	1cfb      	adds	r3, r7, #3
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	2213      	movs	r2, #19
 80018d2:	217c      	movs	r1, #124	@ 0x7c
 80018d4:	485d      	ldr	r0, [pc, #372]	@ (8001a4c <main+0x58c>)
 80018d6:	f002 fdf7 	bl	80044c8 <HAL_I2C_Mem_Write>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b59      	ldr	r3, [pc, #356]	@ (8001a44 <main+0x584>)
 80018e0:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 80018e2:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <main+0x584>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <main+0x436>
		printf("I2C communication error (%X).\n", status);
 80018ea:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <main+0x584>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4855      	ldr	r0, [pc, #340]	@ (8001a48 <main+0x588>)
 80018f2:	f008 f871 	bl	80099d8 <iprintf>

	/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 80018f6:	23aa      	movs	r3, #170	@ 0xaa
 80018f8:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 80018fa:	23c8      	movs	r3, #200	@ 0xc8
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	2301      	movs	r3, #1
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	1cfb      	adds	r3, r7, #3
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2216      	movs	r2, #22
 800190a:	217c      	movs	r1, #124	@ 0x7c
 800190c:	484f      	ldr	r0, [pc, #316]	@ (8001a4c <main+0x58c>)
 800190e:	f002 fddb 	bl	80044c8 <HAL_I2C_Mem_Write>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <main+0x584>)
 8001918:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <main+0x584>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <main+0x46e>
		printf("I2C communication error (%X).\n", status);
 8001922:	4b48      	ldr	r3, [pc, #288]	@ (8001a44 <main+0x584>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4619      	mov	r1, r3
 8001928:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <main+0x588>)
 800192a:	f008 f855 	bl	80099d8 <iprintf>

	/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 800192e:	23aa      	movs	r3, #170	@ 0xaa
 8001930:	70fb      	strb	r3, [r7, #3]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8001932:	23c8      	movs	r3, #200	@ 0xc8
 8001934:	9302      	str	r3, [sp, #8]
 8001936:	2301      	movs	r3, #1
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	1cfb      	adds	r3, r7, #3
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	2217      	movs	r2, #23
 8001942:	217c      	movs	r1, #124	@ 0x7c
 8001944:	4841      	ldr	r0, [pc, #260]	@ (8001a4c <main+0x58c>)
 8001946:	f002 fdbf 	bl	80044c8 <HAL_I2C_Mem_Write>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a44 <main+0x584>)
 8001950:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8001952:	4b3c      	ldr	r3, [pc, #240]	@ (8001a44 <main+0x584>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <main+0x4a6>
		printf("I2C communication error (%X).\n", status);
 800195a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a44 <main+0x584>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	4839      	ldr	r0, [pc, #228]	@ (8001a48 <main+0x588>)
 8001962:	f008 f839 	bl	80099d8 <iprintf>

	/* Enable EXTI2_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8001966:	2064      	movs	r0, #100	@ 0x64
 8001968:	f001 ff1e 	bl	80037a8 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800196c:	2008      	movs	r0, #8
 800196e:	f002 faee 	bl	8003f4e <HAL_NVIC_EnableIRQ>


	printf("Ready\n");
 8001972:	4837      	ldr	r0, [pc, #220]	@ (8001a50 <main+0x590>)
 8001974:	f008 f8a0 	bl	8009ab8 <puts>

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2110      	movs	r1, #16
 800197c:	4835      	ldr	r0, [pc, #212]	@ (8001a54 <main+0x594>)
 800197e:	f002 fcbb 	bl	80042f8 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8001982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001986:	f001 ff0f 	bl	80037a8 <HAL_Delay>

	/* Start encoders timers */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800198a:	213c      	movs	r1, #60	@ 0x3c
 800198c:	4832      	ldr	r0, [pc, #200]	@ (8001a58 <main+0x598>)
 800198e:	f005 f8b3 	bl	8006af8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001992:	213c      	movs	r1, #60	@ 0x3c
 8001994:	4831      	ldr	r0, [pc, #196]	@ (8001a5c <main+0x59c>)
 8001996:	f005 f8af 	bl	8006af8 <HAL_TIM_Encoder_Start>

	/* Start servomotors PWM (avoid floating inputs to servomotors) */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
 800199c:	4830      	ldr	r0, [pc, #192]	@ (8001a60 <main+0x5a0>)
 800199e:	f004 fea9 	bl	80066f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019a2:	2104      	movs	r1, #4
 80019a4:	482e      	ldr	r0, [pc, #184]	@ (8001a60 <main+0x5a0>)
 80019a6:	f004 fea5 	bl	80066f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019aa:	2108      	movs	r1, #8
 80019ac:	482c      	ldr	r0, [pc, #176]	@ (8001a60 <main+0x5a0>)
 80019ae:	f004 fea1 	bl	80066f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019b2:	210c      	movs	r1, #12
 80019b4:	482a      	ldr	r0, [pc, #168]	@ (8001a60 <main+0x5a0>)
 80019b6:	f004 fe9d 	bl	80066f4 <HAL_TIM_PWM_Start>

	/* Start motor PWM */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80019ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <main+0x5a4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80019c2:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <main+0x5a4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <main+0x5a4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <main+0x5a4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80019da:	2100      	movs	r1, #0
 80019dc:	4821      	ldr	r0, [pc, #132]	@ (8001a64 <main+0x5a4>)
 80019de:	f004 fe89 	bl	80066f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80019e2:	2104      	movs	r1, #4
 80019e4:	481f      	ldr	r0, [pc, #124]	@ (8001a64 <main+0x5a4>)
 80019e6:	f004 fe85 	bl	80066f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80019ea:	2108      	movs	r1, #8
 80019ec:	481d      	ldr	r0, [pc, #116]	@ (8001a64 <main+0x5a4>)
 80019ee:	f004 fe81 	bl	80066f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80019f2:	210c      	movs	r1, #12
 80019f4:	481b      	ldr	r0, [pc, #108]	@ (8001a64 <main+0x5a4>)
 80019f6:	f004 fe7d 	bl	80066f4 <HAL_TIM_PWM_Start>

	/* Start speed ctrl ISR */
	HAL_TIM_Base_Start_IT(&htim6);
 80019fa:	481b      	ldr	r0, [pc, #108]	@ (8001a68 <main+0x5a8>)
 80019fc:	f004 fd4a 	bl	8006494 <HAL_TIM_Base_Start_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ertc_dlog_update(&logger);
 8001a00:	481a      	ldr	r0, [pc, #104]	@ (8001a6c <main+0x5ac>)
 8001a02:	f7ff f849 	bl	8000a98 <ertc_dlog_update>


		printf("Line Sensor Data: ");
 8001a06:	481a      	ldr	r0, [pc, #104]	@ (8001a70 <main+0x5b0>)
 8001a08:	f007 ffe6 	bl	80099d8 <iprintf>
		for(int i=7;i>=0;i--){
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	e00e      	b.n	8001a30 <main+0x570>
			printf("%d", (linesensor_data >> i) & 0x01);
 8001a12:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <main+0x5b4>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	fa42 f303 	asr.w	r3, r2, r3
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	4814      	ldr	r0, [pc, #80]	@ (8001a78 <main+0x5b8>)
 8001a26:	f007 ffd7 	bl	80099d8 <iprintf>
		for(int i=7;i>=0;i--){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	daed      	bge.n	8001a12 <main+0x552>
		}
		printf("\n");
 8001a36:	200a      	movs	r0, #10
 8001a38:	f007 ffe0 	bl	80099fc <putchar>

		HAL_Delay(200);
 8001a3c:	20c8      	movs	r0, #200	@ 0xc8
 8001a3e:	f001 feb3 	bl	80037a8 <HAL_Delay>
		ertc_dlog_update(&logger);
 8001a42:	e7dd      	b.n	8001a00 <main+0x540>
 8001a44:	20000944 	.word	0x20000944
 8001a48:	0800bab0 	.word	0x0800bab0
 8001a4c:	2000024c 	.word	0x2000024c
 8001a50:	0800bad0 	.word	0x0800bad0
 8001a54:	40021000 	.word	0x40021000
 8001a58:	200003f0 	.word	0x200003f0
 8001a5c:	2000043c 	.word	0x2000043c
 8001a60:	20000358 	.word	0x20000358
 8001a64:	20000520 	.word	0x20000520
 8001a68:	200004d4 	.word	0x200004d4
 8001a6c:	20000860 	.word	0x20000860
 8001a70:	0800bad8 	.word	0x0800bad8
 8001a74:	20000945 	.word	0x20000945
 8001a78:	0800baec 	.word	0x0800baec

08001a7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b094      	sub	sp, #80	@ 0x50
 8001a80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	2234      	movs	r2, #52	@ 0x34
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f008 f8f4 	bl	8009c78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001aa0:	f003 fa9a 	bl	8004fd8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <SystemClock_Config+0xdc>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b58 <SystemClock_Config+0xdc>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <SystemClock_Config+0xdc>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <SystemClock_Config+0xe0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ac4:	4a25      	ldr	r2, [pc, #148]	@ (8001b5c <SystemClock_Config+0xe0>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <SystemClock_Config+0xe0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001adc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001ae0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ae6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aea:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001aec:	2304      	movs	r3, #4
 8001aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8001af0:	2360      	movs	r3, #96	@ 0x60
 8001af2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001af8:	2304      	movs	r3, #4
 8001afa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fac7 	bl	8005098 <HAL_RCC_OscConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001b10:	f000 ff54 	bl	80029bc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b14:	f003 fa70 	bl	8004ff8 <HAL_PWREx_EnableOverDrive>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8001b1e:	f000 ff4d 	bl	80029bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b22:	230f      	movs	r3, #15
 8001b24:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b26:	2302      	movs	r3, #2
 8001b28:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b32:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fd58 	bl	80055f4 <HAL_RCC_ClockConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8001b4a:	f000 ff37 	bl	80029bc <Error_Handler>
	}
}
 8001b4e:	bf00      	nop
 8001b50:	3750      	adds	r7, #80	@ 0x50
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000

08001b60 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001b66:	463b      	mov	r3, r7
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b74:	4a21      	ldr	r2, [pc, #132]	@ (8001bfc <MX_ADC1_Init+0x9c>)
 8001b76:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b7e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001ba2:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <MX_ADC1_Init+0xa0>)
 8001ba4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001bc2:	f001 fe15 	bl	80037f0 <HAL_ADC_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001bcc:	f000 fef6 	bl	80029bc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_ADC1_Init+0x98>)
 8001be2:	f001 fe49 	bl	8003878 <HAL_ADC_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001bec:	f000 fee6 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000204 	.word	0x20000204
 8001bfc:	40012000 	.word	0x40012000
 8001c00:	0f000001 	.word	0x0f000001

08001c04 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c7c <MX_I2C1_Init+0x78>)
 8001c0c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c10:	4a1b      	ldr	r2, [pc, #108]	@ (8001c80 <MX_I2C1_Init+0x7c>)
 8001c12:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c3e:	480e      	ldr	r0, [pc, #56]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c40:	f002 fba6 	bl	8004390 <HAL_I2C_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001c4a:	f000 feb7 	bl	80029bc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c52:	f003 f929 	bl	8004ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001c5c:	f000 feae 	bl	80029bc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c60:	2100      	movs	r1, #0
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <MX_I2C1_Init+0x74>)
 8001c64:	f003 f96b 	bl	8004f3e <HAL_I2CEx_ConfigDigitalFilter>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001c6e:	f000 fea5 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000024c 	.word	0x2000024c
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	20303e5d 	.word	0x20303e5d

08001c84 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <MX_I2C2_Init+0x78>)
 8001c8c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001c90:	4a1b      	ldr	r2, [pc, #108]	@ (8001d00 <MX_I2C2_Init+0x7c>)
 8001c92:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cbe:	480e      	ldr	r0, [pc, #56]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001cc0:	f002 fb66 	bl	8004390 <HAL_I2C_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001cca:	f000 fe77 	bl	80029bc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001cd2:	f003 f8e9 	bl	8004ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001cdc:	f000 fe6e 	bl	80029bc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_I2C2_Init+0x74>)
 8001ce4:	f003 f92b 	bl	8004f3e <HAL_I2CEx_ConfigDigitalFilter>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001cee:	f000 fe65 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200002a0 	.word	0x200002a0
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	20303e5d 	.word	0x20303e5d

08001d04 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <MX_SPI1_Init+0x78>)
 8001d0c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d14:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d1e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001d22:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d24:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d36:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d52:	2207      	movs	r2, #7
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d5e:	2208      	movs	r2, #8
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_SPI1_Init+0x74>)
 8001d64:	f004 fa94 	bl	8006290 <HAL_SPI_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 8001d6e:	f000 fe25 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200002f4 	.word	0x200002f4
 8001d7c:	40013000 	.word	0x40013000

08001d80 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b09a      	sub	sp, #104	@ 0x68
 8001d84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001da0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	222c      	movs	r2, #44	@ 0x2c
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f007 ff5c 	bl	8009c78 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001dc0:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001dc2:	4a56      	ldr	r2, [pc, #344]	@ (8001f1c <MX_TIM1_Init+0x19c>)
 8001dc4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001dc6:	4b54      	ldr	r3, [pc, #336]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b52      	ldr	r3, [pc, #328]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8001dd2:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001dde:	4b4e      	ldr	r3, [pc, #312]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dea:	484b      	ldr	r0, [pc, #300]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001dec:	f004 fafb 	bl	80063e6 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8001df6:	f000 fde1 	bl	80029bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e04:	4619      	mov	r1, r3
 8001e06:	4844      	ldr	r0, [pc, #272]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001e08:	f005 fa36 	bl	8007278 <HAL_TIM_ConfigClockSource>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8001e12:	f000 fdd3 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001e16:	4840      	ldr	r0, [pc, #256]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001e18:	f004 fbb4 	bl	8006584 <HAL_TIM_OC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8001e22:	f000 fdcb 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4837      	ldr	r0, [pc, #220]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001e3a:	f006 f803 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0xc8>
	{
		Error_Handler();
 8001e44:	f000 fdba 	bl	80029bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001e48:	2350      	movs	r3, #80	@ 0x50
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001e50:	2302      	movs	r3, #2
 8001e52:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482a      	ldr	r0, [pc, #168]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001e6e:	f004 ffd9 	bl	8006e24 <HAL_TIM_OC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0xfc>
	{
		Error_Handler();
 8001e78:	f000 fda0 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e80:	2204      	movs	r2, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4824      	ldr	r0, [pc, #144]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001e86:	f004 ffcd 	bl	8006e24 <HAL_TIM_OC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x114>
	{
		Error_Handler();
 8001e90:	f000 fd94 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e98:	2208      	movs	r2, #8
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	481e      	ldr	r0, [pc, #120]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001e9e:	f004 ffc1 	bl	8006e24 <HAL_TIM_OC_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 8001ea8:	f000 fd88 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4818      	ldr	r0, [pc, #96]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001eb6:	f004 ffb5 	bl	8006e24 <HAL_TIM_OC_ConfigChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0x144>
	{
		Error_Handler();
 8001ec0:	f000 fd7c 	bl	80029bc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001edc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001efa:	f006 f831 	bl	8007f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0x188>
	{
		Error_Handler();
 8001f04:	f000 fd5a 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001f08:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <MX_TIM1_Init+0x198>)
 8001f0a:	f001 f82f 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 8001f0e:	bf00      	nop
 8001f10:	3768      	adds	r7, #104	@ 0x68
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000358 	.word	0x20000358
 8001f1c:	40010000 	.word	0x40010000

08001f20 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b092      	sub	sp, #72	@ 0x48
 8001f24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
 8001f50:	615a      	str	r2, [r3, #20]
 8001f52:	619a      	str	r2, [r3, #24]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001f54:	463b      	mov	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001f60:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f66:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001f68:	4b39      	ldr	r3, [pc, #228]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001f74:	4b36      	ldr	r3, [pc, #216]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f76:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f88:	4831      	ldr	r0, [pc, #196]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001f8a:	f004 fa2c 	bl	80063e6 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8001f94:	f000 fd12 	bl	80029bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	482a      	ldr	r0, [pc, #168]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001fa6:	f005 f967 	bl	8007278 <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8001fb0:	f000 fd04 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb4:	4826      	ldr	r0, [pc, #152]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001fb6:	f004 fb46 	bl	8006646 <HAL_TIM_PWM_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 8001fc0:	f000 fcfc 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001fc4:	4822      	ldr	r0, [pc, #136]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001fc6:	f004 fc8f 	bl	80068e8 <HAL_TIM_IC_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001fd0:	f000 fcf4 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481b      	ldr	r0, [pc, #108]	@ (8002050 <MX_TIM2_Init+0x130>)
 8001fe4:	f005 ff2e 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 8001fee:	f000 fce5 	bl	80029bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff2:	2360      	movs	r3, #96	@ 0x60
 8001ff4:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	4811      	ldr	r0, [pc, #68]	@ (8002050 <MX_TIM2_Init+0x130>)
 800200c:	f005 f820 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0xfa>
	{
		Error_Handler();
 8002016:	f000 fcd1 	bl	80029bc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	2208      	movs	r2, #8
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	@ (8002050 <MX_TIM2_Init+0x130>)
 8002032:	f004 ff71 	bl	8006f18 <HAL_TIM_IC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x120>
	{
		Error_Handler();
 800203c:	f000 fcbe 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002040:	4803      	ldr	r0, [pc, #12]	@ (8002050 <MX_TIM2_Init+0x130>)
 8002042:	f000 ff93 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 8002046:	bf00      	nop
 8002048:	3748      	adds	r7, #72	@ 0x48
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200003a4 	.word	0x200003a4

08002054 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	@ 0x30
 8002058:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2224      	movs	r2, #36	@ 0x24
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f007 fe08 	bl	8009c78 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 8002074:	4a21      	ldr	r2, [pc, #132]	@ (80020fc <MX_TIM3_Init+0xa8>)
 8002076:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = TIM3_ARR_VALUE;
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 8002086:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800208a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002098:	2303      	movs	r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020a0:	2301      	movs	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 80020a8:	230f      	movs	r3, #15
 80020aa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 15;
 80020b8:	230f      	movs	r3, #15
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4619      	mov	r1, r3
 80020c2:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 80020c4:	f004 fc72 	bl	80069ac <HAL_TIM_Encoder_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 80020ce:	f000 fc75 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020da:	463b      	mov	r3, r7
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	@ (80020f8 <MX_TIM3_Init+0xa4>)
 80020e0:	f005 feb0 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 80020ea:	f000 fc67 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3730      	adds	r7, #48	@ 0x30
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003f0 	.word	0x200003f0
 80020fc:	40000400 	.word	0x40000400

08002100 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	@ 0x30
 8002104:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	2224      	movs	r2, #36	@ 0x24
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f007 fdb2 	bl	8009c78 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	463b      	mov	r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 8002120:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <MX_TIM4_Init+0xa8>)
 8002122:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212a:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_ARR_VALUE;
 8002130:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 8002132:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002136:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213e:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002144:	2303      	movs	r3, #3
 8002146:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8002154:	230f      	movs	r3, #15
 8002156:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800215c:	2301      	movs	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 15;
 8002164:	230f      	movs	r3, #15
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4619      	mov	r1, r3
 800216e:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 8002170:	f004 fc1c 	bl	80069ac <HAL_TIM_Encoder_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 800217a:	f000 fc1f 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002186:	463b      	mov	r3, r7
 8002188:	4619      	mov	r1, r3
 800218a:	4806      	ldr	r0, [pc, #24]	@ (80021a4 <MX_TIM4_Init+0xa4>)
 800218c:	f005 fe5a 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 8002196:	f000 fc11 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	3730      	adds	r7, #48	@ 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000043c 	.word	0x2000043c
 80021a8:	40000800 	.word	0x40000800

080021ac <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	@ 0x38
 80021b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80021cc:	463b      	mov	r3, r7
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	615a      	str	r2, [r3, #20]
 80021dc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80021de:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <MX_TIM5_Init+0xe8>)
 80021e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <MX_TIM5_Init+0xec>)
 80021e2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80021e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <MX_TIM5_Init+0xe8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <MX_TIM5_Init+0xe8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <MX_TIM5_Init+0xe8>)
 80021f2:	f04f 32ff 	mov.w	r2, #4294967295
 80021f6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f8:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <MX_TIM5_Init+0xe8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002204:	4823      	ldr	r0, [pc, #140]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002206:	f004 f8ee 	bl	80063e6 <HAL_TIM_Base_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 8002210:	f000 fbd4 	bl	80029bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800221a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800221e:	4619      	mov	r1, r3
 8002220:	481c      	ldr	r0, [pc, #112]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002222:	f005 f829 	bl	8007278 <HAL_TIM_ConfigClockSource>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 800222c:	f000 fbc6 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002230:	4818      	ldr	r0, [pc, #96]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002232:	f004 fa08 	bl	8006646 <HAL_TIM_PWM_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 800223c:	f000 fbbe 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4811      	ldr	r0, [pc, #68]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002250:	f005 fdf8 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 800225a:	f000 fbaf 	bl	80029bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225e:	2360      	movs	r3, #96	@ 0x60
 8002260:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	4619      	mov	r1, r3
 8002274:	4807      	ldr	r0, [pc, #28]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002276:	f004 feeb 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 8002280:	f000 fb9c 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <MX_TIM5_Init+0xe8>)
 8002286:	f000 fe71 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 800228a:	bf00      	nop
 800228c:	3738      	adds	r7, #56	@ 0x38
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000488 	.word	0x20000488
 8002298:	40000c00 	.word	0x40000c00

0800229c <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022ae:	4a15      	ldr	r2, [pc, #84]	@ (8002304 <MX_TIM6_Init+0x68>)
 80022b0:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = TIM6_PSC_VALUE;
 80022b2:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022b4:	f242 527f 	movw	r2, #9599	@ 0x257f
 80022b8:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = TIM6_ARR_VALUE;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022c2:	2263      	movs	r2, #99	@ 0x63
 80022c4:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022cc:	480c      	ldr	r0, [pc, #48]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022ce:	f004 f88a 	bl	80063e6 <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 80022d8:	f000 fb70 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	@ (8002300 <MX_TIM6_Init+0x64>)
 80022ea:	f005 fdab 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 80022f4:	f000 fb62 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200004d4 	.word	0x200004d4
 8002304:	40001000 	.word	0x40001000

08002308 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b09a      	sub	sp, #104	@ 0x68
 800230c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800230e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002328:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	222c      	movs	r2, #44	@ 0x2c
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f007 fc98 	bl	8009c78 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8002348:	4b56      	ldr	r3, [pc, #344]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 800234a:	4a57      	ldr	r2, [pc, #348]	@ (80024a8 <MX_TIM8_Init+0x1a0>)
 800234c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800234e:	4b55      	ldr	r3, [pc, #340]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002350:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8002354:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b53      	ldr	r3, [pc, #332]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = TIM8_ARR_VALUE;
 800235c:	4b51      	ldr	r3, [pc, #324]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 800235e:	f240 128f 	movw	r2, #399	@ 0x18f
 8002362:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002364:	4b4f      	ldr	r3, [pc, #316]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800236a:	4b4e      	ldr	r3, [pc, #312]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b4c      	ldr	r3, [pc, #304]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002376:	484b      	ldr	r0, [pc, #300]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002378:	f004 f835 	bl	80063e6 <HAL_TIM_Base_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM8_Init+0x7e>
	{
		Error_Handler();
 8002382:	f000 fb1b 	bl	80029bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800238a:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800238c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002390:	4619      	mov	r1, r3
 8002392:	4844      	ldr	r0, [pc, #272]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002394:	f004 ff70 	bl	8007278 <HAL_TIM_ConfigClockSource>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM8_Init+0x9a>
	{
		Error_Handler();
 800239e:	f000 fb0d 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023a2:	4840      	ldr	r0, [pc, #256]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 80023a4:	f004 f94f 	bl	8006646 <HAL_TIM_PWM_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM8_Init+0xaa>
	{
		Error_Handler();
 80023ae:	f000 fb05 	bl	80029bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80023c2:	4619      	mov	r1, r3
 80023c4:	4837      	ldr	r0, [pc, #220]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 80023c6:	f005 fd3d 	bl	8007e44 <HAL_TIMEx_MasterConfigSynchronization>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM8_Init+0xcc>
	{
		Error_Handler();
 80023d0:	f000 faf4 	bl	80029bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d4:	2360      	movs	r3, #96	@ 0x60
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023dc:	2300      	movs	r3, #0
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023e0:	2300      	movs	r3, #0
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	482a      	ldr	r0, [pc, #168]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 80023fa:	f004 fe29 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM8_Init+0x100>
	{
		Error_Handler();
 8002404:	f000 fada 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002408:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800240c:	2204      	movs	r2, #4
 800240e:	4619      	mov	r1, r3
 8002410:	4824      	ldr	r0, [pc, #144]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002412:	f004 fe1d 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM8_Init+0x118>
	{
		Error_Handler();
 800241c:	f000 face 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002420:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002424:	2208      	movs	r2, #8
 8002426:	4619      	mov	r1, r3
 8002428:	481e      	ldr	r0, [pc, #120]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 800242a:	f004 fe11 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM8_Init+0x130>
	{
		Error_Handler();
 8002434:	f000 fac2 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002438:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800243c:	220c      	movs	r2, #12
 800243e:	4619      	mov	r1, r3
 8002440:	4818      	ldr	r0, [pc, #96]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002442:	f004 fe05 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM8_Init+0x148>
	{
		Error_Handler();
 800244c:	f000 fab6 	bl	80029bc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002468:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	4619      	mov	r1, r3
 8002484:	4807      	ldr	r0, [pc, #28]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002486:	f005 fd6b 	bl	8007f60 <HAL_TIMEx_ConfigBreakDeadTime>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM8_Init+0x18c>
	{
		Error_Handler();
 8002490:	f000 fa94 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8002494:	4803      	ldr	r0, [pc, #12]	@ (80024a4 <MX_TIM8_Init+0x19c>)
 8002496:	f000 fd69 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 800249a:	bf00      	nop
 800249c:	3768      	adds	r7, #104	@ 0x68
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000520 	.word	0x20000520
 80024a8:	40010400 	.word	0x40010400

080024ac <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024c6:	4a20      	ldr	r2, [pc, #128]	@ (8002548 <MX_TIM9_Init+0x9c>)
 80024c8:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 80024d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024dc:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80024ea:	4816      	ldr	r0, [pc, #88]	@ (8002544 <MX_TIM9_Init+0x98>)
 80024ec:	f004 f8ab 	bl	8006646 <HAL_TIM_PWM_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM9_Init+0x4e>
	{
		Error_Handler();
 80024f6:	f000 fa61 	bl	80029bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024fa:	2360      	movs	r3, #96	@ 0x60
 80024fc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	4619      	mov	r1, r3
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <MX_TIM9_Init+0x98>)
 8002512:	f004 fd9d 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM9_Init+0x74>
	{
		Error_Handler();
 800251c:	f000 fa4e 	bl	80029bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2204      	movs	r2, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4807      	ldr	r0, [pc, #28]	@ (8002544 <MX_TIM9_Init+0x98>)
 8002528:	f004 fd92 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM9_Init+0x8a>
	{
		Error_Handler();
 8002532:	f000 fa43 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8002536:	4803      	ldr	r0, [pc, #12]	@ (8002544 <MX_TIM9_Init+0x98>)
 8002538:	f000 fd18 	bl	8002f6c <HAL_TIM_MspPostInit>

}
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000056c 	.word	0x2000056c
 8002548:	40014000 	.word	0x40014000

0800254c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002552:	4a15      	ldr	r2, [pc, #84]	@ (80025a8 <MX_UART4_Init+0x5c>)
 8002554:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8002556:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002558:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800255c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <MX_UART4_Init+0x58>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <MX_UART4_Init+0x58>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002582:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002588:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <MX_UART4_Init+0x58>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 800258e:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <MX_UART4_Init+0x58>)
 8002590:	f005 fd82 	bl	8008098 <HAL_UART_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_UART4_Init+0x52>
	{
		Error_Handler();
 800259a:	f000 fa0f 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200005b8 	.word	0x200005b8
 80025a8:	40004c00 	.word	0x40004c00

080025ac <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <MX_UART5_Init+0x58>)
 80025b2:	4a15      	ldr	r2, [pc, #84]	@ (8002608 <MX_UART5_Init+0x5c>)
 80025b4:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80025b6:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <MX_UART5_Init+0x58>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <MX_UART5_Init+0x58>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <MX_UART5_Init+0x58>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <MX_UART5_Init+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <MX_UART5_Init+0x58>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <MX_UART5_Init+0x58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <MX_UART5_Init+0x58>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <MX_UART5_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <MX_UART5_Init+0x58>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <MX_UART5_Init+0x58>)
 80025f0:	f005 fd52 	bl	8008098 <HAL_UART_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_UART5_Init+0x52>
	{
		Error_Handler();
 80025fa:	f000 f9df 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000640 	.word	0x20000640
 8002608:	40005000 	.word	0x40005000

0800260c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002612:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <MX_USART1_UART_Init+0x5c>)
 8002614:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800261c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002642:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	@ (8002664 <MX_USART1_UART_Init+0x58>)
 8002650:	f005 fd22 	bl	8008098 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800265a:	f000 f9af 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200006c8 	.word	0x200006c8
 8002668:	40011000 	.word	0x40011000

0800266c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 8002672:	4a14      	ldr	r2, [pc, #80]	@ (80026c4 <MX_USART2_UART_Init+0x58>)
 8002674:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 1000000;
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 8002678:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <MX_USART2_UART_Init+0x5c>)
 800267a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800267c:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002682:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002688:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 8002690:	220c      	movs	r2, #12
 8002692:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a0:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ac:	4804      	ldr	r0, [pc, #16]	@ (80026c0 <MX_USART2_UART_Init+0x54>)
 80026ae:	f005 fcf3 	bl	8008098 <HAL_UART_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART2_UART_Init+0x50>
	{
		Error_Handler();
 80026b8:	f000 f980 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000750 	.word	0x20000750
 80026c4:	40004400 	.word	0x40004400
 80026c8:	000f4240 	.word	0x000f4240

080026cc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80026d0:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026d2:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <MX_USART3_UART_Init+0x5c>)
 80026d4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026dc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	@ (8002724 <MX_USART3_UART_Init+0x58>)
 8002710:	f005 fcc2 	bl	8008098 <HAL_UART_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 800271a:	f000 f94f 	bl	80029bc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200007d8 	.word	0x200007d8
 8002728:	40004800 	.word	0x40004800

0800272c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08e      	sub	sp, #56	@ 0x38
 8002730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002742:	4b97      	ldr	r3, [pc, #604]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a96      	ldr	r2, [pc, #600]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002748:	f043 0310 	orr.w	r3, r3, #16
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b94      	ldr	r3, [pc, #592]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	623b      	str	r3, [r7, #32]
 8002758:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800275a:	4b91      	ldr	r3, [pc, #580]	@ (80029a0 <MX_GPIO_Init+0x274>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	4a90      	ldr	r2, [pc, #576]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6313      	str	r3, [r2, #48]	@ 0x30
 8002766:	4b8e      	ldr	r3, [pc, #568]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002772:	4b8b      	ldr	r3, [pc, #556]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a8a      	ldr	r2, [pc, #552]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002778:	f043 0320 	orr.w	r3, r3, #32
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800278a:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <MX_GPIO_Init+0x274>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a84      	ldr	r2, [pc, #528]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b82      	ldr	r3, [pc, #520]	@ (80029a0 <MX_GPIO_Init+0x274>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b7f      	ldr	r3, [pc, #508]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4a7e      	ldr	r2, [pc, #504]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4b7c      	ldr	r3, [pc, #496]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	4b79      	ldr	r3, [pc, #484]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a78      	ldr	r2, [pc, #480]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b76      	ldr	r3, [pc, #472]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	4b73      	ldr	r3, [pc, #460]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a72      	ldr	r2, [pc, #456]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80027ea:	4b6d      	ldr	r3, [pc, #436]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a6c      	ldr	r2, [pc, #432]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b6a      	ldr	r3, [pc, #424]	@ (80029a0 <MX_GPIO_Init+0x274>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	2118      	movs	r1, #24
 8002806:	4867      	ldr	r0, [pc, #412]	@ (80029a4 <MX_GPIO_Init+0x278>)
 8002808:	f001 fd76 	bl	80042f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002812:	4865      	ldr	r0, [pc, #404]	@ (80029a8 <MX_GPIO_Init+0x27c>)
 8002814:	f001 fd70 	bl	80042f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	@ 0x40
 800281c:	4863      	ldr	r0, [pc, #396]	@ (80029ac <MX_GPIO_Init+0x280>)
 800281e:	f001 fd6b 	bl	80042f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
	GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8002822:	2318      	movs	r3, #24
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002836:	4619      	mov	r1, r3
 8002838:	485a      	ldr	r0, [pc, #360]	@ (80029a4 <MX_GPIO_Init+0x278>)
 800283a:	f001 fbb1 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 800283e:	f643 7308 	movw	r3, #16136	@ 0x3f08
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002844:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800284e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002852:	4619      	mov	r1, r3
 8002854:	4856      	ldr	r0, [pc, #344]	@ (80029b0 <MX_GPIO_Init+0x284>)
 8002856:	f001 fba3 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 800285a:	2310      	movs	r3, #16
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800285e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286c:	4619      	mov	r1, r3
 800286e:	4850      	ldr	r0, [pc, #320]	@ (80029b0 <MX_GPIO_Init+0x284>)
 8002870:	f001 fb96 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002874:	2332      	movs	r3, #50	@ 0x32
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002884:	230b      	movs	r3, #11
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800288c:	4619      	mov	r1, r3
 800288e:	4849      	ldr	r0, [pc, #292]	@ (80029b4 <MX_GPIO_Init+0x288>)
 8002890:	f001 fb86 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002894:	2386      	movs	r3, #134	@ 0x86
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028a4:	230b      	movs	r3, #11
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ac:	4619      	mov	r1, r3
 80028ae:	4842      	ldr	r0, [pc, #264]	@ (80029b8 <MX_GPIO_Init+0x28c>)
 80028b0:	f001 fb76 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028b4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ca:	4619      	mov	r1, r3
 80028cc:	4836      	ldr	r0, [pc, #216]	@ (80029a8 <MX_GPIO_Init+0x27c>)
 80028ce:	f001 fb67 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80028d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e0:	2303      	movs	r3, #3
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028e4:	230b      	movs	r3, #11
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ec:	4619      	mov	r1, r3
 80028ee:	482e      	ldr	r0, [pc, #184]	@ (80029a8 <MX_GPIO_Init+0x27c>)
 80028f0:	f001 fb56 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028f4:	2340      	movs	r3, #64	@ 0x40
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002908:	4619      	mov	r1, r3
 800290a:	4828      	ldr	r0, [pc, #160]	@ (80029ac <MX_GPIO_Init+0x280>)
 800290c:	f001 fb48 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002920:	4619      	mov	r1, r3
 8002922:	4822      	ldr	r0, [pc, #136]	@ (80029ac <MX_GPIO_Init+0x280>)
 8002924:	f001 fb3c 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002928:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800293a:	230a      	movs	r3, #10
 800293c:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002942:	4619      	mov	r1, r3
 8002944:	481c      	ldr	r0, [pc, #112]	@ (80029b8 <MX_GPIO_Init+0x28c>)
 8002946:	f001 fb2b 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800294a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	4816      	ldr	r0, [pc, #88]	@ (80029b8 <MX_GPIO_Init+0x28c>)
 8002960:	f001 fb1e 	bl	8003fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002964:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002976:	230b      	movs	r3, #11
 8002978:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	480a      	ldr	r0, [pc, #40]	@ (80029ac <MX_GPIO_Init+0x280>)
 8002982:	f001 fb0d 	bl	8003fa0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	200a      	movs	r0, #10
 800298c:	f001 fac3 	bl	8003f16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002990:	200a      	movs	r0, #10
 8002992:	f001 fadc 	bl	8003f4e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002996:	bf00      	nop
 8002998:	3738      	adds	r7, #56	@ 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40021800 	.word	0x40021800
 80029b0:	40021400 	.word	0x40021400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020000 	.word	0x40020000

080029bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c0:	b672      	cpsid	i
}
 80029c2:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		static uint32_t kLed = 0;
		if(++kLed >= 1000)
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <Error_Handler+0x30>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	4a08      	ldr	r2, [pc, #32]	@ (80029ec <Error_Handler+0x30>)
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <Error_Handler+0x30>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029d6:	d3f5      	bcc.n	80029c4 <Error_Handler+0x8>
		{
			kLed = 0;
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <Error_Handler+0x30>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80029de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029e2:	4803      	ldr	r0, [pc, #12]	@ (80029f0 <Error_Handler+0x34>)
 80029e4:	f001 fca1 	bl	800432a <HAL_GPIO_TogglePin>
	{
 80029e8:	e7ec      	b.n	80029c4 <Error_Handler+0x8>
 80029ea:	bf00      	nop
 80029ec:	2000096c 	.word	0x2000096c
 80029f0:	40020400 	.word	0x40020400

080029f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <HAL_MspInit+0x44>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	4a08      	ldr	r2, [pc, #32]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_MspInit+0x44>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	@ 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a15      	ldr	r2, [pc, #84]	@ (8002ab0 <HAL_ADC_MspInit+0x74>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d123      	bne.n	8002aa6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_ADC_MspInit+0x78>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	4a14      	ldr	r2, [pc, #80]	@ (8002ab4 <HAL_ADC_MspInit+0x78>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_ADC_MspInit+0x78>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_ADC_MspInit+0x78>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <HAL_ADC_MspInit+0x78>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <HAL_ADC_MspInit+0x78>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a92:	2303      	movs	r3, #3
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4805      	ldr	r0, [pc, #20]	@ (8002ab8 <HAL_ADC_MspInit+0x7c>)
 8002aa2:	f001 fa7d 	bl	8003fa0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3728      	adds	r7, #40	@ 0x28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40012000 	.word	0x40012000
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000

08002abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0b0      	sub	sp, #192	@ 0xc0
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	2290      	movs	r2, #144	@ 0x90
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f007 f8cb 	bl	8009c78 <memset>
  if(hi2c->Instance==I2C1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a44      	ldr	r2, [pc, #272]	@ (8002bf8 <HAL_I2C_MspInit+0x13c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d13e      	bne.n	8002b6a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002aec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002af0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 ff9f 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002b08:	f7ff ff58 	bl	80029bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	4a3a      	ldr	r2, [pc, #232]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b18:	4b38      	ldr	r3, [pc, #224]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2c:	2312      	movs	r3, #18
 8002b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b48:	4619      	mov	r1, r3
 8002b4a:	482d      	ldr	r0, [pc, #180]	@ (8002c00 <HAL_I2C_MspInit+0x144>)
 8002b4c:	f001 fa28 	bl	8003fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b50:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5c:	4b27      	ldr	r3, [pc, #156]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b68:	e041      	b.n	8002bee <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a25      	ldr	r2, [pc, #148]	@ (8002c04 <HAL_I2C_MspInit+0x148>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d13c      	bne.n	8002bee <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 ff5b 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002b90:	f7ff ff14 	bl	80029bc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b94:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002b9a:	f043 0320 	orr.w	r3, r3, #32
 8002b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba0:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bac:	2303      	movs	r3, #3
 8002bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb2:	2312      	movs	r3, #18
 8002bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002bce:	4619      	mov	r1, r3
 8002bd0:	480d      	ldr	r0, [pc, #52]	@ (8002c08 <HAL_I2C_MspInit+0x14c>)
 8002bd2:	f001 f9e5 	bl	8003fa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002bdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_I2C_MspInit+0x140>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
}
 8002bee:	bf00      	nop
 8002bf0:	37c0      	adds	r7, #192	@ 0xc0
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40005400 	.word	0x40005400
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40005800 	.word	0x40005800
 8002c08:	40021400 	.word	0x40021400

08002c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	@ 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a33      	ldr	r2, [pc, #204]	@ (8002cf8 <HAL_SPI_MspInit+0xec>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d160      	bne.n	8002cf0 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c2e:	4b33      	ldr	r3, [pc, #204]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c3a:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5e:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a26      	ldr	r2, [pc, #152]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b24      	ldr	r3, [pc, #144]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c76:	4b21      	ldr	r3, [pc, #132]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	4a20      	ldr	r2, [pc, #128]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c82:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <HAL_SPI_MspInit+0xf0>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c9e:	2305      	movs	r3, #5
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4815      	ldr	r0, [pc, #84]	@ (8002d00 <HAL_SPI_MspInit+0xf4>)
 8002caa:	f001 f979 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc2:	f107 031c 	add.w	r3, r7, #28
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	480e      	ldr	r0, [pc, #56]	@ (8002d04 <HAL_SPI_MspInit+0xf8>)
 8002cca:	f001 f969 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce0:	2305      	movs	r3, #5
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4807      	ldr	r0, [pc, #28]	@ (8002d08 <HAL_SPI_MspInit+0xfc>)
 8002cec:	f001 f958 	bl	8003fa0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002cf0:	bf00      	nop
 8002cf2:	3730      	adds	r7, #48	@ 0x30
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40013000 	.word	0x40013000
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021800 	.word	0x40021800

08002d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	@ 0x38
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3f      	ldr	r2, [pc, #252]	@ (8002e28 <HAL_TIM_Base_MspInit+0x11c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10c      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	4a3e      	ldr	r2, [pc, #248]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d46:	e06b      	b.n	8002e20 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d50:	d129      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	4b36      	ldr	r3, [pc, #216]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a35      	ldr	r2, [pc, #212]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	4b30      	ldr	r3, [pc, #192]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8002d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d94:	2301      	movs	r3, #1
 8002d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4824      	ldr	r0, [pc, #144]	@ (8002e30 <HAL_TIM_Base_MspInit+0x124>)
 8002da0:	f001 f8fe 	bl	8003fa0 <HAL_GPIO_Init>
}
 8002da4:	e03c      	b.n	8002e20 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a22      	ldr	r2, [pc, #136]	@ (8002e34 <HAL_TIM_Base_MspInit+0x128>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10c      	bne.n	8002dca <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
}
 8002dc8:	e02a      	b.n	8002e20 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <HAL_TIM_Base_MspInit+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d114      	bne.n	8002dfe <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dd4:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	4a14      	ldr	r2, [pc, #80]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2101      	movs	r1, #1
 8002df0:	2036      	movs	r0, #54	@ 0x36
 8002df2:	f001 f890 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002df6:	2036      	movs	r0, #54	@ 0x36
 8002df8:	f001 f8a9 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8002dfc:	e010      	b.n	8002e20 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a0e      	ldr	r2, [pc, #56]	@ (8002e3c <HAL_TIM_Base_MspInit+0x130>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10b      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e08:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0c:	4a07      	ldr	r2, [pc, #28]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_TIM_Base_MspInit+0x120>)
 8002e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3738      	adds	r7, #56	@ 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020400 	.word	0x40020400
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	40001000 	.word	0x40001000
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002f18 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d128      	bne.n	8002eb4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e62:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a2d      	ldr	r2, [pc, #180]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7a:	4b28      	ldr	r3, [pc, #160]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	4a27      	ldr	r2, [pc, #156]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e86:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8002e92:	2330      	movs	r3, #48	@ 0x30
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481c      	ldr	r0, [pc, #112]	@ (8002f20 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002eae:	f001 f877 	bl	8003fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002eb2:	e02d      	b.n	8002f10 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f24 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d128      	bne.n	8002f10 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ebe:	4b17      	ldr	r3, [pc, #92]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ec4:	f043 0304 	orr.w	r3, r3, #4
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a10      	ldr	r2, [pc, #64]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002edc:	f043 0308 	orr.w	r3, r3, #8
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002eee:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f00:	2302      	movs	r3, #2
 8002f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4807      	ldr	r0, [pc, #28]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002f0c:	f001 f848 	bl	8003fa0 <HAL_GPIO_Init>
}
 8002f10:	bf00      	nop
 8002f12:	3730      	adds	r7, #48	@ 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40020c00 	.word	0x40020c00

08002f2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	@ (8002f64 <HAL_TIM_PWM_MspInit+0x38>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10b      	bne.n	8002f56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	4a09      	ldr	r2, [pc, #36]	@ (8002f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4a:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40023800 	.word	0x40023800

08002f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08c      	sub	sp, #48	@ 0x30
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a56      	ldr	r2, [pc, #344]	@ (80030e4 <HAL_TIM_MspPostInit+0x178>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d11d      	bne.n	8002fca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f8e:	4b56      	ldr	r3, [pc, #344]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a55      	ldr	r2, [pc, #340]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b53      	ldr	r3, [pc, #332]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002fa6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	484a      	ldr	r0, [pc, #296]	@ (80030ec <HAL_TIM_MspPostInit+0x180>)
 8002fc4:	f000 ffec 	bl	8003fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002fc8:	e088      	b.n	80030dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d11d      	bne.n	8003010 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	4a43      	ldr	r2, [pc, #268]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe0:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ffe:	2301      	movs	r3, #1
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8003002:	f107 031c 	add.w	r3, r7, #28
 8003006:	4619      	mov	r1, r3
 8003008:	4839      	ldr	r0, [pc, #228]	@ (80030f0 <HAL_TIM_MspPostInit+0x184>)
 800300a:	f000 ffc9 	bl	8003fa0 <HAL_GPIO_Init>
}
 800300e:	e065      	b.n	80030dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a37      	ldr	r2, [pc, #220]	@ (80030f4 <HAL_TIM_MspPostInit+0x188>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d11c      	bne.n	8003054 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a32      	ldr	r2, [pc, #200]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b30      	ldr	r3, [pc, #192]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003042:	2302      	movs	r3, #2
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4828      	ldr	r0, [pc, #160]	@ (80030f0 <HAL_TIM_MspPostInit+0x184>)
 800304e:	f000 ffa7 	bl	8003fa0 <HAL_GPIO_Init>
}
 8003052:	e043      	b.n	80030dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <HAL_TIM_MspPostInit+0x18c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d11d      	bne.n	800309a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	4b22      	ldr	r3, [pc, #136]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4a21      	ldr	r2, [pc, #132]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6313      	str	r3, [r2, #48]	@ 0x30
 800306a:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8003076:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003088:	2303      	movs	r3, #3
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	481a      	ldr	r0, [pc, #104]	@ (80030fc <HAL_TIM_MspPostInit+0x190>)
 8003094:	f000 ff84 	bl	8003fa0 <HAL_GPIO_Init>
}
 8003098:	e020      	b.n	80030dc <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_TIM_MspPostInit+0x194>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d11b      	bne.n	80030dc <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030a4:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	4a0f      	ldr	r2, [pc, #60]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 80030aa:	f043 0310 	orr.w	r3, r3, #16
 80030ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b0:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <HAL_TIM_MspPostInit+0x17c>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80030bc:	2360      	movs	r3, #96	@ 0x60
 80030be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80030cc:	2303      	movs	r3, #3
 80030ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	4619      	mov	r1, r3
 80030d6:	4805      	ldr	r0, [pc, #20]	@ (80030ec <HAL_TIM_MspPostInit+0x180>)
 80030d8:	f000 ff62 	bl	8003fa0 <HAL_GPIO_Init>
}
 80030dc:	bf00      	nop
 80030de:	3730      	adds	r7, #48	@ 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40020000 	.word	0x40020000
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40010400 	.word	0x40010400
 80030fc:	40020800 	.word	0x40020800
 8003100:	40014000 	.word	0x40014000

08003104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0b6      	sub	sp, #216	@ 0xd8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800311c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003120:	2290      	movs	r2, #144	@ 0x90
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f006 fda7 	bl	8009c78 <memset>
  if(huart->Instance==UART4)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4aa0      	ldr	r2, [pc, #640]	@ (80033b0 <HAL_UART_MspInit+0x2ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d13e      	bne.n	80031b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003134:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003140:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003144:	4618      	mov	r0, r3
 8003146:	f002 fc7b 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003150:	f7ff fc34 	bl	80029bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003154:	4b97      	ldr	r3, [pc, #604]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	4a96      	ldr	r2, [pc, #600]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 800315a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800315e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003160:	4b94      	ldr	r3, [pc, #592]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316c:	4b91      	ldr	r3, [pc, #580]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	4a90      	ldr	r2, [pc, #576]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6313      	str	r3, [r2, #48]	@ 0x30
 8003178:	4b8e      	ldr	r3, [pc, #568]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8003184:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003198:	2303      	movs	r3, #3
 800319a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800319e:	2308      	movs	r3, #8
 80031a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4883      	ldr	r0, [pc, #524]	@ (80033b8 <HAL_UART_MspInit+0x2b4>)
 80031ac:	f000 fef8 	bl	8003fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031b0:	e151      	b.n	8003456 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a81      	ldr	r2, [pc, #516]	@ (80033bc <HAL_UART_MspInit+0x2b8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d160      	bne.n	800327e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80031bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fc37 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80031d8:	f7ff fbf0 	bl	80029bc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80031dc:	4b75      	ldr	r3, [pc, #468]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	4a74      	ldr	r2, [pc, #464]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80031e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e8:	4b72      	ldr	r3, [pc, #456]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f4:	4b6f      	ldr	r3, [pc, #444]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	4a6e      	ldr	r2, [pc, #440]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003200:	4b6c      	ldr	r3, [pc, #432]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320c:	4b69      	ldr	r3, [pc, #420]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	4a68      	ldr	r2, [pc, #416]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6313      	str	r3, [r2, #48]	@ 0x30
 8003218:	4b66      	ldr	r3, [pc, #408]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	2303      	movs	r3, #3
 800323a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800323e:	2308      	movs	r3, #8
 8003240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003248:	4619      	mov	r1, r3
 800324a:	485d      	ldr	r0, [pc, #372]	@ (80033c0 <HAL_UART_MspInit+0x2bc>)
 800324c:	f000 fea8 	bl	8003fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003258:	2302      	movs	r3, #2
 800325a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800326a:	2308      	movs	r3, #8
 800326c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003270:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003274:	4619      	mov	r1, r3
 8003276:	4850      	ldr	r0, [pc, #320]	@ (80033b8 <HAL_UART_MspInit+0x2b4>)
 8003278:	f000 fe92 	bl	8003fa0 <HAL_GPIO_Init>
}
 800327c:	e0eb      	b.n	8003456 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a50      	ldr	r2, [pc, #320]	@ (80033c4 <HAL_UART_MspInit+0x2c0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d151      	bne.n	800332c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003288:	2340      	movs	r3, #64	@ 0x40
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800328c:	2300      	movs	r3, #0
 800328e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003290:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003294:	4618      	mov	r0, r3
 8003296:	f002 fbd3 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80032a0:	f7ff fb8c 	bl	80029bc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a4:	4b43      	ldr	r3, [pc, #268]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80032a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a8:	4a42      	ldr	r2, [pc, #264]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80032aa:	f043 0310 	orr.w	r3, r3, #16
 80032ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80032b0:	4b40      	ldr	r3, [pc, #256]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032bc:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80032c2:	f043 0302 	orr.w	r3, r3, #2
 80032c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c8:	4b3a      	ldr	r3, [pc, #232]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 80032ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80032ee:	2304      	movs	r3, #4
 80032f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4831      	ldr	r0, [pc, #196]	@ (80033c0 <HAL_UART_MspInit+0x2bc>)
 80032fc:	f000 fe50 	bl	8003fa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003300:	2340      	movs	r3, #64	@ 0x40
 8003302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003312:	2303      	movs	r3, #3
 8003314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003318:	2307      	movs	r3, #7
 800331a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8003322:	4619      	mov	r1, r3
 8003324:	4826      	ldr	r0, [pc, #152]	@ (80033c0 <HAL_UART_MspInit+0x2bc>)
 8003326:	f000 fe3b 	bl	8003fa0 <HAL_GPIO_Init>
}
 800332a:	e094      	b.n	8003456 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a25      	ldr	r2, [pc, #148]	@ (80033c8 <HAL_UART_MspInit+0x2c4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d14c      	bne.n	80033d0 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800333a:	2300      	movs	r3, #0
 800333c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003342:	4618      	mov	r0, r3
 8003344:	f002 fb7c 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800334e:	f7ff fb35 	bl	80029bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003352:	4b18      	ldr	r3, [pc, #96]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a17      	ldr	r2, [pc, #92]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800336a:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336e:	4a11      	ldr	r2, [pc, #68]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	6313      	str	r3, [r2, #48]	@ 0x30
 8003376:	4b0f      	ldr	r3, [pc, #60]	@ (80033b4 <HAL_UART_MspInit+0x2b0>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003382:	2360      	movs	r3, #96	@ 0x60
 8003384:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800339a:	2307      	movs	r3, #7
 800339c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4809      	ldr	r0, [pc, #36]	@ (80033cc <HAL_UART_MspInit+0x2c8>)
 80033a8:	f000 fdfa 	bl	8003fa0 <HAL_GPIO_Init>
}
 80033ac:	e053      	b.n	8003456 <HAL_UART_MspInit+0x352>
 80033ae:	bf00      	nop
 80033b0:	40004c00 	.word	0x40004c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40020800 	.word	0x40020800
 80033bc:	40005000 	.word	0x40005000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40011000 	.word	0x40011000
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a22      	ldr	r2, [pc, #136]	@ (8003460 <HAL_UART_MspInit+0x35c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d13d      	bne.n	8003456 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80033da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fb28 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80033f6:	f7ff fae1 	bl	80029bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <HAL_UART_MspInit+0x360>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_UART_MspInit+0x360>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003404:	6413      	str	r3, [r2, #64]	@ 0x40
 8003406:	4b17      	ldr	r3, [pc, #92]	@ (8003464 <HAL_UART_MspInit+0x360>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <HAL_UART_MspInit+0x360>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	4a13      	ldr	r2, [pc, #76]	@ (8003464 <HAL_UART_MspInit+0x360>)
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	6313      	str	r3, [r2, #48]	@ 0x30
 800341e:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <HAL_UART_MspInit+0x360>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800342a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800342e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003444:	2307      	movs	r3, #7
 8003446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800344a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800344e:	4619      	mov	r1, r3
 8003450:	4805      	ldr	r0, [pc, #20]	@ (8003468 <HAL_UART_MspInit+0x364>)
 8003452:	f000 fda5 	bl	8003fa0 <HAL_GPIO_Init>
}
 8003456:	bf00      	nop
 8003458:	37d8      	adds	r7, #216	@ 0xd8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40004800 	.word	0x40004800
 8003464:	40023800 	.word	0x40023800
 8003468:	40020c00 	.word	0x40020c00

0800346c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <NMI_Handler+0x4>

08003474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <HardFault_Handler+0x2c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	4a08      	ldr	r2, [pc, #32]	@ (80034a0 <HardFault_Handler+0x2c>)
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b07      	ldr	r3, [pc, #28]	@ (80034a0 <HardFault_Handler+0x2c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a07      	ldr	r2, [pc, #28]	@ (80034a4 <HardFault_Handler+0x30>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d9f5      	bls.n	8003478 <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HardFault_Handler+0x2c>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003496:	4804      	ldr	r0, [pc, #16]	@ (80034a8 <HardFault_Handler+0x34>)
 8003498:	f000 ff47 	bl	800432a <HAL_GPIO_TogglePin>
  {
 800349c:	e7ec      	b.n	8003478 <HardFault_Handler+0x4>
 800349e:	bf00      	nop
 80034a0:	20000970 	.word	0x20000970
 80034a4:	0001869f 	.word	0x0001869f
 80034a8:	40020400 	.word	0x40020400

080034ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <MemManage_Handler+0x4>

080034b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <BusFault_Handler+0x4>

080034bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <UsageFault_Handler+0x4>

080034c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f2:	f000 f939 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}

080034fa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 80034fe:	2010      	movs	r0, #16
 8003500:	f000 ff2e 	bl	8004360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}

08003508 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800350c:	4802      	ldr	r0, [pc, #8]	@ (8003518 <TIM6_DAC_IRQHandler+0x10>)
 800350e:	f003 fb81 	bl	8006c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200004d4 	.word	0x200004d4

0800351c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
	return 1;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_kill>:

int _kill(int pid, int sig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003536:	f006 fbff 	bl	8009d38 <__errno>
 800353a:	4603      	mov	r3, r0
 800353c:	2216      	movs	r2, #22
 800353e:	601a      	str	r2, [r3, #0]
	return -1;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_exit>:

void _exit (int status)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffe7 	bl	800352c <_kill>
	while (1) {}		/* Make sure we hang here */
 800355e:	bf00      	nop
 8003560:	e7fd      	b.n	800355e <_exit+0x12>

08003562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	60f8      	str	r0, [r7, #12]
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e00a      	b.n	800358a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003574:	f3af 8000 	nop.w
 8003578:	4601      	mov	r1, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	60ba      	str	r2, [r7, #8]
 8003580:	b2ca      	uxtb	r2, r1
 8003582:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3301      	adds	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	dbf0      	blt.n	8003574 <_read+0x12>
	}

return len;
 8003592:	687b      	ldr	r3, [r7, #4]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_close>:
	}
	return len;
}

int _close(int file)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	return -1;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c4:	605a      	str	r2, [r3, #4]
	return 0;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_isatty>:

int _isatty(int file)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	return 1;
 80035dc:	2301      	movs	r3, #1
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
	return 0;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <_sbrk+0x5c>)
 800360e:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <_sbrk+0x60>)
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003618:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003620:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <_sbrk+0x64>)
 8003622:	4a12      	ldr	r2, [pc, #72]	@ (800366c <_sbrk+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003626:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <_sbrk+0x64>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d207      	bcs.n	8003644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003634:	f006 fb80 	bl	8009d38 <__errno>
 8003638:	4603      	mov	r3, r0
 800363a:	220c      	movs	r2, #12
 800363c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	e009      	b.n	8003658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003644:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <_sbrk+0x64>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <_sbrk+0x64>)
 8003654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20080000 	.word	0x20080000
 8003664:	00000400 	.word	0x00000400
 8003668:	20000974 	.word	0x20000974
 800366c:	20000ac8 	.word	0x20000ac8

08003670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003674:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <SystemInit+0x28>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <SystemInit+0x28>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003684:	4b04      	ldr	r3, [pc, #16]	@ (8003698 <SystemInit+0x28>)
 8003686:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800368a:	609a      	str	r2, [r3, #8]
#endif
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036a2:	e003      	b.n	80036ac <LoopCopyDataInit>

080036a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036aa:	3104      	adds	r1, #4

080036ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036ac:	480b      	ldr	r0, [pc, #44]	@ (80036dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036ae:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036b4:	d3f6      	bcc.n	80036a4 <CopyDataInit>
  ldr  r2, =_sbss
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036b8:	e002      	b.n	80036c0 <LoopFillZerobss>

080036ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036bc:	f842 3b04 	str.w	r3, [r2], #4

080036c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036c0:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036c4:	d3f9      	bcc.n	80036ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036c6:	f7ff ffd3 	bl	8003670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ca:	f006 fb3b 	bl	8009d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ce:	f7fd fef7 	bl	80014c0 <main>
  bx  lr    
 80036d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036d4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80036d8:	0800bee0 	.word	0x0800bee0
  ldr  r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036e0:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80036e4:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80036e8:	20000ac8 	.word	0x20000ac8

080036ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC_IRQHandler>

080036ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f2:	2003      	movs	r0, #3
 80036f4:	f000 fc04 	bl	8003f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f8:	2000      	movs	r0, #0
 80036fa:	f000 f805 	bl	8003708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036fe:	f7ff f979 	bl	80029f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_InitTick+0x54>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_InitTick+0x58>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fc2d 	bl	8003f86 <HAL_SYSTICK_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00e      	b.n	8003754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d80a      	bhi.n	8003752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373c:	2200      	movs	r2, #0
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f000 fbe7 	bl	8003f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003748:	4a06      	ldr	r2, [pc, #24]	@ (8003764 <HAL_InitTick+0x5c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000014 	.word	0x20000014
 8003760:	2000001c 	.word	0x2000001c
 8003764:	20000018 	.word	0x20000018

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	@ (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	2000001c 	.word	0x2000001c
 800378c:	20000978 	.word	0x20000978

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000978 	.word	0x20000978

080037a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff ffee 	bl	8003790 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d005      	beq.n	80037ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_Delay+0x44>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037ce:	bf00      	nop
 80037d0:	f7ff ffde 	bl	8003790 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8f7      	bhi.n	80037d0 <HAL_Delay+0x28>
  {
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	2000001c 	.word	0x2000001c

080037f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e031      	b.n	800386a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff f914 	bl	8002a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003832:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <HAL_ADC_Init+0x84>)
 8003834:	4013      	ands	r3, r2
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f970 	bl	8003b24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	@ 0x40
 800385a:	e001      	b.n	8003860 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	ffffeefd 	.word	0xffffeefd

08003878 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x1c>
 8003890:	2302      	movs	r3, #2
 8003892:	e136      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x28a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	d93a      	bls.n	800391a <HAL_ADC_ConfigChannel+0xa2>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ac:	d035      	beq.n	800391a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68d9      	ldr	r1, [r3, #12]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	3b1e      	subs	r3, #30
 80038c4:	2207      	movs	r2, #7
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	400a      	ands	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a8d      	ldr	r2, [pc, #564]	@ (8003b10 <HAL_ADC_ConfigChannel+0x298>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d10a      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68d9      	ldr	r1, [r3, #12]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	061a      	lsls	r2, r3, #24
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f2:	e035      	b.n	8003960 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68d9      	ldr	r1, [r3, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	4603      	mov	r3, r0
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4403      	add	r3, r0
 800390c:	3b1e      	subs	r3, #30
 800390e:	409a      	lsls	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003918:	e022      	b.n	8003960 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6919      	ldr	r1, [r3, #16]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	2207      	movs	r2, #7
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43da      	mvns	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	400a      	ands	r2, r1
 800393c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6919      	ldr	r1, [r3, #16]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	4618      	mov	r0, r3
 8003950:	4603      	mov	r3, r0
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4403      	add	r3, r0
 8003956:	409a      	lsls	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b06      	cmp	r3, #6
 8003966:	d824      	bhi.n	80039b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b05      	subs	r3, #5
 800397a:	221f      	movs	r2, #31
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43da      	mvns	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	400a      	ands	r2, r1
 8003988:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3b05      	subs	r3, #5
 80039a4:	fa00 f203 	lsl.w	r2, r0, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80039b0:	e04c      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d824      	bhi.n	8003a04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	3b23      	subs	r3, #35	@ 0x23
 80039cc:	221f      	movs	r2, #31
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	400a      	ands	r2, r1
 80039da:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4618      	mov	r0, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	3b23      	subs	r3, #35	@ 0x23
 80039f6:	fa00 f203 	lsl.w	r2, r0, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a02:	e023      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	3b41      	subs	r3, #65	@ 0x41
 8003a16:	221f      	movs	r2, #31
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	400a      	ands	r2, r1
 8003a24:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	4618      	mov	r0, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3b41      	subs	r3, #65	@ 0x41
 8003a40:	fa00 f203 	lsl.w	r2, r0, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a30      	ldr	r2, [pc, #192]	@ (8003b14 <HAL_ADC_ConfigChannel+0x29c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10a      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1f4>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a5e:	d105      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a60:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a66:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003a6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a28      	ldr	r2, [pc, #160]	@ (8003b14 <HAL_ADC_ConfigChannel+0x29c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10f      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x21e>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b12      	cmp	r3, #18
 8003a7c:	d10b      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003a7e:	4b26      	ldr	r3, [pc, #152]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4a25      	ldr	r2, [pc, #148]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a88:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a8a:	4b23      	ldr	r3, [pc, #140]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a22      	ldr	r2, [pc, #136]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003a90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_ADC_ConfigChannel+0x29c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d12b      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x280>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b10 <HAL_ADC_ConfigChannel+0x298>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <HAL_ADC_ConfigChannel+0x23a>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b11      	cmp	r3, #17
 8003ab0:	d122      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003ab2:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ab8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003abc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ac4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ac8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a10      	ldr	r2, [pc, #64]	@ (8003b10 <HAL_ADC_ConfigChannel+0x298>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ad4:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <HAL_ADC_ConfigChannel+0x2a4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a11      	ldr	r2, [pc, #68]	@ (8003b20 <HAL_ADC_ConfigChannel+0x2a8>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0c9a      	lsrs	r2, r3, #18
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003aea:	e002      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f9      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	10000012 	.word	0x10000012
 8003b14:	40012000 	.word	0x40012000
 8003b18:	40012300 	.word	0x40012300
 8003b1c:	20000014 	.word	0x20000014
 8003b20:	431bde83 	.word	0x431bde83

08003b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b2c:	4b78      	ldr	r3, [pc, #480]	@ (8003d10 <ADC_Init+0x1ec>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a77      	ldr	r2, [pc, #476]	@ (8003d10 <ADC_Init+0x1ec>)
 8003b32:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003b36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b38:	4b75      	ldr	r3, [pc, #468]	@ (8003d10 <ADC_Init+0x1ec>)
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4973      	ldr	r1, [pc, #460]	@ (8003d10 <ADC_Init+0x1ec>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <ADC_Init+0x1f0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	e00f      	b.n	8003c1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0202 	bic.w	r2, r2, #2
 8003c2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6899      	ldr	r1, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	005a      	lsls	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01b      	beq.n	8003c84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	3b01      	subs	r3, #1
 8003c78:	035a      	lsls	r2, r3, #13
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e007      	b.n	8003c94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	051a      	lsls	r2, r3, #20
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cd6:	025a      	lsls	r2, r3, #9
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6899      	ldr	r1, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	029a      	lsls	r2, r3, #10
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40012300 	.word	0x40012300
 8003d14:	0f000001 	.word	0x0f000001

08003d18 <__NVIC_SetPriorityGrouping>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <__NVIC_SetPriorityGrouping+0x40>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d46:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <__NVIC_SetPriorityGrouping+0x40>)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	60d3      	str	r3, [r2, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000ed00 	.word	0xe000ed00
 8003d5c:	05fa0000 	.word	0x05fa0000

08003d60 <__NVIC_GetPriorityGrouping>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4907      	ldr	r1, [pc, #28]	@ (8003db4 <__NVIC_EnableIRQ+0x38>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100

08003db8 <__NVIC_DisableIRQ>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	db12      	blt.n	8003df0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	490a      	ldr	r1, [pc, #40]	@ (8003dfc <__NVIC_DisableIRQ+0x44>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2001      	movs	r0, #1
 8003dda:	fa00 f202 	lsl.w	r2, r0, r2
 8003dde:	3320      	adds	r3, #32
 8003de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003de4:	f3bf 8f4f 	dsb	sy
}
 8003de8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003dea:	f3bf 8f6f 	isb	sy
}
 8003dee:	bf00      	nop
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <__NVIC_SetPriority>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	db0a      	blt.n	8003e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	490c      	ldr	r1, [pc, #48]	@ (8003e4c <__NVIC_SetPriority+0x4c>)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	0112      	lsls	r2, r2, #4
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	440b      	add	r3, r1
 8003e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e28:	e00a      	b.n	8003e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	4908      	ldr	r1, [pc, #32]	@ (8003e50 <__NVIC_SetPriority+0x50>)
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	3b04      	subs	r3, #4
 8003e38:	0112      	lsls	r2, r2, #4
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	761a      	strb	r2, [r3, #24]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000e100 	.word	0xe000e100
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <NVIC_EncodePriority>:
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	@ 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f1c3 0307 	rsb	r3, r3, #7
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	bf28      	it	cs
 8003e72:	2304      	movcs	r3, #4
 8003e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	2b06      	cmp	r3, #6
 8003e7c:	d902      	bls.n	8003e84 <NVIC_EncodePriority+0x30>
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3b03      	subs	r3, #3
 8003e82:	e000      	b.n	8003e86 <NVIC_EncodePriority+0x32>
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	401a      	ands	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	43d9      	mvns	r1, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	4313      	orrs	r3, r2
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3724      	adds	r7, #36	@ 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <SysTick_Config>:
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ecc:	d301      	bcc.n	8003ed2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <SysTick_Config+0x40>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eda:	210f      	movs	r1, #15
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f7ff ff8e 	bl	8003e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <SysTick_Config+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eea:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <SysTick_Config+0x40>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff05 	bl	8003d18 <__NVIC_SetPriorityGrouping>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f28:	f7ff ff1a 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	6978      	ldr	r0, [r7, #20]
 8003f34:	f7ff ff8e 	bl	8003e54 <NVIC_EncodePriority>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff5d 	bl	8003e00 <__NVIC_SetPriority>
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff0d 	bl	8003d7c <__NVIC_EnableIRQ>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff1d 	bl	8003db8 <__NVIC_DisableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ff94 	bl	8003ebc <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b089      	sub	sp, #36	@ 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e175      	b.n	80042ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	f040 8164 	bne.w	80042a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d005      	beq.n	8003ff6 <HAL_GPIO_Init+0x56>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d130      	bne.n	8004058 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800402c:	2201      	movs	r2, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 0201 	and.w	r2, r3, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b03      	cmp	r3, #3
 8004062:	d017      	beq.n	8004094 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	2203      	movs	r2, #3
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d123      	bne.n	80040e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	08da      	lsrs	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3208      	adds	r2, #8
 80040a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	220f      	movs	r2, #15
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	08da      	lsrs	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3208      	adds	r2, #8
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0203 	and.w	r2, r3, #3
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80be 	beq.w	80042a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412a:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <HAL_GPIO_Init+0x324>)
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	4a65      	ldr	r2, [pc, #404]	@ (80042c4 <HAL_GPIO_Init+0x324>)
 8004130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004134:	6453      	str	r3, [r2, #68]	@ 0x44
 8004136:	4b63      	ldr	r3, [pc, #396]	@ (80042c4 <HAL_GPIO_Init+0x324>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004142:	4a61      	ldr	r2, [pc, #388]	@ (80042c8 <HAL_GPIO_Init+0x328>)
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	3302      	adds	r3, #2
 800414a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	220f      	movs	r2, #15
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a58      	ldr	r2, [pc, #352]	@ (80042cc <HAL_GPIO_Init+0x32c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d037      	beq.n	80041de <HAL_GPIO_Init+0x23e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a57      	ldr	r2, [pc, #348]	@ (80042d0 <HAL_GPIO_Init+0x330>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d031      	beq.n	80041da <HAL_GPIO_Init+0x23a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a56      	ldr	r2, [pc, #344]	@ (80042d4 <HAL_GPIO_Init+0x334>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d02b      	beq.n	80041d6 <HAL_GPIO_Init+0x236>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a55      	ldr	r2, [pc, #340]	@ (80042d8 <HAL_GPIO_Init+0x338>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d025      	beq.n	80041d2 <HAL_GPIO_Init+0x232>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a54      	ldr	r2, [pc, #336]	@ (80042dc <HAL_GPIO_Init+0x33c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01f      	beq.n	80041ce <HAL_GPIO_Init+0x22e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a53      	ldr	r2, [pc, #332]	@ (80042e0 <HAL_GPIO_Init+0x340>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d019      	beq.n	80041ca <HAL_GPIO_Init+0x22a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a52      	ldr	r2, [pc, #328]	@ (80042e4 <HAL_GPIO_Init+0x344>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_GPIO_Init+0x226>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a51      	ldr	r2, [pc, #324]	@ (80042e8 <HAL_GPIO_Init+0x348>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00d      	beq.n	80041c2 <HAL_GPIO_Init+0x222>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a50      	ldr	r2, [pc, #320]	@ (80042ec <HAL_GPIO_Init+0x34c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <HAL_GPIO_Init+0x21e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4f      	ldr	r2, [pc, #316]	@ (80042f0 <HAL_GPIO_Init+0x350>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <HAL_GPIO_Init+0x21a>
 80041b6:	2309      	movs	r3, #9
 80041b8:	e012      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041ba:	230a      	movs	r3, #10
 80041bc:	e010      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041be:	2308      	movs	r3, #8
 80041c0:	e00e      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041c2:	2307      	movs	r3, #7
 80041c4:	e00c      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041c6:	2306      	movs	r3, #6
 80041c8:	e00a      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041ca:	2305      	movs	r3, #5
 80041cc:	e008      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041ce:	2304      	movs	r3, #4
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041d2:	2303      	movs	r3, #3
 80041d4:	e004      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e002      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <HAL_GPIO_Init+0x240>
 80041de:	2300      	movs	r3, #0
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f002 0203 	and.w	r2, r2, #3
 80041e6:	0092      	lsls	r2, r2, #2
 80041e8:	4093      	lsls	r3, r2
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041f0:	4935      	ldr	r1, [pc, #212]	@ (80042c8 <HAL_GPIO_Init+0x328>)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	3302      	adds	r3, #2
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041fe:	4b3d      	ldr	r3, [pc, #244]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004222:	4a34      	ldr	r2, [pc, #208]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004228:	4b32      	ldr	r3, [pc, #200]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800424c:	4a29      	ldr	r2, [pc, #164]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004252:	4b28      	ldr	r3, [pc, #160]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004276:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042a0:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <HAL_GPIO_Init+0x354>)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3301      	adds	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	f67f ae86 	bls.w	8003fc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3724      	adds	r7, #36	@ 0x24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40013800 	.word	0x40013800
 80042cc:	40020000 	.word	0x40020000
 80042d0:	40020400 	.word	0x40020400
 80042d4:	40020800 	.word	0x40020800
 80042d8:	40020c00 	.word	0x40020c00
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40021400 	.word	0x40021400
 80042e4:	40021800 	.word	0x40021800
 80042e8:	40021c00 	.word	0x40021c00
 80042ec:	40022000 	.word	0x40022000
 80042f0:	40022400 	.word	0x40022400
 80042f4:	40013c00 	.word	0x40013c00

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4013      	ands	r3, r2
 8004342:	041a      	lsls	r2, r3, #16
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43d9      	mvns	r1, r3
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	400b      	ands	r3, r1
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004376:	4a05      	ldr	r2, [pc, #20]	@ (800438c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc fce2 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e08b      	b.n	80044ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe fb80 	bl	8002abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	@ 0x24
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d107      	bne.n	800440a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	e006      	b.n	8004418 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004416:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d108      	bne.n	8004432 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	e007      	b.n	8004442 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004440:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <HAL_I2C_Init+0x134>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004460:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69d9      	ldr	r1, [r3, #28]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	02008000 	.word	0x02008000

080044c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	817b      	strh	r3, [r7, #10]
 80044da:	460b      	mov	r3, r1
 80044dc:	813b      	strh	r3, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	f040 80f9 	bne.w	80046e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_I2C_Mem_Write+0x34>
 80044f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0ed      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_I2C_Mem_Write+0x4e>
 8004512:	2302      	movs	r3, #2
 8004514:	e0e6      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800451e:	f7ff f937 	bl	8003790 <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2319      	movs	r3, #25
 800452a:	2201      	movs	r2, #1
 800452c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fac3 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0d1      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2221      	movs	r2, #33	@ 0x21
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2240      	movs	r2, #64	@ 0x40
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004568:	88f8      	ldrh	r0, [r7, #6]
 800456a:	893a      	ldrh	r2, [r7, #8]
 800456c:	8979      	ldrh	r1, [r7, #10]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4603      	mov	r3, r0
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f9d3 	bl	8004924 <I2C_RequestMemoryWrite>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0a9      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2bff      	cmp	r3, #255	@ 0xff
 8004598:	d90e      	bls.n	80045b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	22ff      	movs	r2, #255	@ 0xff
 800459e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	8979      	ldrh	r1, [r7, #10]
 80045a8:	2300      	movs	r3, #0
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fc47 	bl	8004e44 <I2C_TransferConfig>
 80045b6:	e00f      	b.n	80045d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	8979      	ldrh	r1, [r7, #10]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fc36 	bl	8004e44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fac6 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e07b      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d034      	beq.n	8004690 <HAL_I2C_Mem_Write+0x1c8>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d130      	bne.n	8004690 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	@ 0x80
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fa3f 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e04d      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2bff      	cmp	r3, #255	@ 0xff
 8004650:	d90e      	bls.n	8004670 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	22ff      	movs	r2, #255	@ 0xff
 8004656:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465c:	b2da      	uxtb	r2, r3
 800465e:	8979      	ldrh	r1, [r7, #10]
 8004660:	2300      	movs	r3, #0
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fbeb 	bl	8004e44 <I2C_TransferConfig>
 800466e:	e00f      	b.n	8004690 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	b2da      	uxtb	r2, r3
 8004680:	8979      	ldrh	r1, [r7, #10]
 8004682:	2300      	movs	r3, #0
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fbda 	bl	8004e44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d19e      	bne.n	80045d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 faac 	bl	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e01a      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2220      	movs	r2, #32
 80046b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b0a      	ldr	r3, [pc, #40]	@ (80046ec <HAL_I2C_Mem_Write+0x224>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	fe00e800 	.word	0xfe00e800

080046f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	817b      	strh	r3, [r7, #10]
 8004702:	460b      	mov	r3, r1
 8004704:	813b      	strh	r3, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b20      	cmp	r3, #32
 8004714:	f040 80fd 	bne.w	8004912 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_I2C_Mem_Read+0x34>
 800471e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0f1      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_I2C_Mem_Read+0x4e>
 800473a:	2302      	movs	r3, #2
 800473c:	e0ea      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004746:	f7ff f823 	bl	8003790 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	2319      	movs	r3, #25
 8004752:	2201      	movs	r2, #1
 8004754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f9af 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0d5      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2222      	movs	r2, #34	@ 0x22
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2240      	movs	r2, #64	@ 0x40
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004790:	88f8      	ldrh	r0, [r7, #6]
 8004792:	893a      	ldrh	r2, [r7, #8]
 8004794:	8979      	ldrh	r1, [r7, #10]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4603      	mov	r3, r0
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f913 	bl	80049cc <I2C_RequestMemoryRead>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0ad      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2bff      	cmp	r3, #255	@ 0xff
 80047c0:	d90e      	bls.n	80047e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	8979      	ldrh	r1, [r7, #10]
 80047d0:	4b52      	ldr	r3, [pc, #328]	@ (800491c <HAL_I2C_Mem_Read+0x22c>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fb33 	bl	8004e44 <I2C_TransferConfig>
 80047de:	e00f      	b.n	8004800 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	8979      	ldrh	r1, [r7, #10]
 80047f2:	4b4a      	ldr	r3, [pc, #296]	@ (800491c <HAL_I2C_Mem_Read+0x22c>)
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fb22 	bl	8004e44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	2200      	movs	r2, #0
 8004808:	2104      	movs	r1, #4
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f956 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07c      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d034      	beq.n	80048c0 <HAL_I2C_Mem_Read+0x1d0>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d130      	bne.n	80048c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f927 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04d      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2bff      	cmp	r3, #255	@ 0xff
 8004880:	d90e      	bls.n	80048a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488c:	b2da      	uxtb	r2, r3
 800488e:	8979      	ldrh	r1, [r7, #10]
 8004890:	2300      	movs	r3, #0
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fad3 	bl	8004e44 <I2C_TransferConfig>
 800489e:	e00f      	b.n	80048c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	8979      	ldrh	r1, [r7, #10]
 80048b2:	2300      	movs	r3, #0
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fac2 	bl	8004e44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d19a      	bne.n	8004800 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f994 	bl	8004bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e01a      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2220      	movs	r2, #32
 80048e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <HAL_I2C_Mem_Read+0x230>)
 80048f2:	400b      	ands	r3, r1
 80048f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	80002400 	.word	0x80002400
 8004920:	fe00e800 	.word	0xfe00e800

08004924 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	461a      	mov	r2, r3
 8004932:	4603      	mov	r3, r0
 8004934:	817b      	strh	r3, [r7, #10]
 8004936:	460b      	mov	r3, r1
 8004938:	813b      	strh	r3, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	8979      	ldrh	r1, [r7, #10]
 8004944:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <I2C_RequestMemoryWrite+0xa4>)
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fa79 	bl	8004e44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f909 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e02c      	b.n	80049c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800496c:	893b      	ldrh	r3, [r7, #8]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	629a      	str	r2, [r3, #40]	@ 0x28
 8004976:	e015      	b.n	80049a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004978:	893b      	ldrh	r3, [r7, #8]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	b29b      	uxth	r3, r3
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	69b9      	ldr	r1, [r7, #24]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f8ef 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e012      	b.n	80049c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800499a:	893b      	ldrh	r3, [r7, #8]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2200      	movs	r2, #0
 80049ac:	2180      	movs	r1, #128	@ 0x80
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f884 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	80002000 	.word	0x80002000

080049cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	4608      	mov	r0, r1
 80049d6:	4611      	mov	r1, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	4603      	mov	r3, r0
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	460b      	mov	r3, r1
 80049e0:	813b      	strh	r3, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	8979      	ldrh	r1, [r7, #10]
 80049ec:	4b20      	ldr	r3, [pc, #128]	@ (8004a70 <I2C_RequestMemoryRead+0xa4>)
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa26 	bl	8004e44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f8b6 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e02c      	b.n	8004a66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a12:	893b      	ldrh	r3, [r7, #8]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a1c:	e015      	b.n	8004a4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a1e:	893b      	ldrh	r3, [r7, #8]
 8004a20:	0a1b      	lsrs	r3, r3, #8
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	69b9      	ldr	r1, [r7, #24]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f89c 	bl	8004b6e <I2C_WaitOnTXISFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e012      	b.n	8004a66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a40:	893b      	ldrh	r3, [r7, #8]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2200      	movs	r2, #0
 8004a52:	2140      	movs	r1, #64	@ 0x40
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f831 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	80002000 	.word	0x80002000

08004a74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d103      	bne.n	8004a92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d007      	beq.n	8004ab0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	619a      	str	r2, [r3, #24]
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004acc:	e03b      	b.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8d6 	bl	8004c84 <I2C_IsErrorOccurred>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e041      	b.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d02d      	beq.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fe fe51 	bl	8003790 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d122      	bne.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d113      	bne.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	f043 0220 	orr.w	r2, r3, #32
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e00f      	b.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d0b4      	beq.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b7a:	e033      	b.n	8004be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f87f 	bl	8004c84 <I2C_IsErrorOccurred>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e031      	b.n	8004bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d025      	beq.n	8004be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fe fdfa 	bl	8003790 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11a      	bne.n	8004be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d013      	beq.n	8004be4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e007      	b.n	8004bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d1c4      	bne.n	8004b7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c08:	e02f      	b.n	8004c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f838 	bl	8004c84 <I2C_IsErrorOccurred>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e02d      	b.n	8004c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fe fdb7 	bl	8003790 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11a      	bne.n	8004c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d013      	beq.n	8004c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e007      	b.n	8004c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d1c8      	bne.n	8004c0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08a      	sub	sp, #40	@ 0x28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d068      	beq.n	8004d82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cb8:	e049      	b.n	8004d4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d045      	beq.n	8004d4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fe fd65 	bl	8003790 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_IsErrorOccurred+0x54>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d13a      	bne.n	8004d4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ce2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cfa:	d121      	bne.n	8004d40 <I2C_IsErrorOccurred+0xbc>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d02:	d01d      	beq.n	8004d40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d01a      	beq.n	8004d40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d1a:	f7fe fd39 	bl	8003790 <HAL_GetTick>
 8004d1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d20:	e00e      	b.n	8004d40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d22:	f7fe fd35 	bl	8003790 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b19      	cmp	r3, #25
 8004d2e:	d907      	bls.n	8004d40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	f043 0320 	orr.w	r3, r3, #32
 8004d36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004d3e:	e006      	b.n	8004d4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d1e9      	bne.n	8004d22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d003      	beq.n	8004d64 <I2C_IsErrorOccurred+0xe0>
 8004d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0aa      	beq.n	8004cba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d103      	bne.n	8004d74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2220      	movs	r2, #32
 8004d72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f043 0308 	orr.w	r3, r3, #8
 8004dbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f043 0302 	orr.w	r3, r3, #2
 8004dde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01c      	beq.n	8004e32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fe3b 	bl	8004a74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6859      	ldr	r1, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <I2C_IsErrorOccurred+0x1bc>)
 8004e0a:	400b      	ands	r3, r1
 8004e0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3728      	adds	r7, #40	@ 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	fe00e800 	.word	0xfe00e800

08004e44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	817b      	strh	r3, [r7, #10]
 8004e52:	4613      	mov	r3, r2
 8004e54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e5c:	7a7b      	ldrb	r3, [r7, #9]
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	0d5b      	lsrs	r3, r3, #21
 8004e7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e82:	4b08      	ldr	r3, [pc, #32]	@ (8004ea4 <I2C_TransferConfig+0x60>)
 8004e84:	430b      	orrs	r3, r1
 8004e86:	43db      	mvns	r3, r3
 8004e88:	ea02 0103 	and.w	r1, r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	03ff63ff 	.word	0x03ff63ff

08004ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d138      	bne.n	8004f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e032      	b.n	8004f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	@ 0x24
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d139      	bne.n	8004fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e033      	b.n	8004fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2224      	movs	r2, #36	@ 0x24
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40007000 	.word	0x40007000

08004ff8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <HAL_PWREx_EnableOverDrive+0x98>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	4a22      	ldr	r2, [pc, #136]	@ (8005090 <HAL_PWREx_EnableOverDrive+0x98>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500c:	6413      	str	r3, [r2, #64]	@ 0x40
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <HAL_PWREx_EnableOverDrive+0x98>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800501a:	4b1e      	ldr	r3, [pc, #120]	@ (8005094 <HAL_PWREx_EnableOverDrive+0x9c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005024:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005026:	f7fe fbb3 	bl	8003790 <HAL_GetTick>
 800502a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800502c:	e009      	b.n	8005042 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800502e:	f7fe fbaf 	bl	8003790 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800503c:	d901      	bls.n	8005042 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e022      	b.n	8005088 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800504a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504e:	d1ee      	bne.n	800502e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005050:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a0f      	ldr	r2, [pc, #60]	@ (8005094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800505a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800505c:	f7fe fb98 	bl	8003790 <HAL_GetTick>
 8005060:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005062:	e009      	b.n	8005078 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005064:	f7fe fb94 	bl	8003790 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005072:	d901      	bls.n	8005078 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e007      	b.n	8005088 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005078:	4b06      	ldr	r3, [pc, #24]	@ (8005094 <HAL_PWREx_EnableOverDrive+0x9c>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005084:	d1ee      	bne.n	8005064 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40023800 	.word	0x40023800
 8005094:	40007000 	.word	0x40007000

08005098 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80050a0:	2300      	movs	r3, #0
 80050a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e29b      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8087 	beq.w	80051ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050bc:	4b96      	ldr	r3, [pc, #600]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d00c      	beq.n	80050e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c8:	4b93      	ldr	r3, [pc, #588]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d112      	bne.n	80050fa <HAL_RCC_OscConfig+0x62>
 80050d4:	4b90      	ldr	r3, [pc, #576]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e0:	d10b      	bne.n	80050fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d06c      	beq.n	80051c8 <HAL_RCC_OscConfig+0x130>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d168      	bne.n	80051c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e275      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005102:	d106      	bne.n	8005112 <HAL_RCC_OscConfig+0x7a>
 8005104:	4b84      	ldr	r3, [pc, #528]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a83      	ldr	r2, [pc, #524]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800510a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e02e      	b.n	8005170 <HAL_RCC_OscConfig+0xd8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0x9c>
 800511a:	4b7f      	ldr	r3, [pc, #508]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7e      	ldr	r2, [pc, #504]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b7c      	ldr	r3, [pc, #496]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7b      	ldr	r2, [pc, #492]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800512c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e01d      	b.n	8005170 <HAL_RCC_OscConfig+0xd8>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800513c:	d10c      	bne.n	8005158 <HAL_RCC_OscConfig+0xc0>
 800513e:	4b76      	ldr	r3, [pc, #472]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a75      	ldr	r2, [pc, #468]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4b73      	ldr	r3, [pc, #460]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a72      	ldr	r2, [pc, #456]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	e00b      	b.n	8005170 <HAL_RCC_OscConfig+0xd8>
 8005158:	4b6f      	ldr	r3, [pc, #444]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a6e      	ldr	r2, [pc, #440]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800515e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4b6c      	ldr	r3, [pc, #432]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6b      	ldr	r2, [pc, #428]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800516a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800516e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fe fb0a 	bl	8003790 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005180:	f7fe fb06 	bl	8003790 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b64      	cmp	r3, #100	@ 0x64
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e229      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b61      	ldr	r3, [pc, #388]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0xe8>
 800519e:	e014      	b.n	80051ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fe faf6 	bl	8003790 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a8:	f7fe faf2 	bl	8003790 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b64      	cmp	r3, #100	@ 0x64
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e215      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ba:	4b57      	ldr	r3, [pc, #348]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x110>
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d069      	beq.n	80052aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051d6:	4b50      	ldr	r3, [pc, #320]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d11c      	bne.n	8005228 <HAL_RCC_OscConfig+0x190>
 80051ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d116      	bne.n	8005228 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fa:	4b47      	ldr	r3, [pc, #284]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_RCC_OscConfig+0x17a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e1e9      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005212:	4b41      	ldr	r3, [pc, #260]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	493d      	ldr	r1, [pc, #244]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005226:	e040      	b.n	80052aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d023      	beq.n	8005278 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005230:	4b39      	ldr	r3, [pc, #228]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a38      	ldr	r2, [pc, #224]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fe faa8 	bl	8003790 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005244:	f7fe faa4 	bl	8003790 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e1c7      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005256:	4b30      	ldr	r3, [pc, #192]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005262:	4b2d      	ldr	r3, [pc, #180]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4929      	ldr	r1, [pc, #164]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	e018      	b.n	80052aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005278:	4b27      	ldr	r3, [pc, #156]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fe fa84 	bl	8003790 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528c:	f7fe fa80 	bl	8003790 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1a3      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	4b1e      	ldr	r3, [pc, #120]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0308 	and.w	r3, r3, #8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d038      	beq.n	8005328 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d019      	beq.n	80052f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80052c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c2:	4a15      	ldr	r2, [pc, #84]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fe fa61 	bl	8003790 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d2:	f7fe fa5d 	bl	8003790 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e180      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80052e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x23a>
 80052f0:	e01a      	b.n	8005328 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052f2:	4b09      	ldr	r3, [pc, #36]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80052f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f6:	4a08      	ldr	r2, [pc, #32]	@ (8005318 <HAL_RCC_OscConfig+0x280>)
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fe:	f7fe fa47 	bl	8003790 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	e00a      	b.n	800531c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005306:	f7fe fa43 	bl	8003790 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d903      	bls.n	800531c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e166      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
 8005318:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800531c:	4b92      	ldr	r3, [pc, #584]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ee      	bne.n	8005306 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80a4 	beq.w	800547e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005336:	4b8c      	ldr	r3, [pc, #560]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10d      	bne.n	800535e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b89      	ldr	r3, [pc, #548]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	4a88      	ldr	r2, [pc, #544]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534c:	6413      	str	r3, [r2, #64]	@ 0x40
 800534e:	4b86      	ldr	r3, [pc, #536]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800535a:	2301      	movs	r3, #1
 800535c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800535e:	4b83      	ldr	r3, [pc, #524]	@ (800556c <HAL_RCC_OscConfig+0x4d4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d118      	bne.n	800539c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800536a:	4b80      	ldr	r3, [pc, #512]	@ (800556c <HAL_RCC_OscConfig+0x4d4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a7f      	ldr	r2, [pc, #508]	@ (800556c <HAL_RCC_OscConfig+0x4d4>)
 8005370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005376:	f7fe fa0b 	bl	8003790 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537e:	f7fe fa07 	bl	8003790 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b64      	cmp	r3, #100	@ 0x64
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e12a      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005390:	4b76      	ldr	r3, [pc, #472]	@ (800556c <HAL_RCC_OscConfig+0x4d4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x31a>
 80053a4:	4b70      	ldr	r3, [pc, #448]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a8:	4a6f      	ldr	r2, [pc, #444]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b0:	e02d      	b.n	800540e <HAL_RCC_OscConfig+0x376>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x33c>
 80053ba:	4b6b      	ldr	r3, [pc, #428]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053be:	4a6a      	ldr	r2, [pc, #424]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c6:	4b68      	ldr	r3, [pc, #416]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ca:	4a67      	ldr	r2, [pc, #412]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053cc:	f023 0304 	bic.w	r3, r3, #4
 80053d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d2:	e01c      	b.n	800540e <HAL_RCC_OscConfig+0x376>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d10c      	bne.n	80053f6 <HAL_RCC_OscConfig+0x35e>
 80053dc:	4b62      	ldr	r3, [pc, #392]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e0:	4a61      	ldr	r2, [pc, #388]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053e2:	f043 0304 	orr.w	r3, r3, #4
 80053e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e8:	4b5f      	ldr	r3, [pc, #380]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f4:	e00b      	b.n	800540e <HAL_RCC_OscConfig+0x376>
 80053f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	4a5b      	ldr	r2, [pc, #364]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	6713      	str	r3, [r2, #112]	@ 0x70
 8005402:	4b59      	ldr	r3, [pc, #356]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005406:	4a58      	ldr	r2, [pc, #352]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005408:	f023 0304 	bic.w	r3, r3, #4
 800540c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fe f9bb 	bl	8003790 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541c:	e00a      	b.n	8005434 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fe f9b7 	bl	8003790 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0d8      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005434:	4b4c      	ldr	r3, [pc, #304]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0ee      	beq.n	800541e <HAL_RCC_OscConfig+0x386>
 8005440:	e014      	b.n	800546c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fe f9a5 	bl	8003790 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fe f9a1 	bl	8003790 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0c2      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005460:	4b41      	ldr	r3, [pc, #260]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ee      	bne.n	800544a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005472:	4b3d      	ldr	r3, [pc, #244]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	4a3c      	ldr	r2, [pc, #240]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800547c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80ae 	beq.w	80055e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005488:	4b37      	ldr	r3, [pc, #220]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b08      	cmp	r3, #8
 8005492:	d06d      	beq.n	8005570 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b02      	cmp	r3, #2
 800549a:	d14b      	bne.n	8005534 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	4b32      	ldr	r3, [pc, #200]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a31      	ldr	r2, [pc, #196]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fe f972 	bl	8003790 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fe f96e 	bl	8003790 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e091      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c2:	4b29      	ldr	r3, [pc, #164]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	3b01      	subs	r3, #1
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f8:	071b      	lsls	r3, r3, #28
 80054fa:	491b      	ldr	r1, [pc, #108]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005500:	4b19      	ldr	r3, [pc, #100]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fe f940 	bl	8003790 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fe f93c 	bl	8003790 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e05f      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x47c>
 8005532:	e057      	b.n	80055e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0b      	ldr	r2, [pc, #44]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fe f926 	bl	8003790 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fe f922 	bl	8003790 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e045      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555a:	4b03      	ldr	r3, [pc, #12]	@ (8005568 <HAL_RCC_OscConfig+0x4d0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x4b0>
 8005566:	e03d      	b.n	80055e4 <HAL_RCC_OscConfig+0x54c>
 8005568:	40023800 	.word	0x40023800
 800556c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005570:	4b1f      	ldr	r3, [pc, #124]	@ (80055f0 <HAL_RCC_OscConfig+0x558>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d030      	beq.n	80055e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d129      	bne.n	80055e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d122      	bne.n	80055e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055a0:	4013      	ands	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d119      	bne.n	80055e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	3b01      	subs	r3, #1
 80055ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d10f      	bne.n	80055e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800

080055f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0d0      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800560c:	4b6a      	ldr	r3, [pc, #424]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d910      	bls.n	800563c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b67      	ldr	r3, [pc, #412]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 020f 	bic.w	r2, r3, #15
 8005622:	4965      	ldr	r1, [pc, #404]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562a:	4b63      	ldr	r3, [pc, #396]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0b8      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005654:	4b59      	ldr	r3, [pc, #356]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a58      	ldr	r2, [pc, #352]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 800565a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800565e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566c:	4b53      	ldr	r3, [pc, #332]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4a52      	ldr	r2, [pc, #328]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005672:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005676:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005678:	4b50      	ldr	r3, [pc, #320]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	494d      	ldr	r1, [pc, #308]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d040      	beq.n	8005718 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569e:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d115      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e07f      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d107      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056b6:	4b41      	ldr	r3, [pc, #260]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e073      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c6:	4b3d      	ldr	r3, [pc, #244]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e06b      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056d6:	4b39      	ldr	r3, [pc, #228]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4936      	ldr	r1, [pc, #216]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e8:	f7fe f852 	bl	8003790 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056f0:	f7fe f84e 	bl	8003790 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e053      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005706:	4b2d      	ldr	r3, [pc, #180]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 020c 	and.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	429a      	cmp	r2, r3
 8005716:	d1eb      	bne.n	80056f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005718:	4b27      	ldr	r3, [pc, #156]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d210      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b24      	ldr	r3, [pc, #144]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 020f 	bic.w	r2, r3, #15
 800572e:	4922      	ldr	r1, [pc, #136]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005736:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d001      	beq.n	8005748 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e032      	b.n	80057ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005754:	4b19      	ldr	r3, [pc, #100]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4916      	ldr	r1, [pc, #88]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005772:	4b12      	ldr	r3, [pc, #72]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	490e      	ldr	r1, [pc, #56]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005786:	f000 f821 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800578a:	4602      	mov	r2, r0
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_RCC_ClockConfig+0x1c8>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	490a      	ldr	r1, [pc, #40]	@ (80057c0 <HAL_RCC_ClockConfig+0x1cc>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	4a09      	ldr	r2, [pc, #36]	@ (80057c4 <HAL_RCC_ClockConfig+0x1d0>)
 80057a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <HAL_RCC_ClockConfig+0x1d4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fd ffae 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023c00 	.word	0x40023c00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	0800bb00 	.word	0x0800bb00
 80057c4:	20000014 	.word	0x20000014
 80057c8:	20000018 	.word	0x20000018

080057cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b094      	sub	sp, #80	@ 0x50
 80057d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057d8:	2300      	movs	r3, #0
 80057da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057dc:	2300      	movs	r3, #0
 80057de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057e4:	4b79      	ldr	r3, [pc, #484]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d00d      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x40>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	f200 80e1 	bhi.w	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x34>
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d003      	beq.n	8005806 <HAL_RCC_GetSysClockFreq+0x3a>
 80057fe:	e0db      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b73      	ldr	r3, [pc, #460]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005802:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005804:	e0db      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005806:	4b73      	ldr	r3, [pc, #460]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005808:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800580a:	e0d8      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800580c:	4b6f      	ldr	r3, [pc, #444]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005814:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005816:	4b6d      	ldr	r3, [pc, #436]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005822:	4b6a      	ldr	r3, [pc, #424]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	2200      	movs	r2, #0
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005834:	633b      	str	r3, [r7, #48]	@ 0x30
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
 800583a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	0159      	lsls	r1, r3, #5
 800584c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005850:	0150      	lsls	r0, r2, #5
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4621      	mov	r1, r4
 8005858:	1a51      	subs	r1, r2, r1
 800585a:	6139      	str	r1, [r7, #16]
 800585c:	4629      	mov	r1, r5
 800585e:	eb63 0301 	sbc.w	r3, r3, r1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005870:	4659      	mov	r1, fp
 8005872:	018b      	lsls	r3, r1, #6
 8005874:	4651      	mov	r1, sl
 8005876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800587a:	4651      	mov	r1, sl
 800587c:	018a      	lsls	r2, r1, #6
 800587e:	4651      	mov	r1, sl
 8005880:	ebb2 0801 	subs.w	r8, r2, r1
 8005884:	4659      	mov	r1, fp
 8005886:	eb63 0901 	sbc.w	r9, r3, r1
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800589a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589e:	4690      	mov	r8, r2
 80058a0:	4699      	mov	r9, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	eb18 0303 	adds.w	r3, r8, r3
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	462b      	mov	r3, r5
 80058ac:	eb49 0303 	adc.w	r3, r9, r3
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058be:	4629      	mov	r1, r5
 80058c0:	024b      	lsls	r3, r1, #9
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058c8:	4621      	mov	r1, r4
 80058ca:	024a      	lsls	r2, r1, #9
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058d2:	2200      	movs	r2, #0
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058dc:	f7fa febc 	bl	8000658 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e8:	e058      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ea:	4b38      	ldr	r3, [pc, #224]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	099b      	lsrs	r3, r3, #6
 80058f0:	2200      	movs	r2, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	4611      	mov	r1, r2
 80058f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058fa:	623b      	str	r3, [r7, #32]
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005900:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	f04f 0000 	mov.w	r0, #0
 800590c:	f04f 0100 	mov.w	r1, #0
 8005910:	0159      	lsls	r1, r3, #5
 8005912:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005916:	0150      	lsls	r0, r2, #5
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4641      	mov	r1, r8
 800591e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005922:	4649      	mov	r1, r9
 8005924:	eb63 0b01 	sbc.w	fp, r3, r1
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005934:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005938:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800593c:	ebb2 040a 	subs.w	r4, r2, sl
 8005940:	eb63 050b 	sbc.w	r5, r3, fp
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00eb      	lsls	r3, r5, #3
 800594e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	4643      	mov	r3, r8
 800595a:	18e3      	adds	r3, r4, r3
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	464b      	mov	r3, r9
 8005960:	eb45 0303 	adc.w	r3, r5, r3
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005972:	4629      	mov	r1, r5
 8005974:	028b      	lsls	r3, r1, #10
 8005976:	4621      	mov	r1, r4
 8005978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800597c:	4621      	mov	r1, r4
 800597e:	028a      	lsls	r2, r1, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005986:	2200      	movs	r2, #0
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	61fa      	str	r2, [r7, #28]
 800598c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005990:	f7fa fe62 	bl	8000658 <__aeabi_uldivmod>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4613      	mov	r3, r2
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800599c:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <HAL_RCC_GetSysClockFreq+0x200>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059b6:	e002      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b05      	ldr	r3, [pc, #20]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3750      	adds	r7, #80	@ 0x50
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	007a1200 	.word	0x007a1200

080059d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000014 	.word	0x20000014

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	@ (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800bb10 	.word	0x0800bb10

08005a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a1c:	f7ff ffdc 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	0b5b      	lsrs	r3, r3, #13
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	4903      	ldr	r1, [pc, #12]	@ (8005a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2e:	5ccb      	ldrb	r3, [r1, r3]
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	0800bb10 	.word	0x0800bb10

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d012      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a68:	4b69      	ldr	r3, [pc, #420]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a68      	ldr	r2, [pc, #416]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a72:	6093      	str	r3, [r2, #8]
 8005a74:	4b66      	ldr	r3, [pc, #408]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7c:	4964      	ldr	r1, [pc, #400]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d017      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa8:	4959      	ldr	r1, [pc, #356]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ab8:	d101      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d017      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005adc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	494a      	ldr	r1, [pc, #296]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005af4:	d101      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005af6:	2301      	movs	r3, #1
 8005af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b12:	2301      	movs	r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 808b 	beq.w	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b24:	4b3a      	ldr	r3, [pc, #232]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	4a39      	ldr	r2, [pc, #228]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b30:	4b37      	ldr	r3, [pc, #220]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b3c:	4b35      	ldr	r3, [pc, #212]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a34      	ldr	r2, [pc, #208]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b48:	f7fd fe22 	bl	8003790 <HAL_GetTick>
 8005b4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b50:	f7fd fe1e 	bl	8003790 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	@ 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e38f      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b62:	4b2c      	ldr	r3, [pc, #176]	@ (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b6e:	4b28      	ldr	r3, [pc, #160]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d035      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d02e      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b8c:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b96:	4b1e      	ldr	r3, [pc, #120]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ba0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005bae:	4a18      	ldr	r2, [pc, #96]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bb4:	4b16      	ldr	r3, [pc, #88]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d114      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fd fde6 	bl	8003790 <HAL_GetTick>
 8005bc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc6:	e00a      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bc8:	f7fd fde2 	bl	8003790 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e351      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bde:	4b0c      	ldr	r3, [pc, #48]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ee      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bf6:	d111      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005bf8:	4b05      	ldr	r3, [pc, #20]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c04:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c06:	400b      	ands	r3, r1
 8005c08:	4901      	ldr	r1, [pc, #4]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40007000 	.word	0x40007000
 8005c18:	0ffffcff 	.word	0x0ffffcff
 8005c1c:	4bac      	ldr	r3, [pc, #688]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4aab      	ldr	r2, [pc, #684]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c26:	6093      	str	r3, [r2, #8]
 8005c28:	4ba9      	ldr	r3, [pc, #676]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c34:	49a6      	ldr	r1, [pc, #664]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c46:	4ba2      	ldr	r3, [pc, #648]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c4c:	4aa0      	ldr	r2, [pc, #640]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005c56:	4b9e      	ldr	r3, [pc, #632]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	499b      	ldr	r1, [pc, #620]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c74:	4b96      	ldr	r3, [pc, #600]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c82:	4993      	ldr	r1, [pc, #588]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c96:	4b8e      	ldr	r3, [pc, #568]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ca4:	498a      	ldr	r1, [pc, #552]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cb8:	4b85      	ldr	r3, [pc, #532]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cc6:	4982      	ldr	r1, [pc, #520]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cda:	4b7d      	ldr	r3, [pc, #500]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce8:	4979      	ldr	r1, [pc, #484]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cfc:	4b74      	ldr	r3, [pc, #464]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d02:	f023 0203 	bic.w	r2, r3, #3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0a:	4971      	ldr	r1, [pc, #452]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d24:	f023 020c 	bic.w	r2, r3, #12
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2c:	4968      	ldr	r1, [pc, #416]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d40:	4b63      	ldr	r3, [pc, #396]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4e:	4960      	ldr	r1, [pc, #384]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d62:	4b5b      	ldr	r3, [pc, #364]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	4957      	ldr	r1, [pc, #348]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d84:	4b52      	ldr	r3, [pc, #328]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	494f      	ldr	r1, [pc, #316]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005da6:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db4:	4946      	ldr	r1, [pc, #280]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005dc8:	4b41      	ldr	r3, [pc, #260]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd6:	493e      	ldr	r1, [pc, #248]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005dea:	4b39      	ldr	r3, [pc, #228]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df8:	4935      	ldr	r1, [pc, #212]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e1a:	492d      	ldr	r1, [pc, #180]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e2e:	4b28      	ldr	r3, [pc, #160]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e3c:	4924      	ldr	r1, [pc, #144]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e6e:	4b18      	ldr	r3, [pc, #96]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7c:	4914      	ldr	r1, [pc, #80]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00b      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea0:	490b      	ldr	r1, [pc, #44]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00f      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005eb4:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec4:	4902      	ldr	r1, [pc, #8]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ecc:	e002      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ee6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef0:	4986      	ldr	r1, [pc, #536]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f04:	4b81      	ldr	r3, [pc, #516]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f14:	497d      	ldr	r1, [pc, #500]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d006      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80d6 	beq.w	80060dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f30:	4b76      	ldr	r3, [pc, #472]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a75      	ldr	r2, [pc, #468]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3c:	f7fd fc28 	bl	8003790 <HAL_GetTick>
 8005f40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f44:	f7fd fc24 	bl	8003790 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	@ 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e195      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f56:	4b6d      	ldr	r3, [pc, #436]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d021      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11d      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f76:	4b65      	ldr	r3, [pc, #404]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f84:	4b61      	ldr	r3, [pc, #388]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f8a:	0e1b      	lsrs	r3, r3, #24
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	019a      	lsls	r2, r3, #6
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	071b      	lsls	r3, r3, #28
 8005faa:	4958      	ldr	r1, [pc, #352]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc6:	d00a      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02e      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fdc:	d129      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fde:	4b4b      	ldr	r3, [pc, #300]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fec:	4b47      	ldr	r3, [pc, #284]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff2:	0f1b      	lsrs	r3, r3, #28
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	019a      	lsls	r2, r3, #6
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	061b      	lsls	r3, r3, #24
 800600c:	431a      	orrs	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	071b      	lsls	r3, r3, #28
 8006012:	493e      	ldr	r1, [pc, #248]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006014:	4313      	orrs	r3, r2
 8006016:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800601a:	4b3c      	ldr	r3, [pc, #240]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800601c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006020:	f023 021f 	bic.w	r2, r3, #31
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	3b01      	subs	r3, #1
 800602a:	4938      	ldr	r1, [pc, #224]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01d      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800603e:	4b33      	ldr	r3, [pc, #204]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006044:	0e1b      	lsrs	r3, r3, #24
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800604c:	4b2f      	ldr	r3, [pc, #188]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006052:	0f1b      	lsrs	r3, r3, #28
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	019a      	lsls	r2, r3, #6
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	431a      	orrs	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	061b      	lsls	r3, r3, #24
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	071b      	lsls	r3, r3, #28
 8006072:	4926      	ldr	r1, [pc, #152]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	019a      	lsls	r2, r3, #6
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	071b      	lsls	r3, r3, #28
 80060a2:	491a      	ldr	r1, [pc, #104]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060aa:	4b18      	ldr	r3, [pc, #96]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a17      	ldr	r2, [pc, #92]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b6:	f7fd fb6b 	bl	8003790 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060be:	f7fd fb67 	bl	8003790 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b64      	cmp	r3, #100	@ 0x64
 80060ca:	d901      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e0d8      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060d0:	4b0e      	ldr	r3, [pc, #56]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	f040 80ce 	bne.w	8006280 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80060e4:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a08      	ldr	r2, [pc, #32]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80060ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f0:	f7fd fb4e 	bl	8003790 <HAL_GetTick>
 80060f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060f6:	e00b      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060f8:	f7fd fb4a 	bl	8003790 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b64      	cmp	r3, #100	@ 0x64
 8006104:	d904      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0bb      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006110:	4b5e      	ldr	r3, [pc, #376]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611c:	d0ec      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800613a:	2b00      	cmp	r3, #0
 800613c:	d02e      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d12a      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006146:	4b51      	ldr	r3, [pc, #324]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006154:	4b4d      	ldr	r3, [pc, #308]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615a:	0f1b      	lsrs	r3, r3, #28
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	019a      	lsls	r2, r3, #6
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	041b      	lsls	r3, r3, #16
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	061b      	lsls	r3, r3, #24
 8006174:	431a      	orrs	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	071b      	lsls	r3, r3, #28
 800617a:	4944      	ldr	r1, [pc, #272]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006182:	4b42      	ldr	r3, [pc, #264]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006188:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	3b01      	subs	r3, #1
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	493d      	ldr	r1, [pc, #244]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d022      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061b0:	d11d      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061b2:	4b36      	ldr	r3, [pc, #216]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	0e1b      	lsrs	r3, r3, #24
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061c0:	4b32      	ldr	r3, [pc, #200]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	0f1b      	lsrs	r3, r3, #28
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	019a      	lsls	r2, r3, #6
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	431a      	orrs	r2, r3
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	071b      	lsls	r3, r3, #28
 80061e6:	4929      	ldr	r1, [pc, #164]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d028      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061fa:	4b24      	ldr	r3, [pc, #144]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006200:	0e1b      	lsrs	r3, r3, #24
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006208:	4b20      	ldr	r3, [pc, #128]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	019a      	lsls	r2, r3, #6
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	041b      	lsls	r3, r3, #16
 8006220:	431a      	orrs	r2, r3
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	071b      	lsls	r3, r3, #28
 800622e:	4917      	ldr	r1, [pc, #92]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006236:	4b15      	ldr	r3, [pc, #84]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800623c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4911      	ldr	r1, [pc, #68]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800624c:	4b0f      	ldr	r3, [pc, #60]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a0e      	ldr	r2, [pc, #56]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006258:	f7fd fa9a 	bl	8003790 <HAL_GetTick>
 800625c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006260:	f7fd fa96 	bl	8003790 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b64      	cmp	r3, #100	@ 0x64
 800626c:	d901      	bls.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e007      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006272:	4b06      	ldr	r3, [pc, #24]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800627a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800627e:	d1ef      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40023800 	.word	0x40023800

08006290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e09d      	b.n	80063de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d108      	bne.n	80062bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062b2:	d009      	beq.n	80062c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	61da      	str	r2, [r3, #28]
 80062ba:	e005      	b.n	80062c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fc fc92 	bl	8002c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006308:	d902      	bls.n	8006310 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e002      	b.n	8006316 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006314:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800631e:	d007      	beq.n	8006330 <HAL_SPI_Init+0xa0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006328:	d002      	beq.n	8006330 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006372:	ea42 0103 	orr.w	r1, r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	0c1b      	lsrs	r3, r3, #16
 800638c:	f003 0204 	and.w	r2, r3, #4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80063ac:	ea42 0103 	orr.w	r1, r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e049      	b.n	800648c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fc fc7d 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f001 f819 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d001      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e054      	b.n	8006556 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a26      	ldr	r2, [pc, #152]	@ (8006564 <HAL_TIM_Base_Start_IT+0xd0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d022      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d6:	d01d      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a22      	ldr	r2, [pc, #136]	@ (8006568 <HAL_TIM_Base_Start_IT+0xd4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d018      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a21      	ldr	r2, [pc, #132]	@ (800656c <HAL_TIM_Base_Start_IT+0xd8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006570 <HAL_TIM_Base_Start_IT+0xdc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <HAL_TIM_Base_Start_IT+0xe0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d009      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <HAL_TIM_Base_Start_IT+0xe4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x80>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <HAL_TIM_Base_Start_IT+0xe8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d115      	bne.n	8006540 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	4b19      	ldr	r3, [pc, #100]	@ (8006580 <HAL_TIM_Base_Start_IT+0xec>)
 800651c:	4013      	ands	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b06      	cmp	r3, #6
 8006524:	d015      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0xbe>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800652c:	d011      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653e:	e008      	b.n	8006552 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e000      	b.n	8006554 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40010400 	.word	0x40010400
 8006578:	40014000 	.word	0x40014000
 800657c:	40001800 	.word	0x40001800
 8006580:	00010007 	.word	0x00010007

08006584 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e049      	b.n	800662a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f841 	bl	8006632 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f000 ff4a 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e049      	b.n	80066ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7fc fc5d 	bl	8002f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2202      	movs	r2, #2
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f000 fee9 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_TIM_PWM_Start+0x24>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e03c      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b04      	cmp	r3, #4
 800671c:	d109      	bne.n	8006732 <HAL_TIM_PWM_Start+0x3e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	bf14      	ite	ne
 800672a:	2301      	movne	r3, #1
 800672c:	2300      	moveq	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	e02f      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b08      	cmp	r3, #8
 8006736:	d109      	bne.n	800674c <HAL_TIM_PWM_Start+0x58>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e022      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b0c      	cmp	r3, #12
 8006750:	d109      	bne.n	8006766 <HAL_TIM_PWM_Start+0x72>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e015      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b10      	cmp	r3, #16
 800676a:	d109      	bne.n	8006780 <HAL_TIM_PWM_Start+0x8c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e008      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e092      	b.n	80068c0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_TIM_PWM_Start+0xb6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067a8:	e023      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_PWM_Start+0xc6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067b8:	e01b      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d104      	bne.n	80067ca <HAL_TIM_PWM_Start+0xd6>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067c8:	e013      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b0c      	cmp	r3, #12
 80067ce:	d104      	bne.n	80067da <HAL_TIM_PWM_Start+0xe6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067d8:	e00b      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d104      	bne.n	80067ea <HAL_TIM_PWM_Start+0xf6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067e8:	e003      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fafc 	bl	8007df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a30      	ldr	r2, [pc, #192]	@ (80068c8 <HAL_TIM_PWM_Start+0x1d4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIM_PWM_Start+0x120>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2f      	ldr	r2, [pc, #188]	@ (80068cc <HAL_TIM_PWM_Start+0x1d8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d101      	bne.n	8006818 <HAL_TIM_PWM_Start+0x124>
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <HAL_TIM_PWM_Start+0x126>
 8006818:	2300      	movs	r3, #0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a25      	ldr	r2, [pc, #148]	@ (80068c8 <HAL_TIM_PWM_Start+0x1d4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006840:	d01d      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a22      	ldr	r2, [pc, #136]	@ (80068d0 <HAL_TIM_PWM_Start+0x1dc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a20      	ldr	r2, [pc, #128]	@ (80068d4 <HAL_TIM_PWM_Start+0x1e0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1f      	ldr	r2, [pc, #124]	@ (80068d8 <HAL_TIM_PWM_Start+0x1e4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a19      	ldr	r2, [pc, #100]	@ (80068cc <HAL_TIM_PWM_Start+0x1d8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1b      	ldr	r2, [pc, #108]	@ (80068dc <HAL_TIM_PWM_Start+0x1e8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIM_PWM_Start+0x18a>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a19      	ldr	r2, [pc, #100]	@ (80068e0 <HAL_TIM_PWM_Start+0x1ec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d115      	bne.n	80068aa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	4b17      	ldr	r3, [pc, #92]	@ (80068e4 <HAL_TIM_PWM_Start+0x1f0>)
 8006886:	4013      	ands	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b06      	cmp	r3, #6
 800688e:	d015      	beq.n	80068bc <HAL_TIM_PWM_Start+0x1c8>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006896:	d011      	beq.n	80068bc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0201 	orr.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a8:	e008      	b.n	80068bc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e000      	b.n	80068be <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40001800 	.word	0x40001800
 80068e4:	00010007 	.word	0x00010007

080068e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e049      	b.n	800698e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f841 	bl	8006996 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3304      	adds	r3, #4
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f000 fd98 	bl	800745c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
	...

080069ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e08f      	b.n	8006ae0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fc fa33 	bl	8002e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2202      	movs	r2, #2
 80069de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae8 <HAL_TIM_Encoder_Init+0x13c>)
 80069ee:	400b      	ands	r3, r1
 80069f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f000 fd2d 	bl	800745c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a1b      	ldr	r3, [r3, #32]
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4b31      	ldr	r3, [pc, #196]	@ (8006aec <HAL_TIM_Encoder_Init+0x140>)
 8006a28:	4013      	ands	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	4313      	orrs	r3, r2
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4b2b      	ldr	r3, [pc, #172]	@ (8006af0 <HAL_TIM_Encoder_Init+0x144>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4b2a      	ldr	r3, [pc, #168]	@ (8006af4 <HAL_TIM_Encoder_Init+0x148>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	011a      	lsls	r2, r3, #4
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	031b      	lsls	r3, r3, #12
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a7a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	011b      	lsls	r3, r3, #4
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	fffebff8 	.word	0xfffebff8
 8006aec:	fffffcfc 	.word	0xfffffcfc
 8006af0:	fffff3f3 	.word	0xfffff3f3
 8006af4:	ffff0f0f 	.word	0xffff0f0f

08006af8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d102      	bne.n	8006b34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b2e:	7b7b      	ldrb	r3, [r7, #13]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d001      	beq.n	8006b38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e069      	b.n	8006c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b48:	e031      	b.n	8006bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d110      	bne.n	8006b72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d102      	bne.n	8006b5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b56:	7b3b      	ldrb	r3, [r7, #12]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d001      	beq.n	8006b60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e055      	b.n	8006c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b70:	e01d      	b.n	8006bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d108      	bne.n	8006b8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d105      	bne.n	8006b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b7e:	7b7b      	ldrb	r3, [r7, #13]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d102      	bne.n	8006b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b84:	7b3b      	ldrb	r3, [r7, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d001      	beq.n	8006b8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e03e      	b.n	8006c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_TIM_Encoder_Start+0xc4>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d008      	beq.n	8006bcc <HAL_TIM_Encoder_Start+0xd4>
 8006bba:	e00f      	b.n	8006bdc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f917 	bl	8007df8 <TIM_CCxChannelCmd>
      break;
 8006bca:	e016      	b.n	8006bfa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f90f 	bl	8007df8 <TIM_CCxChannelCmd>
      break;
 8006bda:	e00e      	b.n	8006bfa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2201      	movs	r2, #1
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 f907 	bl	8007df8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	2104      	movs	r1, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 f900 	bl	8007df8 <TIM_CCxChannelCmd>
      break;
 8006bf8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0201 	orr.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d020      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0202 	mvn.w	r2, #2
 8006c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fbde 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fbd0 	bl	800740c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fbe1 	bl	8007434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d020      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01b      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0204 	mvn.w	r2, #4
 8006c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fbb8 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
 8006cb0:	e005      	b.n	8006cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fbaa 	bl	800740c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fbbb 	bl	8007434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d020      	beq.n	8006d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01b      	beq.n	8006d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0208 	mvn.w	r2, #8
 8006ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb92 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fb84 	bl	800740c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fb95 	bl	8007434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d020      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01b      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0210 	mvn.w	r2, #16
 8006d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2208      	movs	r2, #8
 8006d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb6c 	bl	8007420 <HAL_TIM_IC_CaptureCallback>
 8006d48:	e005      	b.n	8006d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb5e 	bl	800740c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fb6f 	bl	8007434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0201 	mvn.w	r2, #1
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fa f864 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 f961 	bl	8008070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00c      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f959 	bl	8008084 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb29 	bl	8007448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00c      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f06f 0220 	mvn.w	r2, #32
 8006e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 f921 	bl	800805c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e066      	b.n	8006f10 <HAL_TIM_OC_ConfigChannel+0xec>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b14      	cmp	r3, #20
 8006e4e:	d857      	bhi.n	8006f00 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006e50:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006f01 	.word	0x08006f01
 8006e60:	08006f01 	.word	0x08006f01
 8006e64:	08006f01 	.word	0x08006f01
 8006e68:	08006ebb 	.word	0x08006ebb
 8006e6c:	08006f01 	.word	0x08006f01
 8006e70:	08006f01 	.word	0x08006f01
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006ec9 	.word	0x08006ec9
 8006e7c:	08006f01 	.word	0x08006f01
 8006e80:	08006f01 	.word	0x08006f01
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006ed7 	.word	0x08006ed7
 8006e8c:	08006f01 	.word	0x08006f01
 8006e90:	08006f01 	.word	0x08006f01
 8006e94:	08006f01 	.word	0x08006f01
 8006e98:	08006ee5 	.word	0x08006ee5
 8006e9c:	08006f01 	.word	0x08006f01
 8006ea0:	08006f01 	.word	0x08006f01
 8006ea4:	08006f01 	.word	0x08006f01
 8006ea8:	08006ef3 	.word	0x08006ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fb7e 	bl	80075b4 <TIM_OC1_SetConfig>
      break;
 8006eb8:	e025      	b.n	8006f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68b9      	ldr	r1, [r7, #8]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fbe9 	bl	8007698 <TIM_OC2_SetConfig>
      break;
 8006ec6:	e01e      	b.n	8006f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fc5a 	bl	8007788 <TIM_OC3_SetConfig>
      break;
 8006ed4:	e017      	b.n	8006f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fcc9 	bl	8007874 <TIM_OC4_SetConfig>
      break;
 8006ee2:	e010      	b.n	8006f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fd1a 	bl	8007924 <TIM_OC5_SetConfig>
      break;
 8006ef0:	e009      	b.n	8006f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fd65 	bl	80079c8 <TIM_OC6_SetConfig>
      break;
 8006efe:	e002      	b.n	8006f06 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
      break;
 8006f04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e088      	b.n	8007048 <HAL_TIM_IC_ConfigChannel+0x130>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11b      	bne.n	8006f7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006f54:	f000 fd8c 	bl	8007a70 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 020c 	bic.w	r2, r2, #12
 8006f66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6999      	ldr	r1, [r3, #24]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	619a      	str	r2, [r3, #24]
 8006f7a:	e060      	b.n	800703e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d11c      	bne.n	8006fbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006f92:	f000 fe10 	bl	8007bb6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699a      	ldr	r2, [r3, #24]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006fa4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6999      	ldr	r1, [r3, #24]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	021a      	lsls	r2, r3, #8
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	619a      	str	r2, [r3, #24]
 8006fba:	e040      	b.n	800703e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b08      	cmp	r3, #8
 8006fc0:	d11b      	bne.n	8006ffa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006fd2:	f000 fe5d 	bl	8007c90 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69da      	ldr	r2, [r3, #28]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 020c 	bic.w	r2, r2, #12
 8006fe4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69d9      	ldr	r1, [r3, #28]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	61da      	str	r2, [r3, #28]
 8006ff8:	e021      	b.n	800703e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b0c      	cmp	r3, #12
 8006ffe:	d11c      	bne.n	800703a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007010:	f000 fe7a 	bl	8007d08 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007022:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69d9      	ldr	r1, [r3, #28]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	021a      	lsls	r2, r3, #8
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	61da      	str	r2, [r3, #28]
 8007038:	e001      	b.n	800703e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800706a:	2302      	movs	r3, #2
 800706c:	e0ff      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b14      	cmp	r3, #20
 800707a:	f200 80f0 	bhi.w	800725e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070d9 	.word	0x080070d9
 8007088:	0800725f 	.word	0x0800725f
 800708c:	0800725f 	.word	0x0800725f
 8007090:	0800725f 	.word	0x0800725f
 8007094:	08007119 	.word	0x08007119
 8007098:	0800725f 	.word	0x0800725f
 800709c:	0800725f 	.word	0x0800725f
 80070a0:	0800725f 	.word	0x0800725f
 80070a4:	0800715b 	.word	0x0800715b
 80070a8:	0800725f 	.word	0x0800725f
 80070ac:	0800725f 	.word	0x0800725f
 80070b0:	0800725f 	.word	0x0800725f
 80070b4:	0800719b 	.word	0x0800719b
 80070b8:	0800725f 	.word	0x0800725f
 80070bc:	0800725f 	.word	0x0800725f
 80070c0:	0800725f 	.word	0x0800725f
 80070c4:	080071dd 	.word	0x080071dd
 80070c8:	0800725f 	.word	0x0800725f
 80070cc:	0800725f 	.word	0x0800725f
 80070d0:	0800725f 	.word	0x0800725f
 80070d4:	0800721d 	.word	0x0800721d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fa68 	bl	80075b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0204 	bic.w	r2, r2, #4
 8007102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6999      	ldr	r1, [r3, #24]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	619a      	str	r2, [r3, #24]
      break;
 8007116:	e0a5      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 faba 	bl	8007698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6999      	ldr	r1, [r3, #24]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	021a      	lsls	r2, r3, #8
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	619a      	str	r2, [r3, #24]
      break;
 8007158:	e084      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fb11 	bl	8007788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0208 	orr.w	r2, r2, #8
 8007174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0204 	bic.w	r2, r2, #4
 8007184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69d9      	ldr	r1, [r3, #28]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	61da      	str	r2, [r3, #28]
      break;
 8007198:	e064      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fb67 	bl	8007874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69da      	ldr	r2, [r3, #28]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69d9      	ldr	r1, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	021a      	lsls	r2, r3, #8
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	61da      	str	r2, [r3, #28]
      break;
 80071da:	e043      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fb9e 	bl	8007924 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0208 	orr.w	r2, r2, #8
 80071f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0204 	bic.w	r2, r2, #4
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800721a:	e023      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fbd0 	bl	80079c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007236:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007246:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800725c:	e002      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
      break;
 8007262:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop

08007278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_TIM_ConfigClockSource+0x1c>
 8007290:	2302      	movs	r3, #2
 8007292:	e0b4      	b.n	80073fe <HAL_TIM_ConfigClockSource+0x186>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4b56      	ldr	r3, [pc, #344]	@ (8007408 <HAL_TIM_ConfigClockSource+0x190>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072cc:	d03e      	beq.n	800734c <HAL_TIM_ConfigClockSource+0xd4>
 80072ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072d2:	f200 8087 	bhi.w	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072da:	f000 8086 	beq.w	80073ea <HAL_TIM_ConfigClockSource+0x172>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e2:	d87f      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b70      	cmp	r3, #112	@ 0x70
 80072e6:	d01a      	beq.n	800731e <HAL_TIM_ConfigClockSource+0xa6>
 80072e8:	2b70      	cmp	r3, #112	@ 0x70
 80072ea:	d87b      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b60      	cmp	r3, #96	@ 0x60
 80072ee:	d050      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x11a>
 80072f0:	2b60      	cmp	r3, #96	@ 0x60
 80072f2:	d877      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b50      	cmp	r3, #80	@ 0x50
 80072f6:	d03c      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0xfa>
 80072f8:	2b50      	cmp	r3, #80	@ 0x50
 80072fa:	d873      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d058      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007300:	2b40      	cmp	r3, #64	@ 0x40
 8007302:	d86f      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b30      	cmp	r3, #48	@ 0x30
 8007306:	d064      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007308:	2b30      	cmp	r3, #48	@ 0x30
 800730a:	d86b      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d060      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d867      	bhi.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b00      	cmp	r3, #0
 8007316:	d05c      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b10      	cmp	r3, #16
 800731a:	d05a      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0x15a>
 800731c:	e062      	b.n	80073e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	f000 fd43 	bl	8007db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	609a      	str	r2, [r3, #8]
      break;
 800734a:	e04f      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800735c:	f000 fd2c 	bl	8007db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800736e:	609a      	str	r2, [r3, #8]
      break;
 8007370:	e03c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fbea 	bl	8007b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2150      	movs	r1, #80	@ 0x50
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fcf9 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 8007390:	e02c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fc46 	bl	8007c30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2160      	movs	r1, #96	@ 0x60
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fce9 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 80073b0:	e01c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073be:	461a      	mov	r2, r3
 80073c0:	f000 fbca 	bl	8007b58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2140      	movs	r1, #64	@ 0x40
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fcd9 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 80073d0:	e00c      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f000 fcd0 	bl	8007d82 <TIM_ITRx_SetConfig>
      break;
 80073e2:	e003      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e000      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	fffeff88 	.word	0xfffeff88

0800740c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a46      	ldr	r2, [pc, #280]	@ (8007588 <TIM_Base_SetConfig+0x12c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d013      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747a:	d00f      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a43      	ldr	r2, [pc, #268]	@ (800758c <TIM_Base_SetConfig+0x130>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a42      	ldr	r2, [pc, #264]	@ (8007590 <TIM_Base_SetConfig+0x134>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a41      	ldr	r2, [pc, #260]	@ (8007594 <TIM_Base_SetConfig+0x138>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a40      	ldr	r2, [pc, #256]	@ (8007598 <TIM_Base_SetConfig+0x13c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a35      	ldr	r2, [pc, #212]	@ (8007588 <TIM_Base_SetConfig+0x12c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074bc:	d027      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a32      	ldr	r2, [pc, #200]	@ (800758c <TIM_Base_SetConfig+0x130>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d023      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a31      	ldr	r2, [pc, #196]	@ (8007590 <TIM_Base_SetConfig+0x134>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d01f      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a30      	ldr	r2, [pc, #192]	@ (8007594 <TIM_Base_SetConfig+0x138>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a2f      	ldr	r2, [pc, #188]	@ (8007598 <TIM_Base_SetConfig+0x13c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d017      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2e      	ldr	r2, [pc, #184]	@ (800759c <TIM_Base_SetConfig+0x140>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2d      	ldr	r2, [pc, #180]	@ (80075a0 <TIM_Base_SetConfig+0x144>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2c      	ldr	r2, [pc, #176]	@ (80075a4 <TIM_Base_SetConfig+0x148>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2b      	ldr	r2, [pc, #172]	@ (80075a8 <TIM_Base_SetConfig+0x14c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2a      	ldr	r2, [pc, #168]	@ (80075ac <TIM_Base_SetConfig+0x150>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a29      	ldr	r2, [pc, #164]	@ (80075b0 <TIM_Base_SetConfig+0x154>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d108      	bne.n	8007520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a10      	ldr	r2, [pc, #64]	@ (8007588 <TIM_Base_SetConfig+0x12c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d003      	beq.n	8007554 <TIM_Base_SetConfig+0xf8>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a12      	ldr	r2, [pc, #72]	@ (8007598 <TIM_Base_SetConfig+0x13c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d103      	bne.n	800755c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b01      	cmp	r3, #1
 800756c:	d105      	bne.n	800757a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	611a      	str	r2, [r3, #16]
  }
}
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40010400 	.word	0x40010400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40014400 	.word	0x40014400
 80075a4:	40014800 	.word	0x40014800
 80075a8:	40001800 	.word	0x40001800
 80075ac:	40001c00 	.word	0x40001c00
 80075b0:	40002000 	.word	0x40002000

080075b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	f023 0201 	bic.w	r2, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4b2b      	ldr	r3, [pc, #172]	@ (800768c <TIM_OC1_SetConfig+0xd8>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f023 0302 	bic.w	r3, r3, #2
 80075fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a21      	ldr	r2, [pc, #132]	@ (8007690 <TIM_OC1_SetConfig+0xdc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_OC1_SetConfig+0x64>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a20      	ldr	r2, [pc, #128]	@ (8007694 <TIM_OC1_SetConfig+0xe0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d10c      	bne.n	8007632 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0308 	bic.w	r3, r3, #8
 800761e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 0304 	bic.w	r3, r3, #4
 8007630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a16      	ldr	r2, [pc, #88]	@ (8007690 <TIM_OC1_SetConfig+0xdc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d003      	beq.n	8007642 <TIM_OC1_SetConfig+0x8e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a15      	ldr	r2, [pc, #84]	@ (8007694 <TIM_OC1_SetConfig+0xe0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d111      	bne.n	8007666 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4313      	orrs	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	621a      	str	r2, [r3, #32]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	fffeff8f 	.word	0xfffeff8f
 8007690:	40010000 	.word	0x40010000
 8007694:	40010400 	.word	0x40010400

08007698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	f023 0210 	bic.w	r2, r3, #16
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4b2e      	ldr	r3, [pc, #184]	@ (800777c <TIM_OC2_SetConfig+0xe4>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f023 0320 	bic.w	r3, r3, #32
 80076e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a23      	ldr	r2, [pc, #140]	@ (8007780 <TIM_OC2_SetConfig+0xe8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_OC2_SetConfig+0x68>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <TIM_OC2_SetConfig+0xec>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10d      	bne.n	800771c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800771a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <TIM_OC2_SetConfig+0xe8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC2_SetConfig+0x94>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a17      	ldr	r2, [pc, #92]	@ (8007784 <TIM_OC2_SetConfig+0xec>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d113      	bne.n	8007754 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800773a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	feff8fff 	.word	0xfeff8fff
 8007780:	40010000 	.word	0x40010000
 8007784:	40010400 	.word	0x40010400

08007788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007868 <TIM_OC3_SetConfig+0xe0>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a22      	ldr	r2, [pc, #136]	@ (800786c <TIM_OC3_SetConfig+0xe4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d003      	beq.n	80077ee <TIM_OC3_SetConfig+0x66>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a21      	ldr	r2, [pc, #132]	@ (8007870 <TIM_OC3_SetConfig+0xe8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d10d      	bne.n	800780a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a17      	ldr	r2, [pc, #92]	@ (800786c <TIM_OC3_SetConfig+0xe4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC3_SetConfig+0x92>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <TIM_OC3_SetConfig+0xe8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d113      	bne.n	8007842 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	621a      	str	r2, [r3, #32]
}
 800785c:	bf00      	nop
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	fffeff8f 	.word	0xfffeff8f
 800786c:	40010000 	.word	0x40010000
 8007870:	40010400 	.word	0x40010400

08007874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <TIM_OC4_SetConfig+0xa4>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	031b      	lsls	r3, r3, #12
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a13      	ldr	r2, [pc, #76]	@ (800791c <TIM_OC4_SetConfig+0xa8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC4_SetConfig+0x68>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a12      	ldr	r2, [pc, #72]	@ (8007920 <TIM_OC4_SetConfig+0xac>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d109      	bne.n	80078f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	019b      	lsls	r3, r3, #6
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	feff8fff 	.word	0xfeff8fff
 800791c:	40010000 	.word	0x40010000
 8007920:	40010400 	.word	0x40010400

08007924 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4b1b      	ldr	r3, [pc, #108]	@ (80079bc <TIM_OC5_SetConfig+0x98>)
 8007950:	4013      	ands	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a12      	ldr	r2, [pc, #72]	@ (80079c0 <TIM_OC5_SetConfig+0x9c>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d003      	beq.n	8007982 <TIM_OC5_SetConfig+0x5e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a11      	ldr	r2, [pc, #68]	@ (80079c4 <TIM_OC5_SetConfig+0xa0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d109      	bne.n	8007996 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007988:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	621a      	str	r2, [r3, #32]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	fffeff8f 	.word	0xfffeff8f
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40010400 	.word	0x40010400

080079c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a64 <TIM_OC6_SetConfig+0x9c>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	051b      	lsls	r3, r3, #20
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a13      	ldr	r2, [pc, #76]	@ (8007a68 <TIM_OC6_SetConfig+0xa0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_OC6_SetConfig+0x60>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a12      	ldr	r2, [pc, #72]	@ (8007a6c <TIM_OC6_SetConfig+0xa4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d109      	bne.n	8007a3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	029b      	lsls	r3, r3, #10
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	feff8fff 	.word	0xfeff8fff
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40010400 	.word	0x40010400

08007a70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f023 0201 	bic.w	r2, r3, #1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4a28      	ldr	r2, [pc, #160]	@ (8007b3c <TIM_TI1_SetConfig+0xcc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01b      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa4:	d017      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4a25      	ldr	r2, [pc, #148]	@ (8007b40 <TIM_TI1_SetConfig+0xd0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d013      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4a24      	ldr	r2, [pc, #144]	@ (8007b44 <TIM_TI1_SetConfig+0xd4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00f      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4a23      	ldr	r2, [pc, #140]	@ (8007b48 <TIM_TI1_SetConfig+0xd8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00b      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a22      	ldr	r2, [pc, #136]	@ (8007b4c <TIM_TI1_SetConfig+0xdc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d007      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4a21      	ldr	r2, [pc, #132]	@ (8007b50 <TIM_TI1_SetConfig+0xe0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_TI1_SetConfig+0x66>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4a20      	ldr	r2, [pc, #128]	@ (8007b54 <TIM_TI1_SetConfig+0xe4>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d101      	bne.n	8007ada <TIM_TI1_SetConfig+0x6a>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <TIM_TI1_SetConfig+0x6c>
 8007ada:	2300      	movs	r3, #0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d008      	beq.n	8007af2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e003      	b.n	8007afa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f023 030a 	bic.w	r3, r3, #10
 8007b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f003 030a 	and.w	r3, r3, #10
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40010000 	.word	0x40010000
 8007b40:	40000400 	.word	0x40000400
 8007b44:	40000800 	.word	0x40000800
 8007b48:	40000c00 	.word	0x40000c00
 8007b4c:	40010400 	.word	0x40010400
 8007b50:	40014000 	.word	0x40014000
 8007b54:	40001800 	.word	0x40001800

08007b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f023 0201 	bic.w	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f023 030a 	bic.w	r3, r3, #10
 8007b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b087      	sub	sp, #28
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f023 0210 	bic.w	r2, r3, #16
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	031b      	lsls	r3, r3, #12
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c08:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	621a      	str	r2, [r3, #32]
}
 8007c24:	bf00      	nop
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f023 0210 	bic.w	r2, r3, #16
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	031b      	lsls	r3, r3, #12
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	621a      	str	r2, [r3, #32]
}
 8007c84:	bf00      	nop
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
 8007ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f023 0303 	bic.w	r3, r3, #3
 8007cbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ccc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	621a      	str	r2, [r3, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	031b      	lsls	r3, r3, #12
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	031b      	lsls	r3, r3, #12
 8007d60:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b085      	sub	sp, #20
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f043 0307 	orr.w	r3, r3, #7
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	609a      	str	r2, [r3, #8]
}
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	021a      	lsls	r2, r3, #8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	609a      	str	r2, [r3, #8]
}
 8007dec:	bf00      	nop
 8007dee:	371c      	adds	r7, #28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a1a      	ldr	r2, [r3, #32]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	43db      	mvns	r3, r3
 8007e1a:	401a      	ands	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a1a      	ldr	r2, [r3, #32]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e30:	431a      	orrs	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
}
 8007e36:	bf00      	nop
 8007e38:	371c      	adds	r7, #28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e06d      	b.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a30      	ldr	r2, [pc, #192]	@ (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d004      	beq.n	8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d108      	bne.n	8007ea2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a20      	ldr	r2, [pc, #128]	@ (8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d022      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ece:	d01d      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d018      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1c      	ldr	r2, [pc, #112]	@ (8007f50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d013      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00e      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	@ (8007f48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d009      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a16      	ldr	r2, [pc, #88]	@ (8007f58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a15      	ldr	r2, [pc, #84]	@ (8007f5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d10c      	bne.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40010400 	.word	0x40010400
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40001800 	.word	0x40001800

08007f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d101      	bne.n	8007f7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e065      	b.n	8008048 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	041b      	lsls	r3, r3, #16
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a16      	ldr	r2, [pc, #88]	@ (8008054 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a14      	ldr	r2, [pc, #80]	@ (8008058 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d115      	bne.n	8008036 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008014:	051b      	lsls	r3, r3, #20
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	40010000 	.word	0x40010000
 8008058:	40010400 	.word	0x40010400

0800805c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e040      	b.n	800812c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fb f822 	bl	8003104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2224      	movs	r2, #36	@ 0x24
 80080c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0201 	bic.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fbde 	bl	80088a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f977 	bl	80083d8 <UART_SetConfig>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e01b      	b.n	800812c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fc5d 	bl	80089e4 <UART_CheckIdleState>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	@ 0x28
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008148:	2b20      	cmp	r3, #32
 800814a:	d177      	bne.n	800823c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Transmit+0x24>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e070      	b.n	800823e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2221      	movs	r2, #33	@ 0x21
 8008168:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800816a:	f7fb fb11 	bl	8003790 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008188:	d108      	bne.n	800819c <HAL_UART_Transmit+0x68>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d104      	bne.n	800819c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	e003      	b.n	80081a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081a4:	e02f      	b.n	8008206 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2200      	movs	r2, #0
 80081ae:	2180      	movs	r1, #128	@ 0x80
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fcbf 	bl	8008b34 <UART_WaitOnFlagUntilTimeout>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e03b      	b.n	800823e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	3302      	adds	r3, #2
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	e007      	b.n	80081f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	3301      	adds	r3, #1
 80081f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1c9      	bne.n	80081a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2200      	movs	r2, #0
 800821a:	2140      	movs	r1, #64	@ 0x40
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fc89 	bl	8008b34 <UART_WaitOnFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e005      	b.n	800823e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2220      	movs	r2, #32
 8008236:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	e000      	b.n	800823e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800823c:	2302      	movs	r3, #2
  }
}
 800823e:	4618      	mov	r0, r3
 8008240:	3720      	adds	r7, #32
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b08a      	sub	sp, #40	@ 0x28
 800824a:	af02      	add	r7, sp, #8
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800825c:	2b20      	cmp	r3, #32
 800825e:	f040 80b5 	bne.w	80083cc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <HAL_UART_Receive+0x28>
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e0ad      	b.n	80083ce <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2222      	movs	r2, #34	@ 0x22
 800827e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008288:	f7fb fa82 	bl	8003790 <HAL_GetTick>
 800828c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a6:	d10e      	bne.n	80082c6 <HAL_UART_Receive+0x80>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d105      	bne.n	80082bc <HAL_UART_Receive+0x76>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80082b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082ba:	e02d      	b.n	8008318 <HAL_UART_Receive+0xd2>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	22ff      	movs	r2, #255	@ 0xff
 80082c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082c4:	e028      	b.n	8008318 <HAL_UART_Receive+0xd2>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10d      	bne.n	80082ea <HAL_UART_Receive+0xa4>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <HAL_UART_Receive+0x9a>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	22ff      	movs	r2, #255	@ 0xff
 80082da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082de:	e01b      	b.n	8008318 <HAL_UART_Receive+0xd2>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	227f      	movs	r2, #127	@ 0x7f
 80082e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80082e8:	e016      	b.n	8008318 <HAL_UART_Receive+0xd2>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082f2:	d10d      	bne.n	8008310 <HAL_UART_Receive+0xca>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <HAL_UART_Receive+0xc0>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	227f      	movs	r2, #127	@ 0x7f
 8008300:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008304:	e008      	b.n	8008318 <HAL_UART_Receive+0xd2>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	223f      	movs	r2, #63	@ 0x3f
 800830a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800830e:	e003      	b.n	8008318 <HAL_UART_Receive+0xd2>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800831e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008328:	d108      	bne.n	800833c <HAL_UART_Receive+0xf6>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d104      	bne.n	800833c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e003      	b.n	8008344 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008344:	e036      	b.n	80083b4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	2120      	movs	r1, #32
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fbef 	bl	8008b34 <UART_WaitOnFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e032      	b.n	80083ce <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10c      	bne.n	8008388 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008374:	b29a      	uxth	r2, r3
 8008376:	8a7b      	ldrh	r3, [r7, #18]
 8008378:	4013      	ands	r3, r2
 800837a:	b29a      	uxth	r2, r3
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	3302      	adds	r3, #2
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	e00c      	b.n	80083a2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838e:	b2da      	uxtb	r2, r3
 8008390:	8a7b      	ldrh	r3, [r7, #18]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	4013      	ands	r3, r2
 8008396:	b2da      	uxtb	r2, r3
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	3301      	adds	r3, #1
 80083a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1c2      	bne.n	8008346 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80083cc:	2302      	movs	r3, #2
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3720      	adds	r7, #32
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4ba6      	ldr	r3, [pc, #664]	@ (800869c <UART_SetConfig+0x2c4>)
 8008404:	4013      	ands	r3, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	6979      	ldr	r1, [r7, #20]
 800840c:	430b      	orrs	r3, r1
 800840e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	430a      	orrs	r2, r1
 8008448:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a94      	ldr	r2, [pc, #592]	@ (80086a0 <UART_SetConfig+0x2c8>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d120      	bne.n	8008496 <UART_SetConfig+0xbe>
 8008454:	4b93      	ldr	r3, [pc, #588]	@ (80086a4 <UART_SetConfig+0x2cc>)
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	2b03      	cmp	r3, #3
 8008460:	d816      	bhi.n	8008490 <UART_SetConfig+0xb8>
 8008462:	a201      	add	r2, pc, #4	@ (adr r2, 8008468 <UART_SetConfig+0x90>)
 8008464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008468:	08008479 	.word	0x08008479
 800846c:	08008485 	.word	0x08008485
 8008470:	0800847f 	.word	0x0800847f
 8008474:	0800848b 	.word	0x0800848b
 8008478:	2301      	movs	r3, #1
 800847a:	77fb      	strb	r3, [r7, #31]
 800847c:	e150      	b.n	8008720 <UART_SetConfig+0x348>
 800847e:	2302      	movs	r3, #2
 8008480:	77fb      	strb	r3, [r7, #31]
 8008482:	e14d      	b.n	8008720 <UART_SetConfig+0x348>
 8008484:	2304      	movs	r3, #4
 8008486:	77fb      	strb	r3, [r7, #31]
 8008488:	e14a      	b.n	8008720 <UART_SetConfig+0x348>
 800848a:	2308      	movs	r3, #8
 800848c:	77fb      	strb	r3, [r7, #31]
 800848e:	e147      	b.n	8008720 <UART_SetConfig+0x348>
 8008490:	2310      	movs	r3, #16
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e144      	b.n	8008720 <UART_SetConfig+0x348>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a83      	ldr	r2, [pc, #524]	@ (80086a8 <UART_SetConfig+0x2d0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d132      	bne.n	8008506 <UART_SetConfig+0x12e>
 80084a0:	4b80      	ldr	r3, [pc, #512]	@ (80086a4 <UART_SetConfig+0x2cc>)
 80084a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a6:	f003 030c 	and.w	r3, r3, #12
 80084aa:	2b0c      	cmp	r3, #12
 80084ac:	d828      	bhi.n	8008500 <UART_SetConfig+0x128>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <UART_SetConfig+0xdc>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084e9 	.word	0x080084e9
 80084b8:	08008501 	.word	0x08008501
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008501 	.word	0x08008501
 80084c4:	080084f5 	.word	0x080084f5
 80084c8:	08008501 	.word	0x08008501
 80084cc:	08008501 	.word	0x08008501
 80084d0:	08008501 	.word	0x08008501
 80084d4:	080084ef 	.word	0x080084ef
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008501 	.word	0x08008501
 80084e4:	080084fb 	.word	0x080084fb
 80084e8:	2300      	movs	r3, #0
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e118      	b.n	8008720 <UART_SetConfig+0x348>
 80084ee:	2302      	movs	r3, #2
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e115      	b.n	8008720 <UART_SetConfig+0x348>
 80084f4:	2304      	movs	r3, #4
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	e112      	b.n	8008720 <UART_SetConfig+0x348>
 80084fa:	2308      	movs	r3, #8
 80084fc:	77fb      	strb	r3, [r7, #31]
 80084fe:	e10f      	b.n	8008720 <UART_SetConfig+0x348>
 8008500:	2310      	movs	r3, #16
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e10c      	b.n	8008720 <UART_SetConfig+0x348>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a68      	ldr	r2, [pc, #416]	@ (80086ac <UART_SetConfig+0x2d4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d120      	bne.n	8008552 <UART_SetConfig+0x17a>
 8008510:	4b64      	ldr	r3, [pc, #400]	@ (80086a4 <UART_SetConfig+0x2cc>)
 8008512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008516:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800851a:	2b30      	cmp	r3, #48	@ 0x30
 800851c:	d013      	beq.n	8008546 <UART_SetConfig+0x16e>
 800851e:	2b30      	cmp	r3, #48	@ 0x30
 8008520:	d814      	bhi.n	800854c <UART_SetConfig+0x174>
 8008522:	2b20      	cmp	r3, #32
 8008524:	d009      	beq.n	800853a <UART_SetConfig+0x162>
 8008526:	2b20      	cmp	r3, #32
 8008528:	d810      	bhi.n	800854c <UART_SetConfig+0x174>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <UART_SetConfig+0x15c>
 800852e:	2b10      	cmp	r3, #16
 8008530:	d006      	beq.n	8008540 <UART_SetConfig+0x168>
 8008532:	e00b      	b.n	800854c <UART_SetConfig+0x174>
 8008534:	2300      	movs	r3, #0
 8008536:	77fb      	strb	r3, [r7, #31]
 8008538:	e0f2      	b.n	8008720 <UART_SetConfig+0x348>
 800853a:	2302      	movs	r3, #2
 800853c:	77fb      	strb	r3, [r7, #31]
 800853e:	e0ef      	b.n	8008720 <UART_SetConfig+0x348>
 8008540:	2304      	movs	r3, #4
 8008542:	77fb      	strb	r3, [r7, #31]
 8008544:	e0ec      	b.n	8008720 <UART_SetConfig+0x348>
 8008546:	2308      	movs	r3, #8
 8008548:	77fb      	strb	r3, [r7, #31]
 800854a:	e0e9      	b.n	8008720 <UART_SetConfig+0x348>
 800854c:	2310      	movs	r3, #16
 800854e:	77fb      	strb	r3, [r7, #31]
 8008550:	e0e6      	b.n	8008720 <UART_SetConfig+0x348>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a56      	ldr	r2, [pc, #344]	@ (80086b0 <UART_SetConfig+0x2d8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d120      	bne.n	800859e <UART_SetConfig+0x1c6>
 800855c:	4b51      	ldr	r3, [pc, #324]	@ (80086a4 <UART_SetConfig+0x2cc>)
 800855e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008562:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008566:	2bc0      	cmp	r3, #192	@ 0xc0
 8008568:	d013      	beq.n	8008592 <UART_SetConfig+0x1ba>
 800856a:	2bc0      	cmp	r3, #192	@ 0xc0
 800856c:	d814      	bhi.n	8008598 <UART_SetConfig+0x1c0>
 800856e:	2b80      	cmp	r3, #128	@ 0x80
 8008570:	d009      	beq.n	8008586 <UART_SetConfig+0x1ae>
 8008572:	2b80      	cmp	r3, #128	@ 0x80
 8008574:	d810      	bhi.n	8008598 <UART_SetConfig+0x1c0>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <UART_SetConfig+0x1a8>
 800857a:	2b40      	cmp	r3, #64	@ 0x40
 800857c:	d006      	beq.n	800858c <UART_SetConfig+0x1b4>
 800857e:	e00b      	b.n	8008598 <UART_SetConfig+0x1c0>
 8008580:	2300      	movs	r3, #0
 8008582:	77fb      	strb	r3, [r7, #31]
 8008584:	e0cc      	b.n	8008720 <UART_SetConfig+0x348>
 8008586:	2302      	movs	r3, #2
 8008588:	77fb      	strb	r3, [r7, #31]
 800858a:	e0c9      	b.n	8008720 <UART_SetConfig+0x348>
 800858c:	2304      	movs	r3, #4
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e0c6      	b.n	8008720 <UART_SetConfig+0x348>
 8008592:	2308      	movs	r3, #8
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e0c3      	b.n	8008720 <UART_SetConfig+0x348>
 8008598:	2310      	movs	r3, #16
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e0c0      	b.n	8008720 <UART_SetConfig+0x348>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a44      	ldr	r2, [pc, #272]	@ (80086b4 <UART_SetConfig+0x2dc>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d125      	bne.n	80085f4 <UART_SetConfig+0x21c>
 80085a8:	4b3e      	ldr	r3, [pc, #248]	@ (80086a4 <UART_SetConfig+0x2cc>)
 80085aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085b6:	d017      	beq.n	80085e8 <UART_SetConfig+0x210>
 80085b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085bc:	d817      	bhi.n	80085ee <UART_SetConfig+0x216>
 80085be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c2:	d00b      	beq.n	80085dc <UART_SetConfig+0x204>
 80085c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c8:	d811      	bhi.n	80085ee <UART_SetConfig+0x216>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <UART_SetConfig+0x1fe>
 80085ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d2:	d006      	beq.n	80085e2 <UART_SetConfig+0x20a>
 80085d4:	e00b      	b.n	80085ee <UART_SetConfig+0x216>
 80085d6:	2300      	movs	r3, #0
 80085d8:	77fb      	strb	r3, [r7, #31]
 80085da:	e0a1      	b.n	8008720 <UART_SetConfig+0x348>
 80085dc:	2302      	movs	r3, #2
 80085de:	77fb      	strb	r3, [r7, #31]
 80085e0:	e09e      	b.n	8008720 <UART_SetConfig+0x348>
 80085e2:	2304      	movs	r3, #4
 80085e4:	77fb      	strb	r3, [r7, #31]
 80085e6:	e09b      	b.n	8008720 <UART_SetConfig+0x348>
 80085e8:	2308      	movs	r3, #8
 80085ea:	77fb      	strb	r3, [r7, #31]
 80085ec:	e098      	b.n	8008720 <UART_SetConfig+0x348>
 80085ee:	2310      	movs	r3, #16
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e095      	b.n	8008720 <UART_SetConfig+0x348>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a2f      	ldr	r2, [pc, #188]	@ (80086b8 <UART_SetConfig+0x2e0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d125      	bne.n	800864a <UART_SetConfig+0x272>
 80085fe:	4b29      	ldr	r3, [pc, #164]	@ (80086a4 <UART_SetConfig+0x2cc>)
 8008600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008604:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008608:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800860c:	d017      	beq.n	800863e <UART_SetConfig+0x266>
 800860e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008612:	d817      	bhi.n	8008644 <UART_SetConfig+0x26c>
 8008614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008618:	d00b      	beq.n	8008632 <UART_SetConfig+0x25a>
 800861a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800861e:	d811      	bhi.n	8008644 <UART_SetConfig+0x26c>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <UART_SetConfig+0x254>
 8008624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008628:	d006      	beq.n	8008638 <UART_SetConfig+0x260>
 800862a:	e00b      	b.n	8008644 <UART_SetConfig+0x26c>
 800862c:	2301      	movs	r3, #1
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e076      	b.n	8008720 <UART_SetConfig+0x348>
 8008632:	2302      	movs	r3, #2
 8008634:	77fb      	strb	r3, [r7, #31]
 8008636:	e073      	b.n	8008720 <UART_SetConfig+0x348>
 8008638:	2304      	movs	r3, #4
 800863a:	77fb      	strb	r3, [r7, #31]
 800863c:	e070      	b.n	8008720 <UART_SetConfig+0x348>
 800863e:	2308      	movs	r3, #8
 8008640:	77fb      	strb	r3, [r7, #31]
 8008642:	e06d      	b.n	8008720 <UART_SetConfig+0x348>
 8008644:	2310      	movs	r3, #16
 8008646:	77fb      	strb	r3, [r7, #31]
 8008648:	e06a      	b.n	8008720 <UART_SetConfig+0x348>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1b      	ldr	r2, [pc, #108]	@ (80086bc <UART_SetConfig+0x2e4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d138      	bne.n	80086c6 <UART_SetConfig+0x2ee>
 8008654:	4b13      	ldr	r3, [pc, #76]	@ (80086a4 <UART_SetConfig+0x2cc>)
 8008656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800865a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800865e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008662:	d017      	beq.n	8008694 <UART_SetConfig+0x2bc>
 8008664:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008668:	d82a      	bhi.n	80086c0 <UART_SetConfig+0x2e8>
 800866a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866e:	d00b      	beq.n	8008688 <UART_SetConfig+0x2b0>
 8008670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008674:	d824      	bhi.n	80086c0 <UART_SetConfig+0x2e8>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <UART_SetConfig+0x2aa>
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	d006      	beq.n	800868e <UART_SetConfig+0x2b6>
 8008680:	e01e      	b.n	80086c0 <UART_SetConfig+0x2e8>
 8008682:	2300      	movs	r3, #0
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e04b      	b.n	8008720 <UART_SetConfig+0x348>
 8008688:	2302      	movs	r3, #2
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e048      	b.n	8008720 <UART_SetConfig+0x348>
 800868e:	2304      	movs	r3, #4
 8008690:	77fb      	strb	r3, [r7, #31]
 8008692:	e045      	b.n	8008720 <UART_SetConfig+0x348>
 8008694:	2308      	movs	r3, #8
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	e042      	b.n	8008720 <UART_SetConfig+0x348>
 800869a:	bf00      	nop
 800869c:	efff69f3 	.word	0xefff69f3
 80086a0:	40011000 	.word	0x40011000
 80086a4:	40023800 	.word	0x40023800
 80086a8:	40004400 	.word	0x40004400
 80086ac:	40004800 	.word	0x40004800
 80086b0:	40004c00 	.word	0x40004c00
 80086b4:	40005000 	.word	0x40005000
 80086b8:	40011400 	.word	0x40011400
 80086bc:	40007800 	.word	0x40007800
 80086c0:	2310      	movs	r3, #16
 80086c2:	77fb      	strb	r3, [r7, #31]
 80086c4:	e02c      	b.n	8008720 <UART_SetConfig+0x348>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a72      	ldr	r2, [pc, #456]	@ (8008894 <UART_SetConfig+0x4bc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d125      	bne.n	800871c <UART_SetConfig+0x344>
 80086d0:	4b71      	ldr	r3, [pc, #452]	@ (8008898 <UART_SetConfig+0x4c0>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80086da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80086de:	d017      	beq.n	8008710 <UART_SetConfig+0x338>
 80086e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80086e4:	d817      	bhi.n	8008716 <UART_SetConfig+0x33e>
 80086e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ea:	d00b      	beq.n	8008704 <UART_SetConfig+0x32c>
 80086ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086f0:	d811      	bhi.n	8008716 <UART_SetConfig+0x33e>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <UART_SetConfig+0x326>
 80086f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086fa:	d006      	beq.n	800870a <UART_SetConfig+0x332>
 80086fc:	e00b      	b.n	8008716 <UART_SetConfig+0x33e>
 80086fe:	2300      	movs	r3, #0
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e00d      	b.n	8008720 <UART_SetConfig+0x348>
 8008704:	2302      	movs	r3, #2
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e00a      	b.n	8008720 <UART_SetConfig+0x348>
 800870a:	2304      	movs	r3, #4
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e007      	b.n	8008720 <UART_SetConfig+0x348>
 8008710:	2308      	movs	r3, #8
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e004      	b.n	8008720 <UART_SetConfig+0x348>
 8008716:	2310      	movs	r3, #16
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	e001      	b.n	8008720 <UART_SetConfig+0x348>
 800871c:	2310      	movs	r3, #16
 800871e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008728:	d15b      	bne.n	80087e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800872a:	7ffb      	ldrb	r3, [r7, #31]
 800872c:	2b08      	cmp	r3, #8
 800872e:	d828      	bhi.n	8008782 <UART_SetConfig+0x3aa>
 8008730:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <UART_SetConfig+0x360>)
 8008732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008736:	bf00      	nop
 8008738:	0800875d 	.word	0x0800875d
 800873c:	08008765 	.word	0x08008765
 8008740:	0800876d 	.word	0x0800876d
 8008744:	08008783 	.word	0x08008783
 8008748:	08008773 	.word	0x08008773
 800874c:	08008783 	.word	0x08008783
 8008750:	08008783 	.word	0x08008783
 8008754:	08008783 	.word	0x08008783
 8008758:	0800877b 	.word	0x0800877b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800875c:	f7fd f948 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8008760:	61b8      	str	r0, [r7, #24]
        break;
 8008762:	e013      	b.n	800878c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008764:	f7fd f958 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8008768:	61b8      	str	r0, [r7, #24]
        break;
 800876a:	e00f      	b.n	800878c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800876c:	4b4b      	ldr	r3, [pc, #300]	@ (800889c <UART_SetConfig+0x4c4>)
 800876e:	61bb      	str	r3, [r7, #24]
        break;
 8008770:	e00c      	b.n	800878c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008772:	f7fd f82b 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 8008776:	61b8      	str	r0, [r7, #24]
        break;
 8008778:	e008      	b.n	800878c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800877a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800877e:	61bb      	str	r3, [r7, #24]
        break;
 8008780:	e004      	b.n	800878c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	77bb      	strb	r3, [r7, #30]
        break;
 800878a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d074      	beq.n	800887c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	005a      	lsls	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	441a      	add	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	2b0f      	cmp	r3, #15
 80087ac:	d916      	bls.n	80087dc <UART_SetConfig+0x404>
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b4:	d212      	bcs.n	80087dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f023 030f 	bic.w	r3, r3, #15
 80087be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	89fb      	ldrh	r3, [r7, #14]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	89fa      	ldrh	r2, [r7, #14]
 80087d8:	60da      	str	r2, [r3, #12]
 80087da:	e04f      	b.n	800887c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	77bb      	strb	r3, [r7, #30]
 80087e0:	e04c      	b.n	800887c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087e2:	7ffb      	ldrb	r3, [r7, #31]
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d828      	bhi.n	800883a <UART_SetConfig+0x462>
 80087e8:	a201      	add	r2, pc, #4	@ (adr r2, 80087f0 <UART_SetConfig+0x418>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008815 	.word	0x08008815
 80087f4:	0800881d 	.word	0x0800881d
 80087f8:	08008825 	.word	0x08008825
 80087fc:	0800883b 	.word	0x0800883b
 8008800:	0800882b 	.word	0x0800882b
 8008804:	0800883b 	.word	0x0800883b
 8008808:	0800883b 	.word	0x0800883b
 800880c:	0800883b 	.word	0x0800883b
 8008810:	08008833 	.word	0x08008833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008814:	f7fd f8ec 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8008818:	61b8      	str	r0, [r7, #24]
        break;
 800881a:	e013      	b.n	8008844 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800881c:	f7fd f8fc 	bl	8005a18 <HAL_RCC_GetPCLK2Freq>
 8008820:	61b8      	str	r0, [r7, #24]
        break;
 8008822:	e00f      	b.n	8008844 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008824:	4b1d      	ldr	r3, [pc, #116]	@ (800889c <UART_SetConfig+0x4c4>)
 8008826:	61bb      	str	r3, [r7, #24]
        break;
 8008828:	e00c      	b.n	8008844 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800882a:	f7fc ffcf 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 800882e:	61b8      	str	r0, [r7, #24]
        break;
 8008830:	e008      	b.n	8008844 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008836:	61bb      	str	r3, [r7, #24]
        break;
 8008838:	e004      	b.n	8008844 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	77bb      	strb	r3, [r7, #30]
        break;
 8008842:	bf00      	nop
    }

    if (pclk != 0U)
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d018      	beq.n	800887c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	085a      	lsrs	r2, r3, #1
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	441a      	add	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	fbb2 f3f3 	udiv	r3, r2, r3
 800885c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b0f      	cmp	r3, #15
 8008862:	d909      	bls.n	8008878 <UART_SetConfig+0x4a0>
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800886a:	d205      	bcs.n	8008878 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	b29a      	uxth	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	e001      	b.n	800887c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008888:	7fbb      	ldrb	r3, [r7, #30]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3720      	adds	r7, #32
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	40007c00 	.word	0x40007c00
 8008898:	40023800 	.word	0x40023800
 800889c:	00f42400 	.word	0x00f42400

080088a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008912:	f003 0304 	and.w	r3, r3, #4
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	f003 0310 	and.w	r3, r3, #16
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01a      	beq.n	80089b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800899e:	d10a      	bne.n	80089b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	605a      	str	r2, [r3, #4]
  }
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b098      	sub	sp, #96	@ 0x60
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089f4:	f7fa fecc 	bl	8003790 <HAL_GetTick>
 80089f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d12e      	bne.n	8008a66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a10:	2200      	movs	r2, #0
 8008a12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f88c 	bl	8008b34 <UART_WaitOnFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d021      	beq.n	8008a66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e6      	bne.n	8008a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e062      	b.n	8008b2c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d149      	bne.n	8008b08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f856 	bl	8008b34 <UART_WaitOnFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03c      	beq.n	8008b08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a96:	e853 3f00 	ldrex	r3, [r3]
 8008a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8008aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e6      	bne.n	8008a8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ae0:	61fa      	str	r2, [r7, #28]
 8008ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	69b9      	ldr	r1, [r7, #24]
 8008ae6:	69fa      	ldr	r2, [r7, #28]
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	617b      	str	r3, [r7, #20]
   return(result);
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e011      	b.n	8008b2c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3758      	adds	r7, #88	@ 0x58
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	4613      	mov	r3, r2
 8008b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b44:	e04f      	b.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d04b      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b4e:	f7fa fe1f 	bl	8003790 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d302      	bcc.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e04e      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d037      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b80      	cmp	r3, #128	@ 0x80
 8008b7a:	d034      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b40      	cmp	r3, #64	@ 0x40
 8008b80:	d031      	beq.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d110      	bne.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2208      	movs	r2, #8
 8008b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f838 	bl	8008c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e029      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bc0:	d111      	bne.n	8008be6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f81e 	bl	8008c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e00f      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69da      	ldr	r2, [r3, #28]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d0a0      	beq.n	8008b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b095      	sub	sp, #84	@ 0x54
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1e:	e853 3f00 	ldrex	r3, [r3]
 8008c22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	461a      	mov	r2, r3
 8008c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e6      	bne.n	8008c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e5      	bne.n	8008c48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d118      	bne.n	8008cb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f023 0310 	bic.w	r3, r3, #16
 8008c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6979      	ldr	r1, [r7, #20]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e6      	bne.n	8008c84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008cca:	bf00      	nop
 8008ccc:	3754      	adds	r7, #84	@ 0x54
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <atof>:
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	f000 bdb0 	b.w	800983c <strtod>

08008cdc <sulp>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	4616      	mov	r6, r2
 8008ce4:	ec45 4b10 	vmov	d0, r4, r5
 8008ce8:	f002 f822 	bl	800ad30 <__ulp>
 8008cec:	b17e      	cbz	r6, 8008d0e <sulp+0x32>
 8008cee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008cf2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	dd09      	ble.n	8008d0e <sulp+0x32>
 8008cfa:	051b      	lsls	r3, r3, #20
 8008cfc:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8008d00:	2000      	movs	r0, #0
 8008d02:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008d06:	ec41 0b17 	vmov	d7, r0, r1
 8008d0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}

08008d10 <_strtod_l>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	ed2d 8b0a 	vpush	{d8-d12}
 8008d18:	b097      	sub	sp, #92	@ 0x5c
 8008d1a:	4688      	mov	r8, r1
 8008d1c:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d1e:	2200      	movs	r2, #0
 8008d20:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d22:	9005      	str	r0, [sp, #20]
 8008d24:	f04f 0a00 	mov.w	sl, #0
 8008d28:	f04f 0b00 	mov.w	fp, #0
 8008d2c:	460a      	mov	r2, r1
 8008d2e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d30:	7811      	ldrb	r1, [r2, #0]
 8008d32:	292b      	cmp	r1, #43	@ 0x2b
 8008d34:	d04c      	beq.n	8008dd0 <_strtod_l+0xc0>
 8008d36:	d839      	bhi.n	8008dac <_strtod_l+0x9c>
 8008d38:	290d      	cmp	r1, #13
 8008d3a:	d833      	bhi.n	8008da4 <_strtod_l+0x94>
 8008d3c:	2908      	cmp	r1, #8
 8008d3e:	d833      	bhi.n	8008da8 <_strtod_l+0x98>
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d03c      	beq.n	8008dbe <_strtod_l+0xae>
 8008d44:	2200      	movs	r2, #0
 8008d46:	9208      	str	r2, [sp, #32]
 8008d48:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008d4a:	782a      	ldrb	r2, [r5, #0]
 8008d4c:	2a30      	cmp	r2, #48	@ 0x30
 8008d4e:	f040 80b5 	bne.w	8008ebc <_strtod_l+0x1ac>
 8008d52:	786a      	ldrb	r2, [r5, #1]
 8008d54:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d58:	2a58      	cmp	r2, #88	@ 0x58
 8008d5a:	d170      	bne.n	8008e3e <_strtod_l+0x12e>
 8008d5c:	9302      	str	r3, [sp, #8]
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	ab12      	add	r3, sp, #72	@ 0x48
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4a8b      	ldr	r2, [pc, #556]	@ (8008f94 <_strtod_l+0x284>)
 8008d68:	9805      	ldr	r0, [sp, #20]
 8008d6a:	ab13      	add	r3, sp, #76	@ 0x4c
 8008d6c:	a911      	add	r1, sp, #68	@ 0x44
 8008d6e:	f001 f8d9 	bl	8009f24 <__gethex>
 8008d72:	f010 060f 	ands.w	r6, r0, #15
 8008d76:	4604      	mov	r4, r0
 8008d78:	d005      	beq.n	8008d86 <_strtod_l+0x76>
 8008d7a:	2e06      	cmp	r6, #6
 8008d7c:	d12a      	bne.n	8008dd4 <_strtod_l+0xc4>
 8008d7e:	3501      	adds	r5, #1
 8008d80:	2300      	movs	r3, #0
 8008d82:	9511      	str	r5, [sp, #68]	@ 0x44
 8008d84:	9308      	str	r3, [sp, #32]
 8008d86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 852f 	bne.w	80097ec <_strtod_l+0xadc>
 8008d8e:	9b08      	ldr	r3, [sp, #32]
 8008d90:	ec4b ab10 	vmov	d0, sl, fp
 8008d94:	b1cb      	cbz	r3, 8008dca <_strtod_l+0xba>
 8008d96:	eeb1 0b40 	vneg.f64	d0, d0
 8008d9a:	b017      	add	sp, #92	@ 0x5c
 8008d9c:	ecbd 8b0a 	vpop	{d8-d12}
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	2920      	cmp	r1, #32
 8008da6:	d1cd      	bne.n	8008d44 <_strtod_l+0x34>
 8008da8:	3201      	adds	r2, #1
 8008daa:	e7c0      	b.n	8008d2e <_strtod_l+0x1e>
 8008dac:	292d      	cmp	r1, #45	@ 0x2d
 8008dae:	d1c9      	bne.n	8008d44 <_strtod_l+0x34>
 8008db0:	2101      	movs	r1, #1
 8008db2:	9108      	str	r1, [sp, #32]
 8008db4:	1c51      	adds	r1, r2, #1
 8008db6:	9111      	str	r1, [sp, #68]	@ 0x44
 8008db8:	7852      	ldrb	r2, [r2, #1]
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	d1c4      	bne.n	8008d48 <_strtod_l+0x38>
 8008dbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 850f 	bne.w	80097e8 <_strtod_l+0xad8>
 8008dca:	ec4b ab10 	vmov	d0, sl, fp
 8008dce:	e7e4      	b.n	8008d9a <_strtod_l+0x8a>
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	e7ee      	b.n	8008db2 <_strtod_l+0xa2>
 8008dd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008dd6:	b13a      	cbz	r2, 8008de8 <_strtod_l+0xd8>
 8008dd8:	2135      	movs	r1, #53	@ 0x35
 8008dda:	a814      	add	r0, sp, #80	@ 0x50
 8008ddc:	f002 f89f 	bl	800af1e <__copybits>
 8008de0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008de2:	9805      	ldr	r0, [sp, #20]
 8008de4:	f001 fc70 	bl	800a6c8 <_Bfree>
 8008de8:	1e73      	subs	r3, r6, #1
 8008dea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d806      	bhi.n	8008dfe <_strtod_l+0xee>
 8008df0:	e8df f003 	tbb	[pc, r3]
 8008df4:	201d0314 	.word	0x201d0314
 8008df8:	14          	.byte	0x14
 8008df9:	00          	.byte	0x00
 8008dfa:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8008dfe:	05e3      	lsls	r3, r4, #23
 8008e00:	bf48      	it	mi
 8008e02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e0a:	0d1b      	lsrs	r3, r3, #20
 8008e0c:	051b      	lsls	r3, r3, #20
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1b9      	bne.n	8008d86 <_strtod_l+0x76>
 8008e12:	f000 ff91 	bl	8009d38 <__errno>
 8008e16:	2322      	movs	r3, #34	@ 0x22
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	e7b4      	b.n	8008d86 <_strtod_l+0x76>
 8008e1c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8008e20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e2c:	e7e7      	b.n	8008dfe <_strtod_l+0xee>
 8008e2e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8008f9c <_strtod_l+0x28c>
 8008e32:	e7e4      	b.n	8008dfe <_strtod_l+0xee>
 8008e34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e38:	f04f 3aff 	mov.w	sl, #4294967295
 8008e3c:	e7df      	b.n	8008dfe <_strtod_l+0xee>
 8008e3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	9211      	str	r2, [sp, #68]	@ 0x44
 8008e44:	785b      	ldrb	r3, [r3, #1]
 8008e46:	2b30      	cmp	r3, #48	@ 0x30
 8008e48:	d0f9      	beq.n	8008e3e <_strtod_l+0x12e>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d09b      	beq.n	8008d86 <_strtod_l+0x76>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	2600      	movs	r6, #0
 8008e52:	9307      	str	r3, [sp, #28]
 8008e54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e58:	46b1      	mov	r9, r6
 8008e5a:	4635      	mov	r5, r6
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008e60:	7804      	ldrb	r4, [r0, #0]
 8008e62:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8008e66:	b2d9      	uxtb	r1, r3
 8008e68:	2909      	cmp	r1, #9
 8008e6a:	d929      	bls.n	8008ec0 <_strtod_l+0x1b0>
 8008e6c:	494a      	ldr	r1, [pc, #296]	@ (8008f98 <_strtod_l+0x288>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f000 ff0a 	bl	8009c88 <strncmp>
 8008e74:	b378      	cbz	r0, 8008ed6 <_strtod_l+0x1c6>
 8008e76:	2000      	movs	r0, #0
 8008e78:	4622      	mov	r2, r4
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	9006      	str	r0, [sp, #24]
 8008e80:	2a65      	cmp	r2, #101	@ 0x65
 8008e82:	d001      	beq.n	8008e88 <_strtod_l+0x178>
 8008e84:	2a45      	cmp	r2, #69	@ 0x45
 8008e86:	d117      	bne.n	8008eb8 <_strtod_l+0x1a8>
 8008e88:	b91b      	cbnz	r3, 8008e92 <_strtod_l+0x182>
 8008e8a:	9b07      	ldr	r3, [sp, #28]
 8008e8c:	4303      	orrs	r3, r0
 8008e8e:	d096      	beq.n	8008dbe <_strtod_l+0xae>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008e96:	f108 0201 	add.w	r2, r8, #1
 8008e9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8008e9c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008ea0:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ea2:	d06b      	beq.n	8008f7c <_strtod_l+0x26c>
 8008ea4:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ea6:	d071      	beq.n	8008f8c <_strtod_l+0x27c>
 8008ea8:	f04f 0e00 	mov.w	lr, #0
 8008eac:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008eb0:	2c09      	cmp	r4, #9
 8008eb2:	d979      	bls.n	8008fa8 <_strtod_l+0x298>
 8008eb4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008eb8:	2400      	movs	r4, #0
 8008eba:	e094      	b.n	8008fe6 <_strtod_l+0x2d6>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e7c7      	b.n	8008e50 <_strtod_l+0x140>
 8008ec0:	2d08      	cmp	r5, #8
 8008ec2:	f100 0001 	add.w	r0, r0, #1
 8008ec6:	bfd4      	ite	le
 8008ec8:	fb02 3909 	mlale	r9, r2, r9, r3
 8008ecc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	9011      	str	r0, [sp, #68]	@ 0x44
 8008ed4:	e7c3      	b.n	8008e5e <_strtod_l+0x14e>
 8008ed6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	9211      	str	r2, [sp, #68]	@ 0x44
 8008edc:	785a      	ldrb	r2, [r3, #1]
 8008ede:	b375      	cbz	r5, 8008f3e <_strtod_l+0x22e>
 8008ee0:	4607      	mov	r7, r0
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ee8:	2909      	cmp	r1, #9
 8008eea:	d913      	bls.n	8008f14 <_strtod_l+0x204>
 8008eec:	2101      	movs	r1, #1
 8008eee:	9106      	str	r1, [sp, #24]
 8008ef0:	e7c6      	b.n	8008e80 <_strtod_l+0x170>
 8008ef2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	9211      	str	r2, [sp, #68]	@ 0x44
 8008ef8:	785a      	ldrb	r2, [r3, #1]
 8008efa:	3001      	adds	r0, #1
 8008efc:	2a30      	cmp	r2, #48	@ 0x30
 8008efe:	d0f8      	beq.n	8008ef2 <_strtod_l+0x1e2>
 8008f00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	f200 8476 	bhi.w	80097f6 <_strtod_l+0xae6>
 8008f0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f0e:	4607      	mov	r7, r0
 8008f10:	2000      	movs	r0, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	3a30      	subs	r2, #48	@ 0x30
 8008f16:	f100 0101 	add.w	r1, r0, #1
 8008f1a:	d023      	beq.n	8008f64 <_strtod_l+0x254>
 8008f1c:	440f      	add	r7, r1
 8008f1e:	eb00 0c03 	add.w	ip, r0, r3
 8008f22:	4619      	mov	r1, r3
 8008f24:	240a      	movs	r4, #10
 8008f26:	4561      	cmp	r1, ip
 8008f28:	d10b      	bne.n	8008f42 <_strtod_l+0x232>
 8008f2a:	1c5c      	adds	r4, r3, #1
 8008f2c:	4403      	add	r3, r0
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	4404      	add	r4, r0
 8008f32:	dc11      	bgt.n	8008f58 <_strtod_l+0x248>
 8008f34:	230a      	movs	r3, #10
 8008f36:	fb03 2909 	mla	r9, r3, r9, r2
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	e013      	b.n	8008f66 <_strtod_l+0x256>
 8008f3e:	4628      	mov	r0, r5
 8008f40:	e7dc      	b.n	8008efc <_strtod_l+0x1ec>
 8008f42:	2908      	cmp	r1, #8
 8008f44:	f101 0101 	add.w	r1, r1, #1
 8008f48:	dc02      	bgt.n	8008f50 <_strtod_l+0x240>
 8008f4a:	fb04 f909 	mul.w	r9, r4, r9
 8008f4e:	e7ea      	b.n	8008f26 <_strtod_l+0x216>
 8008f50:	2910      	cmp	r1, #16
 8008f52:	bfd8      	it	le
 8008f54:	4366      	mulle	r6, r4
 8008f56:	e7e6      	b.n	8008f26 <_strtod_l+0x216>
 8008f58:	2b0f      	cmp	r3, #15
 8008f5a:	dcee      	bgt.n	8008f3a <_strtod_l+0x22a>
 8008f5c:	230a      	movs	r3, #10
 8008f5e:	fb03 2606 	mla	r6, r3, r6, r2
 8008f62:	e7ea      	b.n	8008f3a <_strtod_l+0x22a>
 8008f64:	461c      	mov	r4, r3
 8008f66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	9211      	str	r2, [sp, #68]	@ 0x44
 8008f6c:	785a      	ldrb	r2, [r3, #1]
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4623      	mov	r3, r4
 8008f72:	e7b7      	b.n	8008ee4 <_strtod_l+0x1d4>
 8008f74:	2301      	movs	r3, #1
 8008f76:	2700      	movs	r7, #0
 8008f78:	9306      	str	r3, [sp, #24]
 8008f7a:	e786      	b.n	8008e8a <_strtod_l+0x17a>
 8008f7c:	f04f 0e00 	mov.w	lr, #0
 8008f80:	f108 0202 	add.w	r2, r8, #2
 8008f84:	9211      	str	r2, [sp, #68]	@ 0x44
 8008f86:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008f8a:	e78f      	b.n	8008eac <_strtod_l+0x19c>
 8008f8c:	f04f 0e01 	mov.w	lr, #1
 8008f90:	e7f6      	b.n	8008f80 <_strtod_l+0x270>
 8008f92:	bf00      	nop
 8008f94:	0800bb3c 	.word	0x0800bb3c
 8008f98:	0800bb18 	.word	0x0800bb18
 8008f9c:	7ff00000 	.word	0x7ff00000
 8008fa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fa2:	1c54      	adds	r4, r2, #1
 8008fa4:	9411      	str	r4, [sp, #68]	@ 0x44
 8008fa6:	7852      	ldrb	r2, [r2, #1]
 8008fa8:	2a30      	cmp	r2, #48	@ 0x30
 8008faa:	d0f9      	beq.n	8008fa0 <_strtod_l+0x290>
 8008fac:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008fb0:	2c08      	cmp	r4, #8
 8008fb2:	d881      	bhi.n	8008eb8 <_strtod_l+0x1a8>
 8008fb4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8008fb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fbe:	1c51      	adds	r1, r2, #1
 8008fc0:	9111      	str	r1, [sp, #68]	@ 0x44
 8008fc2:	7852      	ldrb	r2, [r2, #1]
 8008fc4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008fc8:	2c09      	cmp	r4, #9
 8008fca:	d938      	bls.n	800903e <_strtod_l+0x32e>
 8008fcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008fce:	1b0c      	subs	r4, r1, r4
 8008fd0:	2c08      	cmp	r4, #8
 8008fd2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8008fd6:	dc02      	bgt.n	8008fde <_strtod_l+0x2ce>
 8008fd8:	4564      	cmp	r4, ip
 8008fda:	bfa8      	it	ge
 8008fdc:	4664      	movge	r4, ip
 8008fde:	f1be 0f00 	cmp.w	lr, #0
 8008fe2:	d000      	beq.n	8008fe6 <_strtod_l+0x2d6>
 8008fe4:	4264      	negs	r4, r4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d14e      	bne.n	8009088 <_strtod_l+0x378>
 8008fea:	9b07      	ldr	r3, [sp, #28]
 8008fec:	4318      	orrs	r0, r3
 8008fee:	f47f aeca 	bne.w	8008d86 <_strtod_l+0x76>
 8008ff2:	9b06      	ldr	r3, [sp, #24]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f47f aee2 	bne.w	8008dbe <_strtod_l+0xae>
 8008ffa:	2a69      	cmp	r2, #105	@ 0x69
 8008ffc:	d027      	beq.n	800904e <_strtod_l+0x33e>
 8008ffe:	dc24      	bgt.n	800904a <_strtod_l+0x33a>
 8009000:	2a49      	cmp	r2, #73	@ 0x49
 8009002:	d024      	beq.n	800904e <_strtod_l+0x33e>
 8009004:	2a4e      	cmp	r2, #78	@ 0x4e
 8009006:	f47f aeda 	bne.w	8008dbe <_strtod_l+0xae>
 800900a:	4997      	ldr	r1, [pc, #604]	@ (8009268 <_strtod_l+0x558>)
 800900c:	a811      	add	r0, sp, #68	@ 0x44
 800900e:	f001 f9ab 	bl	800a368 <__match>
 8009012:	2800      	cmp	r0, #0
 8009014:	f43f aed3 	beq.w	8008dbe <_strtod_l+0xae>
 8009018:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b28      	cmp	r3, #40	@ 0x28
 800901e:	d12d      	bne.n	800907c <_strtod_l+0x36c>
 8009020:	4992      	ldr	r1, [pc, #584]	@ (800926c <_strtod_l+0x55c>)
 8009022:	aa14      	add	r2, sp, #80	@ 0x50
 8009024:	a811      	add	r0, sp, #68	@ 0x44
 8009026:	f001 f9b3 	bl	800a390 <__hexnan>
 800902a:	2805      	cmp	r0, #5
 800902c:	d126      	bne.n	800907c <_strtod_l+0x36c>
 800902e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009030:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009034:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009038:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800903c:	e6a3      	b.n	8008d86 <_strtod_l+0x76>
 800903e:	240a      	movs	r4, #10
 8009040:	fb04 2c0c 	mla	ip, r4, ip, r2
 8009044:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009048:	e7b8      	b.n	8008fbc <_strtod_l+0x2ac>
 800904a:	2a6e      	cmp	r2, #110	@ 0x6e
 800904c:	e7db      	b.n	8009006 <_strtod_l+0x2f6>
 800904e:	4988      	ldr	r1, [pc, #544]	@ (8009270 <_strtod_l+0x560>)
 8009050:	a811      	add	r0, sp, #68	@ 0x44
 8009052:	f001 f989 	bl	800a368 <__match>
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f aeb1 	beq.w	8008dbe <_strtod_l+0xae>
 800905c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800905e:	4985      	ldr	r1, [pc, #532]	@ (8009274 <_strtod_l+0x564>)
 8009060:	3b01      	subs	r3, #1
 8009062:	a811      	add	r0, sp, #68	@ 0x44
 8009064:	9311      	str	r3, [sp, #68]	@ 0x44
 8009066:	f001 f97f 	bl	800a368 <__match>
 800906a:	b910      	cbnz	r0, 8009072 <_strtod_l+0x362>
 800906c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800906e:	3301      	adds	r3, #1
 8009070:	9311      	str	r3, [sp, #68]	@ 0x44
 8009072:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009288 <_strtod_l+0x578>
 8009076:	f04f 0a00 	mov.w	sl, #0
 800907a:	e684      	b.n	8008d86 <_strtod_l+0x76>
 800907c:	487e      	ldr	r0, [pc, #504]	@ (8009278 <_strtod_l+0x568>)
 800907e:	f000 fe97 	bl	8009db0 <nan>
 8009082:	ec5b ab10 	vmov	sl, fp, d0
 8009086:	e67e      	b.n	8008d86 <_strtod_l+0x76>
 8009088:	ee07 9a90 	vmov	s15, r9
 800908c:	1be2      	subs	r2, r4, r7
 800908e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009092:	2d00      	cmp	r5, #0
 8009094:	bf08      	it	eq
 8009096:	461d      	moveq	r5, r3
 8009098:	2b10      	cmp	r3, #16
 800909a:	9209      	str	r2, [sp, #36]	@ 0x24
 800909c:	461a      	mov	r2, r3
 800909e:	bfa8      	it	ge
 80090a0:	2210      	movge	r2, #16
 80090a2:	2b09      	cmp	r3, #9
 80090a4:	ec5b ab17 	vmov	sl, fp, d7
 80090a8:	dc15      	bgt.n	80090d6 <_strtod_l+0x3c6>
 80090aa:	1be1      	subs	r1, r4, r7
 80090ac:	2900      	cmp	r1, #0
 80090ae:	f43f ae6a 	beq.w	8008d86 <_strtod_l+0x76>
 80090b2:	eba4 0107 	sub.w	r1, r4, r7
 80090b6:	dd72      	ble.n	800919e <_strtod_l+0x48e>
 80090b8:	2916      	cmp	r1, #22
 80090ba:	dc59      	bgt.n	8009170 <_strtod_l+0x460>
 80090bc:	4b6f      	ldr	r3, [pc, #444]	@ (800927c <_strtod_l+0x56c>)
 80090be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c4:	ed93 7b00 	vldr	d7, [r3]
 80090c8:	ec4b ab16 	vmov	d6, sl, fp
 80090cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090d0:	ec5b ab17 	vmov	sl, fp, d7
 80090d4:	e657      	b.n	8008d86 <_strtod_l+0x76>
 80090d6:	4969      	ldr	r1, [pc, #420]	@ (800927c <_strtod_l+0x56c>)
 80090d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80090dc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80090e0:	ee06 6a90 	vmov	s13, r6
 80090e4:	2b0f      	cmp	r3, #15
 80090e6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80090ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80090ee:	ec5b ab16 	vmov	sl, fp, d6
 80090f2:	ddda      	ble.n	80090aa <_strtod_l+0x39a>
 80090f4:	1a9a      	subs	r2, r3, r2
 80090f6:	1be1      	subs	r1, r4, r7
 80090f8:	440a      	add	r2, r1
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	f340 8094 	ble.w	8009228 <_strtod_l+0x518>
 8009100:	f012 000f 	ands.w	r0, r2, #15
 8009104:	d00a      	beq.n	800911c <_strtod_l+0x40c>
 8009106:	495d      	ldr	r1, [pc, #372]	@ (800927c <_strtod_l+0x56c>)
 8009108:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800910c:	ed91 7b00 	vldr	d7, [r1]
 8009110:	ec4b ab16 	vmov	d6, sl, fp
 8009114:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009118:	ec5b ab17 	vmov	sl, fp, d7
 800911c:	f032 020f 	bics.w	r2, r2, #15
 8009120:	d073      	beq.n	800920a <_strtod_l+0x4fa>
 8009122:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8009126:	dd47      	ble.n	80091b8 <_strtod_l+0x4a8>
 8009128:	2400      	movs	r4, #0
 800912a:	4625      	mov	r5, r4
 800912c:	9407      	str	r4, [sp, #28]
 800912e:	4626      	mov	r6, r4
 8009130:	9a05      	ldr	r2, [sp, #20]
 8009132:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009288 <_strtod_l+0x578>
 8009136:	2322      	movs	r3, #34	@ 0x22
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	f04f 0a00 	mov.w	sl, #0
 800913e:	9b07      	ldr	r3, [sp, #28]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f43f ae20 	beq.w	8008d86 <_strtod_l+0x76>
 8009146:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009148:	9805      	ldr	r0, [sp, #20]
 800914a:	f001 fabd 	bl	800a6c8 <_Bfree>
 800914e:	9805      	ldr	r0, [sp, #20]
 8009150:	4631      	mov	r1, r6
 8009152:	f001 fab9 	bl	800a6c8 <_Bfree>
 8009156:	9805      	ldr	r0, [sp, #20]
 8009158:	4629      	mov	r1, r5
 800915a:	f001 fab5 	bl	800a6c8 <_Bfree>
 800915e:	9907      	ldr	r1, [sp, #28]
 8009160:	9805      	ldr	r0, [sp, #20]
 8009162:	f001 fab1 	bl	800a6c8 <_Bfree>
 8009166:	9805      	ldr	r0, [sp, #20]
 8009168:	4621      	mov	r1, r4
 800916a:	f001 faad 	bl	800a6c8 <_Bfree>
 800916e:	e60a      	b.n	8008d86 <_strtod_l+0x76>
 8009170:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8009174:	1be0      	subs	r0, r4, r7
 8009176:	4281      	cmp	r1, r0
 8009178:	dbbc      	blt.n	80090f4 <_strtod_l+0x3e4>
 800917a:	4a40      	ldr	r2, [pc, #256]	@ (800927c <_strtod_l+0x56c>)
 800917c:	f1c3 030f 	rsb	r3, r3, #15
 8009180:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009184:	ed91 7b00 	vldr	d7, [r1]
 8009188:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800918a:	ec4b ab16 	vmov	d6, sl, fp
 800918e:	1acb      	subs	r3, r1, r3
 8009190:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009194:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009198:	ed92 6b00 	vldr	d6, [r2]
 800919c:	e796      	b.n	80090cc <_strtod_l+0x3bc>
 800919e:	3116      	adds	r1, #22
 80091a0:	dba8      	blt.n	80090f4 <_strtod_l+0x3e4>
 80091a2:	4b36      	ldr	r3, [pc, #216]	@ (800927c <_strtod_l+0x56c>)
 80091a4:	1b3c      	subs	r4, r7, r4
 80091a6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80091aa:	ed94 7b00 	vldr	d7, [r4]
 80091ae:	ec4b ab16 	vmov	d6, sl, fp
 80091b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80091b6:	e78b      	b.n	80090d0 <_strtod_l+0x3c0>
 80091b8:	2000      	movs	r0, #0
 80091ba:	ec4b ab17 	vmov	d7, sl, fp
 80091be:	4e30      	ldr	r6, [pc, #192]	@ (8009280 <_strtod_l+0x570>)
 80091c0:	1112      	asrs	r2, r2, #4
 80091c2:	4601      	mov	r1, r0
 80091c4:	2a01      	cmp	r2, #1
 80091c6:	dc23      	bgt.n	8009210 <_strtod_l+0x500>
 80091c8:	b108      	cbz	r0, 80091ce <_strtod_l+0x4be>
 80091ca:	ec5b ab17 	vmov	sl, fp, d7
 80091ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009280 <_strtod_l+0x570>)
 80091d0:	482c      	ldr	r0, [pc, #176]	@ (8009284 <_strtod_l+0x574>)
 80091d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80091d6:	ed92 7b00 	vldr	d7, [r2]
 80091da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80091de:	ec4b ab16 	vmov	d6, sl, fp
 80091e2:	4a29      	ldr	r2, [pc, #164]	@ (8009288 <_strtod_l+0x578>)
 80091e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091e8:	ee17 1a90 	vmov	r1, s15
 80091ec:	400a      	ands	r2, r1
 80091ee:	4282      	cmp	r2, r0
 80091f0:	ec5b ab17 	vmov	sl, fp, d7
 80091f4:	d898      	bhi.n	8009128 <_strtod_l+0x418>
 80091f6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80091fa:	4282      	cmp	r2, r0
 80091fc:	bf86      	itte	hi
 80091fe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800928c <_strtod_l+0x57c>
 8009202:	f04f 3aff 	movhi.w	sl, #4294967295
 8009206:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800920a:	2200      	movs	r2, #0
 800920c:	9206      	str	r2, [sp, #24]
 800920e:	e076      	b.n	80092fe <_strtod_l+0x5ee>
 8009210:	f012 0f01 	tst.w	r2, #1
 8009214:	d004      	beq.n	8009220 <_strtod_l+0x510>
 8009216:	ed96 6b00 	vldr	d6, [r6]
 800921a:	2001      	movs	r0, #1
 800921c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009220:	3101      	adds	r1, #1
 8009222:	1052      	asrs	r2, r2, #1
 8009224:	3608      	adds	r6, #8
 8009226:	e7cd      	b.n	80091c4 <_strtod_l+0x4b4>
 8009228:	d0ef      	beq.n	800920a <_strtod_l+0x4fa>
 800922a:	4252      	negs	r2, r2
 800922c:	f012 000f 	ands.w	r0, r2, #15
 8009230:	d00a      	beq.n	8009248 <_strtod_l+0x538>
 8009232:	4912      	ldr	r1, [pc, #72]	@ (800927c <_strtod_l+0x56c>)
 8009234:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009238:	ed91 7b00 	vldr	d7, [r1]
 800923c:	ec4b ab16 	vmov	d6, sl, fp
 8009240:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009244:	ec5b ab17 	vmov	sl, fp, d7
 8009248:	1112      	asrs	r2, r2, #4
 800924a:	d0de      	beq.n	800920a <_strtod_l+0x4fa>
 800924c:	2a1f      	cmp	r2, #31
 800924e:	dd1f      	ble.n	8009290 <_strtod_l+0x580>
 8009250:	2400      	movs	r4, #0
 8009252:	4625      	mov	r5, r4
 8009254:	9407      	str	r4, [sp, #28]
 8009256:	4626      	mov	r6, r4
 8009258:	9a05      	ldr	r2, [sp, #20]
 800925a:	2322      	movs	r3, #34	@ 0x22
 800925c:	f04f 0a00 	mov.w	sl, #0
 8009260:	f04f 0b00 	mov.w	fp, #0
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	e76a      	b.n	800913e <_strtod_l+0x42e>
 8009268:	0800bb23 	.word	0x0800bb23
 800926c:	0800bb28 	.word	0x0800bb28
 8009270:	0800bb1a 	.word	0x0800bb1a
 8009274:	0800bb1d 	.word	0x0800bb1d
 8009278:	0800becf 	.word	0x0800becf
 800927c:	0800bc98 	.word	0x0800bc98
 8009280:	0800bc70 	.word	0x0800bc70
 8009284:	7ca00000 	.word	0x7ca00000
 8009288:	7ff00000 	.word	0x7ff00000
 800928c:	7fefffff 	.word	0x7fefffff
 8009290:	f012 0110 	ands.w	r1, r2, #16
 8009294:	bf18      	it	ne
 8009296:	216a      	movne	r1, #106	@ 0x6a
 8009298:	9106      	str	r1, [sp, #24]
 800929a:	ec4b ab17 	vmov	d7, sl, fp
 800929e:	49b0      	ldr	r1, [pc, #704]	@ (8009560 <_strtod_l+0x850>)
 80092a0:	2000      	movs	r0, #0
 80092a2:	07d6      	lsls	r6, r2, #31
 80092a4:	d504      	bpl.n	80092b0 <_strtod_l+0x5a0>
 80092a6:	ed91 6b00 	vldr	d6, [r1]
 80092aa:	2001      	movs	r0, #1
 80092ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092b0:	1052      	asrs	r2, r2, #1
 80092b2:	f101 0108 	add.w	r1, r1, #8
 80092b6:	d1f4      	bne.n	80092a2 <_strtod_l+0x592>
 80092b8:	b108      	cbz	r0, 80092be <_strtod_l+0x5ae>
 80092ba:	ec5b ab17 	vmov	sl, fp, d7
 80092be:	9a06      	ldr	r2, [sp, #24]
 80092c0:	b1b2      	cbz	r2, 80092f0 <_strtod_l+0x5e0>
 80092c2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80092c6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	4658      	mov	r0, fp
 80092ce:	dd0f      	ble.n	80092f0 <_strtod_l+0x5e0>
 80092d0:	2a1f      	cmp	r2, #31
 80092d2:	dd55      	ble.n	8009380 <_strtod_l+0x670>
 80092d4:	2a34      	cmp	r2, #52	@ 0x34
 80092d6:	bfde      	ittt	le
 80092d8:	f04f 32ff 	movle.w	r2, #4294967295
 80092dc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80092e0:	408a      	lslle	r2, r1
 80092e2:	f04f 0a00 	mov.w	sl, #0
 80092e6:	bfcc      	ite	gt
 80092e8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80092ec:	ea02 0b00 	andle.w	fp, r2, r0
 80092f0:	ec4b ab17 	vmov	d7, sl, fp
 80092f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fc:	d0a8      	beq.n	8009250 <_strtod_l+0x540>
 80092fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009300:	9805      	ldr	r0, [sp, #20]
 8009302:	f8cd 9000 	str.w	r9, [sp]
 8009306:	462a      	mov	r2, r5
 8009308:	f001 fa46 	bl	800a798 <__s2b>
 800930c:	9007      	str	r0, [sp, #28]
 800930e:	2800      	cmp	r0, #0
 8009310:	f43f af0a 	beq.w	8009128 <_strtod_l+0x418>
 8009314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009316:	1b3f      	subs	r7, r7, r4
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfb4      	ite	lt
 800931c:	463b      	movlt	r3, r7
 800931e:	2300      	movge	r3, #0
 8009320:	930a      	str	r3, [sp, #40]	@ 0x28
 8009322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009324:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009550 <_strtod_l+0x840>
 8009328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800932c:	2400      	movs	r4, #0
 800932e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009330:	4625      	mov	r5, r4
 8009332:	9b07      	ldr	r3, [sp, #28]
 8009334:	9805      	ldr	r0, [sp, #20]
 8009336:	6859      	ldr	r1, [r3, #4]
 8009338:	f001 f986 	bl	800a648 <_Balloc>
 800933c:	4606      	mov	r6, r0
 800933e:	2800      	cmp	r0, #0
 8009340:	f43f aef6 	beq.w	8009130 <_strtod_l+0x420>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	ec4b ab19 	vmov	d9, sl, fp
 800934c:	3202      	adds	r2, #2
 800934e:	f103 010c 	add.w	r1, r3, #12
 8009352:	0092      	lsls	r2, r2, #2
 8009354:	300c      	adds	r0, #12
 8009356:	f000 fd1c 	bl	8009d92 <memcpy>
 800935a:	eeb0 0b49 	vmov.f64	d0, d9
 800935e:	9805      	ldr	r0, [sp, #20]
 8009360:	aa14      	add	r2, sp, #80	@ 0x50
 8009362:	a913      	add	r1, sp, #76	@ 0x4c
 8009364:	f001 fd54 	bl	800ae10 <__d2b>
 8009368:	9012      	str	r0, [sp, #72]	@ 0x48
 800936a:	2800      	cmp	r0, #0
 800936c:	f43f aee0 	beq.w	8009130 <_strtod_l+0x420>
 8009370:	9805      	ldr	r0, [sp, #20]
 8009372:	2101      	movs	r1, #1
 8009374:	f001 faa6 	bl	800a8c4 <__i2b>
 8009378:	4605      	mov	r5, r0
 800937a:	b940      	cbnz	r0, 800938e <_strtod_l+0x67e>
 800937c:	2500      	movs	r5, #0
 800937e:	e6d7      	b.n	8009130 <_strtod_l+0x420>
 8009380:	f04f 31ff 	mov.w	r1, #4294967295
 8009384:	fa01 f202 	lsl.w	r2, r1, r2
 8009388:	ea02 0a0a 	and.w	sl, r2, sl
 800938c:	e7b0      	b.n	80092f0 <_strtod_l+0x5e0>
 800938e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009390:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009392:	2f00      	cmp	r7, #0
 8009394:	bfab      	itete	ge
 8009396:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009398:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800939a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800939e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80093a2:	bfac      	ite	ge
 80093a4:	eb07 0903 	addge.w	r9, r7, r3
 80093a8:	eba3 0807 	sublt.w	r8, r3, r7
 80093ac:	9b06      	ldr	r3, [sp, #24]
 80093ae:	1aff      	subs	r7, r7, r3
 80093b0:	4417      	add	r7, r2
 80093b2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80093b6:	4a6b      	ldr	r2, [pc, #428]	@ (8009564 <_strtod_l+0x854>)
 80093b8:	3f01      	subs	r7, #1
 80093ba:	4297      	cmp	r7, r2
 80093bc:	da51      	bge.n	8009462 <_strtod_l+0x752>
 80093be:	1bd1      	subs	r1, r2, r7
 80093c0:	291f      	cmp	r1, #31
 80093c2:	eba3 0301 	sub.w	r3, r3, r1
 80093c6:	f04f 0201 	mov.w	r2, #1
 80093ca:	dc3e      	bgt.n	800944a <_strtod_l+0x73a>
 80093cc:	408a      	lsls	r2, r1
 80093ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80093d0:	2200      	movs	r2, #0
 80093d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80093d4:	eb09 0703 	add.w	r7, r9, r3
 80093d8:	4498      	add	r8, r3
 80093da:	9b06      	ldr	r3, [sp, #24]
 80093dc:	45b9      	cmp	r9, r7
 80093de:	4498      	add	r8, r3
 80093e0:	464b      	mov	r3, r9
 80093e2:	bfa8      	it	ge
 80093e4:	463b      	movge	r3, r7
 80093e6:	4543      	cmp	r3, r8
 80093e8:	bfa8      	it	ge
 80093ea:	4643      	movge	r3, r8
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bfc2      	ittt	gt
 80093f0:	1aff      	subgt	r7, r7, r3
 80093f2:	eba8 0803 	subgt.w	r8, r8, r3
 80093f6:	eba9 0903 	subgt.w	r9, r9, r3
 80093fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dd16      	ble.n	800942e <_strtod_l+0x71e>
 8009400:	4629      	mov	r1, r5
 8009402:	9805      	ldr	r0, [sp, #20]
 8009404:	461a      	mov	r2, r3
 8009406:	f001 fb1d 	bl	800aa44 <__pow5mult>
 800940a:	4605      	mov	r5, r0
 800940c:	2800      	cmp	r0, #0
 800940e:	d0b5      	beq.n	800937c <_strtod_l+0x66c>
 8009410:	4601      	mov	r1, r0
 8009412:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009414:	9805      	ldr	r0, [sp, #20]
 8009416:	f001 fa6b 	bl	800a8f0 <__multiply>
 800941a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f ae87 	beq.w	8009130 <_strtod_l+0x420>
 8009422:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009424:	9805      	ldr	r0, [sp, #20]
 8009426:	f001 f94f 	bl	800a6c8 <_Bfree>
 800942a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800942c:	9312      	str	r3, [sp, #72]	@ 0x48
 800942e:	2f00      	cmp	r7, #0
 8009430:	dc1b      	bgt.n	800946a <_strtod_l+0x75a>
 8009432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	dd21      	ble.n	800947c <_strtod_l+0x76c>
 8009438:	4631      	mov	r1, r6
 800943a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800943c:	9805      	ldr	r0, [sp, #20]
 800943e:	f001 fb01 	bl	800aa44 <__pow5mult>
 8009442:	4606      	mov	r6, r0
 8009444:	b9d0      	cbnz	r0, 800947c <_strtod_l+0x76c>
 8009446:	2600      	movs	r6, #0
 8009448:	e672      	b.n	8009130 <_strtod_l+0x420>
 800944a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800944e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009452:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009456:	37e2      	adds	r7, #226	@ 0xe2
 8009458:	fa02 f107 	lsl.w	r1, r2, r7
 800945c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800945e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009460:	e7b8      	b.n	80093d4 <_strtod_l+0x6c4>
 8009462:	2200      	movs	r2, #0
 8009464:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009466:	2201      	movs	r2, #1
 8009468:	e7f9      	b.n	800945e <_strtod_l+0x74e>
 800946a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800946c:	9805      	ldr	r0, [sp, #20]
 800946e:	463a      	mov	r2, r7
 8009470:	f001 fb42 	bl	800aaf8 <__lshift>
 8009474:	9012      	str	r0, [sp, #72]	@ 0x48
 8009476:	2800      	cmp	r0, #0
 8009478:	d1db      	bne.n	8009432 <_strtod_l+0x722>
 800947a:	e659      	b.n	8009130 <_strtod_l+0x420>
 800947c:	f1b8 0f00 	cmp.w	r8, #0
 8009480:	dd07      	ble.n	8009492 <_strtod_l+0x782>
 8009482:	4631      	mov	r1, r6
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	4642      	mov	r2, r8
 8009488:	f001 fb36 	bl	800aaf8 <__lshift>
 800948c:	4606      	mov	r6, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	d0d9      	beq.n	8009446 <_strtod_l+0x736>
 8009492:	f1b9 0f00 	cmp.w	r9, #0
 8009496:	dd08      	ble.n	80094aa <_strtod_l+0x79a>
 8009498:	4629      	mov	r1, r5
 800949a:	9805      	ldr	r0, [sp, #20]
 800949c:	464a      	mov	r2, r9
 800949e:	f001 fb2b 	bl	800aaf8 <__lshift>
 80094a2:	4605      	mov	r5, r0
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f43f ae43 	beq.w	8009130 <_strtod_l+0x420>
 80094aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80094ac:	9805      	ldr	r0, [sp, #20]
 80094ae:	4632      	mov	r2, r6
 80094b0:	f001 fbaa 	bl	800ac08 <__mdiff>
 80094b4:	4604      	mov	r4, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f43f ae3a 	beq.w	8009130 <_strtod_l+0x420>
 80094bc:	2300      	movs	r3, #0
 80094be:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80094c2:	60c3      	str	r3, [r0, #12]
 80094c4:	4629      	mov	r1, r5
 80094c6:	f001 fb83 	bl	800abd0 <__mcmp>
 80094ca:	2800      	cmp	r0, #0
 80094cc:	da4e      	bge.n	800956c <_strtod_l+0x85c>
 80094ce:	ea58 080a 	orrs.w	r8, r8, sl
 80094d2:	d174      	bne.n	80095be <_strtod_l+0x8ae>
 80094d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d170      	bne.n	80095be <_strtod_l+0x8ae>
 80094dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094e0:	0d1b      	lsrs	r3, r3, #20
 80094e2:	051b      	lsls	r3, r3, #20
 80094e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094e8:	d969      	bls.n	80095be <_strtod_l+0x8ae>
 80094ea:	6963      	ldr	r3, [r4, #20]
 80094ec:	b913      	cbnz	r3, 80094f4 <_strtod_l+0x7e4>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	dd64      	ble.n	80095be <_strtod_l+0x8ae>
 80094f4:	4621      	mov	r1, r4
 80094f6:	2201      	movs	r2, #1
 80094f8:	9805      	ldr	r0, [sp, #20]
 80094fa:	f001 fafd 	bl	800aaf8 <__lshift>
 80094fe:	4629      	mov	r1, r5
 8009500:	4604      	mov	r4, r0
 8009502:	f001 fb65 	bl	800abd0 <__mcmp>
 8009506:	2800      	cmp	r0, #0
 8009508:	dd59      	ble.n	80095be <_strtod_l+0x8ae>
 800950a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800950e:	9a06      	ldr	r2, [sp, #24]
 8009510:	0d1b      	lsrs	r3, r3, #20
 8009512:	051b      	lsls	r3, r3, #20
 8009514:	2a00      	cmp	r2, #0
 8009516:	d070      	beq.n	80095fa <_strtod_l+0x8ea>
 8009518:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800951c:	d86d      	bhi.n	80095fa <_strtod_l+0x8ea>
 800951e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009522:	f67f ae99 	bls.w	8009258 <_strtod_l+0x548>
 8009526:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009558 <_strtod_l+0x848>
 800952a:	ec4b ab16 	vmov	d6, sl, fp
 800952e:	4b0e      	ldr	r3, [pc, #56]	@ (8009568 <_strtod_l+0x858>)
 8009530:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009534:	ee17 2a90 	vmov	r2, s15
 8009538:	4013      	ands	r3, r2
 800953a:	ec5b ab17 	vmov	sl, fp, d7
 800953e:	2b00      	cmp	r3, #0
 8009540:	f47f ae01 	bne.w	8009146 <_strtod_l+0x436>
 8009544:	9a05      	ldr	r2, [sp, #20]
 8009546:	2322      	movs	r3, #34	@ 0x22
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e5fc      	b.n	8009146 <_strtod_l+0x436>
 800954c:	f3af 8000 	nop.w
 8009550:	ffc00000 	.word	0xffc00000
 8009554:	41dfffff 	.word	0x41dfffff
 8009558:	00000000 	.word	0x00000000
 800955c:	39500000 	.word	0x39500000
 8009560:	0800bb50 	.word	0x0800bb50
 8009564:	fffffc02 	.word	0xfffffc02
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	46d9      	mov	r9, fp
 800956e:	d15d      	bne.n	800962c <_strtod_l+0x91c>
 8009570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009574:	f1b8 0f00 	cmp.w	r8, #0
 8009578:	d02a      	beq.n	80095d0 <_strtod_l+0x8c0>
 800957a:	4aab      	ldr	r2, [pc, #684]	@ (8009828 <_strtod_l+0xb18>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d12a      	bne.n	80095d6 <_strtod_l+0x8c6>
 8009580:	9b06      	ldr	r3, [sp, #24]
 8009582:	4652      	mov	r2, sl
 8009584:	b1fb      	cbz	r3, 80095c6 <_strtod_l+0x8b6>
 8009586:	4ba9      	ldr	r3, [pc, #676]	@ (800982c <_strtod_l+0xb1c>)
 8009588:	ea0b 0303 	and.w	r3, fp, r3
 800958c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009590:	f04f 31ff 	mov.w	r1, #4294967295
 8009594:	d81a      	bhi.n	80095cc <_strtod_l+0x8bc>
 8009596:	0d1b      	lsrs	r3, r3, #20
 8009598:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800959c:	fa01 f303 	lsl.w	r3, r1, r3
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d118      	bne.n	80095d6 <_strtod_l+0x8c6>
 80095a4:	4ba2      	ldr	r3, [pc, #648]	@ (8009830 <_strtod_l+0xb20>)
 80095a6:	4599      	cmp	r9, r3
 80095a8:	d102      	bne.n	80095b0 <_strtod_l+0x8a0>
 80095aa:	3201      	adds	r2, #1
 80095ac:	f43f adc0 	beq.w	8009130 <_strtod_l+0x420>
 80095b0:	4b9e      	ldr	r3, [pc, #632]	@ (800982c <_strtod_l+0xb1c>)
 80095b2:	ea09 0303 	and.w	r3, r9, r3
 80095b6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80095ba:	f04f 0a00 	mov.w	sl, #0
 80095be:	9b06      	ldr	r3, [sp, #24]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1b0      	bne.n	8009526 <_strtod_l+0x816>
 80095c4:	e5bf      	b.n	8009146 <_strtod_l+0x436>
 80095c6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ca:	e7e9      	b.n	80095a0 <_strtod_l+0x890>
 80095cc:	460b      	mov	r3, r1
 80095ce:	e7e7      	b.n	80095a0 <_strtod_l+0x890>
 80095d0:	ea53 030a 	orrs.w	r3, r3, sl
 80095d4:	d099      	beq.n	800950a <_strtod_l+0x7fa>
 80095d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d8:	b1c3      	cbz	r3, 800960c <_strtod_l+0x8fc>
 80095da:	ea13 0f09 	tst.w	r3, r9
 80095de:	d0ee      	beq.n	80095be <_strtod_l+0x8ae>
 80095e0:	9a06      	ldr	r2, [sp, #24]
 80095e2:	4650      	mov	r0, sl
 80095e4:	4659      	mov	r1, fp
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	d013      	beq.n	8009614 <_strtod_l+0x904>
 80095ec:	f7ff fb76 	bl	8008cdc <sulp>
 80095f0:	ee39 7b00 	vadd.f64	d7, d9, d0
 80095f4:	ec5b ab17 	vmov	sl, fp, d7
 80095f8:	e7e1      	b.n	80095be <_strtod_l+0x8ae>
 80095fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80095fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009606:	f04f 3aff 	mov.w	sl, #4294967295
 800960a:	e7d8      	b.n	80095be <_strtod_l+0x8ae>
 800960c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800960e:	ea13 0f0a 	tst.w	r3, sl
 8009612:	e7e4      	b.n	80095de <_strtod_l+0x8ce>
 8009614:	f7ff fb62 	bl	8008cdc <sulp>
 8009618:	ee39 0b40 	vsub.f64	d0, d9, d0
 800961c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009624:	ec5b ab10 	vmov	sl, fp, d0
 8009628:	d1c9      	bne.n	80095be <_strtod_l+0x8ae>
 800962a:	e615      	b.n	8009258 <_strtod_l+0x548>
 800962c:	4629      	mov	r1, r5
 800962e:	4620      	mov	r0, r4
 8009630:	f001 fc46 	bl	800aec0 <__ratio>
 8009634:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009638:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800963c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009640:	d85d      	bhi.n	80096fe <_strtod_l+0x9ee>
 8009642:	f1b8 0f00 	cmp.w	r8, #0
 8009646:	d164      	bne.n	8009712 <_strtod_l+0xa02>
 8009648:	f1ba 0f00 	cmp.w	sl, #0
 800964c:	d14b      	bne.n	80096e6 <_strtod_l+0x9d6>
 800964e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009652:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d160      	bne.n	800971c <_strtod_l+0xa0c>
 800965a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800965e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009666:	d401      	bmi.n	800966c <_strtod_l+0x95c>
 8009668:	ee20 8b08 	vmul.f64	d8, d0, d8
 800966c:	eeb1 ab48 	vneg.f64	d10, d8
 8009670:	486e      	ldr	r0, [pc, #440]	@ (800982c <_strtod_l+0xb1c>)
 8009672:	4970      	ldr	r1, [pc, #448]	@ (8009834 <_strtod_l+0xb24>)
 8009674:	ea09 0700 	and.w	r7, r9, r0
 8009678:	428f      	cmp	r7, r1
 800967a:	ec53 2b1a 	vmov	r2, r3, d10
 800967e:	d17d      	bne.n	800977c <_strtod_l+0xa6c>
 8009680:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009684:	ec4b ab1c 	vmov	d12, sl, fp
 8009688:	eeb0 0b4c 	vmov.f64	d0, d12
 800968c:	f001 fb50 	bl	800ad30 <__ulp>
 8009690:	4866      	ldr	r0, [pc, #408]	@ (800982c <_strtod_l+0xb1c>)
 8009692:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009696:	ee1c 3a90 	vmov	r3, s25
 800969a:	4a67      	ldr	r2, [pc, #412]	@ (8009838 <_strtod_l+0xb28>)
 800969c:	ea03 0100 	and.w	r1, r3, r0
 80096a0:	4291      	cmp	r1, r2
 80096a2:	ec5b ab1c 	vmov	sl, fp, d12
 80096a6:	d93c      	bls.n	8009722 <_strtod_l+0xa12>
 80096a8:	ee19 2a90 	vmov	r2, s19
 80096ac:	4b60      	ldr	r3, [pc, #384]	@ (8009830 <_strtod_l+0xb20>)
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d104      	bne.n	80096bc <_strtod_l+0x9ac>
 80096b2:	ee19 3a10 	vmov	r3, s18
 80096b6:	3301      	adds	r3, #1
 80096b8:	f43f ad3a 	beq.w	8009130 <_strtod_l+0x420>
 80096bc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8009830 <_strtod_l+0xb20>
 80096c0:	f04f 3aff 	mov.w	sl, #4294967295
 80096c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80096c6:	9805      	ldr	r0, [sp, #20]
 80096c8:	f000 fffe 	bl	800a6c8 <_Bfree>
 80096cc:	9805      	ldr	r0, [sp, #20]
 80096ce:	4631      	mov	r1, r6
 80096d0:	f000 fffa 	bl	800a6c8 <_Bfree>
 80096d4:	9805      	ldr	r0, [sp, #20]
 80096d6:	4629      	mov	r1, r5
 80096d8:	f000 fff6 	bl	800a6c8 <_Bfree>
 80096dc:	9805      	ldr	r0, [sp, #20]
 80096de:	4621      	mov	r1, r4
 80096e0:	f000 fff2 	bl	800a6c8 <_Bfree>
 80096e4:	e625      	b.n	8009332 <_strtod_l+0x622>
 80096e6:	f1ba 0f01 	cmp.w	sl, #1
 80096ea:	d103      	bne.n	80096f4 <_strtod_l+0x9e4>
 80096ec:	f1bb 0f00 	cmp.w	fp, #0
 80096f0:	f43f adb2 	beq.w	8009258 <_strtod_l+0x548>
 80096f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80096f8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80096fc:	e7b8      	b.n	8009670 <_strtod_l+0x960>
 80096fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009702:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009706:	f1b8 0f00 	cmp.w	r8, #0
 800970a:	d0af      	beq.n	800966c <_strtod_l+0x95c>
 800970c:	eeb0 ab48 	vmov.f64	d10, d8
 8009710:	e7ae      	b.n	8009670 <_strtod_l+0x960>
 8009712:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009716:	eeb0 8b4a 	vmov.f64	d8, d10
 800971a:	e7a9      	b.n	8009670 <_strtod_l+0x960>
 800971c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009720:	e7a6      	b.n	8009670 <_strtod_l+0x960>
 8009722:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	46d9      	mov	r9, fp
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1ca      	bne.n	80096c4 <_strtod_l+0x9b4>
 800972e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009732:	0d1b      	lsrs	r3, r3, #20
 8009734:	051b      	lsls	r3, r3, #20
 8009736:	429f      	cmp	r7, r3
 8009738:	d1c4      	bne.n	80096c4 <_strtod_l+0x9b4>
 800973a:	ec51 0b18 	vmov	r0, r1, d8
 800973e:	f7f6 ffa3 	bl	8000688 <__aeabi_d2lz>
 8009742:	f7f6 ff5b 	bl	80005fc <__aeabi_l2d>
 8009746:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800974a:	ec41 0b17 	vmov	d7, r0, r1
 800974e:	ea49 090a 	orr.w	r9, r9, sl
 8009752:	ea59 0908 	orrs.w	r9, r9, r8
 8009756:	ee38 8b47 	vsub.f64	d8, d8, d7
 800975a:	d03c      	beq.n	80097d6 <_strtod_l+0xac6>
 800975c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009810 <_strtod_l+0xb00>
 8009760:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009768:	f53f aced 	bmi.w	8009146 <_strtod_l+0x436>
 800976c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009818 <_strtod_l+0xb08>
 8009770:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009778:	dda4      	ble.n	80096c4 <_strtod_l+0x9b4>
 800977a:	e4e4      	b.n	8009146 <_strtod_l+0x436>
 800977c:	9906      	ldr	r1, [sp, #24]
 800977e:	b1e1      	cbz	r1, 80097ba <_strtod_l+0xaaa>
 8009780:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009784:	d819      	bhi.n	80097ba <_strtod_l+0xaaa>
 8009786:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800978a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978e:	d811      	bhi.n	80097b4 <_strtod_l+0xaa4>
 8009790:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009794:	ee18 3a10 	vmov	r3, s16
 8009798:	2b01      	cmp	r3, #1
 800979a:	bf38      	it	cc
 800979c:	2301      	movcc	r3, #1
 800979e:	ee08 3a10 	vmov	s16, r3
 80097a2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80097a6:	f1b8 0f00 	cmp.w	r8, #0
 80097aa:	d111      	bne.n	80097d0 <_strtod_l+0xac0>
 80097ac:	eeb1 7b48 	vneg.f64	d7, d8
 80097b0:	ec53 2b17 	vmov	r2, r3, d7
 80097b4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80097b8:	1bcb      	subs	r3, r1, r7
 80097ba:	eeb0 0b49 	vmov.f64	d0, d9
 80097be:	ec43 2b1a 	vmov	d10, r2, r3
 80097c2:	f001 fab5 	bl	800ad30 <__ulp>
 80097c6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80097ca:	ec5b ab19 	vmov	sl, fp, d9
 80097ce:	e7aa      	b.n	8009726 <_strtod_l+0xa16>
 80097d0:	eeb0 7b48 	vmov.f64	d7, d8
 80097d4:	e7ec      	b.n	80097b0 <_strtod_l+0xaa0>
 80097d6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8009820 <_strtod_l+0xb10>
 80097da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80097de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e2:	f57f af6f 	bpl.w	80096c4 <_strtod_l+0x9b4>
 80097e6:	e4ae      	b.n	8009146 <_strtod_l+0x436>
 80097e8:	2300      	movs	r3, #0
 80097ea:	9308      	str	r3, [sp, #32]
 80097ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	f7ff bacc 	b.w	8008d8e <_strtod_l+0x7e>
 80097f6:	2a65      	cmp	r2, #101	@ 0x65
 80097f8:	f43f abbc 	beq.w	8008f74 <_strtod_l+0x264>
 80097fc:	2a45      	cmp	r2, #69	@ 0x45
 80097fe:	f43f abb9 	beq.w	8008f74 <_strtod_l+0x264>
 8009802:	2301      	movs	r3, #1
 8009804:	9306      	str	r3, [sp, #24]
 8009806:	f7ff bbf0 	b.w	8008fea <_strtod_l+0x2da>
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
 8009810:	94a03595 	.word	0x94a03595
 8009814:	3fdfffff 	.word	0x3fdfffff
 8009818:	35afe535 	.word	0x35afe535
 800981c:	3fe00000 	.word	0x3fe00000
 8009820:	94a03595 	.word	0x94a03595
 8009824:	3fcfffff 	.word	0x3fcfffff
 8009828:	000fffff 	.word	0x000fffff
 800982c:	7ff00000 	.word	0x7ff00000
 8009830:	7fefffff 	.word	0x7fefffff
 8009834:	7fe00000 	.word	0x7fe00000
 8009838:	7c9fffff 	.word	0x7c9fffff

0800983c <strtod>:
 800983c:	460a      	mov	r2, r1
 800983e:	4601      	mov	r1, r0
 8009840:	4802      	ldr	r0, [pc, #8]	@ (800984c <strtod+0x10>)
 8009842:	4b03      	ldr	r3, [pc, #12]	@ (8009850 <strtod+0x14>)
 8009844:	6800      	ldr	r0, [r0, #0]
 8009846:	f7ff ba63 	b.w	8008d10 <_strtod_l>
 800984a:	bf00      	nop
 800984c:	20000198 	.word	0x20000198
 8009850:	2000002c 	.word	0x2000002c

08009854 <std>:
 8009854:	2300      	movs	r3, #0
 8009856:	b510      	push	{r4, lr}
 8009858:	4604      	mov	r4, r0
 800985a:	e9c0 3300 	strd	r3, r3, [r0]
 800985e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009862:	6083      	str	r3, [r0, #8]
 8009864:	8181      	strh	r1, [r0, #12]
 8009866:	6643      	str	r3, [r0, #100]	@ 0x64
 8009868:	81c2      	strh	r2, [r0, #14]
 800986a:	6183      	str	r3, [r0, #24]
 800986c:	4619      	mov	r1, r3
 800986e:	2208      	movs	r2, #8
 8009870:	305c      	adds	r0, #92	@ 0x5c
 8009872:	f000 fa01 	bl	8009c78 <memset>
 8009876:	4b0d      	ldr	r3, [pc, #52]	@ (80098ac <std+0x58>)
 8009878:	6263      	str	r3, [r4, #36]	@ 0x24
 800987a:	4b0d      	ldr	r3, [pc, #52]	@ (80098b0 <std+0x5c>)
 800987c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800987e:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <std+0x60>)
 8009880:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009882:	4b0d      	ldr	r3, [pc, #52]	@ (80098b8 <std+0x64>)
 8009884:	6323      	str	r3, [r4, #48]	@ 0x30
 8009886:	4b0d      	ldr	r3, [pc, #52]	@ (80098bc <std+0x68>)
 8009888:	6224      	str	r4, [r4, #32]
 800988a:	429c      	cmp	r4, r3
 800988c:	d006      	beq.n	800989c <std+0x48>
 800988e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009892:	4294      	cmp	r4, r2
 8009894:	d002      	beq.n	800989c <std+0x48>
 8009896:	33d0      	adds	r3, #208	@ 0xd0
 8009898:	429c      	cmp	r4, r3
 800989a:	d105      	bne.n	80098a8 <std+0x54>
 800989c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80098a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a4:	f000 ba72 	b.w	8009d8c <__retarget_lock_init_recursive>
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	bf00      	nop
 80098ac:	08009ac9 	.word	0x08009ac9
 80098b0:	08009aeb 	.word	0x08009aeb
 80098b4:	08009b23 	.word	0x08009b23
 80098b8:	08009b47 	.word	0x08009b47
 80098bc:	2000097c 	.word	0x2000097c

080098c0 <stdio_exit_handler>:
 80098c0:	4a02      	ldr	r2, [pc, #8]	@ (80098cc <stdio_exit_handler+0xc>)
 80098c2:	4903      	ldr	r1, [pc, #12]	@ (80098d0 <stdio_exit_handler+0x10>)
 80098c4:	4803      	ldr	r0, [pc, #12]	@ (80098d4 <stdio_exit_handler+0x14>)
 80098c6:	f000 b869 	b.w	800999c <_fwalk_sglue>
 80098ca:	bf00      	nop
 80098cc:	20000020 	.word	0x20000020
 80098d0:	0800b669 	.word	0x0800b669
 80098d4:	2000019c 	.word	0x2000019c

080098d8 <cleanup_stdio>:
 80098d8:	6841      	ldr	r1, [r0, #4]
 80098da:	4b0c      	ldr	r3, [pc, #48]	@ (800990c <cleanup_stdio+0x34>)
 80098dc:	4299      	cmp	r1, r3
 80098de:	b510      	push	{r4, lr}
 80098e0:	4604      	mov	r4, r0
 80098e2:	d001      	beq.n	80098e8 <cleanup_stdio+0x10>
 80098e4:	f001 fec0 	bl	800b668 <_fflush_r>
 80098e8:	68a1      	ldr	r1, [r4, #8]
 80098ea:	4b09      	ldr	r3, [pc, #36]	@ (8009910 <cleanup_stdio+0x38>)
 80098ec:	4299      	cmp	r1, r3
 80098ee:	d002      	beq.n	80098f6 <cleanup_stdio+0x1e>
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 feb9 	bl	800b668 <_fflush_r>
 80098f6:	68e1      	ldr	r1, [r4, #12]
 80098f8:	4b06      	ldr	r3, [pc, #24]	@ (8009914 <cleanup_stdio+0x3c>)
 80098fa:	4299      	cmp	r1, r3
 80098fc:	d004      	beq.n	8009908 <cleanup_stdio+0x30>
 80098fe:	4620      	mov	r0, r4
 8009900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009904:	f001 beb0 	b.w	800b668 <_fflush_r>
 8009908:	bd10      	pop	{r4, pc}
 800990a:	bf00      	nop
 800990c:	2000097c 	.word	0x2000097c
 8009910:	200009e4 	.word	0x200009e4
 8009914:	20000a4c 	.word	0x20000a4c

08009918 <global_stdio_init.part.0>:
 8009918:	b510      	push	{r4, lr}
 800991a:	4b0b      	ldr	r3, [pc, #44]	@ (8009948 <global_stdio_init.part.0+0x30>)
 800991c:	4c0b      	ldr	r4, [pc, #44]	@ (800994c <global_stdio_init.part.0+0x34>)
 800991e:	4a0c      	ldr	r2, [pc, #48]	@ (8009950 <global_stdio_init.part.0+0x38>)
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	4620      	mov	r0, r4
 8009924:	2200      	movs	r2, #0
 8009926:	2104      	movs	r1, #4
 8009928:	f7ff ff94 	bl	8009854 <std>
 800992c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009930:	2201      	movs	r2, #1
 8009932:	2109      	movs	r1, #9
 8009934:	f7ff ff8e 	bl	8009854 <std>
 8009938:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800993c:	2202      	movs	r2, #2
 800993e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009942:	2112      	movs	r1, #18
 8009944:	f7ff bf86 	b.w	8009854 <std>
 8009948:	20000ab4 	.word	0x20000ab4
 800994c:	2000097c 	.word	0x2000097c
 8009950:	080098c1 	.word	0x080098c1

08009954 <__sfp_lock_acquire>:
 8009954:	4801      	ldr	r0, [pc, #4]	@ (800995c <__sfp_lock_acquire+0x8>)
 8009956:	f000 ba1a 	b.w	8009d8e <__retarget_lock_acquire_recursive>
 800995a:	bf00      	nop
 800995c:	20000abd 	.word	0x20000abd

08009960 <__sfp_lock_release>:
 8009960:	4801      	ldr	r0, [pc, #4]	@ (8009968 <__sfp_lock_release+0x8>)
 8009962:	f000 ba15 	b.w	8009d90 <__retarget_lock_release_recursive>
 8009966:	bf00      	nop
 8009968:	20000abd 	.word	0x20000abd

0800996c <__sinit>:
 800996c:	b510      	push	{r4, lr}
 800996e:	4604      	mov	r4, r0
 8009970:	f7ff fff0 	bl	8009954 <__sfp_lock_acquire>
 8009974:	6a23      	ldr	r3, [r4, #32]
 8009976:	b11b      	cbz	r3, 8009980 <__sinit+0x14>
 8009978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800997c:	f7ff bff0 	b.w	8009960 <__sfp_lock_release>
 8009980:	4b04      	ldr	r3, [pc, #16]	@ (8009994 <__sinit+0x28>)
 8009982:	6223      	str	r3, [r4, #32]
 8009984:	4b04      	ldr	r3, [pc, #16]	@ (8009998 <__sinit+0x2c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1f5      	bne.n	8009978 <__sinit+0xc>
 800998c:	f7ff ffc4 	bl	8009918 <global_stdio_init.part.0>
 8009990:	e7f2      	b.n	8009978 <__sinit+0xc>
 8009992:	bf00      	nop
 8009994:	080098d9 	.word	0x080098d9
 8009998:	20000ab4 	.word	0x20000ab4

0800999c <_fwalk_sglue>:
 800999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a0:	4607      	mov	r7, r0
 80099a2:	4688      	mov	r8, r1
 80099a4:	4614      	mov	r4, r2
 80099a6:	2600      	movs	r6, #0
 80099a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099ac:	f1b9 0901 	subs.w	r9, r9, #1
 80099b0:	d505      	bpl.n	80099be <_fwalk_sglue+0x22>
 80099b2:	6824      	ldr	r4, [r4, #0]
 80099b4:	2c00      	cmp	r4, #0
 80099b6:	d1f7      	bne.n	80099a8 <_fwalk_sglue+0xc>
 80099b8:	4630      	mov	r0, r6
 80099ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d907      	bls.n	80099d4 <_fwalk_sglue+0x38>
 80099c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c8:	3301      	adds	r3, #1
 80099ca:	d003      	beq.n	80099d4 <_fwalk_sglue+0x38>
 80099cc:	4629      	mov	r1, r5
 80099ce:	4638      	mov	r0, r7
 80099d0:	47c0      	blx	r8
 80099d2:	4306      	orrs	r6, r0
 80099d4:	3568      	adds	r5, #104	@ 0x68
 80099d6:	e7e9      	b.n	80099ac <_fwalk_sglue+0x10>

080099d8 <iprintf>:
 80099d8:	b40f      	push	{r0, r1, r2, r3}
 80099da:	b507      	push	{r0, r1, r2, lr}
 80099dc:	4906      	ldr	r1, [pc, #24]	@ (80099f8 <iprintf+0x20>)
 80099de:	ab04      	add	r3, sp, #16
 80099e0:	6808      	ldr	r0, [r1, #0]
 80099e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e6:	6881      	ldr	r1, [r0, #8]
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	f001 fb13 	bl	800b014 <_vfiprintf_r>
 80099ee:	b003      	add	sp, #12
 80099f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099f4:	b004      	add	sp, #16
 80099f6:	4770      	bx	lr
 80099f8:	20000198 	.word	0x20000198

080099fc <putchar>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	@ (8009a08 <putchar+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	6882      	ldr	r2, [r0, #8]
 8009a04:	f001 beba 	b.w	800b77c <_putc_r>
 8009a08:	20000198 	.word	0x20000198

08009a0c <_puts_r>:
 8009a0c:	6a03      	ldr	r3, [r0, #32]
 8009a0e:	b570      	push	{r4, r5, r6, lr}
 8009a10:	6884      	ldr	r4, [r0, #8]
 8009a12:	4605      	mov	r5, r0
 8009a14:	460e      	mov	r6, r1
 8009a16:	b90b      	cbnz	r3, 8009a1c <_puts_r+0x10>
 8009a18:	f7ff ffa8 	bl	800996c <__sinit>
 8009a1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a1e:	07db      	lsls	r3, r3, #31
 8009a20:	d405      	bmi.n	8009a2e <_puts_r+0x22>
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	0598      	lsls	r0, r3, #22
 8009a26:	d402      	bmi.n	8009a2e <_puts_r+0x22>
 8009a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a2a:	f000 f9b0 	bl	8009d8e <__retarget_lock_acquire_recursive>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	0719      	lsls	r1, r3, #28
 8009a32:	d502      	bpl.n	8009a3a <_puts_r+0x2e>
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d135      	bne.n	8009aa6 <_puts_r+0x9a>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 f8c5 	bl	8009bcc <__swsetup_r>
 8009a42:	b380      	cbz	r0, 8009aa6 <_puts_r+0x9a>
 8009a44:	f04f 35ff 	mov.w	r5, #4294967295
 8009a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a4a:	07da      	lsls	r2, r3, #31
 8009a4c:	d405      	bmi.n	8009a5a <_puts_r+0x4e>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	059b      	lsls	r3, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_puts_r+0x4e>
 8009a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a56:	f000 f99b 	bl	8009d90 <__retarget_lock_release_recursive>
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	bd70      	pop	{r4, r5, r6, pc}
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da04      	bge.n	8009a6c <_puts_r+0x60>
 8009a62:	69a2      	ldr	r2, [r4, #24]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	dc17      	bgt.n	8009a98 <_puts_r+0x8c>
 8009a68:	290a      	cmp	r1, #10
 8009a6a:	d015      	beq.n	8009a98 <_puts_r+0x8c>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	6022      	str	r2, [r4, #0]
 8009a72:	7019      	strb	r1, [r3, #0]
 8009a74:	68a3      	ldr	r3, [r4, #8]
 8009a76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	60a3      	str	r3, [r4, #8]
 8009a7e:	2900      	cmp	r1, #0
 8009a80:	d1ed      	bne.n	8009a5e <_puts_r+0x52>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	da11      	bge.n	8009aaa <_puts_r+0x9e>
 8009a86:	4622      	mov	r2, r4
 8009a88:	210a      	movs	r1, #10
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f85f 	bl	8009b4e <__swbuf_r>
 8009a90:	3001      	adds	r0, #1
 8009a92:	d0d7      	beq.n	8009a44 <_puts_r+0x38>
 8009a94:	250a      	movs	r5, #10
 8009a96:	e7d7      	b.n	8009a48 <_puts_r+0x3c>
 8009a98:	4622      	mov	r2, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f857 	bl	8009b4e <__swbuf_r>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d1e7      	bne.n	8009a74 <_puts_r+0x68>
 8009aa4:	e7ce      	b.n	8009a44 <_puts_r+0x38>
 8009aa6:	3e01      	subs	r6, #1
 8009aa8:	e7e4      	b.n	8009a74 <_puts_r+0x68>
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	6022      	str	r2, [r4, #0]
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	e7ee      	b.n	8009a94 <_puts_r+0x88>
	...

08009ab8 <puts>:
 8009ab8:	4b02      	ldr	r3, [pc, #8]	@ (8009ac4 <puts+0xc>)
 8009aba:	4601      	mov	r1, r0
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	f7ff bfa5 	b.w	8009a0c <_puts_r>
 8009ac2:	bf00      	nop
 8009ac4:	20000198 	.word	0x20000198

08009ac8 <__sread>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	460c      	mov	r4, r1
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	f000 f90e 	bl	8009cf0 <_read_r>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	bfab      	itete	ge
 8009ad8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ada:	89a3      	ldrhlt	r3, [r4, #12]
 8009adc:	181b      	addge	r3, r3, r0
 8009ade:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ae2:	bfac      	ite	ge
 8009ae4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ae6:	81a3      	strhlt	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__swrite>:
 8009aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aee:	461f      	mov	r7, r3
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	05db      	lsls	r3, r3, #23
 8009af4:	4605      	mov	r5, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	4616      	mov	r6, r2
 8009afa:	d505      	bpl.n	8009b08 <__swrite+0x1e>
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	2302      	movs	r3, #2
 8009b02:	2200      	movs	r2, #0
 8009b04:	f000 f8e2 	bl	8009ccc <_lseek_r>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	4632      	mov	r2, r6
 8009b16:	463b      	mov	r3, r7
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	f000 b8f9 	b.w	8009d14 <_write_r>

08009b22 <__sseek>:
 8009b22:	b510      	push	{r4, lr}
 8009b24:	460c      	mov	r4, r1
 8009b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2a:	f000 f8cf 	bl	8009ccc <_lseek_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	bf15      	itete	ne
 8009b34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b3e:	81a3      	strheq	r3, [r4, #12]
 8009b40:	bf18      	it	ne
 8009b42:	81a3      	strhne	r3, [r4, #12]
 8009b44:	bd10      	pop	{r4, pc}

08009b46 <__sclose>:
 8009b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4a:	f000 b8af 	b.w	8009cac <_close_r>

08009b4e <__swbuf_r>:
 8009b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b50:	460e      	mov	r6, r1
 8009b52:	4614      	mov	r4, r2
 8009b54:	4605      	mov	r5, r0
 8009b56:	b118      	cbz	r0, 8009b60 <__swbuf_r+0x12>
 8009b58:	6a03      	ldr	r3, [r0, #32]
 8009b5a:	b90b      	cbnz	r3, 8009b60 <__swbuf_r+0x12>
 8009b5c:	f7ff ff06 	bl	800996c <__sinit>
 8009b60:	69a3      	ldr	r3, [r4, #24]
 8009b62:	60a3      	str	r3, [r4, #8]
 8009b64:	89a3      	ldrh	r3, [r4, #12]
 8009b66:	071a      	lsls	r2, r3, #28
 8009b68:	d501      	bpl.n	8009b6e <__swbuf_r+0x20>
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	b943      	cbnz	r3, 8009b80 <__swbuf_r+0x32>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4628      	mov	r0, r5
 8009b72:	f000 f82b 	bl	8009bcc <__swsetup_r>
 8009b76:	b118      	cbz	r0, 8009b80 <__swbuf_r+0x32>
 8009b78:	f04f 37ff 	mov.w	r7, #4294967295
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	6922      	ldr	r2, [r4, #16]
 8009b84:	1a98      	subs	r0, r3, r2
 8009b86:	6963      	ldr	r3, [r4, #20]
 8009b88:	b2f6      	uxtb	r6, r6
 8009b8a:	4283      	cmp	r3, r0
 8009b8c:	4637      	mov	r7, r6
 8009b8e:	dc05      	bgt.n	8009b9c <__swbuf_r+0x4e>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	f001 fd68 	bl	800b668 <_fflush_r>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d1ed      	bne.n	8009b78 <__swbuf_r+0x2a>
 8009b9c:	68a3      	ldr	r3, [r4, #8]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	60a3      	str	r3, [r4, #8]
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	701e      	strb	r6, [r3, #0]
 8009baa:	6962      	ldr	r2, [r4, #20]
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d004      	beq.n	8009bbc <__swbuf_r+0x6e>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	07db      	lsls	r3, r3, #31
 8009bb6:	d5e1      	bpl.n	8009b7c <__swbuf_r+0x2e>
 8009bb8:	2e0a      	cmp	r6, #10
 8009bba:	d1df      	bne.n	8009b7c <__swbuf_r+0x2e>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f001 fd52 	bl	800b668 <_fflush_r>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d0d9      	beq.n	8009b7c <__swbuf_r+0x2e>
 8009bc8:	e7d6      	b.n	8009b78 <__swbuf_r+0x2a>
	...

08009bcc <__swsetup_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4b29      	ldr	r3, [pc, #164]	@ (8009c74 <__swsetup_r+0xa8>)
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	b118      	cbz	r0, 8009be0 <__swsetup_r+0x14>
 8009bd8:	6a03      	ldr	r3, [r0, #32]
 8009bda:	b90b      	cbnz	r3, 8009be0 <__swsetup_r+0x14>
 8009bdc:	f7ff fec6 	bl	800996c <__sinit>
 8009be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be4:	0719      	lsls	r1, r3, #28
 8009be6:	d422      	bmi.n	8009c2e <__swsetup_r+0x62>
 8009be8:	06da      	lsls	r2, r3, #27
 8009bea:	d407      	bmi.n	8009bfc <__swsetup_r+0x30>
 8009bec:	2209      	movs	r2, #9
 8009bee:	602a      	str	r2, [r5, #0]
 8009bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfa:	e033      	b.n	8009c64 <__swsetup_r+0x98>
 8009bfc:	0758      	lsls	r0, r3, #29
 8009bfe:	d512      	bpl.n	8009c26 <__swsetup_r+0x5a>
 8009c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c02:	b141      	cbz	r1, 8009c16 <__swsetup_r+0x4a>
 8009c04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c08:	4299      	cmp	r1, r3
 8009c0a:	d002      	beq.n	8009c12 <__swsetup_r+0x46>
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f000 f8d7 	bl	8009dc0 <_free_r>
 8009c12:	2300      	movs	r3, #0
 8009c14:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c1c:	81a3      	strh	r3, [r4, #12]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	6063      	str	r3, [r4, #4]
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f043 0308 	orr.w	r3, r3, #8
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	b94b      	cbnz	r3, 8009c46 <__swsetup_r+0x7a>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c3c:	d003      	beq.n	8009c46 <__swsetup_r+0x7a>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4628      	mov	r0, r5
 8009c42:	f001 fd5f 	bl	800b704 <__smakebuf_r>
 8009c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c4a:	f013 0201 	ands.w	r2, r3, #1
 8009c4e:	d00a      	beq.n	8009c66 <__swsetup_r+0x9a>
 8009c50:	2200      	movs	r2, #0
 8009c52:	60a2      	str	r2, [r4, #8]
 8009c54:	6962      	ldr	r2, [r4, #20]
 8009c56:	4252      	negs	r2, r2
 8009c58:	61a2      	str	r2, [r4, #24]
 8009c5a:	6922      	ldr	r2, [r4, #16]
 8009c5c:	b942      	cbnz	r2, 8009c70 <__swsetup_r+0xa4>
 8009c5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c62:	d1c5      	bne.n	8009bf0 <__swsetup_r+0x24>
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	0799      	lsls	r1, r3, #30
 8009c68:	bf58      	it	pl
 8009c6a:	6962      	ldrpl	r2, [r4, #20]
 8009c6c:	60a2      	str	r2, [r4, #8]
 8009c6e:	e7f4      	b.n	8009c5a <__swsetup_r+0x8e>
 8009c70:	2000      	movs	r0, #0
 8009c72:	e7f7      	b.n	8009c64 <__swsetup_r+0x98>
 8009c74:	20000198 	.word	0x20000198

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <strncmp>:
 8009c88:	b510      	push	{r4, lr}
 8009c8a:	b16a      	cbz	r2, 8009ca8 <strncmp+0x20>
 8009c8c:	3901      	subs	r1, #1
 8009c8e:	1884      	adds	r4, r0, r2
 8009c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d103      	bne.n	8009ca4 <strncmp+0x1c>
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d001      	beq.n	8009ca4 <strncmp+0x1c>
 8009ca0:	2a00      	cmp	r2, #0
 8009ca2:	d1f5      	bne.n	8009c90 <strncmp+0x8>
 8009ca4:	1ad0      	subs	r0, r2, r3
 8009ca6:	bd10      	pop	{r4, pc}
 8009ca8:	4610      	mov	r0, r2
 8009caa:	e7fc      	b.n	8009ca6 <strncmp+0x1e>

08009cac <_close_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d06      	ldr	r5, [pc, #24]	@ (8009cc8 <_close_r+0x1c>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f7f9 fc70 	bl	800359c <_close>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_close_r+0x1a>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_close_r+0x1a>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20000ab8 	.word	0x20000ab8

08009ccc <_lseek_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	@ (8009cec <_lseek_r+0x20>)
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	602a      	str	r2, [r5, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f7f9 fc85 	bl	80035ea <_lseek>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_lseek_r+0x1e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_lseek_r+0x1e>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20000ab8 	.word	0x20000ab8

08009cf0 <_read_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	@ (8009d10 <_read_r+0x20>)
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	4608      	mov	r0, r1
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7f9 fc2f 	bl	8003562 <_read>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_read_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_read_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20000ab8 	.word	0x20000ab8

08009d14 <_write_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d07      	ldr	r5, [pc, #28]	@ (8009d34 <_write_r+0x20>)
 8009d18:	4604      	mov	r4, r0
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f7f6 ff06 	bl	8000b34 <_write>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_write_r+0x1e>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_write_r+0x1e>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	20000ab8 	.word	0x20000ab8

08009d38 <__errno>:
 8009d38:	4b01      	ldr	r3, [pc, #4]	@ (8009d40 <__errno+0x8>)
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	20000198 	.word	0x20000198

08009d44 <__libc_init_array>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	4d0d      	ldr	r5, [pc, #52]	@ (8009d7c <__libc_init_array+0x38>)
 8009d48:	4c0d      	ldr	r4, [pc, #52]	@ (8009d80 <__libc_init_array+0x3c>)
 8009d4a:	1b64      	subs	r4, r4, r5
 8009d4c:	10a4      	asrs	r4, r4, #2
 8009d4e:	2600      	movs	r6, #0
 8009d50:	42a6      	cmp	r6, r4
 8009d52:	d109      	bne.n	8009d68 <__libc_init_array+0x24>
 8009d54:	4d0b      	ldr	r5, [pc, #44]	@ (8009d84 <__libc_init_array+0x40>)
 8009d56:	4c0c      	ldr	r4, [pc, #48]	@ (8009d88 <__libc_init_array+0x44>)
 8009d58:	f001 fe64 	bl	800ba24 <_init>
 8009d5c:	1b64      	subs	r4, r4, r5
 8009d5e:	10a4      	asrs	r4, r4, #2
 8009d60:	2600      	movs	r6, #0
 8009d62:	42a6      	cmp	r6, r4
 8009d64:	d105      	bne.n	8009d72 <__libc_init_array+0x2e>
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d6c:	4798      	blx	r3
 8009d6e:	3601      	adds	r6, #1
 8009d70:	e7ee      	b.n	8009d50 <__libc_init_array+0xc>
 8009d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d76:	4798      	blx	r3
 8009d78:	3601      	adds	r6, #1
 8009d7a:	e7f2      	b.n	8009d62 <__libc_init_array+0x1e>
 8009d7c:	0800bed8 	.word	0x0800bed8
 8009d80:	0800bed8 	.word	0x0800bed8
 8009d84:	0800bed8 	.word	0x0800bed8
 8009d88:	0800bedc 	.word	0x0800bedc

08009d8c <__retarget_lock_init_recursive>:
 8009d8c:	4770      	bx	lr

08009d8e <__retarget_lock_acquire_recursive>:
 8009d8e:	4770      	bx	lr

08009d90 <__retarget_lock_release_recursive>:
 8009d90:	4770      	bx	lr

08009d92 <memcpy>:
 8009d92:	440a      	add	r2, r1
 8009d94:	4291      	cmp	r1, r2
 8009d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d9a:	d100      	bne.n	8009d9e <memcpy+0xc>
 8009d9c:	4770      	bx	lr
 8009d9e:	b510      	push	{r4, lr}
 8009da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009da8:	4291      	cmp	r1, r2
 8009daa:	d1f9      	bne.n	8009da0 <memcpy+0xe>
 8009dac:	bd10      	pop	{r4, pc}
	...

08009db0 <nan>:
 8009db0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009db8 <nan+0x8>
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	00000000 	.word	0x00000000
 8009dbc:	7ff80000 	.word	0x7ff80000

08009dc0 <_free_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d041      	beq.n	8009e4c <_free_r+0x8c>
 8009dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dcc:	1f0c      	subs	r4, r1, #4
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	18e4      	addlt	r4, r4, r3
 8009dd4:	f000 fc2c 	bl	800a630 <__malloc_lock>
 8009dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e50 <_free_r+0x90>)
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	b933      	cbnz	r3, 8009dec <_free_r+0x2c>
 8009dde:	6063      	str	r3, [r4, #4]
 8009de0:	6014      	str	r4, [r2, #0]
 8009de2:	4628      	mov	r0, r5
 8009de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de8:	f000 bc28 	b.w	800a63c <__malloc_unlock>
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	d908      	bls.n	8009e02 <_free_r+0x42>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	1821      	adds	r1, r4, r0
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf01      	itttt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	e7ed      	b.n	8009dde <_free_r+0x1e>
 8009e02:	461a      	mov	r2, r3
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b10b      	cbz	r3, 8009e0c <_free_r+0x4c>
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d9fa      	bls.n	8009e02 <_free_r+0x42>
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	1850      	adds	r0, r2, r1
 8009e10:	42a0      	cmp	r0, r4
 8009e12:	d10b      	bne.n	8009e2c <_free_r+0x6c>
 8009e14:	6820      	ldr	r0, [r4, #0]
 8009e16:	4401      	add	r1, r0
 8009e18:	1850      	adds	r0, r2, r1
 8009e1a:	4283      	cmp	r3, r0
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	d1e0      	bne.n	8009de2 <_free_r+0x22>
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	6053      	str	r3, [r2, #4]
 8009e26:	4408      	add	r0, r1
 8009e28:	6010      	str	r0, [r2, #0]
 8009e2a:	e7da      	b.n	8009de2 <_free_r+0x22>
 8009e2c:	d902      	bls.n	8009e34 <_free_r+0x74>
 8009e2e:	230c      	movs	r3, #12
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	e7d6      	b.n	8009de2 <_free_r+0x22>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	1821      	adds	r1, r4, r0
 8009e38:	428b      	cmp	r3, r1
 8009e3a:	bf04      	itt	eq
 8009e3c:	6819      	ldreq	r1, [r3, #0]
 8009e3e:	685b      	ldreq	r3, [r3, #4]
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	bf04      	itt	eq
 8009e44:	1809      	addeq	r1, r1, r0
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	6054      	str	r4, [r2, #4]
 8009e4a:	e7ca      	b.n	8009de2 <_free_r+0x22>
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000ac4 	.word	0x20000ac4

08009e54 <rshift>:
 8009e54:	6903      	ldr	r3, [r0, #16]
 8009e56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e62:	f100 0414 	add.w	r4, r0, #20
 8009e66:	dd45      	ble.n	8009ef4 <rshift+0xa0>
 8009e68:	f011 011f 	ands.w	r1, r1, #31
 8009e6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e74:	d10c      	bne.n	8009e90 <rshift+0x3c>
 8009e76:	f100 0710 	add.w	r7, r0, #16
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	42b1      	cmp	r1, r6
 8009e7e:	d334      	bcc.n	8009eea <rshift+0x96>
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	1eea      	subs	r2, r5, #3
 8009e86:	4296      	cmp	r6, r2
 8009e88:	bf38      	it	cc
 8009e8a:	2300      	movcc	r3, #0
 8009e8c:	4423      	add	r3, r4
 8009e8e:	e015      	b.n	8009ebc <rshift+0x68>
 8009e90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e94:	f1c1 0820 	rsb	r8, r1, #32
 8009e98:	40cf      	lsrs	r7, r1
 8009e9a:	f105 0e04 	add.w	lr, r5, #4
 8009e9e:	46a1      	mov	r9, r4
 8009ea0:	4576      	cmp	r6, lr
 8009ea2:	46f4      	mov	ip, lr
 8009ea4:	d815      	bhi.n	8009ed2 <rshift+0x7e>
 8009ea6:	1a9a      	subs	r2, r3, r2
 8009ea8:	0092      	lsls	r2, r2, #2
 8009eaa:	3a04      	subs	r2, #4
 8009eac:	3501      	adds	r5, #1
 8009eae:	42ae      	cmp	r6, r5
 8009eb0:	bf38      	it	cc
 8009eb2:	2200      	movcc	r2, #0
 8009eb4:	18a3      	adds	r3, r4, r2
 8009eb6:	50a7      	str	r7, [r4, r2]
 8009eb8:	b107      	cbz	r7, 8009ebc <rshift+0x68>
 8009eba:	3304      	adds	r3, #4
 8009ebc:	1b1a      	subs	r2, r3, r4
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ec4:	bf08      	it	eq
 8009ec6:	2300      	moveq	r3, #0
 8009ec8:	6102      	str	r2, [r0, #16]
 8009eca:	bf08      	it	eq
 8009ecc:	6143      	streq	r3, [r0, #20]
 8009ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	f8dc c000 	ldr.w	ip, [ip]
 8009ed6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009eda:	ea4c 0707 	orr.w	r7, ip, r7
 8009ede:	f849 7b04 	str.w	r7, [r9], #4
 8009ee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ee6:	40cf      	lsrs	r7, r1
 8009ee8:	e7da      	b.n	8009ea0 <rshift+0x4c>
 8009eea:	f851 cb04 	ldr.w	ip, [r1], #4
 8009eee:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ef2:	e7c3      	b.n	8009e7c <rshift+0x28>
 8009ef4:	4623      	mov	r3, r4
 8009ef6:	e7e1      	b.n	8009ebc <rshift+0x68>

08009ef8 <__hexdig_fun>:
 8009ef8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d802      	bhi.n	8009f06 <__hexdig_fun+0xe>
 8009f00:	3820      	subs	r0, #32
 8009f02:	b2c0      	uxtb	r0, r0
 8009f04:	4770      	bx	lr
 8009f06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	d801      	bhi.n	8009f12 <__hexdig_fun+0x1a>
 8009f0e:	3847      	subs	r0, #71	@ 0x47
 8009f10:	e7f7      	b.n	8009f02 <__hexdig_fun+0xa>
 8009f12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f16:	2b05      	cmp	r3, #5
 8009f18:	d801      	bhi.n	8009f1e <__hexdig_fun+0x26>
 8009f1a:	3827      	subs	r0, #39	@ 0x27
 8009f1c:	e7f1      	b.n	8009f02 <__hexdig_fun+0xa>
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4770      	bx	lr
	...

08009f24 <__gethex>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	b085      	sub	sp, #20
 8009f2a:	468a      	mov	sl, r1
 8009f2c:	9302      	str	r3, [sp, #8]
 8009f2e:	680b      	ldr	r3, [r1, #0]
 8009f30:	9001      	str	r0, [sp, #4]
 8009f32:	4690      	mov	r8, r2
 8009f34:	1c9c      	adds	r4, r3, #2
 8009f36:	46a1      	mov	r9, r4
 8009f38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f3c:	2830      	cmp	r0, #48	@ 0x30
 8009f3e:	d0fa      	beq.n	8009f36 <__gethex+0x12>
 8009f40:	eba9 0303 	sub.w	r3, r9, r3
 8009f44:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f48:	f7ff ffd6 	bl	8009ef8 <__hexdig_fun>
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d168      	bne.n	800a024 <__gethex+0x100>
 8009f52:	49a0      	ldr	r1, [pc, #640]	@ (800a1d4 <__gethex+0x2b0>)
 8009f54:	2201      	movs	r2, #1
 8009f56:	4648      	mov	r0, r9
 8009f58:	f7ff fe96 	bl	8009c88 <strncmp>
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d167      	bne.n	800a032 <__gethex+0x10e>
 8009f62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f66:	4626      	mov	r6, r4
 8009f68:	f7ff ffc6 	bl	8009ef8 <__hexdig_fun>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d062      	beq.n	800a036 <__gethex+0x112>
 8009f70:	4623      	mov	r3, r4
 8009f72:	7818      	ldrb	r0, [r3, #0]
 8009f74:	2830      	cmp	r0, #48	@ 0x30
 8009f76:	4699      	mov	r9, r3
 8009f78:	f103 0301 	add.w	r3, r3, #1
 8009f7c:	d0f9      	beq.n	8009f72 <__gethex+0x4e>
 8009f7e:	f7ff ffbb 	bl	8009ef8 <__hexdig_fun>
 8009f82:	fab0 f580 	clz	r5, r0
 8009f86:	096d      	lsrs	r5, r5, #5
 8009f88:	f04f 0b01 	mov.w	fp, #1
 8009f8c:	464a      	mov	r2, r9
 8009f8e:	4616      	mov	r6, r2
 8009f90:	3201      	adds	r2, #1
 8009f92:	7830      	ldrb	r0, [r6, #0]
 8009f94:	f7ff ffb0 	bl	8009ef8 <__hexdig_fun>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1f8      	bne.n	8009f8e <__gethex+0x6a>
 8009f9c:	498d      	ldr	r1, [pc, #564]	@ (800a1d4 <__gethex+0x2b0>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff fe71 	bl	8009c88 <strncmp>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d13f      	bne.n	800a02a <__gethex+0x106>
 8009faa:	b944      	cbnz	r4, 8009fbe <__gethex+0x9a>
 8009fac:	1c74      	adds	r4, r6, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	3201      	adds	r2, #1
 8009fb4:	7830      	ldrb	r0, [r6, #0]
 8009fb6:	f7ff ff9f 	bl	8009ef8 <__hexdig_fun>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d1f8      	bne.n	8009fb0 <__gethex+0x8c>
 8009fbe:	1ba4      	subs	r4, r4, r6
 8009fc0:	00a7      	lsls	r7, r4, #2
 8009fc2:	7833      	ldrb	r3, [r6, #0]
 8009fc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009fc8:	2b50      	cmp	r3, #80	@ 0x50
 8009fca:	d13e      	bne.n	800a04a <__gethex+0x126>
 8009fcc:	7873      	ldrb	r3, [r6, #1]
 8009fce:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fd0:	d033      	beq.n	800a03a <__gethex+0x116>
 8009fd2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fd4:	d034      	beq.n	800a040 <__gethex+0x11c>
 8009fd6:	1c71      	adds	r1, r6, #1
 8009fd8:	2400      	movs	r4, #0
 8009fda:	7808      	ldrb	r0, [r1, #0]
 8009fdc:	f7ff ff8c 	bl	8009ef8 <__hexdig_fun>
 8009fe0:	1e43      	subs	r3, r0, #1
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	2b18      	cmp	r3, #24
 8009fe6:	d830      	bhi.n	800a04a <__gethex+0x126>
 8009fe8:	f1a0 0210 	sub.w	r2, r0, #16
 8009fec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ff0:	f7ff ff82 	bl	8009ef8 <__hexdig_fun>
 8009ff4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009ff8:	fa5f fc8c 	uxtb.w	ip, ip
 8009ffc:	f1bc 0f18 	cmp.w	ip, #24
 800a000:	f04f 030a 	mov.w	r3, #10
 800a004:	d91e      	bls.n	800a044 <__gethex+0x120>
 800a006:	b104      	cbz	r4, 800a00a <__gethex+0xe6>
 800a008:	4252      	negs	r2, r2
 800a00a:	4417      	add	r7, r2
 800a00c:	f8ca 1000 	str.w	r1, [sl]
 800a010:	b1ed      	cbz	r5, 800a04e <__gethex+0x12a>
 800a012:	f1bb 0f00 	cmp.w	fp, #0
 800a016:	bf0c      	ite	eq
 800a018:	2506      	moveq	r5, #6
 800a01a:	2500      	movne	r5, #0
 800a01c:	4628      	mov	r0, r5
 800a01e:	b005      	add	sp, #20
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	2500      	movs	r5, #0
 800a026:	462c      	mov	r4, r5
 800a028:	e7b0      	b.n	8009f8c <__gethex+0x68>
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d1c7      	bne.n	8009fbe <__gethex+0x9a>
 800a02e:	4627      	mov	r7, r4
 800a030:	e7c7      	b.n	8009fc2 <__gethex+0x9e>
 800a032:	464e      	mov	r6, r9
 800a034:	462f      	mov	r7, r5
 800a036:	2501      	movs	r5, #1
 800a038:	e7c3      	b.n	8009fc2 <__gethex+0x9e>
 800a03a:	2400      	movs	r4, #0
 800a03c:	1cb1      	adds	r1, r6, #2
 800a03e:	e7cc      	b.n	8009fda <__gethex+0xb6>
 800a040:	2401      	movs	r4, #1
 800a042:	e7fb      	b.n	800a03c <__gethex+0x118>
 800a044:	fb03 0002 	mla	r0, r3, r2, r0
 800a048:	e7ce      	b.n	8009fe8 <__gethex+0xc4>
 800a04a:	4631      	mov	r1, r6
 800a04c:	e7de      	b.n	800a00c <__gethex+0xe8>
 800a04e:	eba6 0309 	sub.w	r3, r6, r9
 800a052:	3b01      	subs	r3, #1
 800a054:	4629      	mov	r1, r5
 800a056:	2b07      	cmp	r3, #7
 800a058:	dc0a      	bgt.n	800a070 <__gethex+0x14c>
 800a05a:	9801      	ldr	r0, [sp, #4]
 800a05c:	f000 faf4 	bl	800a648 <_Balloc>
 800a060:	4604      	mov	r4, r0
 800a062:	b940      	cbnz	r0, 800a076 <__gethex+0x152>
 800a064:	4b5c      	ldr	r3, [pc, #368]	@ (800a1d8 <__gethex+0x2b4>)
 800a066:	4602      	mov	r2, r0
 800a068:	21e4      	movs	r1, #228	@ 0xe4
 800a06a:	485c      	ldr	r0, [pc, #368]	@ (800a1dc <__gethex+0x2b8>)
 800a06c:	f001 fbec 	bl	800b848 <__assert_func>
 800a070:	3101      	adds	r1, #1
 800a072:	105b      	asrs	r3, r3, #1
 800a074:	e7ef      	b.n	800a056 <__gethex+0x132>
 800a076:	f100 0a14 	add.w	sl, r0, #20
 800a07a:	2300      	movs	r3, #0
 800a07c:	4655      	mov	r5, sl
 800a07e:	469b      	mov	fp, r3
 800a080:	45b1      	cmp	r9, r6
 800a082:	d337      	bcc.n	800a0f4 <__gethex+0x1d0>
 800a084:	f845 bb04 	str.w	fp, [r5], #4
 800a088:	eba5 050a 	sub.w	r5, r5, sl
 800a08c:	10ad      	asrs	r5, r5, #2
 800a08e:	6125      	str	r5, [r4, #16]
 800a090:	4658      	mov	r0, fp
 800a092:	f000 fbcb 	bl	800a82c <__hi0bits>
 800a096:	016d      	lsls	r5, r5, #5
 800a098:	f8d8 6000 	ldr.w	r6, [r8]
 800a09c:	1a2d      	subs	r5, r5, r0
 800a09e:	42b5      	cmp	r5, r6
 800a0a0:	dd54      	ble.n	800a14c <__gethex+0x228>
 800a0a2:	1bad      	subs	r5, r5, r6
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 ff5c 	bl	800af64 <__any_on>
 800a0ac:	4681      	mov	r9, r0
 800a0ae:	b178      	cbz	r0, 800a0d0 <__gethex+0x1ac>
 800a0b0:	1e6b      	subs	r3, r5, #1
 800a0b2:	1159      	asrs	r1, r3, #5
 800a0b4:	f003 021f 	and.w	r2, r3, #31
 800a0b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a0bc:	f04f 0901 	mov.w	r9, #1
 800a0c0:	fa09 f202 	lsl.w	r2, r9, r2
 800a0c4:	420a      	tst	r2, r1
 800a0c6:	d003      	beq.n	800a0d0 <__gethex+0x1ac>
 800a0c8:	454b      	cmp	r3, r9
 800a0ca:	dc36      	bgt.n	800a13a <__gethex+0x216>
 800a0cc:	f04f 0902 	mov.w	r9, #2
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7ff febe 	bl	8009e54 <rshift>
 800a0d8:	442f      	add	r7, r5
 800a0da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0de:	42bb      	cmp	r3, r7
 800a0e0:	da42      	bge.n	800a168 <__gethex+0x244>
 800a0e2:	9801      	ldr	r0, [sp, #4]
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	f000 faef 	bl	800a6c8 <_Bfree>
 800a0ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	6013      	str	r3, [r2, #0]
 800a0f0:	25a3      	movs	r5, #163	@ 0xa3
 800a0f2:	e793      	b.n	800a01c <__gethex+0xf8>
 800a0f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0fa:	d012      	beq.n	800a122 <__gethex+0x1fe>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d104      	bne.n	800a10a <__gethex+0x1e6>
 800a100:	f845 bb04 	str.w	fp, [r5], #4
 800a104:	f04f 0b00 	mov.w	fp, #0
 800a108:	465b      	mov	r3, fp
 800a10a:	7830      	ldrb	r0, [r6, #0]
 800a10c:	9303      	str	r3, [sp, #12]
 800a10e:	f7ff fef3 	bl	8009ef8 <__hexdig_fun>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	f000 000f 	and.w	r0, r0, #15
 800a118:	4098      	lsls	r0, r3
 800a11a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a11e:	3304      	adds	r3, #4
 800a120:	e7ae      	b.n	800a080 <__gethex+0x15c>
 800a122:	45b1      	cmp	r9, r6
 800a124:	d8ea      	bhi.n	800a0fc <__gethex+0x1d8>
 800a126:	492b      	ldr	r1, [pc, #172]	@ (800a1d4 <__gethex+0x2b0>)
 800a128:	9303      	str	r3, [sp, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	4630      	mov	r0, r6
 800a12e:	f7ff fdab 	bl	8009c88 <strncmp>
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	2800      	cmp	r0, #0
 800a136:	d1e1      	bne.n	800a0fc <__gethex+0x1d8>
 800a138:	e7a2      	b.n	800a080 <__gethex+0x15c>
 800a13a:	1ea9      	subs	r1, r5, #2
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 ff11 	bl	800af64 <__any_on>
 800a142:	2800      	cmp	r0, #0
 800a144:	d0c2      	beq.n	800a0cc <__gethex+0x1a8>
 800a146:	f04f 0903 	mov.w	r9, #3
 800a14a:	e7c1      	b.n	800a0d0 <__gethex+0x1ac>
 800a14c:	da09      	bge.n	800a162 <__gethex+0x23e>
 800a14e:	1b75      	subs	r5, r6, r5
 800a150:	4621      	mov	r1, r4
 800a152:	9801      	ldr	r0, [sp, #4]
 800a154:	462a      	mov	r2, r5
 800a156:	f000 fccf 	bl	800aaf8 <__lshift>
 800a15a:	1b7f      	subs	r7, r7, r5
 800a15c:	4604      	mov	r4, r0
 800a15e:	f100 0a14 	add.w	sl, r0, #20
 800a162:	f04f 0900 	mov.w	r9, #0
 800a166:	e7b8      	b.n	800a0da <__gethex+0x1b6>
 800a168:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a16c:	42bd      	cmp	r5, r7
 800a16e:	dd6f      	ble.n	800a250 <__gethex+0x32c>
 800a170:	1bed      	subs	r5, r5, r7
 800a172:	42ae      	cmp	r6, r5
 800a174:	dc34      	bgt.n	800a1e0 <__gethex+0x2bc>
 800a176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d022      	beq.n	800a1c4 <__gethex+0x2a0>
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d024      	beq.n	800a1cc <__gethex+0x2a8>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d115      	bne.n	800a1b2 <__gethex+0x28e>
 800a186:	42ae      	cmp	r6, r5
 800a188:	d113      	bne.n	800a1b2 <__gethex+0x28e>
 800a18a:	2e01      	cmp	r6, #1
 800a18c:	d10b      	bne.n	800a1a6 <__gethex+0x282>
 800a18e:	9a02      	ldr	r2, [sp, #8]
 800a190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	2301      	movs	r3, #1
 800a198:	6123      	str	r3, [r4, #16]
 800a19a:	f8ca 3000 	str.w	r3, [sl]
 800a19e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1a0:	2562      	movs	r5, #98	@ 0x62
 800a1a2:	601c      	str	r4, [r3, #0]
 800a1a4:	e73a      	b.n	800a01c <__gethex+0xf8>
 800a1a6:	1e71      	subs	r1, r6, #1
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 fedb 	bl	800af64 <__any_on>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d1ed      	bne.n	800a18e <__gethex+0x26a>
 800a1b2:	9801      	ldr	r0, [sp, #4]
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	f000 fa87 	bl	800a6c8 <_Bfree>
 800a1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1bc:	2300      	movs	r3, #0
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	2550      	movs	r5, #80	@ 0x50
 800a1c2:	e72b      	b.n	800a01c <__gethex+0xf8>
 800a1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1f3      	bne.n	800a1b2 <__gethex+0x28e>
 800a1ca:	e7e0      	b.n	800a18e <__gethex+0x26a>
 800a1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1dd      	bne.n	800a18e <__gethex+0x26a>
 800a1d2:	e7ee      	b.n	800a1b2 <__gethex+0x28e>
 800a1d4:	0800bb18 	.word	0x0800bb18
 800a1d8:	0800bb80 	.word	0x0800bb80
 800a1dc:	0800bb91 	.word	0x0800bb91
 800a1e0:	1e6f      	subs	r7, r5, #1
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d130      	bne.n	800a24a <__gethex+0x326>
 800a1e8:	b127      	cbz	r7, 800a1f4 <__gethex+0x2d0>
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 feb9 	bl	800af64 <__any_on>
 800a1f2:	4681      	mov	r9, r0
 800a1f4:	117a      	asrs	r2, r7, #5
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1fc:	f007 071f 	and.w	r7, r7, #31
 800a200:	40bb      	lsls	r3, r7
 800a202:	4213      	tst	r3, r2
 800a204:	4629      	mov	r1, r5
 800a206:	4620      	mov	r0, r4
 800a208:	bf18      	it	ne
 800a20a:	f049 0902 	orrne.w	r9, r9, #2
 800a20e:	f7ff fe21 	bl	8009e54 <rshift>
 800a212:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a216:	1b76      	subs	r6, r6, r5
 800a218:	2502      	movs	r5, #2
 800a21a:	f1b9 0f00 	cmp.w	r9, #0
 800a21e:	d047      	beq.n	800a2b0 <__gethex+0x38c>
 800a220:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a224:	2b02      	cmp	r3, #2
 800a226:	d015      	beq.n	800a254 <__gethex+0x330>
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d017      	beq.n	800a25c <__gethex+0x338>
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d109      	bne.n	800a244 <__gethex+0x320>
 800a230:	f019 0f02 	tst.w	r9, #2
 800a234:	d006      	beq.n	800a244 <__gethex+0x320>
 800a236:	f8da 3000 	ldr.w	r3, [sl]
 800a23a:	ea49 0903 	orr.w	r9, r9, r3
 800a23e:	f019 0f01 	tst.w	r9, #1
 800a242:	d10e      	bne.n	800a262 <__gethex+0x33e>
 800a244:	f045 0510 	orr.w	r5, r5, #16
 800a248:	e032      	b.n	800a2b0 <__gethex+0x38c>
 800a24a:	f04f 0901 	mov.w	r9, #1
 800a24e:	e7d1      	b.n	800a1f4 <__gethex+0x2d0>
 800a250:	2501      	movs	r5, #1
 800a252:	e7e2      	b.n	800a21a <__gethex+0x2f6>
 800a254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a256:	f1c3 0301 	rsb	r3, r3, #1
 800a25a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0f0      	beq.n	800a244 <__gethex+0x320>
 800a262:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a266:	f104 0314 	add.w	r3, r4, #20
 800a26a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a26e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a272:	f04f 0c00 	mov.w	ip, #0
 800a276:	4618      	mov	r0, r3
 800a278:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a280:	d01b      	beq.n	800a2ba <__gethex+0x396>
 800a282:	3201      	adds	r2, #1
 800a284:	6002      	str	r2, [r0, #0]
 800a286:	2d02      	cmp	r5, #2
 800a288:	f104 0314 	add.w	r3, r4, #20
 800a28c:	d13c      	bne.n	800a308 <__gethex+0x3e4>
 800a28e:	f8d8 2000 	ldr.w	r2, [r8]
 800a292:	3a01      	subs	r2, #1
 800a294:	42b2      	cmp	r2, r6
 800a296:	d109      	bne.n	800a2ac <__gethex+0x388>
 800a298:	1171      	asrs	r1, r6, #5
 800a29a:	2201      	movs	r2, #1
 800a29c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2a0:	f006 061f 	and.w	r6, r6, #31
 800a2a4:	fa02 f606 	lsl.w	r6, r2, r6
 800a2a8:	421e      	tst	r6, r3
 800a2aa:	d13a      	bne.n	800a322 <__gethex+0x3fe>
 800a2ac:	f045 0520 	orr.w	r5, r5, #32
 800a2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2b2:	601c      	str	r4, [r3, #0]
 800a2b4:	9b02      	ldr	r3, [sp, #8]
 800a2b6:	601f      	str	r7, [r3, #0]
 800a2b8:	e6b0      	b.n	800a01c <__gethex+0xf8>
 800a2ba:	4299      	cmp	r1, r3
 800a2bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2c0:	d8d9      	bhi.n	800a276 <__gethex+0x352>
 800a2c2:	68a3      	ldr	r3, [r4, #8]
 800a2c4:	459b      	cmp	fp, r3
 800a2c6:	db17      	blt.n	800a2f8 <__gethex+0x3d4>
 800a2c8:	6861      	ldr	r1, [r4, #4]
 800a2ca:	9801      	ldr	r0, [sp, #4]
 800a2cc:	3101      	adds	r1, #1
 800a2ce:	f000 f9bb 	bl	800a648 <_Balloc>
 800a2d2:	4681      	mov	r9, r0
 800a2d4:	b918      	cbnz	r0, 800a2de <__gethex+0x3ba>
 800a2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a340 <__gethex+0x41c>)
 800a2d8:	4602      	mov	r2, r0
 800a2da:	2184      	movs	r1, #132	@ 0x84
 800a2dc:	e6c5      	b.n	800a06a <__gethex+0x146>
 800a2de:	6922      	ldr	r2, [r4, #16]
 800a2e0:	3202      	adds	r2, #2
 800a2e2:	f104 010c 	add.w	r1, r4, #12
 800a2e6:	0092      	lsls	r2, r2, #2
 800a2e8:	300c      	adds	r0, #12
 800a2ea:	f7ff fd52 	bl	8009d92 <memcpy>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	9801      	ldr	r0, [sp, #4]
 800a2f2:	f000 f9e9 	bl	800a6c8 <_Bfree>
 800a2f6:	464c      	mov	r4, r9
 800a2f8:	6923      	ldr	r3, [r4, #16]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a300:	6122      	str	r2, [r4, #16]
 800a302:	2201      	movs	r2, #1
 800a304:	615a      	str	r2, [r3, #20]
 800a306:	e7be      	b.n	800a286 <__gethex+0x362>
 800a308:	6922      	ldr	r2, [r4, #16]
 800a30a:	455a      	cmp	r2, fp
 800a30c:	dd0b      	ble.n	800a326 <__gethex+0x402>
 800a30e:	2101      	movs	r1, #1
 800a310:	4620      	mov	r0, r4
 800a312:	f7ff fd9f 	bl	8009e54 <rshift>
 800a316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a31a:	3701      	adds	r7, #1
 800a31c:	42bb      	cmp	r3, r7
 800a31e:	f6ff aee0 	blt.w	800a0e2 <__gethex+0x1be>
 800a322:	2501      	movs	r5, #1
 800a324:	e7c2      	b.n	800a2ac <__gethex+0x388>
 800a326:	f016 061f 	ands.w	r6, r6, #31
 800a32a:	d0fa      	beq.n	800a322 <__gethex+0x3fe>
 800a32c:	4453      	add	r3, sl
 800a32e:	f1c6 0620 	rsb	r6, r6, #32
 800a332:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a336:	f000 fa79 	bl	800a82c <__hi0bits>
 800a33a:	42b0      	cmp	r0, r6
 800a33c:	dbe7      	blt.n	800a30e <__gethex+0x3ea>
 800a33e:	e7f0      	b.n	800a322 <__gethex+0x3fe>
 800a340:	0800bb80 	.word	0x0800bb80

0800a344 <L_shift>:
 800a344:	f1c2 0208 	rsb	r2, r2, #8
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	b570      	push	{r4, r5, r6, lr}
 800a34c:	f1c2 0620 	rsb	r6, r2, #32
 800a350:	6843      	ldr	r3, [r0, #4]
 800a352:	6804      	ldr	r4, [r0, #0]
 800a354:	fa03 f506 	lsl.w	r5, r3, r6
 800a358:	432c      	orrs	r4, r5
 800a35a:	40d3      	lsrs	r3, r2
 800a35c:	6004      	str	r4, [r0, #0]
 800a35e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a362:	4288      	cmp	r0, r1
 800a364:	d3f4      	bcc.n	800a350 <L_shift+0xc>
 800a366:	bd70      	pop	{r4, r5, r6, pc}

0800a368 <__match>:
 800a368:	b530      	push	{r4, r5, lr}
 800a36a:	6803      	ldr	r3, [r0, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a372:	b914      	cbnz	r4, 800a37a <__match+0x12>
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	2001      	movs	r0, #1
 800a378:	bd30      	pop	{r4, r5, pc}
 800a37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a382:	2d19      	cmp	r5, #25
 800a384:	bf98      	it	ls
 800a386:	3220      	addls	r2, #32
 800a388:	42a2      	cmp	r2, r4
 800a38a:	d0f0      	beq.n	800a36e <__match+0x6>
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7f3      	b.n	800a378 <__match+0x10>

0800a390 <__hexnan>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	680b      	ldr	r3, [r1, #0]
 800a396:	6801      	ldr	r1, [r0, #0]
 800a398:	115e      	asrs	r6, r3, #5
 800a39a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a39e:	f013 031f 	ands.w	r3, r3, #31
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	bf18      	it	ne
 800a3a6:	3604      	addne	r6, #4
 800a3a8:	2500      	movs	r5, #0
 800a3aa:	1f37      	subs	r7, r6, #4
 800a3ac:	4682      	mov	sl, r0
 800a3ae:	4690      	mov	r8, r2
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3b6:	46b9      	mov	r9, r7
 800a3b8:	463c      	mov	r4, r7
 800a3ba:	9502      	str	r5, [sp, #8]
 800a3bc:	46ab      	mov	fp, r5
 800a3be:	784a      	ldrb	r2, [r1, #1]
 800a3c0:	1c4b      	adds	r3, r1, #1
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	b342      	cbz	r2, 800a418 <__hexnan+0x88>
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	9105      	str	r1, [sp, #20]
 800a3ca:	9204      	str	r2, [sp, #16]
 800a3cc:	f7ff fd94 	bl	8009ef8 <__hexdig_fun>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d151      	bne.n	800a478 <__hexnan+0xe8>
 800a3d4:	9a04      	ldr	r2, [sp, #16]
 800a3d6:	9905      	ldr	r1, [sp, #20]
 800a3d8:	2a20      	cmp	r2, #32
 800a3da:	d818      	bhi.n	800a40e <__hexnan+0x7e>
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	459b      	cmp	fp, r3
 800a3e0:	dd13      	ble.n	800a40a <__hexnan+0x7a>
 800a3e2:	454c      	cmp	r4, r9
 800a3e4:	d206      	bcs.n	800a3f4 <__hexnan+0x64>
 800a3e6:	2d07      	cmp	r5, #7
 800a3e8:	dc04      	bgt.n	800a3f4 <__hexnan+0x64>
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff ffa8 	bl	800a344 <L_shift>
 800a3f4:	4544      	cmp	r4, r8
 800a3f6:	d952      	bls.n	800a49e <__hexnan+0x10e>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a3fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a402:	f8cd b008 	str.w	fp, [sp, #8]
 800a406:	464c      	mov	r4, r9
 800a408:	461d      	mov	r5, r3
 800a40a:	9903      	ldr	r1, [sp, #12]
 800a40c:	e7d7      	b.n	800a3be <__hexnan+0x2e>
 800a40e:	2a29      	cmp	r2, #41	@ 0x29
 800a410:	d157      	bne.n	800a4c2 <__hexnan+0x132>
 800a412:	3102      	adds	r1, #2
 800a414:	f8ca 1000 	str.w	r1, [sl]
 800a418:	f1bb 0f00 	cmp.w	fp, #0
 800a41c:	d051      	beq.n	800a4c2 <__hexnan+0x132>
 800a41e:	454c      	cmp	r4, r9
 800a420:	d206      	bcs.n	800a430 <__hexnan+0xa0>
 800a422:	2d07      	cmp	r5, #7
 800a424:	dc04      	bgt.n	800a430 <__hexnan+0xa0>
 800a426:	462a      	mov	r2, r5
 800a428:	4649      	mov	r1, r9
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7ff ff8a 	bl	800a344 <L_shift>
 800a430:	4544      	cmp	r4, r8
 800a432:	d936      	bls.n	800a4a2 <__hexnan+0x112>
 800a434:	f1a8 0204 	sub.w	r2, r8, #4
 800a438:	4623      	mov	r3, r4
 800a43a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a43e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a442:	429f      	cmp	r7, r3
 800a444:	d2f9      	bcs.n	800a43a <__hexnan+0xaa>
 800a446:	1b3b      	subs	r3, r7, r4
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	3401      	adds	r4, #1
 800a450:	3e03      	subs	r6, #3
 800a452:	42b4      	cmp	r4, r6
 800a454:	bf88      	it	hi
 800a456:	2304      	movhi	r3, #4
 800a458:	4443      	add	r3, r8
 800a45a:	2200      	movs	r2, #0
 800a45c:	f843 2b04 	str.w	r2, [r3], #4
 800a460:	429f      	cmp	r7, r3
 800a462:	d2fb      	bcs.n	800a45c <__hexnan+0xcc>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	b91b      	cbnz	r3, 800a470 <__hexnan+0xe0>
 800a468:	4547      	cmp	r7, r8
 800a46a:	d128      	bne.n	800a4be <__hexnan+0x12e>
 800a46c:	2301      	movs	r3, #1
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	2005      	movs	r0, #5
 800a472:	b007      	add	sp, #28
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	3501      	adds	r5, #1
 800a47a:	2d08      	cmp	r5, #8
 800a47c:	f10b 0b01 	add.w	fp, fp, #1
 800a480:	dd06      	ble.n	800a490 <__hexnan+0x100>
 800a482:	4544      	cmp	r4, r8
 800a484:	d9c1      	bls.n	800a40a <__hexnan+0x7a>
 800a486:	2300      	movs	r3, #0
 800a488:	f844 3c04 	str.w	r3, [r4, #-4]
 800a48c:	2501      	movs	r5, #1
 800a48e:	3c04      	subs	r4, #4
 800a490:	6822      	ldr	r2, [r4, #0]
 800a492:	f000 000f 	and.w	r0, r0, #15
 800a496:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a49a:	6020      	str	r0, [r4, #0]
 800a49c:	e7b5      	b.n	800a40a <__hexnan+0x7a>
 800a49e:	2508      	movs	r5, #8
 800a4a0:	e7b3      	b.n	800a40a <__hexnan+0x7a>
 800a4a2:	9b01      	ldr	r3, [sp, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0dd      	beq.n	800a464 <__hexnan+0xd4>
 800a4a8:	f1c3 0320 	rsb	r3, r3, #32
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b0:	40da      	lsrs	r2, r3
 800a4b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a4bc:	e7d2      	b.n	800a464 <__hexnan+0xd4>
 800a4be:	3f04      	subs	r7, #4
 800a4c0:	e7d0      	b.n	800a464 <__hexnan+0xd4>
 800a4c2:	2004      	movs	r0, #4
 800a4c4:	e7d5      	b.n	800a472 <__hexnan+0xe2>
	...

0800a4c8 <sbrk_aligned>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a508 <sbrk_aligned+0x40>)
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	6831      	ldr	r1, [r6, #0]
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	b911      	cbnz	r1, 800a4da <sbrk_aligned+0x12>
 800a4d4:	f001 f9a8 	bl	800b828 <_sbrk_r>
 800a4d8:	6030      	str	r0, [r6, #0]
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f001 f9a3 	bl	800b828 <_sbrk_r>
 800a4e2:	1c43      	adds	r3, r0, #1
 800a4e4:	d103      	bne.n	800a4ee <sbrk_aligned+0x26>
 800a4e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	bd70      	pop	{r4, r5, r6, pc}
 800a4ee:	1cc4      	adds	r4, r0, #3
 800a4f0:	f024 0403 	bic.w	r4, r4, #3
 800a4f4:	42a0      	cmp	r0, r4
 800a4f6:	d0f8      	beq.n	800a4ea <sbrk_aligned+0x22>
 800a4f8:	1a21      	subs	r1, r4, r0
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f001 f994 	bl	800b828 <_sbrk_r>
 800a500:	3001      	adds	r0, #1
 800a502:	d1f2      	bne.n	800a4ea <sbrk_aligned+0x22>
 800a504:	e7ef      	b.n	800a4e6 <sbrk_aligned+0x1e>
 800a506:	bf00      	nop
 800a508:	20000ac0 	.word	0x20000ac0

0800a50c <_malloc_r>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	1ccd      	adds	r5, r1, #3
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	2d00      	cmp	r5, #0
 800a520:	4606      	mov	r6, r0
 800a522:	db01      	blt.n	800a528 <_malloc_r+0x1c>
 800a524:	42a9      	cmp	r1, r5
 800a526:	d904      	bls.n	800a532 <_malloc_r+0x26>
 800a528:	230c      	movs	r3, #12
 800a52a:	6033      	str	r3, [r6, #0]
 800a52c:	2000      	movs	r0, #0
 800a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a608 <_malloc_r+0xfc>
 800a536:	f000 f87b 	bl	800a630 <__malloc_lock>
 800a53a:	f8d8 3000 	ldr.w	r3, [r8]
 800a53e:	461c      	mov	r4, r3
 800a540:	bb44      	cbnz	r4, 800a594 <_malloc_r+0x88>
 800a542:	4629      	mov	r1, r5
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ffbf 	bl	800a4c8 <sbrk_aligned>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	4604      	mov	r4, r0
 800a54e:	d158      	bne.n	800a602 <_malloc_r+0xf6>
 800a550:	f8d8 4000 	ldr.w	r4, [r8]
 800a554:	4627      	mov	r7, r4
 800a556:	2f00      	cmp	r7, #0
 800a558:	d143      	bne.n	800a5e2 <_malloc_r+0xd6>
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	d04b      	beq.n	800a5f6 <_malloc_r+0xea>
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	4639      	mov	r1, r7
 800a562:	4630      	mov	r0, r6
 800a564:	eb04 0903 	add.w	r9, r4, r3
 800a568:	f001 f95e 	bl	800b828 <_sbrk_r>
 800a56c:	4581      	cmp	r9, r0
 800a56e:	d142      	bne.n	800a5f6 <_malloc_r+0xea>
 800a570:	6821      	ldr	r1, [r4, #0]
 800a572:	1a6d      	subs	r5, r5, r1
 800a574:	4629      	mov	r1, r5
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ffa6 	bl	800a4c8 <sbrk_aligned>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d03a      	beq.n	800a5f6 <_malloc_r+0xea>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	442b      	add	r3, r5
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	f8d8 3000 	ldr.w	r3, [r8]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	bb62      	cbnz	r2, 800a5e8 <_malloc_r+0xdc>
 800a58e:	f8c8 7000 	str.w	r7, [r8]
 800a592:	e00f      	b.n	800a5b4 <_malloc_r+0xa8>
 800a594:	6822      	ldr	r2, [r4, #0]
 800a596:	1b52      	subs	r2, r2, r5
 800a598:	d420      	bmi.n	800a5dc <_malloc_r+0xd0>
 800a59a:	2a0b      	cmp	r2, #11
 800a59c:	d917      	bls.n	800a5ce <_malloc_r+0xc2>
 800a59e:	1961      	adds	r1, r4, r5
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	6025      	str	r5, [r4, #0]
 800a5a4:	bf18      	it	ne
 800a5a6:	6059      	strne	r1, [r3, #4]
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	bf08      	it	eq
 800a5ac:	f8c8 1000 	streq.w	r1, [r8]
 800a5b0:	5162      	str	r2, [r4, r5]
 800a5b2:	604b      	str	r3, [r1, #4]
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f000 f841 	bl	800a63c <__malloc_unlock>
 800a5ba:	f104 000b 	add.w	r0, r4, #11
 800a5be:	1d23      	adds	r3, r4, #4
 800a5c0:	f020 0007 	bic.w	r0, r0, #7
 800a5c4:	1ac2      	subs	r2, r0, r3
 800a5c6:	bf1c      	itt	ne
 800a5c8:	1a1b      	subne	r3, r3, r0
 800a5ca:	50a3      	strne	r3, [r4, r2]
 800a5cc:	e7af      	b.n	800a52e <_malloc_r+0x22>
 800a5ce:	6862      	ldr	r2, [r4, #4]
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	bf0c      	ite	eq
 800a5d4:	f8c8 2000 	streq.w	r2, [r8]
 800a5d8:	605a      	strne	r2, [r3, #4]
 800a5da:	e7eb      	b.n	800a5b4 <_malloc_r+0xa8>
 800a5dc:	4623      	mov	r3, r4
 800a5de:	6864      	ldr	r4, [r4, #4]
 800a5e0:	e7ae      	b.n	800a540 <_malloc_r+0x34>
 800a5e2:	463c      	mov	r4, r7
 800a5e4:	687f      	ldr	r7, [r7, #4]
 800a5e6:	e7b6      	b.n	800a556 <_malloc_r+0x4a>
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d1fb      	bne.n	800a5e8 <_malloc_r+0xdc>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	6053      	str	r3, [r2, #4]
 800a5f4:	e7de      	b.n	800a5b4 <_malloc_r+0xa8>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f000 f81e 	bl	800a63c <__malloc_unlock>
 800a600:	e794      	b.n	800a52c <_malloc_r+0x20>
 800a602:	6005      	str	r5, [r0, #0]
 800a604:	e7d6      	b.n	800a5b4 <_malloc_r+0xa8>
 800a606:	bf00      	nop
 800a608:	20000ac4 	.word	0x20000ac4

0800a60c <__ascii_mbtowc>:
 800a60c:	b082      	sub	sp, #8
 800a60e:	b901      	cbnz	r1, 800a612 <__ascii_mbtowc+0x6>
 800a610:	a901      	add	r1, sp, #4
 800a612:	b142      	cbz	r2, 800a626 <__ascii_mbtowc+0x1a>
 800a614:	b14b      	cbz	r3, 800a62a <__ascii_mbtowc+0x1e>
 800a616:	7813      	ldrb	r3, [r2, #0]
 800a618:	600b      	str	r3, [r1, #0]
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	1e10      	subs	r0, r2, #0
 800a61e:	bf18      	it	ne
 800a620:	2001      	movne	r0, #1
 800a622:	b002      	add	sp, #8
 800a624:	4770      	bx	lr
 800a626:	4610      	mov	r0, r2
 800a628:	e7fb      	b.n	800a622 <__ascii_mbtowc+0x16>
 800a62a:	f06f 0001 	mvn.w	r0, #1
 800a62e:	e7f8      	b.n	800a622 <__ascii_mbtowc+0x16>

0800a630 <__malloc_lock>:
 800a630:	4801      	ldr	r0, [pc, #4]	@ (800a638 <__malloc_lock+0x8>)
 800a632:	f7ff bbac 	b.w	8009d8e <__retarget_lock_acquire_recursive>
 800a636:	bf00      	nop
 800a638:	20000abc 	.word	0x20000abc

0800a63c <__malloc_unlock>:
 800a63c:	4801      	ldr	r0, [pc, #4]	@ (800a644 <__malloc_unlock+0x8>)
 800a63e:	f7ff bba7 	b.w	8009d90 <__retarget_lock_release_recursive>
 800a642:	bf00      	nop
 800a644:	20000abc 	.word	0x20000abc

0800a648 <_Balloc>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	69c6      	ldr	r6, [r0, #28]
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	b976      	cbnz	r6, 800a670 <_Balloc+0x28>
 800a652:	2010      	movs	r0, #16
 800a654:	f001 f92a 	bl	800b8ac <malloc>
 800a658:	4602      	mov	r2, r0
 800a65a:	61e0      	str	r0, [r4, #28]
 800a65c:	b920      	cbnz	r0, 800a668 <_Balloc+0x20>
 800a65e:	4b18      	ldr	r3, [pc, #96]	@ (800a6c0 <_Balloc+0x78>)
 800a660:	4818      	ldr	r0, [pc, #96]	@ (800a6c4 <_Balloc+0x7c>)
 800a662:	216b      	movs	r1, #107	@ 0x6b
 800a664:	f001 f8f0 	bl	800b848 <__assert_func>
 800a668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a66c:	6006      	str	r6, [r0, #0]
 800a66e:	60c6      	str	r6, [r0, #12]
 800a670:	69e6      	ldr	r6, [r4, #28]
 800a672:	68f3      	ldr	r3, [r6, #12]
 800a674:	b183      	cbz	r3, 800a698 <_Balloc+0x50>
 800a676:	69e3      	ldr	r3, [r4, #28]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a67e:	b9b8      	cbnz	r0, 800a6b0 <_Balloc+0x68>
 800a680:	2101      	movs	r1, #1
 800a682:	fa01 f605 	lsl.w	r6, r1, r5
 800a686:	1d72      	adds	r2, r6, #5
 800a688:	0092      	lsls	r2, r2, #2
 800a68a:	4620      	mov	r0, r4
 800a68c:	f001 f8fa 	bl	800b884 <_calloc_r>
 800a690:	b160      	cbz	r0, 800a6ac <_Balloc+0x64>
 800a692:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a696:	e00e      	b.n	800a6b6 <_Balloc+0x6e>
 800a698:	2221      	movs	r2, #33	@ 0x21
 800a69a:	2104      	movs	r1, #4
 800a69c:	4620      	mov	r0, r4
 800a69e:	f001 f8f1 	bl	800b884 <_calloc_r>
 800a6a2:	69e3      	ldr	r3, [r4, #28]
 800a6a4:	60f0      	str	r0, [r6, #12]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e4      	bne.n	800a676 <_Balloc+0x2e>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	6802      	ldr	r2, [r0, #0]
 800a6b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6bc:	e7f7      	b.n	800a6ae <_Balloc+0x66>
 800a6be:	bf00      	nop
 800a6c0:	0800bbf1 	.word	0x0800bbf1
 800a6c4:	0800bc08 	.word	0x0800bc08

0800a6c8 <_Bfree>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	69c6      	ldr	r6, [r0, #28]
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	b976      	cbnz	r6, 800a6f0 <_Bfree+0x28>
 800a6d2:	2010      	movs	r0, #16
 800a6d4:	f001 f8ea 	bl	800b8ac <malloc>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	61e8      	str	r0, [r5, #28]
 800a6dc:	b920      	cbnz	r0, 800a6e8 <_Bfree+0x20>
 800a6de:	4b09      	ldr	r3, [pc, #36]	@ (800a704 <_Bfree+0x3c>)
 800a6e0:	4809      	ldr	r0, [pc, #36]	@ (800a708 <_Bfree+0x40>)
 800a6e2:	218f      	movs	r1, #143	@ 0x8f
 800a6e4:	f001 f8b0 	bl	800b848 <__assert_func>
 800a6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6ec:	6006      	str	r6, [r0, #0]
 800a6ee:	60c6      	str	r6, [r0, #12]
 800a6f0:	b13c      	cbz	r4, 800a702 <_Bfree+0x3a>
 800a6f2:	69eb      	ldr	r3, [r5, #28]
 800a6f4:	6862      	ldr	r2, [r4, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6fc:	6021      	str	r1, [r4, #0]
 800a6fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	0800bbf1 	.word	0x0800bbf1
 800a708:	0800bc08 	.word	0x0800bc08

0800a70c <__multadd>:
 800a70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a710:	690d      	ldr	r5, [r1, #16]
 800a712:	4607      	mov	r7, r0
 800a714:	460c      	mov	r4, r1
 800a716:	461e      	mov	r6, r3
 800a718:	f101 0c14 	add.w	ip, r1, #20
 800a71c:	2000      	movs	r0, #0
 800a71e:	f8dc 3000 	ldr.w	r3, [ip]
 800a722:	b299      	uxth	r1, r3
 800a724:	fb02 6101 	mla	r1, r2, r1, r6
 800a728:	0c1e      	lsrs	r6, r3, #16
 800a72a:	0c0b      	lsrs	r3, r1, #16
 800a72c:	fb02 3306 	mla	r3, r2, r6, r3
 800a730:	b289      	uxth	r1, r1
 800a732:	3001      	adds	r0, #1
 800a734:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a738:	4285      	cmp	r5, r0
 800a73a:	f84c 1b04 	str.w	r1, [ip], #4
 800a73e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a742:	dcec      	bgt.n	800a71e <__multadd+0x12>
 800a744:	b30e      	cbz	r6, 800a78a <__multadd+0x7e>
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	42ab      	cmp	r3, r5
 800a74a:	dc19      	bgt.n	800a780 <__multadd+0x74>
 800a74c:	6861      	ldr	r1, [r4, #4]
 800a74e:	4638      	mov	r0, r7
 800a750:	3101      	adds	r1, #1
 800a752:	f7ff ff79 	bl	800a648 <_Balloc>
 800a756:	4680      	mov	r8, r0
 800a758:	b928      	cbnz	r0, 800a766 <__multadd+0x5a>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b0c      	ldr	r3, [pc, #48]	@ (800a790 <__multadd+0x84>)
 800a75e:	480d      	ldr	r0, [pc, #52]	@ (800a794 <__multadd+0x88>)
 800a760:	21ba      	movs	r1, #186	@ 0xba
 800a762:	f001 f871 	bl	800b848 <__assert_func>
 800a766:	6922      	ldr	r2, [r4, #16]
 800a768:	3202      	adds	r2, #2
 800a76a:	f104 010c 	add.w	r1, r4, #12
 800a76e:	0092      	lsls	r2, r2, #2
 800a770:	300c      	adds	r0, #12
 800a772:	f7ff fb0e 	bl	8009d92 <memcpy>
 800a776:	4621      	mov	r1, r4
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff ffa5 	bl	800a6c8 <_Bfree>
 800a77e:	4644      	mov	r4, r8
 800a780:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a784:	3501      	adds	r5, #1
 800a786:	615e      	str	r6, [r3, #20]
 800a788:	6125      	str	r5, [r4, #16]
 800a78a:	4620      	mov	r0, r4
 800a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a790:	0800bb80 	.word	0x0800bb80
 800a794:	0800bc08 	.word	0x0800bc08

0800a798 <__s2b>:
 800a798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a79c:	460c      	mov	r4, r1
 800a79e:	4615      	mov	r5, r2
 800a7a0:	461f      	mov	r7, r3
 800a7a2:	2209      	movs	r2, #9
 800a7a4:	3308      	adds	r3, #8
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	db09      	blt.n	800a7c8 <__s2b+0x30>
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7ff ff47 	bl	800a648 <_Balloc>
 800a7ba:	b940      	cbnz	r0, 800a7ce <__s2b+0x36>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	4b19      	ldr	r3, [pc, #100]	@ (800a824 <__s2b+0x8c>)
 800a7c0:	4819      	ldr	r0, [pc, #100]	@ (800a828 <__s2b+0x90>)
 800a7c2:	21d3      	movs	r1, #211	@ 0xd3
 800a7c4:	f001 f840 	bl	800b848 <__assert_func>
 800a7c8:	0052      	lsls	r2, r2, #1
 800a7ca:	3101      	adds	r1, #1
 800a7cc:	e7f0      	b.n	800a7b0 <__s2b+0x18>
 800a7ce:	9b08      	ldr	r3, [sp, #32]
 800a7d0:	6143      	str	r3, [r0, #20]
 800a7d2:	2d09      	cmp	r5, #9
 800a7d4:	f04f 0301 	mov.w	r3, #1
 800a7d8:	6103      	str	r3, [r0, #16]
 800a7da:	dd16      	ble.n	800a80a <__s2b+0x72>
 800a7dc:	f104 0909 	add.w	r9, r4, #9
 800a7e0:	46c8      	mov	r8, r9
 800a7e2:	442c      	add	r4, r5
 800a7e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	3b30      	subs	r3, #48	@ 0x30
 800a7ec:	220a      	movs	r2, #10
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f7ff ff8c 	bl	800a70c <__multadd>
 800a7f4:	45a0      	cmp	r8, r4
 800a7f6:	d1f5      	bne.n	800a7e4 <__s2b+0x4c>
 800a7f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a7fc:	444c      	add	r4, r9
 800a7fe:	1b2d      	subs	r5, r5, r4
 800a800:	1963      	adds	r3, r4, r5
 800a802:	42bb      	cmp	r3, r7
 800a804:	db04      	blt.n	800a810 <__s2b+0x78>
 800a806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80a:	340a      	adds	r4, #10
 800a80c:	2509      	movs	r5, #9
 800a80e:	e7f6      	b.n	800a7fe <__s2b+0x66>
 800a810:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a814:	4601      	mov	r1, r0
 800a816:	3b30      	subs	r3, #48	@ 0x30
 800a818:	220a      	movs	r2, #10
 800a81a:	4630      	mov	r0, r6
 800a81c:	f7ff ff76 	bl	800a70c <__multadd>
 800a820:	e7ee      	b.n	800a800 <__s2b+0x68>
 800a822:	bf00      	nop
 800a824:	0800bb80 	.word	0x0800bb80
 800a828:	0800bc08 	.word	0x0800bc08

0800a82c <__hi0bits>:
 800a82c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a830:	4603      	mov	r3, r0
 800a832:	bf36      	itet	cc
 800a834:	0403      	lslcc	r3, r0, #16
 800a836:	2000      	movcs	r0, #0
 800a838:	2010      	movcc	r0, #16
 800a83a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a83e:	bf3c      	itt	cc
 800a840:	021b      	lslcc	r3, r3, #8
 800a842:	3008      	addcc	r0, #8
 800a844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a848:	bf3c      	itt	cc
 800a84a:	011b      	lslcc	r3, r3, #4
 800a84c:	3004      	addcc	r0, #4
 800a84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a852:	bf3c      	itt	cc
 800a854:	009b      	lslcc	r3, r3, #2
 800a856:	3002      	addcc	r0, #2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	db05      	blt.n	800a868 <__hi0bits+0x3c>
 800a85c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a860:	f100 0001 	add.w	r0, r0, #1
 800a864:	bf08      	it	eq
 800a866:	2020      	moveq	r0, #32
 800a868:	4770      	bx	lr

0800a86a <__lo0bits>:
 800a86a:	6803      	ldr	r3, [r0, #0]
 800a86c:	4602      	mov	r2, r0
 800a86e:	f013 0007 	ands.w	r0, r3, #7
 800a872:	d00b      	beq.n	800a88c <__lo0bits+0x22>
 800a874:	07d9      	lsls	r1, r3, #31
 800a876:	d421      	bmi.n	800a8bc <__lo0bits+0x52>
 800a878:	0798      	lsls	r0, r3, #30
 800a87a:	bf49      	itett	mi
 800a87c:	085b      	lsrmi	r3, r3, #1
 800a87e:	089b      	lsrpl	r3, r3, #2
 800a880:	2001      	movmi	r0, #1
 800a882:	6013      	strmi	r3, [r2, #0]
 800a884:	bf5c      	itt	pl
 800a886:	6013      	strpl	r3, [r2, #0]
 800a888:	2002      	movpl	r0, #2
 800a88a:	4770      	bx	lr
 800a88c:	b299      	uxth	r1, r3
 800a88e:	b909      	cbnz	r1, 800a894 <__lo0bits+0x2a>
 800a890:	0c1b      	lsrs	r3, r3, #16
 800a892:	2010      	movs	r0, #16
 800a894:	b2d9      	uxtb	r1, r3
 800a896:	b909      	cbnz	r1, 800a89c <__lo0bits+0x32>
 800a898:	3008      	adds	r0, #8
 800a89a:	0a1b      	lsrs	r3, r3, #8
 800a89c:	0719      	lsls	r1, r3, #28
 800a89e:	bf04      	itt	eq
 800a8a0:	091b      	lsreq	r3, r3, #4
 800a8a2:	3004      	addeq	r0, #4
 800a8a4:	0799      	lsls	r1, r3, #30
 800a8a6:	bf04      	itt	eq
 800a8a8:	089b      	lsreq	r3, r3, #2
 800a8aa:	3002      	addeq	r0, #2
 800a8ac:	07d9      	lsls	r1, r3, #31
 800a8ae:	d403      	bmi.n	800a8b8 <__lo0bits+0x4e>
 800a8b0:	085b      	lsrs	r3, r3, #1
 800a8b2:	f100 0001 	add.w	r0, r0, #1
 800a8b6:	d003      	beq.n	800a8c0 <__lo0bits+0x56>
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	4770      	bx	lr
 800a8bc:	2000      	movs	r0, #0
 800a8be:	4770      	bx	lr
 800a8c0:	2020      	movs	r0, #32
 800a8c2:	4770      	bx	lr

0800a8c4 <__i2b>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	f7ff febd 	bl	800a648 <_Balloc>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	b928      	cbnz	r0, 800a8de <__i2b+0x1a>
 800a8d2:	4b05      	ldr	r3, [pc, #20]	@ (800a8e8 <__i2b+0x24>)
 800a8d4:	4805      	ldr	r0, [pc, #20]	@ (800a8ec <__i2b+0x28>)
 800a8d6:	f240 1145 	movw	r1, #325	@ 0x145
 800a8da:	f000 ffb5 	bl	800b848 <__assert_func>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	6144      	str	r4, [r0, #20]
 800a8e2:	6103      	str	r3, [r0, #16]
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	bf00      	nop
 800a8e8:	0800bb80 	.word	0x0800bb80
 800a8ec:	0800bc08 	.word	0x0800bc08

0800a8f0 <__multiply>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	690a      	ldr	r2, [r1, #16]
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	bfa8      	it	ge
 800a8fe:	4623      	movge	r3, r4
 800a900:	460f      	mov	r7, r1
 800a902:	bfa4      	itt	ge
 800a904:	460c      	movge	r4, r1
 800a906:	461f      	movge	r7, r3
 800a908:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a90c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a910:	68a3      	ldr	r3, [r4, #8]
 800a912:	6861      	ldr	r1, [r4, #4]
 800a914:	eb0a 0609 	add.w	r6, sl, r9
 800a918:	42b3      	cmp	r3, r6
 800a91a:	b085      	sub	sp, #20
 800a91c:	bfb8      	it	lt
 800a91e:	3101      	addlt	r1, #1
 800a920:	f7ff fe92 	bl	800a648 <_Balloc>
 800a924:	b930      	cbnz	r0, 800a934 <__multiply+0x44>
 800a926:	4602      	mov	r2, r0
 800a928:	4b44      	ldr	r3, [pc, #272]	@ (800aa3c <__multiply+0x14c>)
 800a92a:	4845      	ldr	r0, [pc, #276]	@ (800aa40 <__multiply+0x150>)
 800a92c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a930:	f000 ff8a 	bl	800b848 <__assert_func>
 800a934:	f100 0514 	add.w	r5, r0, #20
 800a938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a93c:	462b      	mov	r3, r5
 800a93e:	2200      	movs	r2, #0
 800a940:	4543      	cmp	r3, r8
 800a942:	d321      	bcc.n	800a988 <__multiply+0x98>
 800a944:	f107 0114 	add.w	r1, r7, #20
 800a948:	f104 0214 	add.w	r2, r4, #20
 800a94c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a950:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	1b13      	subs	r3, r2, r4
 800a958:	3b15      	subs	r3, #21
 800a95a:	f023 0303 	bic.w	r3, r3, #3
 800a95e:	3304      	adds	r3, #4
 800a960:	f104 0715 	add.w	r7, r4, #21
 800a964:	42ba      	cmp	r2, r7
 800a966:	bf38      	it	cc
 800a968:	2304      	movcc	r3, #4
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	9b02      	ldr	r3, [sp, #8]
 800a96e:	9103      	str	r1, [sp, #12]
 800a970:	428b      	cmp	r3, r1
 800a972:	d80c      	bhi.n	800a98e <__multiply+0x9e>
 800a974:	2e00      	cmp	r6, #0
 800a976:	dd03      	ble.n	800a980 <__multiply+0x90>
 800a978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d05b      	beq.n	800aa38 <__multiply+0x148>
 800a980:	6106      	str	r6, [r0, #16]
 800a982:	b005      	add	sp, #20
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	f843 2b04 	str.w	r2, [r3], #4
 800a98c:	e7d8      	b.n	800a940 <__multiply+0x50>
 800a98e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a992:	f1ba 0f00 	cmp.w	sl, #0
 800a996:	d024      	beq.n	800a9e2 <__multiply+0xf2>
 800a998:	f104 0e14 	add.w	lr, r4, #20
 800a99c:	46a9      	mov	r9, r5
 800a99e:	f04f 0c00 	mov.w	ip, #0
 800a9a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9a6:	f8d9 3000 	ldr.w	r3, [r9]
 800a9aa:	fa1f fb87 	uxth.w	fp, r7
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a9b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a9b8:	f8d9 7000 	ldr.w	r7, [r9]
 800a9bc:	4463      	add	r3, ip
 800a9be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9c2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a9c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9d0:	4572      	cmp	r2, lr
 800a9d2:	f849 3b04 	str.w	r3, [r9], #4
 800a9d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9da:	d8e2      	bhi.n	800a9a2 <__multiply+0xb2>
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	f845 c003 	str.w	ip, [r5, r3]
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9e8:	3104      	adds	r1, #4
 800a9ea:	f1b9 0f00 	cmp.w	r9, #0
 800a9ee:	d021      	beq.n	800aa34 <__multiply+0x144>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	f104 0c14 	add.w	ip, r4, #20
 800a9f6:	46ae      	mov	lr, r5
 800a9f8:	f04f 0a00 	mov.w	sl, #0
 800a9fc:	f8bc b000 	ldrh.w	fp, [ip]
 800aa00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa04:	fb09 770b 	mla	r7, r9, fp, r7
 800aa08:	4457      	add	r7, sl
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa10:	f84e 3b04 	str.w	r3, [lr], #4
 800aa14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa1c:	f8be 3000 	ldrh.w	r3, [lr]
 800aa20:	fb09 330a 	mla	r3, r9, sl, r3
 800aa24:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa28:	4562      	cmp	r2, ip
 800aa2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa2e:	d8e5      	bhi.n	800a9fc <__multiply+0x10c>
 800aa30:	9f01      	ldr	r7, [sp, #4]
 800aa32:	51eb      	str	r3, [r5, r7]
 800aa34:	3504      	adds	r5, #4
 800aa36:	e799      	b.n	800a96c <__multiply+0x7c>
 800aa38:	3e01      	subs	r6, #1
 800aa3a:	e79b      	b.n	800a974 <__multiply+0x84>
 800aa3c:	0800bb80 	.word	0x0800bb80
 800aa40:	0800bc08 	.word	0x0800bc08

0800aa44 <__pow5mult>:
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa48:	4615      	mov	r5, r2
 800aa4a:	f012 0203 	ands.w	r2, r2, #3
 800aa4e:	4607      	mov	r7, r0
 800aa50:	460e      	mov	r6, r1
 800aa52:	d007      	beq.n	800aa64 <__pow5mult+0x20>
 800aa54:	4c25      	ldr	r4, [pc, #148]	@ (800aaec <__pow5mult+0xa8>)
 800aa56:	3a01      	subs	r2, #1
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa5e:	f7ff fe55 	bl	800a70c <__multadd>
 800aa62:	4606      	mov	r6, r0
 800aa64:	10ad      	asrs	r5, r5, #2
 800aa66:	d03d      	beq.n	800aae4 <__pow5mult+0xa0>
 800aa68:	69fc      	ldr	r4, [r7, #28]
 800aa6a:	b97c      	cbnz	r4, 800aa8c <__pow5mult+0x48>
 800aa6c:	2010      	movs	r0, #16
 800aa6e:	f000 ff1d 	bl	800b8ac <malloc>
 800aa72:	4602      	mov	r2, r0
 800aa74:	61f8      	str	r0, [r7, #28]
 800aa76:	b928      	cbnz	r0, 800aa84 <__pow5mult+0x40>
 800aa78:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf0 <__pow5mult+0xac>)
 800aa7a:	481e      	ldr	r0, [pc, #120]	@ (800aaf4 <__pow5mult+0xb0>)
 800aa7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa80:	f000 fee2 	bl	800b848 <__assert_func>
 800aa84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa88:	6004      	str	r4, [r0, #0]
 800aa8a:	60c4      	str	r4, [r0, #12]
 800aa8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa94:	b94c      	cbnz	r4, 800aaaa <__pow5mult+0x66>
 800aa96:	f240 2171 	movw	r1, #625	@ 0x271
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f7ff ff12 	bl	800a8c4 <__i2b>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	6003      	str	r3, [r0, #0]
 800aaaa:	f04f 0900 	mov.w	r9, #0
 800aaae:	07eb      	lsls	r3, r5, #31
 800aab0:	d50a      	bpl.n	800aac8 <__pow5mult+0x84>
 800aab2:	4631      	mov	r1, r6
 800aab4:	4622      	mov	r2, r4
 800aab6:	4638      	mov	r0, r7
 800aab8:	f7ff ff1a 	bl	800a8f0 <__multiply>
 800aabc:	4631      	mov	r1, r6
 800aabe:	4680      	mov	r8, r0
 800aac0:	4638      	mov	r0, r7
 800aac2:	f7ff fe01 	bl	800a6c8 <_Bfree>
 800aac6:	4646      	mov	r6, r8
 800aac8:	106d      	asrs	r5, r5, #1
 800aaca:	d00b      	beq.n	800aae4 <__pow5mult+0xa0>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	b938      	cbnz	r0, 800aae0 <__pow5mult+0x9c>
 800aad0:	4622      	mov	r2, r4
 800aad2:	4621      	mov	r1, r4
 800aad4:	4638      	mov	r0, r7
 800aad6:	f7ff ff0b 	bl	800a8f0 <__multiply>
 800aada:	6020      	str	r0, [r4, #0]
 800aadc:	f8c0 9000 	str.w	r9, [r0]
 800aae0:	4604      	mov	r4, r0
 800aae2:	e7e4      	b.n	800aaae <__pow5mult+0x6a>
 800aae4:	4630      	mov	r0, r6
 800aae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaea:	bf00      	nop
 800aaec:	0800bc64 	.word	0x0800bc64
 800aaf0:	0800bbf1 	.word	0x0800bbf1
 800aaf4:	0800bc08 	.word	0x0800bc08

0800aaf8 <__lshift>:
 800aaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	460c      	mov	r4, r1
 800aafe:	6849      	ldr	r1, [r1, #4]
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	4607      	mov	r7, r0
 800ab0a:	4691      	mov	r9, r2
 800ab0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab10:	f108 0601 	add.w	r6, r8, #1
 800ab14:	42b3      	cmp	r3, r6
 800ab16:	db0b      	blt.n	800ab30 <__lshift+0x38>
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff fd95 	bl	800a648 <_Balloc>
 800ab1e:	4605      	mov	r5, r0
 800ab20:	b948      	cbnz	r0, 800ab36 <__lshift+0x3e>
 800ab22:	4602      	mov	r2, r0
 800ab24:	4b28      	ldr	r3, [pc, #160]	@ (800abc8 <__lshift+0xd0>)
 800ab26:	4829      	ldr	r0, [pc, #164]	@ (800abcc <__lshift+0xd4>)
 800ab28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab2c:	f000 fe8c 	bl	800b848 <__assert_func>
 800ab30:	3101      	adds	r1, #1
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	e7ee      	b.n	800ab14 <__lshift+0x1c>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f100 0114 	add.w	r1, r0, #20
 800ab3c:	f100 0210 	add.w	r2, r0, #16
 800ab40:	4618      	mov	r0, r3
 800ab42:	4553      	cmp	r3, sl
 800ab44:	db33      	blt.n	800abae <__lshift+0xb6>
 800ab46:	6920      	ldr	r0, [r4, #16]
 800ab48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab4c:	f104 0314 	add.w	r3, r4, #20
 800ab50:	f019 091f 	ands.w	r9, r9, #31
 800ab54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab5c:	d02b      	beq.n	800abb6 <__lshift+0xbe>
 800ab5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab62:	468a      	mov	sl, r1
 800ab64:	2200      	movs	r2, #0
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	fa00 f009 	lsl.w	r0, r0, r9
 800ab6c:	4310      	orrs	r0, r2
 800ab6e:	f84a 0b04 	str.w	r0, [sl], #4
 800ab72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab76:	459c      	cmp	ip, r3
 800ab78:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab7c:	d8f3      	bhi.n	800ab66 <__lshift+0x6e>
 800ab7e:	ebac 0304 	sub.w	r3, ip, r4
 800ab82:	3b15      	subs	r3, #21
 800ab84:	f023 0303 	bic.w	r3, r3, #3
 800ab88:	3304      	adds	r3, #4
 800ab8a:	f104 0015 	add.w	r0, r4, #21
 800ab8e:	4584      	cmp	ip, r0
 800ab90:	bf38      	it	cc
 800ab92:	2304      	movcc	r3, #4
 800ab94:	50ca      	str	r2, [r1, r3]
 800ab96:	b10a      	cbz	r2, 800ab9c <__lshift+0xa4>
 800ab98:	f108 0602 	add.w	r6, r8, #2
 800ab9c:	3e01      	subs	r6, #1
 800ab9e:	4638      	mov	r0, r7
 800aba0:	612e      	str	r6, [r5, #16]
 800aba2:	4621      	mov	r1, r4
 800aba4:	f7ff fd90 	bl	800a6c8 <_Bfree>
 800aba8:	4628      	mov	r0, r5
 800abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abae:	f842 0f04 	str.w	r0, [r2, #4]!
 800abb2:	3301      	adds	r3, #1
 800abb4:	e7c5      	b.n	800ab42 <__lshift+0x4a>
 800abb6:	3904      	subs	r1, #4
 800abb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800abc0:	459c      	cmp	ip, r3
 800abc2:	d8f9      	bhi.n	800abb8 <__lshift+0xc0>
 800abc4:	e7ea      	b.n	800ab9c <__lshift+0xa4>
 800abc6:	bf00      	nop
 800abc8:	0800bb80 	.word	0x0800bb80
 800abcc:	0800bc08 	.word	0x0800bc08

0800abd0 <__mcmp>:
 800abd0:	690a      	ldr	r2, [r1, #16]
 800abd2:	4603      	mov	r3, r0
 800abd4:	6900      	ldr	r0, [r0, #16]
 800abd6:	1a80      	subs	r0, r0, r2
 800abd8:	b530      	push	{r4, r5, lr}
 800abda:	d10e      	bne.n	800abfa <__mcmp+0x2a>
 800abdc:	3314      	adds	r3, #20
 800abde:	3114      	adds	r1, #20
 800abe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800abe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abf0:	4295      	cmp	r5, r2
 800abf2:	d003      	beq.n	800abfc <__mcmp+0x2c>
 800abf4:	d205      	bcs.n	800ac02 <__mcmp+0x32>
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295
 800abfa:	bd30      	pop	{r4, r5, pc}
 800abfc:	42a3      	cmp	r3, r4
 800abfe:	d3f3      	bcc.n	800abe8 <__mcmp+0x18>
 800ac00:	e7fb      	b.n	800abfa <__mcmp+0x2a>
 800ac02:	2001      	movs	r0, #1
 800ac04:	e7f9      	b.n	800abfa <__mcmp+0x2a>
	...

0800ac08 <__mdiff>:
 800ac08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	4689      	mov	r9, r1
 800ac0e:	4606      	mov	r6, r0
 800ac10:	4611      	mov	r1, r2
 800ac12:	4648      	mov	r0, r9
 800ac14:	4614      	mov	r4, r2
 800ac16:	f7ff ffdb 	bl	800abd0 <__mcmp>
 800ac1a:	1e05      	subs	r5, r0, #0
 800ac1c:	d112      	bne.n	800ac44 <__mdiff+0x3c>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7ff fd11 	bl	800a648 <_Balloc>
 800ac26:	4602      	mov	r2, r0
 800ac28:	b928      	cbnz	r0, 800ac36 <__mdiff+0x2e>
 800ac2a:	4b3f      	ldr	r3, [pc, #252]	@ (800ad28 <__mdiff+0x120>)
 800ac2c:	f240 2137 	movw	r1, #567	@ 0x237
 800ac30:	483e      	ldr	r0, [pc, #248]	@ (800ad2c <__mdiff+0x124>)
 800ac32:	f000 fe09 	bl	800b848 <__assert_func>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	b003      	add	sp, #12
 800ac40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac44:	bfbc      	itt	lt
 800ac46:	464b      	movlt	r3, r9
 800ac48:	46a1      	movlt	r9, r4
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac50:	bfba      	itte	lt
 800ac52:	461c      	movlt	r4, r3
 800ac54:	2501      	movlt	r5, #1
 800ac56:	2500      	movge	r5, #0
 800ac58:	f7ff fcf6 	bl	800a648 <_Balloc>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	b918      	cbnz	r0, 800ac68 <__mdiff+0x60>
 800ac60:	4b31      	ldr	r3, [pc, #196]	@ (800ad28 <__mdiff+0x120>)
 800ac62:	f240 2145 	movw	r1, #581	@ 0x245
 800ac66:	e7e3      	b.n	800ac30 <__mdiff+0x28>
 800ac68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac6c:	6926      	ldr	r6, [r4, #16]
 800ac6e:	60c5      	str	r5, [r0, #12]
 800ac70:	f109 0310 	add.w	r3, r9, #16
 800ac74:	f109 0514 	add.w	r5, r9, #20
 800ac78:	f104 0e14 	add.w	lr, r4, #20
 800ac7c:	f100 0b14 	add.w	fp, r0, #20
 800ac80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	46d9      	mov	r9, fp
 800ac8c:	f04f 0c00 	mov.w	ip, #0
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac96:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	fa1f f38a 	uxth.w	r3, sl
 800aca0:	4619      	mov	r1, r3
 800aca2:	b283      	uxth	r3, r0
 800aca4:	1acb      	subs	r3, r1, r3
 800aca6:	0c00      	lsrs	r0, r0, #16
 800aca8:	4463      	add	r3, ip
 800acaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800acae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800acb8:	4576      	cmp	r6, lr
 800acba:	f849 3b04 	str.w	r3, [r9], #4
 800acbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acc2:	d8e5      	bhi.n	800ac90 <__mdiff+0x88>
 800acc4:	1b33      	subs	r3, r6, r4
 800acc6:	3b15      	subs	r3, #21
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	3415      	adds	r4, #21
 800acce:	3304      	adds	r3, #4
 800acd0:	42a6      	cmp	r6, r4
 800acd2:	bf38      	it	cc
 800acd4:	2304      	movcc	r3, #4
 800acd6:	441d      	add	r5, r3
 800acd8:	445b      	add	r3, fp
 800acda:	461e      	mov	r6, r3
 800acdc:	462c      	mov	r4, r5
 800acde:	4544      	cmp	r4, r8
 800ace0:	d30e      	bcc.n	800ad00 <__mdiff+0xf8>
 800ace2:	f108 0103 	add.w	r1, r8, #3
 800ace6:	1b49      	subs	r1, r1, r5
 800ace8:	f021 0103 	bic.w	r1, r1, #3
 800acec:	3d03      	subs	r5, #3
 800acee:	45a8      	cmp	r8, r5
 800acf0:	bf38      	it	cc
 800acf2:	2100      	movcc	r1, #0
 800acf4:	440b      	add	r3, r1
 800acf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acfa:	b191      	cbz	r1, 800ad22 <__mdiff+0x11a>
 800acfc:	6117      	str	r7, [r2, #16]
 800acfe:	e79d      	b.n	800ac3c <__mdiff+0x34>
 800ad00:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad04:	46e6      	mov	lr, ip
 800ad06:	0c08      	lsrs	r0, r1, #16
 800ad08:	fa1c fc81 	uxtah	ip, ip, r1
 800ad0c:	4471      	add	r1, lr
 800ad0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad12:	b289      	uxth	r1, r1
 800ad14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad18:	f846 1b04 	str.w	r1, [r6], #4
 800ad1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad20:	e7dd      	b.n	800acde <__mdiff+0xd6>
 800ad22:	3f01      	subs	r7, #1
 800ad24:	e7e7      	b.n	800acf6 <__mdiff+0xee>
 800ad26:	bf00      	nop
 800ad28:	0800bb80 	.word	0x0800bb80
 800ad2c:	0800bc08 	.word	0x0800bc08

0800ad30 <__ulp>:
 800ad30:	b082      	sub	sp, #8
 800ad32:	ed8d 0b00 	vstr	d0, [sp]
 800ad36:	9a01      	ldr	r2, [sp, #4]
 800ad38:	4b0f      	ldr	r3, [pc, #60]	@ (800ad78 <__ulp+0x48>)
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dc08      	bgt.n	800ad56 <__ulp+0x26>
 800ad44:	425b      	negs	r3, r3
 800ad46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ad4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad4e:	da04      	bge.n	800ad5a <__ulp+0x2a>
 800ad50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ad54:	4113      	asrs	r3, r2
 800ad56:	2200      	movs	r2, #0
 800ad58:	e008      	b.n	800ad6c <__ulp+0x3c>
 800ad5a:	f1a2 0314 	sub.w	r3, r2, #20
 800ad5e:	2b1e      	cmp	r3, #30
 800ad60:	bfda      	itte	le
 800ad62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ad66:	40da      	lsrle	r2, r3
 800ad68:	2201      	movgt	r2, #1
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	ec41 0b10 	vmov	d0, r0, r1
 800ad74:	b002      	add	sp, #8
 800ad76:	4770      	bx	lr
 800ad78:	7ff00000 	.word	0x7ff00000

0800ad7c <__b2d>:
 800ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	6906      	ldr	r6, [r0, #16]
 800ad82:	f100 0814 	add.w	r8, r0, #20
 800ad86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ad8a:	1f37      	subs	r7, r6, #4
 800ad8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad90:	4610      	mov	r0, r2
 800ad92:	f7ff fd4b 	bl	800a82c <__hi0bits>
 800ad96:	f1c0 0320 	rsb	r3, r0, #32
 800ad9a:	280a      	cmp	r0, #10
 800ad9c:	600b      	str	r3, [r1, #0]
 800ad9e:	491b      	ldr	r1, [pc, #108]	@ (800ae0c <__b2d+0x90>)
 800ada0:	dc15      	bgt.n	800adce <__b2d+0x52>
 800ada2:	f1c0 0c0b 	rsb	ip, r0, #11
 800ada6:	fa22 f30c 	lsr.w	r3, r2, ip
 800adaa:	45b8      	cmp	r8, r7
 800adac:	ea43 0501 	orr.w	r5, r3, r1
 800adb0:	bf34      	ite	cc
 800adb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800adb6:	2300      	movcs	r3, #0
 800adb8:	3015      	adds	r0, #21
 800adba:	fa02 f000 	lsl.w	r0, r2, r0
 800adbe:	fa23 f30c 	lsr.w	r3, r3, ip
 800adc2:	4303      	orrs	r3, r0
 800adc4:	461c      	mov	r4, r3
 800adc6:	ec45 4b10 	vmov	d0, r4, r5
 800adca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adce:	45b8      	cmp	r8, r7
 800add0:	bf3a      	itte	cc
 800add2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800add6:	f1a6 0708 	subcc.w	r7, r6, #8
 800adda:	2300      	movcs	r3, #0
 800addc:	380b      	subs	r0, #11
 800adde:	d012      	beq.n	800ae06 <__b2d+0x8a>
 800ade0:	f1c0 0120 	rsb	r1, r0, #32
 800ade4:	fa23 f401 	lsr.w	r4, r3, r1
 800ade8:	4082      	lsls	r2, r0
 800adea:	4322      	orrs	r2, r4
 800adec:	4547      	cmp	r7, r8
 800adee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800adf2:	bf8c      	ite	hi
 800adf4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800adf8:	2200      	movls	r2, #0
 800adfa:	4083      	lsls	r3, r0
 800adfc:	40ca      	lsrs	r2, r1
 800adfe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae02:	4313      	orrs	r3, r2
 800ae04:	e7de      	b.n	800adc4 <__b2d+0x48>
 800ae06:	ea42 0501 	orr.w	r5, r2, r1
 800ae0a:	e7db      	b.n	800adc4 <__b2d+0x48>
 800ae0c:	3ff00000 	.word	0x3ff00000

0800ae10 <__d2b>:
 800ae10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae14:	460f      	mov	r7, r1
 800ae16:	2101      	movs	r1, #1
 800ae18:	ec59 8b10 	vmov	r8, r9, d0
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	f7ff fc13 	bl	800a648 <_Balloc>
 800ae22:	4604      	mov	r4, r0
 800ae24:	b930      	cbnz	r0, 800ae34 <__d2b+0x24>
 800ae26:	4602      	mov	r2, r0
 800ae28:	4b23      	ldr	r3, [pc, #140]	@ (800aeb8 <__d2b+0xa8>)
 800ae2a:	4824      	ldr	r0, [pc, #144]	@ (800aebc <__d2b+0xac>)
 800ae2c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae30:	f000 fd0a 	bl	800b848 <__assert_func>
 800ae34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae3c:	b10d      	cbz	r5, 800ae42 <__d2b+0x32>
 800ae3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae42:	9301      	str	r3, [sp, #4]
 800ae44:	f1b8 0300 	subs.w	r3, r8, #0
 800ae48:	d023      	beq.n	800ae92 <__d2b+0x82>
 800ae4a:	4668      	mov	r0, sp
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	f7ff fd0c 	bl	800a86a <__lo0bits>
 800ae52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae56:	b1d0      	cbz	r0, 800ae8e <__d2b+0x7e>
 800ae58:	f1c0 0320 	rsb	r3, r0, #32
 800ae5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae60:	430b      	orrs	r3, r1
 800ae62:	40c2      	lsrs	r2, r0
 800ae64:	6163      	str	r3, [r4, #20]
 800ae66:	9201      	str	r2, [sp, #4]
 800ae68:	9b01      	ldr	r3, [sp, #4]
 800ae6a:	61a3      	str	r3, [r4, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	bf0c      	ite	eq
 800ae70:	2201      	moveq	r2, #1
 800ae72:	2202      	movne	r2, #2
 800ae74:	6122      	str	r2, [r4, #16]
 800ae76:	b1a5      	cbz	r5, 800aea2 <__d2b+0x92>
 800ae78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae7c:	4405      	add	r5, r0
 800ae7e:	603d      	str	r5, [r7, #0]
 800ae80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae84:	6030      	str	r0, [r6, #0]
 800ae86:	4620      	mov	r0, r4
 800ae88:	b003      	add	sp, #12
 800ae8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae8e:	6161      	str	r1, [r4, #20]
 800ae90:	e7ea      	b.n	800ae68 <__d2b+0x58>
 800ae92:	a801      	add	r0, sp, #4
 800ae94:	f7ff fce9 	bl	800a86a <__lo0bits>
 800ae98:	9b01      	ldr	r3, [sp, #4]
 800ae9a:	6163      	str	r3, [r4, #20]
 800ae9c:	3020      	adds	r0, #32
 800ae9e:	2201      	movs	r2, #1
 800aea0:	e7e8      	b.n	800ae74 <__d2b+0x64>
 800aea2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aea6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aeaa:	6038      	str	r0, [r7, #0]
 800aeac:	6918      	ldr	r0, [r3, #16]
 800aeae:	f7ff fcbd 	bl	800a82c <__hi0bits>
 800aeb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeb6:	e7e5      	b.n	800ae84 <__d2b+0x74>
 800aeb8:	0800bb80 	.word	0x0800bb80
 800aebc:	0800bc08 	.word	0x0800bc08

0800aec0 <__ratio>:
 800aec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	4688      	mov	r8, r1
 800aec6:	4669      	mov	r1, sp
 800aec8:	4681      	mov	r9, r0
 800aeca:	f7ff ff57 	bl	800ad7c <__b2d>
 800aece:	a901      	add	r1, sp, #4
 800aed0:	4640      	mov	r0, r8
 800aed2:	ec55 4b10 	vmov	r4, r5, d0
 800aed6:	f7ff ff51 	bl	800ad7c <__b2d>
 800aeda:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aede:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800aee2:	1ad2      	subs	r2, r2, r3
 800aee4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800aee8:	1a5b      	subs	r3, r3, r1
 800aeea:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aeee:	ec57 6b10 	vmov	r6, r7, d0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	bfd6      	itet	le
 800aef6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aefa:	462a      	movgt	r2, r5
 800aefc:	463a      	movle	r2, r7
 800aefe:	46ab      	mov	fp, r5
 800af00:	46a2      	mov	sl, r4
 800af02:	bfce      	itee	gt
 800af04:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800af08:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800af0c:	ee00 3a90 	vmovle	s1, r3
 800af10:	ec4b ab17 	vmov	d7, sl, fp
 800af14:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800af18:	b003      	add	sp, #12
 800af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af1e <__copybits>:
 800af1e:	3901      	subs	r1, #1
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	1149      	asrs	r1, r1, #5
 800af24:	6914      	ldr	r4, [r2, #16]
 800af26:	3101      	adds	r1, #1
 800af28:	f102 0314 	add.w	r3, r2, #20
 800af2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af34:	1f05      	subs	r5, r0, #4
 800af36:	42a3      	cmp	r3, r4
 800af38:	d30c      	bcc.n	800af54 <__copybits+0x36>
 800af3a:	1aa3      	subs	r3, r4, r2
 800af3c:	3b11      	subs	r3, #17
 800af3e:	f023 0303 	bic.w	r3, r3, #3
 800af42:	3211      	adds	r2, #17
 800af44:	42a2      	cmp	r2, r4
 800af46:	bf88      	it	hi
 800af48:	2300      	movhi	r3, #0
 800af4a:	4418      	add	r0, r3
 800af4c:	2300      	movs	r3, #0
 800af4e:	4288      	cmp	r0, r1
 800af50:	d305      	bcc.n	800af5e <__copybits+0x40>
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	f853 6b04 	ldr.w	r6, [r3], #4
 800af58:	f845 6f04 	str.w	r6, [r5, #4]!
 800af5c:	e7eb      	b.n	800af36 <__copybits+0x18>
 800af5e:	f840 3b04 	str.w	r3, [r0], #4
 800af62:	e7f4      	b.n	800af4e <__copybits+0x30>

0800af64 <__any_on>:
 800af64:	f100 0214 	add.w	r2, r0, #20
 800af68:	6900      	ldr	r0, [r0, #16]
 800af6a:	114b      	asrs	r3, r1, #5
 800af6c:	4298      	cmp	r0, r3
 800af6e:	b510      	push	{r4, lr}
 800af70:	db11      	blt.n	800af96 <__any_on+0x32>
 800af72:	dd0a      	ble.n	800af8a <__any_on+0x26>
 800af74:	f011 011f 	ands.w	r1, r1, #31
 800af78:	d007      	beq.n	800af8a <__any_on+0x26>
 800af7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af7e:	fa24 f001 	lsr.w	r0, r4, r1
 800af82:	fa00 f101 	lsl.w	r1, r0, r1
 800af86:	428c      	cmp	r4, r1
 800af88:	d10b      	bne.n	800afa2 <__any_on+0x3e>
 800af8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af8e:	4293      	cmp	r3, r2
 800af90:	d803      	bhi.n	800af9a <__any_on+0x36>
 800af92:	2000      	movs	r0, #0
 800af94:	bd10      	pop	{r4, pc}
 800af96:	4603      	mov	r3, r0
 800af98:	e7f7      	b.n	800af8a <__any_on+0x26>
 800af9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af9e:	2900      	cmp	r1, #0
 800afa0:	d0f5      	beq.n	800af8e <__any_on+0x2a>
 800afa2:	2001      	movs	r0, #1
 800afa4:	e7f6      	b.n	800af94 <__any_on+0x30>

0800afa6 <__ascii_wctomb>:
 800afa6:	4603      	mov	r3, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	b141      	cbz	r1, 800afbe <__ascii_wctomb+0x18>
 800afac:	2aff      	cmp	r2, #255	@ 0xff
 800afae:	d904      	bls.n	800afba <__ascii_wctomb+0x14>
 800afb0:	228a      	movs	r2, #138	@ 0x8a
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	f04f 30ff 	mov.w	r0, #4294967295
 800afb8:	4770      	bx	lr
 800afba:	700a      	strb	r2, [r1, #0]
 800afbc:	2001      	movs	r0, #1
 800afbe:	4770      	bx	lr

0800afc0 <__sfputc_r>:
 800afc0:	6893      	ldr	r3, [r2, #8]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	b410      	push	{r4}
 800afc8:	6093      	str	r3, [r2, #8]
 800afca:	da08      	bge.n	800afde <__sfputc_r+0x1e>
 800afcc:	6994      	ldr	r4, [r2, #24]
 800afce:	42a3      	cmp	r3, r4
 800afd0:	db01      	blt.n	800afd6 <__sfputc_r+0x16>
 800afd2:	290a      	cmp	r1, #10
 800afd4:	d103      	bne.n	800afde <__sfputc_r+0x1e>
 800afd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afda:	f7fe bdb8 	b.w	8009b4e <__swbuf_r>
 800afde:	6813      	ldr	r3, [r2, #0]
 800afe0:	1c58      	adds	r0, r3, #1
 800afe2:	6010      	str	r0, [r2, #0]
 800afe4:	7019      	strb	r1, [r3, #0]
 800afe6:	4608      	mov	r0, r1
 800afe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afec:	4770      	bx	lr

0800afee <__sfputs_r>:
 800afee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff0:	4606      	mov	r6, r0
 800aff2:	460f      	mov	r7, r1
 800aff4:	4614      	mov	r4, r2
 800aff6:	18d5      	adds	r5, r2, r3
 800aff8:	42ac      	cmp	r4, r5
 800affa:	d101      	bne.n	800b000 <__sfputs_r+0x12>
 800affc:	2000      	movs	r0, #0
 800affe:	e007      	b.n	800b010 <__sfputs_r+0x22>
 800b000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b004:	463a      	mov	r2, r7
 800b006:	4630      	mov	r0, r6
 800b008:	f7ff ffda 	bl	800afc0 <__sfputc_r>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d1f3      	bne.n	800aff8 <__sfputs_r+0xa>
 800b010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b014 <_vfiprintf_r>:
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	460d      	mov	r5, r1
 800b01a:	b09d      	sub	sp, #116	@ 0x74
 800b01c:	4614      	mov	r4, r2
 800b01e:	4698      	mov	r8, r3
 800b020:	4606      	mov	r6, r0
 800b022:	b118      	cbz	r0, 800b02c <_vfiprintf_r+0x18>
 800b024:	6a03      	ldr	r3, [r0, #32]
 800b026:	b90b      	cbnz	r3, 800b02c <_vfiprintf_r+0x18>
 800b028:	f7fe fca0 	bl	800996c <__sinit>
 800b02c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b02e:	07d9      	lsls	r1, r3, #31
 800b030:	d405      	bmi.n	800b03e <_vfiprintf_r+0x2a>
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	059a      	lsls	r2, r3, #22
 800b036:	d402      	bmi.n	800b03e <_vfiprintf_r+0x2a>
 800b038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b03a:	f7fe fea8 	bl	8009d8e <__retarget_lock_acquire_recursive>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	071b      	lsls	r3, r3, #28
 800b042:	d501      	bpl.n	800b048 <_vfiprintf_r+0x34>
 800b044:	692b      	ldr	r3, [r5, #16]
 800b046:	b99b      	cbnz	r3, 800b070 <_vfiprintf_r+0x5c>
 800b048:	4629      	mov	r1, r5
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7fe fdbe 	bl	8009bcc <__swsetup_r>
 800b050:	b170      	cbz	r0, 800b070 <_vfiprintf_r+0x5c>
 800b052:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b054:	07dc      	lsls	r4, r3, #31
 800b056:	d504      	bpl.n	800b062 <_vfiprintf_r+0x4e>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b01d      	add	sp, #116	@ 0x74
 800b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	0598      	lsls	r0, r3, #22
 800b066:	d4f7      	bmi.n	800b058 <_vfiprintf_r+0x44>
 800b068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b06a:	f7fe fe91 	bl	8009d90 <__retarget_lock_release_recursive>
 800b06e:	e7f3      	b.n	800b058 <_vfiprintf_r+0x44>
 800b070:	2300      	movs	r3, #0
 800b072:	9309      	str	r3, [sp, #36]	@ 0x24
 800b074:	2320      	movs	r3, #32
 800b076:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b07a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b07e:	2330      	movs	r3, #48	@ 0x30
 800b080:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b230 <_vfiprintf_r+0x21c>
 800b084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b088:	f04f 0901 	mov.w	r9, #1
 800b08c:	4623      	mov	r3, r4
 800b08e:	469a      	mov	sl, r3
 800b090:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b094:	b10a      	cbz	r2, 800b09a <_vfiprintf_r+0x86>
 800b096:	2a25      	cmp	r2, #37	@ 0x25
 800b098:	d1f9      	bne.n	800b08e <_vfiprintf_r+0x7a>
 800b09a:	ebba 0b04 	subs.w	fp, sl, r4
 800b09e:	d00b      	beq.n	800b0b8 <_vfiprintf_r+0xa4>
 800b0a0:	465b      	mov	r3, fp
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f7ff ffa1 	bl	800afee <__sfputs_r>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	f000 80a7 	beq.w	800b200 <_vfiprintf_r+0x1ec>
 800b0b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b4:	445a      	add	r2, fp
 800b0b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f000 809f 	beq.w	800b200 <_vfiprintf_r+0x1ec>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0cc:	f10a 0a01 	add.w	sl, sl, #1
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	9307      	str	r3, [sp, #28]
 800b0d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0da:	4654      	mov	r4, sl
 800b0dc:	2205      	movs	r2, #5
 800b0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e2:	4853      	ldr	r0, [pc, #332]	@ (800b230 <_vfiprintf_r+0x21c>)
 800b0e4:	f7f5 f8ac 	bl	8000240 <memchr>
 800b0e8:	9a04      	ldr	r2, [sp, #16]
 800b0ea:	b9d8      	cbnz	r0, 800b124 <_vfiprintf_r+0x110>
 800b0ec:	06d1      	lsls	r1, r2, #27
 800b0ee:	bf44      	itt	mi
 800b0f0:	2320      	movmi	r3, #32
 800b0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0f6:	0713      	lsls	r3, r2, #28
 800b0f8:	bf44      	itt	mi
 800b0fa:	232b      	movmi	r3, #43	@ 0x2b
 800b0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b100:	f89a 3000 	ldrb.w	r3, [sl]
 800b104:	2b2a      	cmp	r3, #42	@ 0x2a
 800b106:	d015      	beq.n	800b134 <_vfiprintf_r+0x120>
 800b108:	9a07      	ldr	r2, [sp, #28]
 800b10a:	4654      	mov	r4, sl
 800b10c:	2000      	movs	r0, #0
 800b10e:	f04f 0c0a 	mov.w	ip, #10
 800b112:	4621      	mov	r1, r4
 800b114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b118:	3b30      	subs	r3, #48	@ 0x30
 800b11a:	2b09      	cmp	r3, #9
 800b11c:	d94b      	bls.n	800b1b6 <_vfiprintf_r+0x1a2>
 800b11e:	b1b0      	cbz	r0, 800b14e <_vfiprintf_r+0x13a>
 800b120:	9207      	str	r2, [sp, #28]
 800b122:	e014      	b.n	800b14e <_vfiprintf_r+0x13a>
 800b124:	eba0 0308 	sub.w	r3, r0, r8
 800b128:	fa09 f303 	lsl.w	r3, r9, r3
 800b12c:	4313      	orrs	r3, r2
 800b12e:	9304      	str	r3, [sp, #16]
 800b130:	46a2      	mov	sl, r4
 800b132:	e7d2      	b.n	800b0da <_vfiprintf_r+0xc6>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	1d19      	adds	r1, r3, #4
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	9103      	str	r1, [sp, #12]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfbb      	ittet	lt
 800b140:	425b      	neglt	r3, r3
 800b142:	f042 0202 	orrlt.w	r2, r2, #2
 800b146:	9307      	strge	r3, [sp, #28]
 800b148:	9307      	strlt	r3, [sp, #28]
 800b14a:	bfb8      	it	lt
 800b14c:	9204      	strlt	r2, [sp, #16]
 800b14e:	7823      	ldrb	r3, [r4, #0]
 800b150:	2b2e      	cmp	r3, #46	@ 0x2e
 800b152:	d10a      	bne.n	800b16a <_vfiprintf_r+0x156>
 800b154:	7863      	ldrb	r3, [r4, #1]
 800b156:	2b2a      	cmp	r3, #42	@ 0x2a
 800b158:	d132      	bne.n	800b1c0 <_vfiprintf_r+0x1ac>
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	1d1a      	adds	r2, r3, #4
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	9203      	str	r2, [sp, #12]
 800b162:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b166:	3402      	adds	r4, #2
 800b168:	9305      	str	r3, [sp, #20]
 800b16a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b240 <_vfiprintf_r+0x22c>
 800b16e:	7821      	ldrb	r1, [r4, #0]
 800b170:	2203      	movs	r2, #3
 800b172:	4650      	mov	r0, sl
 800b174:	f7f5 f864 	bl	8000240 <memchr>
 800b178:	b138      	cbz	r0, 800b18a <_vfiprintf_r+0x176>
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	eba0 000a 	sub.w	r0, r0, sl
 800b180:	2240      	movs	r2, #64	@ 0x40
 800b182:	4082      	lsls	r2, r0
 800b184:	4313      	orrs	r3, r2
 800b186:	3401      	adds	r4, #1
 800b188:	9304      	str	r3, [sp, #16]
 800b18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18e:	4829      	ldr	r0, [pc, #164]	@ (800b234 <_vfiprintf_r+0x220>)
 800b190:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b194:	2206      	movs	r2, #6
 800b196:	f7f5 f853 	bl	8000240 <memchr>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d03f      	beq.n	800b21e <_vfiprintf_r+0x20a>
 800b19e:	4b26      	ldr	r3, [pc, #152]	@ (800b238 <_vfiprintf_r+0x224>)
 800b1a0:	bb1b      	cbnz	r3, 800b1ea <_vfiprintf_r+0x1d6>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	3307      	adds	r3, #7
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	9303      	str	r3, [sp, #12]
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	443b      	add	r3, r7
 800b1b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b4:	e76a      	b.n	800b08c <_vfiprintf_r+0x78>
 800b1b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	2001      	movs	r0, #1
 800b1be:	e7a8      	b.n	800b112 <_vfiprintf_r+0xfe>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	3401      	adds	r4, #1
 800b1c4:	9305      	str	r3, [sp, #20]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	f04f 0c0a 	mov.w	ip, #10
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1d2:	3a30      	subs	r2, #48	@ 0x30
 800b1d4:	2a09      	cmp	r2, #9
 800b1d6:	d903      	bls.n	800b1e0 <_vfiprintf_r+0x1cc>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0c6      	beq.n	800b16a <_vfiprintf_r+0x156>
 800b1dc:	9105      	str	r1, [sp, #20]
 800b1de:	e7c4      	b.n	800b16a <_vfiprintf_r+0x156>
 800b1e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e7f0      	b.n	800b1cc <_vfiprintf_r+0x1b8>
 800b1ea:	ab03      	add	r3, sp, #12
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4b12      	ldr	r3, [pc, #72]	@ (800b23c <_vfiprintf_r+0x228>)
 800b1f2:	a904      	add	r1, sp, #16
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f3af 8000 	nop.w
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	1c78      	adds	r0, r7, #1
 800b1fe:	d1d6      	bne.n	800b1ae <_vfiprintf_r+0x19a>
 800b200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b202:	07d9      	lsls	r1, r3, #31
 800b204:	d405      	bmi.n	800b212 <_vfiprintf_r+0x1fe>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	059a      	lsls	r2, r3, #22
 800b20a:	d402      	bmi.n	800b212 <_vfiprintf_r+0x1fe>
 800b20c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b20e:	f7fe fdbf 	bl	8009d90 <__retarget_lock_release_recursive>
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	065b      	lsls	r3, r3, #25
 800b216:	f53f af1f 	bmi.w	800b058 <_vfiprintf_r+0x44>
 800b21a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b21c:	e71e      	b.n	800b05c <_vfiprintf_r+0x48>
 800b21e:	ab03      	add	r3, sp, #12
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	462a      	mov	r2, r5
 800b224:	4b05      	ldr	r3, [pc, #20]	@ (800b23c <_vfiprintf_r+0x228>)
 800b226:	a904      	add	r1, sp, #16
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f879 	bl	800b320 <_printf_i>
 800b22e:	e7e4      	b.n	800b1fa <_vfiprintf_r+0x1e6>
 800b230:	0800be61 	.word	0x0800be61
 800b234:	0800be6b 	.word	0x0800be6b
 800b238:	00000000 	.word	0x00000000
 800b23c:	0800afef 	.word	0x0800afef
 800b240:	0800be67 	.word	0x0800be67

0800b244 <_printf_common>:
 800b244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b248:	4616      	mov	r6, r2
 800b24a:	4698      	mov	r8, r3
 800b24c:	688a      	ldr	r2, [r1, #8]
 800b24e:	690b      	ldr	r3, [r1, #16]
 800b250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b254:	4293      	cmp	r3, r2
 800b256:	bfb8      	it	lt
 800b258:	4613      	movlt	r3, r2
 800b25a:	6033      	str	r3, [r6, #0]
 800b25c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b260:	4607      	mov	r7, r0
 800b262:	460c      	mov	r4, r1
 800b264:	b10a      	cbz	r2, 800b26a <_printf_common+0x26>
 800b266:	3301      	adds	r3, #1
 800b268:	6033      	str	r3, [r6, #0]
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	0699      	lsls	r1, r3, #26
 800b26e:	bf42      	ittt	mi
 800b270:	6833      	ldrmi	r3, [r6, #0]
 800b272:	3302      	addmi	r3, #2
 800b274:	6033      	strmi	r3, [r6, #0]
 800b276:	6825      	ldr	r5, [r4, #0]
 800b278:	f015 0506 	ands.w	r5, r5, #6
 800b27c:	d106      	bne.n	800b28c <_printf_common+0x48>
 800b27e:	f104 0a19 	add.w	sl, r4, #25
 800b282:	68e3      	ldr	r3, [r4, #12]
 800b284:	6832      	ldr	r2, [r6, #0]
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	42ab      	cmp	r3, r5
 800b28a:	dc26      	bgt.n	800b2da <_printf_common+0x96>
 800b28c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b290:	6822      	ldr	r2, [r4, #0]
 800b292:	3b00      	subs	r3, #0
 800b294:	bf18      	it	ne
 800b296:	2301      	movne	r3, #1
 800b298:	0692      	lsls	r2, r2, #26
 800b29a:	d42b      	bmi.n	800b2f4 <_printf_common+0xb0>
 800b29c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	47c8      	blx	r9
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	d01e      	beq.n	800b2e8 <_printf_common+0xa4>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	6922      	ldr	r2, [r4, #16]
 800b2ae:	f003 0306 	and.w	r3, r3, #6
 800b2b2:	2b04      	cmp	r3, #4
 800b2b4:	bf02      	ittt	eq
 800b2b6:	68e5      	ldreq	r5, [r4, #12]
 800b2b8:	6833      	ldreq	r3, [r6, #0]
 800b2ba:	1aed      	subeq	r5, r5, r3
 800b2bc:	68a3      	ldr	r3, [r4, #8]
 800b2be:	bf0c      	ite	eq
 800b2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c4:	2500      	movne	r5, #0
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	bfc4      	itt	gt
 800b2ca:	1a9b      	subgt	r3, r3, r2
 800b2cc:	18ed      	addgt	r5, r5, r3
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	341a      	adds	r4, #26
 800b2d2:	42b5      	cmp	r5, r6
 800b2d4:	d11a      	bne.n	800b30c <_printf_common+0xc8>
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	e008      	b.n	800b2ec <_printf_common+0xa8>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	4652      	mov	r2, sl
 800b2de:	4641      	mov	r1, r8
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	47c8      	blx	r9
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d103      	bne.n	800b2f0 <_printf_common+0xac>
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f0:	3501      	adds	r5, #1
 800b2f2:	e7c6      	b.n	800b282 <_printf_common+0x3e>
 800b2f4:	18e1      	adds	r1, r4, r3
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	2030      	movs	r0, #48	@ 0x30
 800b2fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2fe:	4422      	add	r2, r4
 800b300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b308:	3302      	adds	r3, #2
 800b30a:	e7c7      	b.n	800b29c <_printf_common+0x58>
 800b30c:	2301      	movs	r3, #1
 800b30e:	4622      	mov	r2, r4
 800b310:	4641      	mov	r1, r8
 800b312:	4638      	mov	r0, r7
 800b314:	47c8      	blx	r9
 800b316:	3001      	adds	r0, #1
 800b318:	d0e6      	beq.n	800b2e8 <_printf_common+0xa4>
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7d9      	b.n	800b2d2 <_printf_common+0x8e>
	...

0800b320 <_printf_i>:
 800b320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	7e0f      	ldrb	r7, [r1, #24]
 800b326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b328:	2f78      	cmp	r7, #120	@ 0x78
 800b32a:	4691      	mov	r9, r2
 800b32c:	4680      	mov	r8, r0
 800b32e:	460c      	mov	r4, r1
 800b330:	469a      	mov	sl, r3
 800b332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b336:	d807      	bhi.n	800b348 <_printf_i+0x28>
 800b338:	2f62      	cmp	r7, #98	@ 0x62
 800b33a:	d80a      	bhi.n	800b352 <_printf_i+0x32>
 800b33c:	2f00      	cmp	r7, #0
 800b33e:	f000 80d2 	beq.w	800b4e6 <_printf_i+0x1c6>
 800b342:	2f58      	cmp	r7, #88	@ 0x58
 800b344:	f000 80b9 	beq.w	800b4ba <_printf_i+0x19a>
 800b348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b34c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b350:	e03a      	b.n	800b3c8 <_printf_i+0xa8>
 800b352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b356:	2b15      	cmp	r3, #21
 800b358:	d8f6      	bhi.n	800b348 <_printf_i+0x28>
 800b35a:	a101      	add	r1, pc, #4	@ (adr r1, 800b360 <_printf_i+0x40>)
 800b35c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b360:	0800b3b9 	.word	0x0800b3b9
 800b364:	0800b3cd 	.word	0x0800b3cd
 800b368:	0800b349 	.word	0x0800b349
 800b36c:	0800b349 	.word	0x0800b349
 800b370:	0800b349 	.word	0x0800b349
 800b374:	0800b349 	.word	0x0800b349
 800b378:	0800b3cd 	.word	0x0800b3cd
 800b37c:	0800b349 	.word	0x0800b349
 800b380:	0800b349 	.word	0x0800b349
 800b384:	0800b349 	.word	0x0800b349
 800b388:	0800b349 	.word	0x0800b349
 800b38c:	0800b4cd 	.word	0x0800b4cd
 800b390:	0800b3f7 	.word	0x0800b3f7
 800b394:	0800b487 	.word	0x0800b487
 800b398:	0800b349 	.word	0x0800b349
 800b39c:	0800b349 	.word	0x0800b349
 800b3a0:	0800b4ef 	.word	0x0800b4ef
 800b3a4:	0800b349 	.word	0x0800b349
 800b3a8:	0800b3f7 	.word	0x0800b3f7
 800b3ac:	0800b349 	.word	0x0800b349
 800b3b0:	0800b349 	.word	0x0800b349
 800b3b4:	0800b48f 	.word	0x0800b48f
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	1d1a      	adds	r2, r3, #4
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6032      	str	r2, [r6, #0]
 800b3c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e09d      	b.n	800b508 <_printf_i+0x1e8>
 800b3cc:	6833      	ldr	r3, [r6, #0]
 800b3ce:	6820      	ldr	r0, [r4, #0]
 800b3d0:	1d19      	adds	r1, r3, #4
 800b3d2:	6031      	str	r1, [r6, #0]
 800b3d4:	0606      	lsls	r6, r0, #24
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0xbc>
 800b3d8:	681d      	ldr	r5, [r3, #0]
 800b3da:	e003      	b.n	800b3e4 <_printf_i+0xc4>
 800b3dc:	0645      	lsls	r5, r0, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0xb8>
 800b3e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3e4:	2d00      	cmp	r5, #0
 800b3e6:	da03      	bge.n	800b3f0 <_printf_i+0xd0>
 800b3e8:	232d      	movs	r3, #45	@ 0x2d
 800b3ea:	426d      	negs	r5, r5
 800b3ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f0:	4859      	ldr	r0, [pc, #356]	@ (800b558 <_printf_i+0x238>)
 800b3f2:	230a      	movs	r3, #10
 800b3f4:	e011      	b.n	800b41a <_printf_i+0xfa>
 800b3f6:	6821      	ldr	r1, [r4, #0]
 800b3f8:	6833      	ldr	r3, [r6, #0]
 800b3fa:	0608      	lsls	r0, r1, #24
 800b3fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b400:	d402      	bmi.n	800b408 <_printf_i+0xe8>
 800b402:	0649      	lsls	r1, r1, #25
 800b404:	bf48      	it	mi
 800b406:	b2ad      	uxthmi	r5, r5
 800b408:	2f6f      	cmp	r7, #111	@ 0x6f
 800b40a:	4853      	ldr	r0, [pc, #332]	@ (800b558 <_printf_i+0x238>)
 800b40c:	6033      	str	r3, [r6, #0]
 800b40e:	bf14      	ite	ne
 800b410:	230a      	movne	r3, #10
 800b412:	2308      	moveq	r3, #8
 800b414:	2100      	movs	r1, #0
 800b416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b41a:	6866      	ldr	r6, [r4, #4]
 800b41c:	60a6      	str	r6, [r4, #8]
 800b41e:	2e00      	cmp	r6, #0
 800b420:	bfa2      	ittt	ge
 800b422:	6821      	ldrge	r1, [r4, #0]
 800b424:	f021 0104 	bicge.w	r1, r1, #4
 800b428:	6021      	strge	r1, [r4, #0]
 800b42a:	b90d      	cbnz	r5, 800b430 <_printf_i+0x110>
 800b42c:	2e00      	cmp	r6, #0
 800b42e:	d04b      	beq.n	800b4c8 <_printf_i+0x1a8>
 800b430:	4616      	mov	r6, r2
 800b432:	fbb5 f1f3 	udiv	r1, r5, r3
 800b436:	fb03 5711 	mls	r7, r3, r1, r5
 800b43a:	5dc7      	ldrb	r7, [r0, r7]
 800b43c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b440:	462f      	mov	r7, r5
 800b442:	42bb      	cmp	r3, r7
 800b444:	460d      	mov	r5, r1
 800b446:	d9f4      	bls.n	800b432 <_printf_i+0x112>
 800b448:	2b08      	cmp	r3, #8
 800b44a:	d10b      	bne.n	800b464 <_printf_i+0x144>
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	07df      	lsls	r7, r3, #31
 800b450:	d508      	bpl.n	800b464 <_printf_i+0x144>
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	6861      	ldr	r1, [r4, #4]
 800b456:	4299      	cmp	r1, r3
 800b458:	bfde      	ittt	le
 800b45a:	2330      	movle	r3, #48	@ 0x30
 800b45c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b460:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b464:	1b92      	subs	r2, r2, r6
 800b466:	6122      	str	r2, [r4, #16]
 800b468:	f8cd a000 	str.w	sl, [sp]
 800b46c:	464b      	mov	r3, r9
 800b46e:	aa03      	add	r2, sp, #12
 800b470:	4621      	mov	r1, r4
 800b472:	4640      	mov	r0, r8
 800b474:	f7ff fee6 	bl	800b244 <_printf_common>
 800b478:	3001      	adds	r0, #1
 800b47a:	d14a      	bne.n	800b512 <_printf_i+0x1f2>
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	b004      	add	sp, #16
 800b482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	f043 0320 	orr.w	r3, r3, #32
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	4833      	ldr	r0, [pc, #204]	@ (800b55c <_printf_i+0x23c>)
 800b490:	2778      	movs	r7, #120	@ 0x78
 800b492:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	6831      	ldr	r1, [r6, #0]
 800b49a:	061f      	lsls	r7, r3, #24
 800b49c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4a0:	d402      	bmi.n	800b4a8 <_printf_i+0x188>
 800b4a2:	065f      	lsls	r7, r3, #25
 800b4a4:	bf48      	it	mi
 800b4a6:	b2ad      	uxthmi	r5, r5
 800b4a8:	6031      	str	r1, [r6, #0]
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	bf44      	itt	mi
 800b4ae:	f043 0320 	orrmi.w	r3, r3, #32
 800b4b2:	6023      	strmi	r3, [r4, #0]
 800b4b4:	b11d      	cbz	r5, 800b4be <_printf_i+0x19e>
 800b4b6:	2310      	movs	r3, #16
 800b4b8:	e7ac      	b.n	800b414 <_printf_i+0xf4>
 800b4ba:	4827      	ldr	r0, [pc, #156]	@ (800b558 <_printf_i+0x238>)
 800b4bc:	e7e9      	b.n	800b492 <_printf_i+0x172>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	f023 0320 	bic.w	r3, r3, #32
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	e7f6      	b.n	800b4b6 <_printf_i+0x196>
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	e7bd      	b.n	800b448 <_printf_i+0x128>
 800b4cc:	6833      	ldr	r3, [r6, #0]
 800b4ce:	6825      	ldr	r5, [r4, #0]
 800b4d0:	6961      	ldr	r1, [r4, #20]
 800b4d2:	1d18      	adds	r0, r3, #4
 800b4d4:	6030      	str	r0, [r6, #0]
 800b4d6:	062e      	lsls	r6, r5, #24
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	d501      	bpl.n	800b4e0 <_printf_i+0x1c0>
 800b4dc:	6019      	str	r1, [r3, #0]
 800b4de:	e002      	b.n	800b4e6 <_printf_i+0x1c6>
 800b4e0:	0668      	lsls	r0, r5, #25
 800b4e2:	d5fb      	bpl.n	800b4dc <_printf_i+0x1bc>
 800b4e4:	8019      	strh	r1, [r3, #0]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	6123      	str	r3, [r4, #16]
 800b4ea:	4616      	mov	r6, r2
 800b4ec:	e7bc      	b.n	800b468 <_printf_i+0x148>
 800b4ee:	6833      	ldr	r3, [r6, #0]
 800b4f0:	1d1a      	adds	r2, r3, #4
 800b4f2:	6032      	str	r2, [r6, #0]
 800b4f4:	681e      	ldr	r6, [r3, #0]
 800b4f6:	6862      	ldr	r2, [r4, #4]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7f4 fea0 	bl	8000240 <memchr>
 800b500:	b108      	cbz	r0, 800b506 <_printf_i+0x1e6>
 800b502:	1b80      	subs	r0, r0, r6
 800b504:	6060      	str	r0, [r4, #4]
 800b506:	6863      	ldr	r3, [r4, #4]
 800b508:	6123      	str	r3, [r4, #16]
 800b50a:	2300      	movs	r3, #0
 800b50c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b510:	e7aa      	b.n	800b468 <_printf_i+0x148>
 800b512:	6923      	ldr	r3, [r4, #16]
 800b514:	4632      	mov	r2, r6
 800b516:	4649      	mov	r1, r9
 800b518:	4640      	mov	r0, r8
 800b51a:	47d0      	blx	sl
 800b51c:	3001      	adds	r0, #1
 800b51e:	d0ad      	beq.n	800b47c <_printf_i+0x15c>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	079b      	lsls	r3, r3, #30
 800b524:	d413      	bmi.n	800b54e <_printf_i+0x22e>
 800b526:	68e0      	ldr	r0, [r4, #12]
 800b528:	9b03      	ldr	r3, [sp, #12]
 800b52a:	4298      	cmp	r0, r3
 800b52c:	bfb8      	it	lt
 800b52e:	4618      	movlt	r0, r3
 800b530:	e7a6      	b.n	800b480 <_printf_i+0x160>
 800b532:	2301      	movs	r3, #1
 800b534:	4632      	mov	r2, r6
 800b536:	4649      	mov	r1, r9
 800b538:	4640      	mov	r0, r8
 800b53a:	47d0      	blx	sl
 800b53c:	3001      	adds	r0, #1
 800b53e:	d09d      	beq.n	800b47c <_printf_i+0x15c>
 800b540:	3501      	adds	r5, #1
 800b542:	68e3      	ldr	r3, [r4, #12]
 800b544:	9903      	ldr	r1, [sp, #12]
 800b546:	1a5b      	subs	r3, r3, r1
 800b548:	42ab      	cmp	r3, r5
 800b54a:	dcf2      	bgt.n	800b532 <_printf_i+0x212>
 800b54c:	e7eb      	b.n	800b526 <_printf_i+0x206>
 800b54e:	2500      	movs	r5, #0
 800b550:	f104 0619 	add.w	r6, r4, #25
 800b554:	e7f5      	b.n	800b542 <_printf_i+0x222>
 800b556:	bf00      	nop
 800b558:	0800be72 	.word	0x0800be72
 800b55c:	0800be83 	.word	0x0800be83

0800b560 <__sflush_r>:
 800b560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b568:	0716      	lsls	r6, r2, #28
 800b56a:	4605      	mov	r5, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	d454      	bmi.n	800b61a <__sflush_r+0xba>
 800b570:	684b      	ldr	r3, [r1, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	dc02      	bgt.n	800b57c <__sflush_r+0x1c>
 800b576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b578:	2b00      	cmp	r3, #0
 800b57a:	dd48      	ble.n	800b60e <__sflush_r+0xae>
 800b57c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d045      	beq.n	800b60e <__sflush_r+0xae>
 800b582:	2300      	movs	r3, #0
 800b584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b588:	682f      	ldr	r7, [r5, #0]
 800b58a:	6a21      	ldr	r1, [r4, #32]
 800b58c:	602b      	str	r3, [r5, #0]
 800b58e:	d030      	beq.n	800b5f2 <__sflush_r+0x92>
 800b590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	0759      	lsls	r1, r3, #29
 800b596:	d505      	bpl.n	800b5a4 <__sflush_r+0x44>
 800b598:	6863      	ldr	r3, [r4, #4]
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b59e:	b10b      	cbz	r3, 800b5a4 <__sflush_r+0x44>
 800b5a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5a8:	6a21      	ldr	r1, [r4, #32]
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	47b0      	blx	r6
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	d106      	bne.n	800b5c2 <__sflush_r+0x62>
 800b5b4:	6829      	ldr	r1, [r5, #0]
 800b5b6:	291d      	cmp	r1, #29
 800b5b8:	d82b      	bhi.n	800b612 <__sflush_r+0xb2>
 800b5ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b664 <__sflush_r+0x104>)
 800b5bc:	410a      	asrs	r2, r1
 800b5be:	07d6      	lsls	r6, r2, #31
 800b5c0:	d427      	bmi.n	800b612 <__sflush_r+0xb2>
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	6062      	str	r2, [r4, #4]
 800b5c6:	04d9      	lsls	r1, r3, #19
 800b5c8:	6922      	ldr	r2, [r4, #16]
 800b5ca:	6022      	str	r2, [r4, #0]
 800b5cc:	d504      	bpl.n	800b5d8 <__sflush_r+0x78>
 800b5ce:	1c42      	adds	r2, r0, #1
 800b5d0:	d101      	bne.n	800b5d6 <__sflush_r+0x76>
 800b5d2:	682b      	ldr	r3, [r5, #0]
 800b5d4:	b903      	cbnz	r3, 800b5d8 <__sflush_r+0x78>
 800b5d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b5d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5da:	602f      	str	r7, [r5, #0]
 800b5dc:	b1b9      	cbz	r1, 800b60e <__sflush_r+0xae>
 800b5de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5e2:	4299      	cmp	r1, r3
 800b5e4:	d002      	beq.n	800b5ec <__sflush_r+0x8c>
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f7fe fbea 	bl	8009dc0 <_free_r>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5f0:	e00d      	b.n	800b60e <__sflush_r+0xae>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	47b0      	blx	r6
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	1c50      	adds	r0, r2, #1
 800b5fc:	d1c9      	bne.n	800b592 <__sflush_r+0x32>
 800b5fe:	682b      	ldr	r3, [r5, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d0c6      	beq.n	800b592 <__sflush_r+0x32>
 800b604:	2b1d      	cmp	r3, #29
 800b606:	d001      	beq.n	800b60c <__sflush_r+0xac>
 800b608:	2b16      	cmp	r3, #22
 800b60a:	d11e      	bne.n	800b64a <__sflush_r+0xea>
 800b60c:	602f      	str	r7, [r5, #0]
 800b60e:	2000      	movs	r0, #0
 800b610:	e022      	b.n	800b658 <__sflush_r+0xf8>
 800b612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b616:	b21b      	sxth	r3, r3
 800b618:	e01b      	b.n	800b652 <__sflush_r+0xf2>
 800b61a:	690f      	ldr	r7, [r1, #16]
 800b61c:	2f00      	cmp	r7, #0
 800b61e:	d0f6      	beq.n	800b60e <__sflush_r+0xae>
 800b620:	0793      	lsls	r3, r2, #30
 800b622:	680e      	ldr	r6, [r1, #0]
 800b624:	bf08      	it	eq
 800b626:	694b      	ldreq	r3, [r1, #20]
 800b628:	600f      	str	r7, [r1, #0]
 800b62a:	bf18      	it	ne
 800b62c:	2300      	movne	r3, #0
 800b62e:	eba6 0807 	sub.w	r8, r6, r7
 800b632:	608b      	str	r3, [r1, #8]
 800b634:	f1b8 0f00 	cmp.w	r8, #0
 800b638:	dde9      	ble.n	800b60e <__sflush_r+0xae>
 800b63a:	6a21      	ldr	r1, [r4, #32]
 800b63c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b63e:	4643      	mov	r3, r8
 800b640:	463a      	mov	r2, r7
 800b642:	4628      	mov	r0, r5
 800b644:	47b0      	blx	r6
 800b646:	2800      	cmp	r0, #0
 800b648:	dc08      	bgt.n	800b65c <__sflush_r+0xfc>
 800b64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	f04f 30ff 	mov.w	r0, #4294967295
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	4407      	add	r7, r0
 800b65e:	eba8 0800 	sub.w	r8, r8, r0
 800b662:	e7e7      	b.n	800b634 <__sflush_r+0xd4>
 800b664:	dfbffffe 	.word	0xdfbffffe

0800b668 <_fflush_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	690b      	ldr	r3, [r1, #16]
 800b66c:	4605      	mov	r5, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	b913      	cbnz	r3, 800b678 <_fflush_r+0x10>
 800b672:	2500      	movs	r5, #0
 800b674:	4628      	mov	r0, r5
 800b676:	bd38      	pop	{r3, r4, r5, pc}
 800b678:	b118      	cbz	r0, 800b682 <_fflush_r+0x1a>
 800b67a:	6a03      	ldr	r3, [r0, #32]
 800b67c:	b90b      	cbnz	r3, 800b682 <_fflush_r+0x1a>
 800b67e:	f7fe f975 	bl	800996c <__sinit>
 800b682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0f3      	beq.n	800b672 <_fflush_r+0xa>
 800b68a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b68c:	07d0      	lsls	r0, r2, #31
 800b68e:	d404      	bmi.n	800b69a <_fflush_r+0x32>
 800b690:	0599      	lsls	r1, r3, #22
 800b692:	d402      	bmi.n	800b69a <_fflush_r+0x32>
 800b694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b696:	f7fe fb7a 	bl	8009d8e <__retarget_lock_acquire_recursive>
 800b69a:	4628      	mov	r0, r5
 800b69c:	4621      	mov	r1, r4
 800b69e:	f7ff ff5f 	bl	800b560 <__sflush_r>
 800b6a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6a4:	07da      	lsls	r2, r3, #31
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	d4e4      	bmi.n	800b674 <_fflush_r+0xc>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	059b      	lsls	r3, r3, #22
 800b6ae:	d4e1      	bmi.n	800b674 <_fflush_r+0xc>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6b2:	f7fe fb6d 	bl	8009d90 <__retarget_lock_release_recursive>
 800b6b6:	e7dd      	b.n	800b674 <_fflush_r+0xc>

0800b6b8 <__swhatbuf_r>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c0:	2900      	cmp	r1, #0
 800b6c2:	b096      	sub	sp, #88	@ 0x58
 800b6c4:	4615      	mov	r5, r2
 800b6c6:	461e      	mov	r6, r3
 800b6c8:	da0d      	bge.n	800b6e6 <__swhatbuf_r+0x2e>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6d0:	f04f 0100 	mov.w	r1, #0
 800b6d4:	bf14      	ite	ne
 800b6d6:	2340      	movne	r3, #64	@ 0x40
 800b6d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6dc:	2000      	movs	r0, #0
 800b6de:	6031      	str	r1, [r6, #0]
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	b016      	add	sp, #88	@ 0x58
 800b6e4:	bd70      	pop	{r4, r5, r6, pc}
 800b6e6:	466a      	mov	r2, sp
 800b6e8:	f000 f87c 	bl	800b7e4 <_fstat_r>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	dbec      	blt.n	800b6ca <__swhatbuf_r+0x12>
 800b6f0:	9901      	ldr	r1, [sp, #4]
 800b6f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b6f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b6fa:	4259      	negs	r1, r3
 800b6fc:	4159      	adcs	r1, r3
 800b6fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b702:	e7eb      	b.n	800b6dc <__swhatbuf_r+0x24>

0800b704 <__smakebuf_r>:
 800b704:	898b      	ldrh	r3, [r1, #12]
 800b706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b708:	079d      	lsls	r5, r3, #30
 800b70a:	4606      	mov	r6, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	d507      	bpl.n	800b720 <__smakebuf_r+0x1c>
 800b710:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b714:	6023      	str	r3, [r4, #0]
 800b716:	6123      	str	r3, [r4, #16]
 800b718:	2301      	movs	r3, #1
 800b71a:	6163      	str	r3, [r4, #20]
 800b71c:	b003      	add	sp, #12
 800b71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b720:	ab01      	add	r3, sp, #4
 800b722:	466a      	mov	r2, sp
 800b724:	f7ff ffc8 	bl	800b6b8 <__swhatbuf_r>
 800b728:	9f00      	ldr	r7, [sp, #0]
 800b72a:	4605      	mov	r5, r0
 800b72c:	4639      	mov	r1, r7
 800b72e:	4630      	mov	r0, r6
 800b730:	f7fe feec 	bl	800a50c <_malloc_r>
 800b734:	b948      	cbnz	r0, 800b74a <__smakebuf_r+0x46>
 800b736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73a:	059a      	lsls	r2, r3, #22
 800b73c:	d4ee      	bmi.n	800b71c <__smakebuf_r+0x18>
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	f043 0302 	orr.w	r3, r3, #2
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	e7e2      	b.n	800b710 <__smakebuf_r+0xc>
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	6020      	str	r0, [r4, #0]
 800b74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b752:	81a3      	strh	r3, [r4, #12]
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b75a:	b15b      	cbz	r3, 800b774 <__smakebuf_r+0x70>
 800b75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b760:	4630      	mov	r0, r6
 800b762:	f000 f851 	bl	800b808 <_isatty_r>
 800b766:	b128      	cbz	r0, 800b774 <__smakebuf_r+0x70>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f023 0303 	bic.w	r3, r3, #3
 800b76e:	f043 0301 	orr.w	r3, r3, #1
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	431d      	orrs	r5, r3
 800b778:	81a5      	strh	r5, [r4, #12]
 800b77a:	e7cf      	b.n	800b71c <__smakebuf_r+0x18>

0800b77c <_putc_r>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	460d      	mov	r5, r1
 800b780:	4614      	mov	r4, r2
 800b782:	4606      	mov	r6, r0
 800b784:	b118      	cbz	r0, 800b78e <_putc_r+0x12>
 800b786:	6a03      	ldr	r3, [r0, #32]
 800b788:	b90b      	cbnz	r3, 800b78e <_putc_r+0x12>
 800b78a:	f7fe f8ef 	bl	800996c <__sinit>
 800b78e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b790:	07d8      	lsls	r0, r3, #31
 800b792:	d405      	bmi.n	800b7a0 <_putc_r+0x24>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	0599      	lsls	r1, r3, #22
 800b798:	d402      	bmi.n	800b7a0 <_putc_r+0x24>
 800b79a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b79c:	f7fe faf7 	bl	8009d8e <__retarget_lock_acquire_recursive>
 800b7a0:	68a3      	ldr	r3, [r4, #8]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	da05      	bge.n	800b7b6 <_putc_r+0x3a>
 800b7aa:	69a2      	ldr	r2, [r4, #24]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	db12      	blt.n	800b7d6 <_putc_r+0x5a>
 800b7b0:	b2eb      	uxtb	r3, r5
 800b7b2:	2b0a      	cmp	r3, #10
 800b7b4:	d00f      	beq.n	800b7d6 <_putc_r+0x5a>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	701d      	strb	r5, [r3, #0]
 800b7be:	b2ed      	uxtb	r5, r5
 800b7c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7c2:	07da      	lsls	r2, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_putc_r+0x56>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	059b      	lsls	r3, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_putc_r+0x56>
 800b7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ce:	f7fe fadf 	bl	8009d90 <__retarget_lock_release_recursive>
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	bd70      	pop	{r4, r5, r6, pc}
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7fe f9b7 	bl	8009b4e <__swbuf_r>
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	e7ed      	b.n	800b7c0 <_putc_r+0x44>

0800b7e4 <_fstat_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d07      	ldr	r5, [pc, #28]	@ (800b804 <_fstat_r+0x20>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	f7f7 fedf 	bl	80035b4 <_fstat>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	d102      	bne.n	800b800 <_fstat_r+0x1c>
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	b103      	cbz	r3, 800b800 <_fstat_r+0x1c>
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	bf00      	nop
 800b804:	20000ab8 	.word	0x20000ab8

0800b808 <_isatty_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d06      	ldr	r5, [pc, #24]	@ (800b824 <_isatty_r+0x1c>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	f7f7 fede 	bl	80035d4 <_isatty>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_isatty_r+0x1a>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_isatty_r+0x1a>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	20000ab8 	.word	0x20000ab8

0800b828 <_sbrk_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	@ (800b844 <_sbrk_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7f7 fee6 	bl	8003604 <_sbrk>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_sbrk_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_sbrk_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	20000ab8 	.word	0x20000ab8

0800b848 <__assert_func>:
 800b848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b84a:	4614      	mov	r4, r2
 800b84c:	461a      	mov	r2, r3
 800b84e:	4b09      	ldr	r3, [pc, #36]	@ (800b874 <__assert_func+0x2c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4605      	mov	r5, r0
 800b854:	68d8      	ldr	r0, [r3, #12]
 800b856:	b954      	cbnz	r4, 800b86e <__assert_func+0x26>
 800b858:	4b07      	ldr	r3, [pc, #28]	@ (800b878 <__assert_func+0x30>)
 800b85a:	461c      	mov	r4, r3
 800b85c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b860:	9100      	str	r1, [sp, #0]
 800b862:	462b      	mov	r3, r5
 800b864:	4905      	ldr	r1, [pc, #20]	@ (800b87c <__assert_func+0x34>)
 800b866:	f000 f829 	bl	800b8bc <fiprintf>
 800b86a:	f000 f839 	bl	800b8e0 <abort>
 800b86e:	4b04      	ldr	r3, [pc, #16]	@ (800b880 <__assert_func+0x38>)
 800b870:	e7f4      	b.n	800b85c <__assert_func+0x14>
 800b872:	bf00      	nop
 800b874:	20000198 	.word	0x20000198
 800b878:	0800becf 	.word	0x0800becf
 800b87c:	0800bea1 	.word	0x0800bea1
 800b880:	0800be94 	.word	0x0800be94

0800b884 <_calloc_r>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	fba1 5402 	umull	r5, r4, r1, r2
 800b88a:	b93c      	cbnz	r4, 800b89c <_calloc_r+0x18>
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7fe fe3d 	bl	800a50c <_malloc_r>
 800b892:	4606      	mov	r6, r0
 800b894:	b928      	cbnz	r0, 800b8a2 <_calloc_r+0x1e>
 800b896:	2600      	movs	r6, #0
 800b898:	4630      	mov	r0, r6
 800b89a:	bd70      	pop	{r4, r5, r6, pc}
 800b89c:	220c      	movs	r2, #12
 800b89e:	6002      	str	r2, [r0, #0]
 800b8a0:	e7f9      	b.n	800b896 <_calloc_r+0x12>
 800b8a2:	462a      	mov	r2, r5
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f7fe f9e7 	bl	8009c78 <memset>
 800b8aa:	e7f5      	b.n	800b898 <_calloc_r+0x14>

0800b8ac <malloc>:
 800b8ac:	4b02      	ldr	r3, [pc, #8]	@ (800b8b8 <malloc+0xc>)
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	f7fe be2b 	b.w	800a50c <_malloc_r>
 800b8b6:	bf00      	nop
 800b8b8:	20000198 	.word	0x20000198

0800b8bc <fiprintf>:
 800b8bc:	b40e      	push	{r1, r2, r3}
 800b8be:	b503      	push	{r0, r1, lr}
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	ab03      	add	r3, sp, #12
 800b8c4:	4805      	ldr	r0, [pc, #20]	@ (800b8dc <fiprintf+0x20>)
 800b8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ca:	6800      	ldr	r0, [r0, #0]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	f7ff fba1 	bl	800b014 <_vfiprintf_r>
 800b8d2:	b002      	add	sp, #8
 800b8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8d8:	b003      	add	sp, #12
 800b8da:	4770      	bx	lr
 800b8dc:	20000198 	.word	0x20000198

0800b8e0 <abort>:
 800b8e0:	b508      	push	{r3, lr}
 800b8e2:	2006      	movs	r0, #6
 800b8e4:	f000 f82c 	bl	800b940 <raise>
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	f7f7 fe2f 	bl	800354c <_exit>

0800b8ee <_raise_r>:
 800b8ee:	291f      	cmp	r1, #31
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	d904      	bls.n	800b902 <_raise_r+0x14>
 800b8f8:	2316      	movs	r3, #22
 800b8fa:	6003      	str	r3, [r0, #0]
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	bd38      	pop	{r3, r4, r5, pc}
 800b902:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b904:	b112      	cbz	r2, 800b90c <_raise_r+0x1e>
 800b906:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b90a:	b94b      	cbnz	r3, 800b920 <_raise_r+0x32>
 800b90c:	4628      	mov	r0, r5
 800b90e:	f000 f831 	bl	800b974 <_getpid_r>
 800b912:	4622      	mov	r2, r4
 800b914:	4601      	mov	r1, r0
 800b916:	4628      	mov	r0, r5
 800b918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b91c:	f000 b818 	b.w	800b950 <_kill_r>
 800b920:	2b01      	cmp	r3, #1
 800b922:	d00a      	beq.n	800b93a <_raise_r+0x4c>
 800b924:	1c59      	adds	r1, r3, #1
 800b926:	d103      	bne.n	800b930 <_raise_r+0x42>
 800b928:	2316      	movs	r3, #22
 800b92a:	6003      	str	r3, [r0, #0]
 800b92c:	2001      	movs	r0, #1
 800b92e:	e7e7      	b.n	800b900 <_raise_r+0x12>
 800b930:	2100      	movs	r1, #0
 800b932:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b936:	4620      	mov	r0, r4
 800b938:	4798      	blx	r3
 800b93a:	2000      	movs	r0, #0
 800b93c:	e7e0      	b.n	800b900 <_raise_r+0x12>
	...

0800b940 <raise>:
 800b940:	4b02      	ldr	r3, [pc, #8]	@ (800b94c <raise+0xc>)
 800b942:	4601      	mov	r1, r0
 800b944:	6818      	ldr	r0, [r3, #0]
 800b946:	f7ff bfd2 	b.w	800b8ee <_raise_r>
 800b94a:	bf00      	nop
 800b94c:	20000198 	.word	0x20000198

0800b950 <_kill_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d07      	ldr	r5, [pc, #28]	@ (800b970 <_kill_r+0x20>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	4611      	mov	r1, r2
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	f7f7 fde5 	bl	800352c <_kill>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d102      	bne.n	800b96c <_kill_r+0x1c>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b103      	cbz	r3, 800b96c <_kill_r+0x1c>
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	bf00      	nop
 800b970:	20000ab8 	.word	0x20000ab8

0800b974 <_getpid_r>:
 800b974:	f7f7 bdd2 	b.w	800351c <_getpid>

0800b978 <fmaxf>:
 800b978:	b508      	push	{r3, lr}
 800b97a:	ed2d 8b02 	vpush	{d8}
 800b97e:	eeb0 8a40 	vmov.f32	s16, s0
 800b982:	eef0 8a60 	vmov.f32	s17, s1
 800b986:	f000 f831 	bl	800b9ec <__fpclassifyf>
 800b98a:	b930      	cbnz	r0, 800b99a <fmaxf+0x22>
 800b98c:	eeb0 8a68 	vmov.f32	s16, s17
 800b990:	eeb0 0a48 	vmov.f32	s0, s16
 800b994:	ecbd 8b02 	vpop	{d8}
 800b998:	bd08      	pop	{r3, pc}
 800b99a:	eeb0 0a68 	vmov.f32	s0, s17
 800b99e:	f000 f825 	bl	800b9ec <__fpclassifyf>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d0f4      	beq.n	800b990 <fmaxf+0x18>
 800b9a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ae:	dded      	ble.n	800b98c <fmaxf+0x14>
 800b9b0:	e7ee      	b.n	800b990 <fmaxf+0x18>

0800b9b2 <fminf>:
 800b9b2:	b508      	push	{r3, lr}
 800b9b4:	ed2d 8b02 	vpush	{d8}
 800b9b8:	eeb0 8a40 	vmov.f32	s16, s0
 800b9bc:	eef0 8a60 	vmov.f32	s17, s1
 800b9c0:	f000 f814 	bl	800b9ec <__fpclassifyf>
 800b9c4:	b930      	cbnz	r0, 800b9d4 <fminf+0x22>
 800b9c6:	eeb0 8a68 	vmov.f32	s16, s17
 800b9ca:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ce:	ecbd 8b02 	vpop	{d8}
 800b9d2:	bd08      	pop	{r3, pc}
 800b9d4:	eeb0 0a68 	vmov.f32	s0, s17
 800b9d8:	f000 f808 	bl	800b9ec <__fpclassifyf>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d0f4      	beq.n	800b9ca <fminf+0x18>
 800b9e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e8:	d5ed      	bpl.n	800b9c6 <fminf+0x14>
 800b9ea:	e7ee      	b.n	800b9ca <fminf+0x18>

0800b9ec <__fpclassifyf>:
 800b9ec:	ee10 3a10 	vmov	r3, s0
 800b9f0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800b9f4:	d00d      	beq.n	800ba12 <__fpclassifyf+0x26>
 800b9f6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b9fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b9fe:	d30a      	bcc.n	800ba16 <__fpclassifyf+0x2a>
 800ba00:	4b07      	ldr	r3, [pc, #28]	@ (800ba20 <__fpclassifyf+0x34>)
 800ba02:	1e42      	subs	r2, r0, #1
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d908      	bls.n	800ba1a <__fpclassifyf+0x2e>
 800ba08:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ba0c:	4258      	negs	r0, r3
 800ba0e:	4158      	adcs	r0, r3
 800ba10:	4770      	bx	lr
 800ba12:	2002      	movs	r0, #2
 800ba14:	4770      	bx	lr
 800ba16:	2004      	movs	r0, #4
 800ba18:	4770      	bx	lr
 800ba1a:	2003      	movs	r0, #3
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	007ffffe 	.word	0x007ffffe

0800ba24 <_init>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	bf00      	nop
 800ba28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	469e      	mov	lr, r3
 800ba2e:	4770      	bx	lr

0800ba30 <_fini>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	bf00      	nop
 800ba34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba36:	bc08      	pop	{r3}
 800ba38:	469e      	mov	lr, r3
 800ba3a:	4770      	bx	lr
