
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008464  08008464  00009464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  080084bc  080084bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c4  080084c4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000094c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c8  080084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080084cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008cc  2000007c  08008548  0000a07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  08008548  0000a948  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176e1  00000000  00000000  0000a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e02  00000000  00000000  0002178b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00024590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106e  00000000  00000000  00025a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a70a  00000000  00000000  00026aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab51  00000000  00000000  000511f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010758a  00000000  00000000  0006bd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001732d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000610c  00000000  00000000  00173318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00179424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800844c 	.word	0x0800844c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800844c 	.word	0x0800844c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	@ 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 80005ec:	2301      	movs	r3, #1
 80005ee:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 80005f0:	e025      	b.n	800063e <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d109      	bne.n	800060e <cobsEncode+0x3e>
            FinishBlock(code);
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	7efa      	ldrb	r2, [r7, #27]
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	61fb      	str	r3, [r7, #28]
 8000608:	2301      	movs	r3, #1
 800060a:	76fb      	strb	r3, [r7, #27]
 800060c:	e014      	b.n	8000638 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800061a:	7efb      	ldrb	r3, [r7, #27]
 800061c:	3301      	adds	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	7efb      	ldrb	r3, [r7, #27]
 8000622:	2bff      	cmp	r3, #255	@ 0xff
 8000624:	d108      	bne.n	8000638 <cobsEncode+0x68>
                FinishBlock(code);
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	7efa      	ldrb	r2, [r7, #27]
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	607a      	str	r2, [r7, #4]
 8000632:	61fb      	str	r3, [r7, #28]
 8000634:	2301      	movs	r3, #1
 8000636:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	429a      	cmp	r2, r3
 8000644:	d3d5      	bcc.n	80005f2 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	7efa      	ldrb	r2, [r7, #27]
 800064a:	701a      	strb	r2, [r3, #0]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	607a      	str	r2, [r7, #4]
 8000652:	61fb      	str	r3, [r7, #28]
 8000654:	2301      	movs	r3, #1
 8000656:	76fb      	strb	r3, [r7, #27]
}
 8000658:	bf00      	nop
 800065a:	3724      	adds	r7, #36	@ 0x24
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	//if (logger->tx_enable) {
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3321      	adds	r3, #33	@ 0x21
 8000674:	461a      	mov	r2, r3
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	68b8      	ldr	r0, [r7, #8]
 800067a:	f7ff ffa9 	bl	80005d0 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3301      	adds	r3, #1
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f103 0121 	add.w	r1, r3, #33	@ 0x21
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	b29b      	uxth	r3, r3
 800069c:	3302      	adds	r3, #2
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2303      	movs	r3, #3
 80006a2:	f006 f96d 	bl	8006980 <HAL_UART_Transmit>
 80006a6:	4603      	mov	r3, r0
	//}

	return 0;
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	1c59      	adds	r1, r3, #1
 80006c2:	2303      	movs	r3, #3
 80006c4:	2201      	movs	r2, #1
 80006c6:	f006 f9e4 	bl	8006a92 <HAL_UART_Receive>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	785b      	ldrb	r3, [r3, #1]
 80006d4:	2b41      	cmp	r3, #65	@ 0x41
 80006d6:	d002      	beq.n	80006de <ertc_dlog_update+0x2e>
 80006d8:	2b42      	cmp	r3, #66	@ 0x42
 80006da:	d004      	beq.n	80006e6 <ertc_dlog_update+0x36>
 80006dc:	e007      	b.n	80006ee <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
				break;
 80006e4:	e006      	b.n	80006f4 <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
				break;
 80006ec:	e002      	b.n	80006f4 <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000706:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800070a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d013      	beq.n	800073e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000716:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800071a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800071e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00b      	beq.n	800073e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000726:	e000      	b.n	800072a <ITM_SendChar+0x2c>
    {
      __NOP();
 8000728:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800072a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f9      	beq.n	8000728 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000734:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800073e:	687b      	ldr	r3, [r7, #4]
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e009      	b.n	8000772 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	60ba      	str	r2, [r7, #8]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ffc9 	bl	80006fe <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	429a      	cmp	r2, r3
 8000778:	dbf1      	blt.n	800075e <_write+0x12>
	}
	return len;
 800077a:	687b      	ldr	r3, [r7, #4]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	0000      	movs	r0, r0
	...

08000788 <HAL_TIM_PeriodElapsedCallback>:
	float u1, u2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b092      	sub	sp, #72	@ 0x48
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	static int kLed = 0;
	// 1. Read encoder counts with overflow/underflow handling
	int32_t TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8000790:	4b6f      	ldr	r3, [pc, #444]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int32_t TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 8000798:	4b6e      	ldr	r3, [pc, #440]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t TIM3_DiffCount, TIM4_DiffCount;

	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a6c      	ldr	r2, [pc, #432]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	f040 824d 	bne.w	8000c46 <HAL_TIM_PeriodElapsedCallback+0x4be>
	{

		// Indicate that the program is running
		if(++kLed >= 10)
 80007ac:	4b6b      	ldr	r3, [pc, #428]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a6a      	ldr	r2, [pc, #424]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	4b69      	ldr	r3, [pc, #420]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b09      	cmp	r3, #9
 80007bc:	dd06      	ble.n	80007cc <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			kLed = 0;
 80007be:	4b67      	ldr	r3, [pc, #412]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	4866      	ldr	r0, [pc, #408]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007c8:	f002 fedd 	bl	8003586 <HAL_GPIO_TogglePin>
		}


		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80007cc:	4b60      	ldr	r3, [pc, #384]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	d12e      	bne.n	8000838 <HAL_TIM_PeriodElapsedCallback+0xb0>
			if (TIM3_CurrentCount <= prev_count_w1) {
 80007da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007dc:	ee07 3a90 	vmov	s15, r3
 80007e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e4:	4b5f      	ldr	r3, [pc, #380]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f2:	d80f      	bhi.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x8c>
				TIM3_DiffCount = TIM3_CurrentCount - prev_count_w1;
 80007f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007fe:	4b59      	ldr	r3, [pc, #356]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800080c:	ee17 3a90 	vmov	r3, s15
 8000810:	647b      	str	r3, [r7, #68]	@ 0x44
 8000812:	e041      	b.n	8000898 <HAL_TIM_PeriodElapsedCallback+0x110>
			} else {
				TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - prev_count_w1;
 8000814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000816:	f6a3 7301 	subw	r3, r3, #3841	@ 0xf01
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000822:	4b50      	ldr	r3, [pc, #320]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800082c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000830:	ee17 3a90 	vmov	r3, s15
 8000834:	647b      	str	r3, [r7, #68]	@ 0x44
 8000836:	e02f      	b.n	8000898 <HAL_TIM_PeriodElapsedCallback+0x110>
			}
		} else {
			if (TIM3_CurrentCount >= prev_count_w1) {
 8000838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000842:	4b48      	ldr	r3, [pc, #288]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000844:	edd3 7a00 	vldr	s15, [r3]
 8000848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	db0f      	blt.n	8000872 <HAL_TIM_PeriodElapsedCallback+0xea>
				TIM3_DiffCount = TIM3_CurrentCount - prev_count_w1;
 8000852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000854:	ee07 3a90 	vmov	s15, r3
 8000858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085c:	4b41      	ldr	r3, [pc, #260]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800086a:	ee17 3a90 	vmov	r3, s15
 800086e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000870:	e012      	b.n	8000898 <HAL_TIM_PeriodElapsedCallback+0x110>
			} else {
				TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - prev_count_w1) + TIM3_CurrentCount;
 8000872:	4b3c      	ldr	r3, [pc, #240]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8000968 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 800087c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000882:	ee07 3a90 	vmov	s15, r3
 8000886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800088e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000892:	ee17 3a90 	vmov	r3, s15
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
			}
		}
		prev_count_w1 = TIM3_CurrentCount;
 8000898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80008a4:	edc3 7a00 	vstr	s15, [r3]

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 80008a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	2b10      	cmp	r3, #16
 80008b4:	d12e      	bne.n	8000914 <HAL_TIM_PeriodElapsedCallback+0x18c>
			if (TIM4_CurrentCount <= prev_count_w2) {
 80008b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c0:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ce:	d80f      	bhi.n	80008f0 <HAL_TIM_PeriodElapsedCallback+0x168>
				TIM4_DiffCount = TIM4_CurrentCount - prev_count_w2;
 80008d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	4b24      	ldr	r3, [pc, #144]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e8:	ee17 3a90 	vmov	r3, s15
 80008ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80008ee:	e052      	b.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x20e>
			} else {
				TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - prev_count_w2;
 80008f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008f2:	f6a3 7301 	subw	r3, r3, #3841	@ 0xf01
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008fe:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000900:	edd3 7a00 	vldr	s15, [r3]
 8000904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090c:	ee17 3a90 	vmov	r3, s15
 8000910:	643b      	str	r3, [r7, #64]	@ 0x40
 8000912:	e040      	b.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x20e>
			}
		} else {
			if (TIM4_CurrentCount >= prev_count_w2) {
 8000914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000916:	ee07 3a90 	vmov	s15, r3
 800091a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000920:	edd3 7a00 	vldr	s15, [r3]
 8000924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800092c:	db20      	blt.n	8000970 <HAL_TIM_PeriodElapsedCallback+0x1e8>
				TIM4_DiffCount = TIM4_CurrentCount - prev_count_w2;
 800092e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000930:	ee07 3a90 	vmov	s15, r3
 8000934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800093a:	edd3 7a00 	vldr	s15, [r3]
 800093e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000946:	ee17 3a90 	vmov	r3, s15
 800094a:	643b      	str	r3, [r7, #64]	@ 0x40
 800094c:	e023      	b.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x20e>
 800094e:	bf00      	nop
 8000950:	20000284 	.word	0x20000284
 8000954:	200002d0 	.word	0x200002d0
 8000958:	40001000 	.word	0x40001000
 800095c:	200007e8 	.word	0x200007e8
 8000960:	40020400 	.word	0x40020400
 8000964:	200007c8 	.word	0x200007c8
 8000968:	45701000 	.word	0x45701000
 800096c:	200007cc 	.word	0x200007cc
			} else {
				TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - prev_count_w2) + TIM4_CurrentCount;
 8000970:	4bbb      	ldr	r3, [pc, #748]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8000c64 <HAL_TIM_PeriodElapsedCallback+0x4dc>
 800097a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800097e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000990:	ee17 3a90 	vmov	r3, s15
 8000994:	643b      	str	r3, [r7, #64]	@ 0x40
			}
		}
		prev_count_w2 = TIM4_CurrentCount;
 8000996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000998:	ee07 3a90 	vmov	s15, r3
 800099c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a0:	4baf      	ldr	r3, [pc, #700]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80009a2:	edc3 7a00 	vstr	s15, [r3]

		// 2. Calculate angular speed (rpm)
		float w1 = (TIM3_DiffCount / PPR_WHEEL) * 60.0f / TS;
 80009a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b0:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8000c68 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 80009b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b8:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 8000c6c <HAL_TIM_PeriodElapsedCallback+0x4e4>
 80009bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009c4:	ed9f 5ba2 	vldr	d5, [pc, #648]	@ 8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80009c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009d0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float w2 = (TIM4_DiffCount / PPR_WHEEL) * 60.0f / TS;
 80009d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009de:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8000c68 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 80009e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e6:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8000c6c <HAL_TIM_PeriodElapsedCallback+0x4e4>
 80009ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80009f2:	ed9f 5b97 	vldr	d5, [pc, #604]	@ 8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 80009f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// 3. Calculate error
		float error_w1 = ref_w1 - w1;
 8000a02:	4b9b      	ldr	r3, [pc, #620]	@ (8000c70 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8000a04:	ed93 7a00 	vldr	s14, [r3]
 8000a08:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a10:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float error_w2 = ref_w2 - w2;
 8000a14:	4b97      	ldr	r3, [pc, #604]	@ (8000c74 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000a16:	ed93 7a00 	vldr	s14, [r3]
 8000a1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a22:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		printf("%ld, %ld\n", (int32_t)error_w1, (int32_t)error_w2);
 8000a26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000a2e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a36:	ee17 2a90 	vmov	r2, s15
 8000a3a:	ee17 1a10 	vmov	r1, s14
 8000a3e:	488e      	ldr	r0, [pc, #568]	@ (8000c78 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8000a40:	f006 fe32 	bl	80076a8 <iprintf>

		// 4. Calculate proportional term
		float p_term_w1 = kp * error_w1;
 8000a44:	4b8d      	ldr	r3, [pc, #564]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float p_term_w2 = kp * error_w2;
 8000a56:	4b89      	ldr	r3, [pc, #548]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000a58:	edd3 7a00 	vldr	s15, [r3]
 8000a5c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a64:	edc7 7a08 	vstr	s15, [r7, #32]

		// 5. Calculate integral term
		integral_w1 += (ki * error_w1 - kw * sat_err1)* TS;
 8000a68:	4b85      	ldr	r3, [pc, #532]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000a6a:	edd3 7a00 	vldr	s15, [r3]
 8000a6e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a72:	4b84      	ldr	r3, [pc, #528]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000a74:	ed93 7a00 	vldr	s14, [r3]
 8000a78:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a80:	4b81      	ldr	r3, [pc, #516]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8000a82:	edd3 5a00 	vldr	s11, [r3]
 8000a86:	4b81      	ldr	r3, [pc, #516]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000a88:	edd3 7a00 	vldr	s15, [r3]
 8000a8c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a98:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8000a9c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000aa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa8:	4b75      	ldr	r3, [pc, #468]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000aaa:	edc3 7a00 	vstr	s15, [r3]
		integral_w2 += (ki * error_w2 - kw * sat_err2) * TS;
 8000aae:	4b78      	ldr	r3, [pc, #480]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000ab0:	edd3 7a00 	vldr	s15, [r3]
 8000ab4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ab8:	4b72      	ldr	r3, [pc, #456]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8000aba:	ed93 7a00 	vldr	s14, [r3]
 8000abe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ac6:	4b70      	ldr	r3, [pc, #448]	@ (8000c88 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8000ac8:	edd3 5a00 	vldr	s11, [r3]
 8000acc:	4b71      	ldr	r3, [pc, #452]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000ace:	edd3 7a00 	vldr	s15, [r3]
 8000ad2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ada:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ade:	ed9f 5b5c 	vldr	d5, [pc, #368]	@ 8000c50 <HAL_TIM_PeriodElapsedCallback+0x4c8>
 8000ae2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ae6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000aea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aee:	4b68      	ldr	r3, [pc, #416]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000af0:	edc3 7a00 	vstr	s15, [r3]

		// 6. Calculate control signal (u)
		float u1 = p_term_w1 + integral_w1;
 8000af4:	4b62      	ldr	r3, [pc, #392]	@ (8000c80 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8000af6:	edd3 7a00 	vldr	s15, [r3]
 8000afa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b02:	edc7 7a07 	vstr	s15, [r7, #28]
		float u2 = p_term_w2 + integral_w2;
 8000b06:	4b62      	ldr	r3, [pc, #392]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000b08:	edd3 7a00 	vldr	s15, [r3]
 8000b0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b14:	edc7 7a06 	vstr	s15, [r7, #24]

		// 7. Saturate control signal to avoid exceeding VBATT
		float u1_sat = fminf(fmaxf(u1, -VBATT), VBATT);
 8000b18:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8000b1c:	ed97 0a07 	vldr	s0, [r7, #28]
 8000b20:	f007 fc3e 	bl	80083a0 <fmaxf>
 8000b24:	eef0 7a40 	vmov.f32	s15, s0
 8000b28:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8000b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b30:	f007 fc53 	bl	80083da <fminf>
 8000b34:	ed87 0a05 	vstr	s0, [r7, #20]
		float u2_sat = fminf(fmaxf(u2, -VBATT), VBATT);
 8000b38:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8000b3c:	ed97 0a06 	vldr	s0, [r7, #24]
 8000b40:	f007 fc2e 	bl	80083a0 <fmaxf>
 8000b44:	eef0 7a40 	vmov.f32	s15, s0
 8000b48:	eef1 0a08 	vmov.f32	s1, #24	@ 0x40c00000  6.0
 8000b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b50:	f007 fc43 	bl	80083da <fminf>
 8000b54:	ed87 0a04 	vstr	s0, [r7, #16]

		sat_err1 = u1 - u1_sat;
 8000b58:	ed97 7a07 	vldr	s14, [r7, #28]
 8000b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b64:	4b49      	ldr	r3, [pc, #292]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000b66:	edc3 7a00 	vstr	s15, [r3]
		sat_err2 = u2 - u2_sat;
 8000b6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b76:	4b47      	ldr	r3, [pc, #284]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000b78:	edc3 7a00 	vstr	s15, [r3]

		int32_t duty1 = u1_sat * V2DUTY;
 8000b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b84:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8000c58 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8000b88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b90:	ee17 3a90 	vmov	r3, s15
 8000b94:	60fb      	str	r3, [r7, #12]
		int32_t duty2 = u2_sat * V2DUTY;
 8000b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b9e:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8000c58 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8000ba2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ba6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000baa:	ee17 3a90 	vmov	r3, s15
 8000bae:	60bb      	str	r3, [r7, #8]

		/* calculate duty properly */
		if ( duty1 >= 0) { // rotate forward
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db14      	blt.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x458>
			/* alternate between forward and coast */
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_1 , ( uint32_t ) duty1 );
 8000bb6:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_2 , 0) ;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38
			/* alternate between forward and brake , TIM8_ARR_VALUE is a define */
			 __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_1 , ( uint32_t ) TIM8_ARR_VALUE );
 8000bc6:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f240 128f 	movw	r2, #399	@ 0x18f
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
			 __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_2 , ( uint32_t )( TIM8_ARR_VALUE - duty1 ));
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f240 138f 	movw	r3, #399	@ 0x18f
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bde:	e008      	b.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x46a>

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_1 , 0) ;
 8000be0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2200      	movs	r2, #0
 8000be6:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_2 , ( uint32_t ) - duty1 );
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	425a      	negs	r2, r3
 8000bec:	4b2a      	ldr	r3, [pc, #168]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		if ( duty2 >= 0) { // rotate forward
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0c      	blt.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x48a>
			/* alternate between forward and coast */
			//__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_3 , ( uint32_t ) duty2 );
			//__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_4 , 0) ;
			/* alternate between forward and brake , TIM8_ARR_VALUE is a define */
			 __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_3 , ( uint32_t ) TIM8_ARR_VALUE );
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f240 128f 	movw	r2, #399	@ 0x18f
 8000c00:	63da      	str	r2, [r3, #60]	@ 0x3c
			 __HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_4 , ( uint32_t )( TIM8_ARR_VALUE - duty2 ));
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f240 138f 	movw	r3, #399	@ 0x18f
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	4a23      	ldr	r2, [pc, #140]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	e008      	b.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x49c>

		} else { // rotate backward
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_3 , 0) ;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	63da      	str	r2, [r3, #60]	@ 0x3c
			__HAL_TIM_SET_COMPARE (& htim8 , TIM_CHANNEL_4 , ( uint32_t ) - duty2 );
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	425a      	negs	r2, r3
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		// Log data
		data.w1 = w1;
 8000c24:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c28:	6013      	str	r3, [r2, #0]
		data.w2 = w2;
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c2e:	6053      	str	r3, [r2, #4]
		data.u1 = u1;
 8000c30:	4a1a      	ldr	r2, [pc, #104]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	6093      	str	r3, [r2, #8]
		data.u2 = u2;
 8000c36:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	60d3      	str	r3, [r2, #12]
		ertc_dlog_send(&logger, &data, sizeof(data));
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	4917      	ldr	r1, [pc, #92]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8000c42:	f7ff fd0f 	bl	8000664 <ertc_dlog_send>
	}
}
 8000c46:	bf00      	nop
 8000c48:	3748      	adds	r7, #72	@ 0x48
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	47ae147b 	.word	0x47ae147b
 8000c54:	3f847ae1 	.word	0x3f847ae1
 8000c58:	aaaaaaab 	.word	0xaaaaaaab
 8000c5c:	4030aaaa 	.word	0x4030aaaa
 8000c60:	200007cc 	.word	0x200007cc
 8000c64:	45701000 	.word	0x45701000
 8000c68:	45700000 	.word	0x45700000
 8000c6c:	42700000 	.word	0x42700000
 8000c70:	2000000c 	.word	0x2000000c
 8000c74:	20000010 	.word	0x20000010
 8000c78:	08008464 	.word	0x08008464
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	200007c0 	.word	0x200007c0
 8000c84:	20000004 	.word	0x20000004
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200007d0 	.word	0x200007d0
 8000c90:	200007c4 	.word	0x200007c4
 8000c94:	200007d4 	.word	0x200007d4
 8000c98:	200003b4 	.word	0x200003b4
 8000c9c:	200007d8 	.word	0x200007d8
 8000ca0:	200006f4 	.word	0x200006f4

08000ca4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ca8:	f001 fe81 	bl	80029ae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cac:	f000 f884 	bl	8000db8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cb0:	f000 feda 	bl	8001a68 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000cb4:	f000 fea8 	bl	8001a08 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000cb8:	f000 f8f0 	bl	8000e9c <MX_ADC1_Init>
	MX_I2C1_Init();
 8000cbc:	f000 f940 	bl	8000f40 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000cc0:	f000 f97e 	bl	8000fc0 <MX_I2C2_Init>
	MX_SPI1_Init();
 8000cc4:	f000 f9bc 	bl	8001040 <MX_SPI1_Init>
	MX_TIM1_Init();
 8000cc8:	f000 f9f8 	bl	80010bc <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ccc:	f000 fac6 	bl	800125c <MX_TIM2_Init>
	MX_TIM3_Init();
 8000cd0:	f000 fb5e 	bl	8001390 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000cd4:	f000 fbb2 	bl	800143c <MX_TIM4_Init>
	MX_TIM5_Init();
 8000cd8:	f000 fc06 	bl	80014e8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000cdc:	f000 fcb2 	bl	8001644 <MX_TIM8_Init>
	MX_UART4_Init();
 8000ce0:	f000 fdd2 	bl	8001888 <MX_UART4_Init>
	MX_UART5_Init();
 8000ce4:	f000 fe00 	bl	80018e8 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000ce8:	f000 fe2e 	bl	8001948 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000cec:	f000 fe5c 	bl	80019a8 <MX_USART2_UART_Init>
	MX_TIM9_Init();
 8000cf0:	f000 fd7a 	bl	80017e8 <MX_TIM9_Init>
	MX_TIM6_Init();
 8000cf4:	f000 fc70 	bl	80015d8 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	logger.uart_handle = huart3; // for serial
 8000cf8:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <main+0xf4>)
 8000cfa:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <main+0xf8>)
 8000cfc:	3344      	adds	r3, #68	@ 0x44
 8000cfe:	4611      	mov	r1, r2
 8000d00:	2288      	movs	r2, #136	@ 0x88
 8000d02:	4618      	mov	r0, r3
 8000d04:	f006 fda1 	bl	800784a <memcpy>
	//logger.uart_handle = huart2; // for wifi

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4824      	ldr	r0, [pc, #144]	@ (8000da0 <main+0xfc>)
 8000d0e:	f002 fc21 	bl	8003554 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000d12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d16:	f001 fea7 	bl	8002a68 <HAL_Delay>

	/* Start encoders timers */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d1a:	213c      	movs	r1, #60	@ 0x3c
 8000d1c:	4821      	ldr	r0, [pc, #132]	@ (8000da4 <main+0x100>)
 8000d1e:	f004 fb11 	bl	8005344 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000d22:	213c      	movs	r1, #60	@ 0x3c
 8000d24:	4820      	ldr	r0, [pc, #128]	@ (8000da8 <main+0x104>)
 8000d26:	f004 fb0d 	bl	8005344 <HAL_TIM_Encoder_Start>

	/* Start servomotors PWM (avoid floating inputs to servomotors) */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	481f      	ldr	r0, [pc, #124]	@ (8000dac <main+0x108>)
 8000d2e:	f004 f907 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d32:	2104      	movs	r1, #4
 8000d34:	481d      	ldr	r0, [pc, #116]	@ (8000dac <main+0x108>)
 8000d36:	f004 f903 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	481b      	ldr	r0, [pc, #108]	@ (8000dac <main+0x108>)
 8000d3e:	f004 f8ff 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d42:	210c      	movs	r1, #12
 8000d44:	4819      	ldr	r0, [pc, #100]	@ (8000dac <main+0x108>)
 8000d46:	f004 f8fb 	bl	8004f40 <HAL_TIM_PWM_Start>

	/* Start motor PWM */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000d4a:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <main+0x10c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <main+0x10c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <main+0x10c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <main+0x10c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <main+0x10c>)
 8000d6e:	f004 f8e7 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000d72:	2104      	movs	r1, #4
 8000d74:	480e      	ldr	r0, [pc, #56]	@ (8000db0 <main+0x10c>)
 8000d76:	f004 f8e3 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <main+0x10c>)
 8000d7e:	f004 f8df 	bl	8004f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000d82:	210c      	movs	r1, #12
 8000d84:	480a      	ldr	r0, [pc, #40]	@ (8000db0 <main+0x10c>)
 8000d86:	f004 f8db 	bl	8004f40 <HAL_TIM_PWM_Start>

	/* Start speed ctrl ISR */
	HAL_TIM_Base_Start_IT(&htim6);
 8000d8a:	480a      	ldr	r0, [pc, #40]	@ (8000db4 <main+0x110>)
 8000d8c:	f003 ffa8 	bl	8004ce0 <HAL_TIM_Base_Start_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ertc_dlog_update(&logger);
 8000d90:	4801      	ldr	r0, [pc, #4]	@ (8000d98 <main+0xf4>)
 8000d92:	f7ff fc8d 	bl	80006b0 <ertc_dlog_update>
 8000d96:	e7fb      	b.n	8000d90 <main+0xec>
 8000d98:	200006f4 	.word	0x200006f4
 8000d9c:	2000066c 	.word	0x2000066c
 8000da0:	40021000 	.word	0x40021000
 8000da4:	20000284 	.word	0x20000284
 8000da8:	200002d0 	.word	0x200002d0
 8000dac:	200001ec 	.word	0x200001ec
 8000db0:	200003b4 	.word	0x200003b4
 8000db4:	20000368 	.word	0x20000368

08000db8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2234      	movs	r2, #52	@ 0x34
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f006 fcc3 	bl	8007752 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000ddc:	f002 fd22 	bl	8003824 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <SystemClock_Config+0xdc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <SystemClock_Config+0xdc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dec:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <SystemClock_Config+0xdc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <SystemClock_Config+0xe0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e00:	4a25      	ldr	r2, [pc, #148]	@ (8000e98 <SystemClock_Config+0xe0>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <SystemClock_Config+0xe0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e18:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e1c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000e2c:	2360      	movs	r3, #96	@ 0x60
 8000e2e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e34:	2304      	movs	r3, #4
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fd4f 	bl	80038e4 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000e4c:	f000 ff3e 	bl	8001ccc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e50:	f002 fcf8 	bl	8003844 <HAL_PWREx_EnableOverDrive>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000e5a:	f000 ff37 	bl	8001ccc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	2103      	movs	r1, #3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 ffe0 	bl	8003e40 <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8000e86:	f000 ff21 	bl	8001ccc <Error_Handler>
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	3750      	adds	r7, #80	@ 0x50
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000

08000e9c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000eb0:	4a21      	ldr	r2, [pc, #132]	@ (8000f38 <MX_ADC1_Init+0x9c>)
 8000eb2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000eb6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ede:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <MX_ADC1_Init+0xa0>)
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000efe:	f001 fdd7 	bl	8002ab0 <HAL_ADC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8000f08:	f000 fee0 	bl	8001ccc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_ADC1_Init+0x98>)
 8000f1e:	f001 fe0b 	bl	8002b38 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8000f28:	f000 fed0 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000098 	.word	0x20000098
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	0f000001 	.word	0x0f000001

08000f40 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f46:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <MX_I2C1_Init+0x78>)
 8000f48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <MX_I2C1_Init+0x7c>)
 8000f4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7a:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f7c:	f002 fb1e 	bl	80035bc <HAL_I2C_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000f86:	f000 fea1 	bl	8001ccc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000f8e:	f002 fbb1 	bl	80036f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000f98:	f000 fe98 	bl	8001ccc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_I2C1_Init+0x74>)
 8000fa0:	f002 fbf3 	bl	800378a <HAL_I2CEx_ConfigDigitalFilter>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000faa:	f000 fe8f 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000e0 	.word	0x200000e0
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	20303e5d 	.word	0x20303e5d

08000fc0 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001038 <MX_I2C2_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <MX_I2C2_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <MX_I2C2_Init+0x74>)
 8000ffc:	f002 fade 	bl	80035bc <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001006:	f000 fe61 	bl	8001ccc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	@ (8001034 <MX_I2C2_Init+0x74>)
 800100e:	f002 fb71 	bl	80036f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001018:	f000 fe58 	bl	8001ccc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_I2C2_Init+0x74>)
 8001020:	f002 fbb3 	bl	800378a <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 800102a:	f000 fe4f 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000134 	.word	0x20000134
 8001038:	40005800 	.word	0x40005800
 800103c:	20303e5d 	.word	0x20303e5d

08001040 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	@ (80010b8 <MX_SPI1_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800104c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001050:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800105a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800105e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800106e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001072:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800108e:	2207      	movs	r2, #7
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_SPI1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_SPI1_Init+0x74>)
 800109a:	2208      	movs	r2, #8
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_SPI1_Init+0x74>)
 80010a0:	f003 fd1c 	bl	8004adc <HAL_SPI_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80010aa:	f000 fe0f 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000188 	.word	0x20000188
 80010b8:	40013000 	.word	0x40013000

080010bc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09a      	sub	sp, #104	@ 0x68
 80010c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80010dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	222c      	movs	r2, #44	@ 0x2c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fb2b 	bl	8007752 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80010fc:	4b55      	ldr	r3, [pc, #340]	@ (8001254 <MX_TIM1_Init+0x198>)
 80010fe:	4a56      	ldr	r2, [pc, #344]	@ (8001258 <MX_TIM1_Init+0x19c>)
 8001100:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001102:	4b54      	ldr	r3, [pc, #336]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b52      	ldr	r3, [pc, #328]	@ (8001254 <MX_TIM1_Init+0x198>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 800110e:	4b51      	ldr	r3, [pc, #324]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b4f      	ldr	r3, [pc, #316]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800111a:	4b4e      	ldr	r3, [pc, #312]	@ (8001254 <MX_TIM1_Init+0x198>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b4c      	ldr	r3, [pc, #304]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001126:	484b      	ldr	r0, [pc, #300]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001128:	f003 fd83 	bl	8004c32 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8001132:	f000 fdcb 	bl	8001ccc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800113a:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001140:	4619      	mov	r1, r3
 8001142:	4844      	ldr	r0, [pc, #272]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001144:	f004 fcbe 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800114e:	f000 fdbd 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001152:	4840      	ldr	r0, [pc, #256]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001154:	f003 fe3c 	bl	8004dd0 <HAL_TIM_OC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 800115e:	f000 fdb5 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001166:	2300      	movs	r3, #0
 8001168:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800116e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001172:	4619      	mov	r1, r3
 8001174:	4837      	ldr	r0, [pc, #220]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001176:	f005 fa8b 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM1_Init+0xc8>
	{
		Error_Handler();
 8001180:	f000 fda4 	bl	8001ccc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001184:	2350      	movs	r3, #80	@ 0x50
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800118c:	2302      	movs	r3, #2
 800118e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	482a      	ldr	r0, [pc, #168]	@ (8001254 <MX_TIM1_Init+0x198>)
 80011aa:	f004 fa61 	bl	8005670 <HAL_TIM_OC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0xfc>
	{
		Error_Handler();
 80011b4:	f000 fd8a 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011bc:	2204      	movs	r2, #4
 80011be:	4619      	mov	r1, r3
 80011c0:	4824      	ldr	r0, [pc, #144]	@ (8001254 <MX_TIM1_Init+0x198>)
 80011c2:	f004 fa55 	bl	8005670 <HAL_TIM_OC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x114>
	{
		Error_Handler();
 80011cc:	f000 fd7e 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d4:	2208      	movs	r2, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	481e      	ldr	r0, [pc, #120]	@ (8001254 <MX_TIM1_Init+0x198>)
 80011da:	f004 fa49 	bl	8005670 <HAL_TIM_OC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x12c>
	{
		Error_Handler();
 80011e4:	f000 fd72 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ec:	220c      	movs	r2, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	4818      	ldr	r0, [pc, #96]	@ (8001254 <MX_TIM1_Init+0x198>)
 80011f2:	f004 fa3d 	bl	8005670 <HAL_TIM_OC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x144>
	{
		Error_Handler();
 80011fc:	f000 fd66 	bl	8001ccc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001218:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001236:	f005 fab9 	bl	80067ac <HAL_TIMEx_ConfigBreakDeadTime>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x188>
	{
		Error_Handler();
 8001240:	f000 fd44 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001244:	4803      	ldr	r0, [pc, #12]	@ (8001254 <MX_TIM1_Init+0x198>)
 8001246:	f001 f819 	bl	800227c <HAL_TIM_MspPostInit>

}
 800124a:	bf00      	nop
 800124c:	3768      	adds	r7, #104	@ 0x68
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200001ec 	.word	0x200001ec
 8001258:	40010000 	.word	0x40010000

0800125c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b092      	sub	sp, #72	@ 0x48
 8001260:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800129c:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <MX_TIM2_Init+0x130>)
 800129e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80012a4:	4b39      	ldr	r3, [pc, #228]	@ (800138c <MX_TIM2_Init+0x130>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <MX_TIM2_Init+0x130>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <MX_TIM2_Init+0x130>)
 80012b2:	f04f 32ff 	mov.w	r2, #4294967295
 80012b6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b34      	ldr	r3, [pc, #208]	@ (800138c <MX_TIM2_Init+0x130>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b33      	ldr	r3, [pc, #204]	@ (800138c <MX_TIM2_Init+0x130>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c4:	4831      	ldr	r0, [pc, #196]	@ (800138c <MX_TIM2_Init+0x130>)
 80012c6:	f003 fcb4 	bl	8004c32 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 80012d0:	f000 fcfc 	bl	8001ccc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012de:	4619      	mov	r1, r3
 80012e0:	482a      	ldr	r0, [pc, #168]	@ (800138c <MX_TIM2_Init+0x130>)
 80012e2:	f004 fbef 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 80012ec:	f000 fcee 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f0:	4826      	ldr	r0, [pc, #152]	@ (800138c <MX_TIM2_Init+0x130>)
 80012f2:	f003 fdce 	bl	8004e92 <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0xa4>
	{
		Error_Handler();
 80012fc:	f000 fce6 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001300:	4822      	ldr	r0, [pc, #136]	@ (800138c <MX_TIM2_Init+0x130>)
 8001302:	f003 ff17 	bl	8005134 <HAL_TIM_IC_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 800130c:	f000 fcde 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001318:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131c:	4619      	mov	r1, r3
 800131e:	481b      	ldr	r0, [pc, #108]	@ (800138c <MX_TIM2_Init+0x130>)
 8001320:	f005 f9b6 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 800132a:	f000 fccf 	bl	8001ccc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	@ 0x60
 8001330:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	4811      	ldr	r0, [pc, #68]	@ (800138c <MX_TIM2_Init+0x130>)
 8001348:	f004 faa8 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0xfa>
	{
		Error_Handler();
 8001352:	f000 fcbb 	bl	8001ccc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800135a:	2301      	movs	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	2208      	movs	r2, #8
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	@ (800138c <MX_TIM2_Init+0x130>)
 800136e:	f004 f9f9 	bl	8005764 <HAL_TIM_IC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x120>
	{
		Error_Handler();
 8001378:	f000 fca8 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <MX_TIM2_Init+0x130>)
 800137e:	f000 ff7d 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3748      	adds	r7, #72	@ 0x48
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000238 	.word	0x20000238

08001390 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	@ 0x30
 8001394:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2224      	movs	r2, #36	@ 0x24
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f006 f9d7 	bl	8007752 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013b0:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <MX_TIM3_Init+0xa8>)
 80013b2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80013b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = TIM3_ARR_VALUE;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013c2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80013c6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <MX_TIM3_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013d4:	2303      	movs	r3, #3
 80013d6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 80013e4:	230f      	movs	r3, #15
 80013e6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ec:	2301      	movs	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 15;
 80013f4:	230f      	movs	r3, #15
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	@ (8001434 <MX_TIM3_Init+0xa4>)
 8001400:	f003 fefa 	bl	80051f8 <HAL_TIM_Encoder_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM3_Init+0x7e>
	{
		Error_Handler();
 800140a:	f000 fc5f 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	@ (8001434 <MX_TIM3_Init+0xa4>)
 800141c:	f005 f938 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x9a>
	{
		Error_Handler();
 8001426:	f000 fc51 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	@ 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000284 	.word	0x20000284
 8001438:	40000400 	.word	0x40000400

0800143c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2224      	movs	r2, #36	@ 0x24
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f006 f981 	bl	8007752 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 800145c:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <MX_TIM4_Init+0xa8>)
 800145e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001460:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_ARR_VALUE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 800146e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001472:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001480:	2303      	movs	r3, #3
 8001482:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8001490:	230f      	movs	r3, #15
 8001492:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001498:	2301      	movs	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 15;
 80014a0:	230f      	movs	r3, #15
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 80014ac:	f003 fea4 	bl	80051f8 <HAL_TIM_Encoder_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x7e>
	{
		Error_Handler();
 80014b6:	f000 fc09 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <MX_TIM4_Init+0xa4>)
 80014c8:	f005 f8e2 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x9a>
	{
		Error_Handler();
 80014d2:	f000 fbfb 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	@ 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200002d0 	.word	0x200002d0
 80014e4:	40000800 	.word	0x40000800

080014e8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	@ 0x38
 80014ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <MX_TIM5_Init+0xec>)
 800151e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001520:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800152c:	4b28      	ldr	r3, [pc, #160]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 800152e:	f04f 32ff 	mov.w	r2, #4294967295
 8001532:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001540:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 8001542:	f003 fb76 	bl	8004c32 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM5_Init+0x68>
	{
		Error_Handler();
 800154c:	f000 fbbe 	bl	8001ccc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155a:	4619      	mov	r1, r3
 800155c:	481c      	ldr	r0, [pc, #112]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 800155e:	f004 fab1 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM5_Init+0x84>
	{
		Error_Handler();
 8001568:	f000 fbb0 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800156c:	4818      	ldr	r0, [pc, #96]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 800156e:	f003 fc90 	bl	8004e92 <HAL_TIM_PWM_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM5_Init+0x94>
	{
		Error_Handler();
 8001578:	f000 fba8 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 800158c:	f005 f880 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM5_Init+0xb2>
	{
		Error_Handler();
 8001596:	f000 fb99 	bl	8001ccc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	@ 0x60
 800159c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 80015b2:	f004 f973 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM5_Init+0xd8>
	{
		Error_Handler();
 80015bc:	f000 fb86 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <MX_TIM5_Init+0xe8>)
 80015c2:	f000 fe5b 	bl	800227c <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3738      	adds	r7, #56	@ 0x38
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000031c 	.word	0x2000031c
 80015d4:	40000c00 	.word	0x40000c00

080015d8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_TIM6_Init+0x64>)
 80015ea:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <MX_TIM6_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = TIM6_PSC_VALUE;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <MX_TIM6_Init+0x64>)
 80015f0:	f242 527f 	movw	r2, #9599	@ 0x257f
 80015f4:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_TIM6_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = TIM6_ARR_VALUE;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_TIM6_Init+0x64>)
 80015fe:	2263      	movs	r2, #99	@ 0x63
 8001600:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_TIM6_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <MX_TIM6_Init+0x64>)
 800160a:	f003 fb12 	bl	8004c32 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001614:	f000 fb5a 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_TIM6_Init+0x64>)
 8001626:	f005 f833 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001630:	f000 fb4c 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000368 	.word	0x20000368
 8001640:	40001000 	.word	0x40001000

08001644 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b09a      	sub	sp, #104	@ 0x68
 8001648:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	222c      	movs	r2, #44	@ 0x2c
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f006 f867 	bl	8007752 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001684:	4b56      	ldr	r3, [pc, #344]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 8001686:	4a57      	ldr	r2, [pc, #348]	@ (80017e4 <MX_TIM8_Init+0x1a0>)
 8001688:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800168a:	4b55      	ldr	r3, [pc, #340]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 800168c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001690:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b53      	ldr	r3, [pc, #332]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = TIM8_ARR_VALUE;
 8001698:	4b51      	ldr	r3, [pc, #324]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 800169a:	f240 128f 	movw	r2, #399	@ 0x18f
 800169e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b4f      	ldr	r3, [pc, #316]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80016a6:	4b4e      	ldr	r3, [pc, #312]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b4c      	ldr	r3, [pc, #304]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016b2:	484b      	ldr	r0, [pc, #300]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80016b4:	f003 fabd 	bl	8004c32 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0x7e>
	{
		Error_Handler();
 80016be:	f000 fb05 	bl	8001ccc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016cc:	4619      	mov	r1, r3
 80016ce:	4844      	ldr	r0, [pc, #272]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80016d0:	f004 f9f8 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM8_Init+0x9a>
	{
		Error_Handler();
 80016da:	f000 faf7 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016de:	4840      	ldr	r0, [pc, #256]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80016e0:	f003 fbd7 	bl	8004e92 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM8_Init+0xaa>
	{
		Error_Handler();
 80016ea:	f000 faef 	bl	8001ccc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	4837      	ldr	r0, [pc, #220]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 8001702:	f004 ffc5 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM8_Init+0xcc>
	{
		Error_Handler();
 800170c:	f000 fade 	bl	8001ccc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001710:	2360      	movs	r3, #96	@ 0x60
 8001712:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001730:	2200      	movs	r2, #0
 8001732:	4619      	mov	r1, r3
 8001734:	482a      	ldr	r0, [pc, #168]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 8001736:	f004 f8b1 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0x100>
	{
		Error_Handler();
 8001740:	f000 fac4 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001744:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001748:	2204      	movs	r2, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4824      	ldr	r0, [pc, #144]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 800174e:	f004 f8a5 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM8_Init+0x118>
	{
		Error_Handler();
 8001758:	f000 fab8 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001760:	2208      	movs	r2, #8
 8001762:	4619      	mov	r1, r3
 8001764:	481e      	ldr	r0, [pc, #120]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 8001766:	f004 f899 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM8_Init+0x130>
	{
		Error_Handler();
 8001770:	f000 faac 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001774:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001778:	220c      	movs	r2, #12
 800177a:	4619      	mov	r1, r3
 800177c:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 800177e:	f004 f88d 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM8_Init+0x148>
	{
		Error_Handler();
 8001788:	f000 faa0 	bl	8001ccc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4807      	ldr	r0, [pc, #28]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80017c2:	f004 fff3 	bl	80067ac <HAL_TIMEx_ConfigBreakDeadTime>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM8_Init+0x18c>
	{
		Error_Handler();
 80017cc:	f000 fa7e 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80017d0:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <MX_TIM8_Init+0x19c>)
 80017d2:	f000 fd53 	bl	800227c <HAL_TIM_MspPostInit>

}
 80017d6:	bf00      	nop
 80017d8:	3768      	adds	r7, #104	@ 0x68
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003b4 	.word	0x200003b4
 80017e4:	40010400 	.word	0x40010400

080017e8 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001802:	4a20      	ldr	r2, [pc, #128]	@ (8001884 <MX_TIM9_Init+0x9c>)
 8001804:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 8001806:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <MX_TIM9_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001818:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <MX_TIM9_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001826:	4816      	ldr	r0, [pc, #88]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001828:	f003 fb33 	bl	8004e92 <HAL_TIM_PWM_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM9_Init+0x4e>
	{
		Error_Handler();
 8001832:	f000 fa4b 	bl	8001ccc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001836:	2360      	movs	r3, #96	@ 0x60
 8001838:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <MX_TIM9_Init+0x98>)
 800184e:	f004 f825 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM9_Init+0x74>
	{
		Error_Handler();
 8001858:	f000 fa38 	bl	8001ccc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2204      	movs	r2, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4807      	ldr	r0, [pc, #28]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001864:	f004 f81a 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM9_Init+0x8a>
	{
		Error_Handler();
 800186e:	f000 fa2d 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8001872:	4803      	ldr	r0, [pc, #12]	@ (8001880 <MX_TIM9_Init+0x98>)
 8001874:	f000 fd02 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000400 	.word	0x20000400
 8001884:	40014000 	.word	0x40014000

08001888 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <MX_UART4_Init+0x58>)
 800188e:	4a15      	ldr	r2, [pc, #84]	@ (80018e4 <MX_UART4_Init+0x5c>)
 8001890:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <MX_UART4_Init+0x58>)
 8001894:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001898:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_UART4_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_UART4_Init+0x58>)
 80018cc:	f005 f80a 	bl	80068e4 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_UART4_Init+0x52>
	{
		Error_Handler();
 80018d6:	f000 f9f9 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000044c 	.word	0x2000044c
 80018e4:	40004c00 	.word	0x40004c00

080018e8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <MX_UART5_Init+0x58>)
 80018ee:	4a15      	ldr	r2, [pc, #84]	@ (8001944 <MX_UART5_Init+0x5c>)
 80018f0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <MX_UART5_Init+0x58>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <MX_UART5_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <MX_UART5_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <MX_UART5_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <MX_UART5_Init+0x58>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <MX_UART5_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <MX_UART5_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <MX_UART5_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <MX_UART5_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	@ (8001940 <MX_UART5_Init+0x58>)
 800192c:	f004 ffda 	bl	80068e4 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_UART5_Init+0x52>
	{
		Error_Handler();
 8001936:	f000 f9c9 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200004d4 	.word	0x200004d4
 8001944:	40005000 	.word	0x40005000

08001948 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800194e:	4a15      	ldr	r2, [pc, #84]	@ (80019a4 <MX_USART1_UART_Init+0x5c>)
 8001950:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001952:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_USART1_UART_Init+0x58>)
 800198c:	f004 ffaa 	bl	80068e4 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8001996:	f000 f999 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000055c 	.word	0x2000055c
 80019a4:	40011000 	.word	0x40011000

080019a8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <MX_USART2_UART_Init+0x58>)
 80019b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 1000000;
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019b4:	4a13      	ldr	r2, [pc, #76]	@ (8001a04 <MX_USART2_UART_Init+0x5c>)
 80019b6:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b8:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019cc:	220c      	movs	r2, #12
 80019ce:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <MX_USART2_UART_Init+0x54>)
 80019ea:	f004 ff7b 	bl	80068e4 <HAL_UART_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_USART2_UART_Init+0x50>
	{
		Error_Handler();
 80019f4:	f000 f96a 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200005e4 	.word	0x200005e4
 8001a00:	40004400 	.word	0x40004400
 8001a04:	000f4240 	.word	0x000f4240

08001a08 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <MX_USART3_UART_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_USART3_UART_Init+0x58>)
 8001a4c:	f004 ff4a 	bl	80068e4 <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8001a56:	f000 f939 	bl	8001ccc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000066c 	.word	0x2000066c
 8001a64:	40004800 	.word	0x40004800

08001a68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7e:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a8b      	ldr	r2, [pc, #556]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b89      	ldr	r3, [pc, #548]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b86      	ldr	r3, [pc, #536]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a85      	ldr	r2, [pc, #532]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b83      	ldr	r3, [pc, #524]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	4b80      	ldr	r3, [pc, #512]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a79      	ldr	r2, [pc, #484]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b77      	ldr	r3, [pc, #476]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b74      	ldr	r3, [pc, #464]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a73      	ldr	r2, [pc, #460]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b71      	ldr	r3, [pc, #452]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a6d      	ldr	r2, [pc, #436]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	4b68      	ldr	r3, [pc, #416]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a67      	ldr	r2, [pc, #412]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b65      	ldr	r3, [pc, #404]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001b26:	4b62      	ldr	r3, [pc, #392]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a61      	ldr	r2, [pc, #388]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <MX_GPIO_Init+0x248>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2118      	movs	r1, #24
 8001b42:	485c      	ldr	r0, [pc, #368]	@ (8001cb4 <MX_GPIO_Init+0x24c>)
 8001b44:	f001 fd06 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001b4e:	485a      	ldr	r0, [pc, #360]	@ (8001cb8 <MX_GPIO_Init+0x250>)
 8001b50:	f001 fd00 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2140      	movs	r1, #64	@ 0x40
 8001b58:	4858      	ldr	r0, [pc, #352]	@ (8001cbc <MX_GPIO_Init+0x254>)
 8001b5a:	f001 fcfb 	bl	8003554 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
	GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001b5e:	2318      	movs	r3, #24
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	484f      	ldr	r0, [pc, #316]	@ (8001cb4 <MX_GPIO_Init+0x24c>)
 8001b76:	f001 fb41 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001b7a:	f643 731c 	movw	r3, #16156	@ 0x3f1c
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
			|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
			|GPIO_EXTI13_BUMP4_IRQ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8e:	4619      	mov	r1, r3
 8001b90:	484b      	ldr	r0, [pc, #300]	@ (8001cc0 <MX_GPIO_Init+0x258>)
 8001b92:	f001 fb33 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b96:	2332      	movs	r3, #50	@ 0x32
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ba6:	230b      	movs	r3, #11
 8001ba8:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4844      	ldr	r0, [pc, #272]	@ (8001cc4 <MX_GPIO_Init+0x25c>)
 8001bb2:	f001 fb23 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bb6:	2386      	movs	r3, #134	@ 0x86
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bc6:	230b      	movs	r3, #11
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	483d      	ldr	r0, [pc, #244]	@ (8001cc8 <MX_GPIO_Init+0x260>)
 8001bd2:	f001 fb13 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bd6:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4832      	ldr	r0, [pc, #200]	@ (8001cb8 <MX_GPIO_Init+0x250>)
 8001bf0:	f001 fb04 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c06:	230b      	movs	r3, #11
 8001c08:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4829      	ldr	r0, [pc, #164]	@ (8001cb8 <MX_GPIO_Init+0x250>)
 8001c12:	f001 faf3 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c16:	2340      	movs	r3, #64	@ 0x40
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4823      	ldr	r0, [pc, #140]	@ (8001cbc <MX_GPIO_Init+0x254>)
 8001c2e:	f001 fae5 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	481d      	ldr	r0, [pc, #116]	@ (8001cbc <MX_GPIO_Init+0x254>)
 8001c46:	f001 fad9 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c4a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c5c:	230a      	movs	r3, #10
 8001c5e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4818      	ldr	r0, [pc, #96]	@ (8001cc8 <MX_GPIO_Init+0x260>)
 8001c68:	f001 fac8 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4811      	ldr	r0, [pc, #68]	@ (8001cc8 <MX_GPIO_Init+0x260>)
 8001c82:	f001 fabb 	bl	80031fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c98:	230b      	movs	r3, #11
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	@ (8001cbc <MX_GPIO_Init+0x254>)
 8001ca4:	f001 faaa 	bl	80031fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ca8:	bf00      	nop
 8001caa:	3738      	adds	r7, #56	@ 0x38
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		static uint32_t kLed = 0;
		if(++kLed >= 1000)
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <Error_Handler+0x30>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <Error_Handler+0x30>)
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <Error_Handler+0x30>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ce6:	d3f5      	bcc.n	8001cd4 <Error_Handler+0x8>
		{
			kLed = 0;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <Error_Handler+0x30>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001cee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cf2:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <Error_Handler+0x34>)
 8001cf4:	f001 fc47 	bl	8003586 <HAL_GPIO_TogglePin>
	{
 8001cf8:	e7ec      	b.n	8001cd4 <Error_Handler+0x8>
 8001cfa:	bf00      	nop
 8001cfc:	200007ec 	.word	0x200007ec
 8001d00:	40020400 	.word	0x40020400

08001d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <HAL_ADC_MspInit+0x74>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d123      	bne.n	8001db6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001d9e:	2308      	movs	r3, #8
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da2:	2303      	movs	r3, #3
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <HAL_ADC_MspInit+0x7c>)
 8001db2:	f001 fa23 	bl	80031fc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0b0      	sub	sp, #192	@ 0xc0
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2290      	movs	r2, #144	@ 0x90
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 fcb0 	bl	8007752 <memset>
  if(hi2c->Instance==I2C1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a44      	ldr	r2, [pc, #272]	@ (8001f08 <HAL_I2C_MspInit+0x13c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d13e      	bne.n	8001e7a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fa3d 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001e18:	f7ff ff58 	bl	8001ccc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a3a      	ldr	r2, [pc, #232]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b38      	ldr	r3, [pc, #224]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e58:	4619      	mov	r1, r3
 8001e5a:	482d      	ldr	r0, [pc, #180]	@ (8001f10 <HAL_I2C_MspInit+0x144>)
 8001e5c:	f001 f9ce 	bl	80031fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e78:	e041      	b.n	8001efe <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	@ (8001f14 <HAL_I2C_MspInit+0x148>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d13c      	bne.n	8001efe <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 f9f9 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001ea0:	f7ff ff14 	bl	8001ccc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001eaa:	f043 0320 	orr.w	r3, r3, #32
 8001eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <HAL_I2C_MspInit+0x14c>)
 8001ee2:	f001 f98b 	bl	80031fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	bf00      	nop
 8001f00:	37c0      	adds	r7, #192	@ 0xc0
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40005800 	.word	0x40005800
 8001f18:	40021400 	.word	0x40021400

08001f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a33      	ldr	r2, [pc, #204]	@ (8002008 <HAL_SPI_MspInit+0xec>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d160      	bne.n	8002000 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a32      	ldr	r2, [pc, #200]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b30      	ldr	r3, [pc, #192]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6e:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a26      	ldr	r2, [pc, #152]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a20      	ldr	r2, [pc, #128]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4815      	ldr	r0, [pc, #84]	@ (8002010 <HAL_SPI_MspInit+0xf4>)
 8001fba:	f001 f91f 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fce:	2305      	movs	r3, #5
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480e      	ldr	r0, [pc, #56]	@ (8002014 <HAL_SPI_MspInit+0xf8>)
 8001fda:	f001 f90f 	bl	80031fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4807      	ldr	r0, [pc, #28]	@ (8002018 <HAL_SPI_MspInit+0xfc>)
 8001ffc:	f001 f8fe 	bl	80031fc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002000:	bf00      	nop
 8002002:	3730      	adds	r7, #48	@ 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013000 	.word	0x40013000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021800 	.word	0x40021800

0800201c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	@ 0x38
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3f      	ldr	r2, [pc, #252]	@ (8002138 <HAL_TIM_Base_MspInit+0x11c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10c      	bne.n	8002058 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203e:	4b3f      	ldr	r3, [pc, #252]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4a3e      	ldr	r2, [pc, #248]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6453      	str	r3, [r2, #68]	@ 0x44
 800204a:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002056:	e06b      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d129      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002062:	4b36      	ldr	r3, [pc, #216]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a35      	ldr	r2, [pc, #212]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b33      	ldr	r3, [pc, #204]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b30      	ldr	r3, [pc, #192]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8002092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a4:	2301      	movs	r3, #1
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4824      	ldr	r0, [pc, #144]	@ (8002140 <HAL_TIM_Base_MspInit+0x124>)
 80020b0:	f001 f8a4 	bl	80031fc <HAL_GPIO_Init>
}
 80020b4:	e03c      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a22      	ldr	r2, [pc, #136]	@ (8002144 <HAL_TIM_Base_MspInit+0x128>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d10c      	bne.n	80020da <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020c0:	4b1e      	ldr	r3, [pc, #120]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
}
 80020d8:	e02a      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1a      	ldr	r2, [pc, #104]	@ (8002148 <HAL_TIM_Base_MspInit+0x12c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d114      	bne.n	800210e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a14      	ldr	r2, [pc, #80]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2101      	movs	r1, #1
 8002100:	2036      	movs	r0, #54	@ 0x36
 8002102:	f001 f844 	bl	800318e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002106:	2036      	movs	r0, #54	@ 0x36
 8002108:	f001 f85d 	bl	80031c6 <HAL_NVIC_EnableIRQ>
}
 800210c:	e010      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_TIM_Base_MspInit+0x130>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10b      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	6453      	str	r3, [r2, #68]	@ 0x44
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	bf00      	nop
 8002132:	3738      	adds	r7, #56	@ 0x38
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010000 	.word	0x40010000
 800213c:	40023800 	.word	0x40023800
 8002140:	40020400 	.word	0x40020400
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40001000 	.word	0x40001000
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2e      	ldr	r2, [pc, #184]	@ (8002228 <HAL_TIM_Encoder_MspInit+0xd8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d128      	bne.n	80021c4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80021a2:	2330      	movs	r3, #48	@ 0x30
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b2:	2302      	movs	r3, #2
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	481c      	ldr	r0, [pc, #112]	@ (8002230 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021be:	f001 f81d 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021c2:	e02d      	b.n	8002220 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d128      	bne.n	8002220 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a16      	ldr	r2, [pc, #88]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 80021fe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002210:	2302      	movs	r3, #2
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4807      	ldr	r0, [pc, #28]	@ (8002238 <HAL_TIM_Encoder_MspInit+0xe8>)
 800221c:	f000 ffee 	bl	80031fc <HAL_GPIO_Init>
}
 8002220:	bf00      	nop
 8002222:	3730      	adds	r7, #48	@ 0x30
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40000400 	.word	0x40000400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400
 8002234:	40000800 	.word	0x40000800
 8002238:	40020c00 	.word	0x40020c00

0800223c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_TIM_PWM_MspInit+0x38>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10b      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40014000 	.word	0x40014000
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_TIM_MspPostInit+0x178>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11d      	bne.n	80022da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229e:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a55      	ldr	r2, [pc, #340]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80022b6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	484a      	ldr	r0, [pc, #296]	@ (80023fc <HAL_TIM_MspPostInit+0x180>)
 80022d4:	f000 ff92 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80022d8:	e088      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e2:	d11d      	bne.n	8002320 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b44      	ldr	r3, [pc, #272]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4a43      	ldr	r2, [pc, #268]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f0:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80022fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230e:	2301      	movs	r3, #1
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4839      	ldr	r0, [pc, #228]	@ (8002400 <HAL_TIM_MspPostInit+0x184>)
 800231a:	f000 ff6f 	bl	80031fc <HAL_GPIO_Init>
}
 800231e:	e065      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_TIM_MspPostInit+0x188>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11c      	bne.n	8002364 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a32      	ldr	r2, [pc, #200]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002352:	2302      	movs	r3, #2
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4828      	ldr	r0, [pc, #160]	@ (8002400 <HAL_TIM_MspPostInit+0x184>)
 800235e:	f000 ff4d 	bl	80031fc <HAL_GPIO_Init>
}
 8002362:	e043      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <HAL_TIM_MspPostInit+0x18c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11d      	bne.n	80023aa <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002386:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002398:	2303      	movs	r3, #3
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	481a      	ldr	r0, [pc, #104]	@ (800240c <HAL_TIM_MspPostInit+0x190>)
 80023a4:	f000 ff2a 	bl	80031fc <HAL_GPIO_Init>
}
 80023a8:	e020      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <HAL_TIM_MspPostInit+0x194>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d11b      	bne.n	80023ec <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80023cc:	2360      	movs	r3, #96	@ 0x60
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023dc:	2303      	movs	r3, #3
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <HAL_TIM_MspPostInit+0x180>)
 80023e8:	f000 ff08 	bl	80031fc <HAL_GPIO_Init>
}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	@ 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40021000 	.word	0x40021000
 8002400:	40020000 	.word	0x40020000
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40010400 	.word	0x40010400
 800240c:	40020800 	.word	0x40020800
 8002410:	40014000 	.word	0x40014000

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b6      	sub	sp, #216	@ 0xd8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002430:	2290      	movs	r2, #144	@ 0x90
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f005 f98c 	bl	8007752 <memset>
  if(huart->Instance==UART4)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4aa0      	ldr	r2, [pc, #640]	@ (80026c0 <HAL_UART_MspInit+0x2ac>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d13e      	bne.n	80024c2 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002450:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002454:	4618      	mov	r0, r3
 8002456:	f001 ff19 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002460:	f7ff fc34 	bl	8001ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002464:	4b97      	ldr	r3, [pc, #604]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	4a96      	ldr	r2, [pc, #600]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800246a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002470:	4b94      	ldr	r3, [pc, #592]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002478:	633b      	str	r3, [r7, #48]	@ 0x30
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247c:	4b91      	ldr	r3, [pc, #580]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	4a90      	ldr	r2, [pc, #576]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6313      	str	r3, [r2, #48]	@ 0x30
 8002488:	4b8e      	ldr	r3, [pc, #568]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002494:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002498:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ae:	2308      	movs	r3, #8
 80024b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4883      	ldr	r0, [pc, #524]	@ (80026c8 <HAL_UART_MspInit+0x2b4>)
 80024bc:	f000 fe9e 	bl	80031fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024c0:	e151      	b.n	8002766 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a81      	ldr	r2, [pc, #516]	@ (80026cc <HAL_UART_MspInit+0x2b8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d160      	bne.n	800258e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 fed5 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80024e8:	f7ff fbf0 	bl	8001ccc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024ec:	4b75      	ldr	r3, [pc, #468]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	4a74      	ldr	r2, [pc, #464]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f8:	4b72      	ldr	r3, [pc, #456]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	4b6f      	ldr	r3, [pc, #444]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4a6e      	ldr	r2, [pc, #440]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002510:	4b6c      	ldr	r3, [pc, #432]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6313      	str	r3, [r2, #48]	@ 0x30
 8002528:	4b66      	ldr	r3, [pc, #408]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800254e:	2308      	movs	r3, #8
 8002550:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002558:	4619      	mov	r1, r3
 800255a:	485d      	ldr	r0, [pc, #372]	@ (80026d0 <HAL_UART_MspInit+0x2bc>)
 800255c:	f000 fe4e 	bl	80031fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800257a:	2308      	movs	r3, #8
 800257c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002584:	4619      	mov	r1, r3
 8002586:	4850      	ldr	r0, [pc, #320]	@ (80026c8 <HAL_UART_MspInit+0x2b4>)
 8002588:	f000 fe38 	bl	80031fc <HAL_GPIO_Init>
}
 800258c:	e0eb      	b.n	8002766 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a50      	ldr	r2, [pc, #320]	@ (80026d4 <HAL_UART_MspInit+0x2c0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d151      	bne.n	800263c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002598:	2340      	movs	r3, #64	@ 0x40
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800259c:	2300      	movs	r3, #0
 800259e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 fe71 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80025b0:	f7ff fb8c 	bl	8001ccc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b4:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	4a42      	ldr	r2, [pc, #264]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c0:	4b40      	ldr	r3, [pc, #256]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4b3d      	ldr	r3, [pc, #244]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a3c      	ldr	r2, [pc, #240]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d8:	4b3a      	ldr	r3, [pc, #232]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025fe:	2304      	movs	r3, #4
 8002600:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002608:	4619      	mov	r1, r3
 800260a:	4831      	ldr	r0, [pc, #196]	@ (80026d0 <HAL_UART_MspInit+0x2bc>)
 800260c:	f000 fdf6 	bl	80031fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002610:	2340      	movs	r3, #64	@ 0x40
 8002612:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002628:	2307      	movs	r3, #7
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002632:	4619      	mov	r1, r3
 8002634:	4826      	ldr	r0, [pc, #152]	@ (80026d0 <HAL_UART_MspInit+0x2bc>)
 8002636:	f000 fde1 	bl	80031fc <HAL_GPIO_Init>
}
 800263a:	e094      	b.n	8002766 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	@ (80026d8 <HAL_UART_MspInit+0x2c4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d14c      	bne.n	80026e0 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002652:	4618      	mov	r0, r3
 8002654:	f001 fe1a 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800265e:	f7ff fb35 	bl	8001ccc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266c:	6413      	str	r3, [r2, #64]	@ 0x40
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267a:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002692:	2360      	movs	r3, #96	@ 0x60
 8002694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026aa:	2307      	movs	r3, #7
 80026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4809      	ldr	r0, [pc, #36]	@ (80026dc <HAL_UART_MspInit+0x2c8>)
 80026b8:	f000 fda0 	bl	80031fc <HAL_GPIO_Init>
}
 80026bc:	e053      	b.n	8002766 <HAL_UART_MspInit+0x352>
 80026be:	bf00      	nop
 80026c0:	40004c00 	.word	0x40004c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40005000 	.word	0x40005000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40011000 	.word	0x40011000
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <HAL_UART_MspInit+0x35c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13d      	bne.n	8002766 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fdc6 	bl	800428c <HAL_RCCEx_PeriphCLKConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002706:	f7ff fae1 	bl	8001ccc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_UART_MspInit+0x360>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6413      	str	r3, [r2, #64]	@ 0x40
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002722:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800273a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800273e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002754:	2307      	movs	r3, #7
 8002756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	@ (8002778 <HAL_UART_MspInit+0x364>)
 8002762:	f000 fd4b 	bl	80031fc <HAL_GPIO_Init>
}
 8002766:	bf00      	nop
 8002768:	37d8      	adds	r7, #216	@ 0xd8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40004800 	.word	0x40004800
 8002774:	40023800 	.word	0x40023800
 8002778:	40020c00 	.word	0x40020c00

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HardFault_Handler+0x2c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HardFault_Handler+0x2c>)
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HardFault_Handler+0x2c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a07      	ldr	r2, [pc, #28]	@ (80027b4 <HardFault_Handler+0x30>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d9f5      	bls.n	8002788 <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <HardFault_Handler+0x2c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80027a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027a6:	4804      	ldr	r0, [pc, #16]	@ (80027b8 <HardFault_Handler+0x34>)
 80027a8:	f000 feed 	bl	8003586 <HAL_GPIO_TogglePin>
  {
 80027ac:	e7ec      	b.n	8002788 <HardFault_Handler+0x4>
 80027ae:	bf00      	nop
 80027b0:	200007f0 	.word	0x200007f0
 80027b4:	0001869f 	.word	0x0001869f
 80027b8:	40020400 	.word	0x40020400

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <MemManage_Handler+0x4>

080027c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002802:	f000 f911 	bl	8002a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <TIM6_DAC_IRQHandler+0x10>)
 8002812:	f002 fe25 	bl	8005460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000368 	.word	0x20000368

08002820 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
	}

return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_close>:
	}
	return len;
}

int _close(int file)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002882:	605a      	str	r2, [r3, #4]
	return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_isatty>:

int _isatty(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return 1;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <_sbrk+0x5c>)
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <_sbrk+0x60>)
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <_sbrk+0x64>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	@ (800292c <_sbrk+0x68>)
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d207      	bcs.n	8002904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f4:	f004 ff7c 	bl	80077f0 <__errno>
 80028f8:	4603      	mov	r3, r0
 80028fa:	220c      	movs	r2, #12
 80028fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e009      	b.n	8002918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290a:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	4a05      	ldr	r2, [pc, #20]	@ (8002928 <_sbrk+0x64>)
 8002914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20080000 	.word	0x20080000
 8002924:	00000400 	.word	0x00000400
 8002928:	200007f4 	.word	0x200007f4
 800292c:	20000948 	.word	0x20000948

08002930 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <SystemInit+0x28>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <SystemInit+0x28>)
 800293c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <SystemInit+0x28>)
 8002946:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800294a:	609a      	str	r2, [r3, #8]
#endif
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002994 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002960:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002962:	e003      	b.n	800296c <LoopCopyDataInit>

08002964 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002966:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002968:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800296a:	3104      	adds	r1, #4

0800296c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800296c:	480b      	ldr	r0, [pc, #44]	@ (800299c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800296e:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002970:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002972:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002974:	d3f6      	bcc.n	8002964 <CopyDataInit>
  ldr  r2, =_sbss
 8002976:	4a0b      	ldr	r2, [pc, #44]	@ (80029a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002978:	e002      	b.n	8002980 <LoopFillZerobss>

0800297a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800297a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800297c:	f842 3b04 	str.w	r3, [r2], #4

08002980 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002982:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002984:	d3f9      	bcc.n	800297a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002986:	f7ff ffd3 	bl	8002930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298a:	f004 ff37 	bl	80077fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7fe f989 	bl	8000ca4 <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002994:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002998:	080084cc 	.word	0x080084cc
  ldr  r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029a0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80029a4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80029a8:	20000948 	.word	0x20000948

080029ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC_IRQHandler>

080029ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b2:	2003      	movs	r0, #3
 80029b4:	f000 fbe0 	bl	8003178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 f805 	bl	80029c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029be:	f7ff f9a1 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_InitTick+0x54>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_InitTick+0x58>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029de:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fbfb 	bl	80031e2 <HAL_SYSTICK_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00e      	b.n	8002a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b0f      	cmp	r3, #15
 80029fa:	d80a      	bhi.n	8002a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fc:	2200      	movs	r2, #0
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f000 fbc3 	bl	800318e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a08:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <HAL_InitTick+0x5c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000014 	.word	0x20000014
 8002a20:	2000001c 	.word	0x2000001c
 8002a24:	20000018 	.word	0x20000018

08002a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_IncTick+0x20>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_IncTick+0x24>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_IncTick+0x24>)
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000001c 	.word	0x2000001c
 8002a4c:	200007f8 	.word	0x200007f8

08002a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_GetTick+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	200007f8 	.word	0x200007f8

08002a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff ffee 	bl	8002a50 <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d005      	beq.n	8002a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_Delay+0x44>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a8e:	bf00      	nop
 8002a90:	f7ff ffde 	bl	8002a50 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8f7      	bhi.n	8002a90 <HAL_Delay+0x28>
  {
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000001c 	.word	0x2000001c

08002ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e031      	b.n	8002b2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff f93c 	bl	8001d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002af2:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_ADC_Init+0x84>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f970 	bl	8002de4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b1a:	e001      	b.n	8002b20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	ffffeefd 	.word	0xffffeefd

08002b38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e136      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x28a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b09      	cmp	r3, #9
 8002b62:	d93a      	bls.n	8002bda <HAL_ADC_ConfigChannel+0xa2>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b6c:	d035      	beq.n	8002bda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68d9      	ldr	r1, [r3, #12]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	3b1e      	subs	r3, #30
 8002b84:	2207      	movs	r2, #7
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	400a      	ands	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a8d      	ldr	r2, [pc, #564]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x298>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	061a      	lsls	r2, r3, #24
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb2:	e035      	b.n	8002c20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68d9      	ldr	r1, [r3, #12]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4403      	add	r3, r0
 8002bcc:	3b1e      	subs	r3, #30
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd8:	e022      	b.n	8002c20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6919      	ldr	r1, [r3, #16]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	2207      	movs	r2, #7
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6919      	ldr	r1, [r3, #16]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	4603      	mov	r3, r0
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4403      	add	r3, r0
 8002c16:	409a      	lsls	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b06      	cmp	r3, #6
 8002c26:	d824      	bhi.n	8002c72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	3b05      	subs	r3, #5
 8002c3a:	221f      	movs	r2, #31
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43da      	mvns	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	400a      	ands	r2, r1
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	3b05      	subs	r3, #5
 8002c64:	fa00 f203 	lsl.w	r2, r0, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c70:	e04c      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d824      	bhi.n	8002cc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b23      	subs	r3, #35	@ 0x23
 8002c8c:	221f      	movs	r2, #31
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	400a      	ands	r2, r1
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4618      	mov	r0, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b23      	subs	r3, #35	@ 0x23
 8002cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc2:	e023      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b41      	subs	r3, #65	@ 0x41
 8002cd6:	221f      	movs	r2, #31
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3b41      	subs	r3, #65	@ 0x41
 8002d00:	fa00 f203 	lsl.w	r2, r0, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x29c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1f4>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d20:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d26:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002d2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a28      	ldr	r2, [pc, #160]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x29c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10f      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x21e>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b12      	cmp	r3, #18
 8002d3c:	d10b      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d3e:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4a25      	ldr	r2, [pc, #148]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d48:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d4a:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a22      	ldr	r2, [pc, #136]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d54:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x29c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12b      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x280>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x298>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x23a>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b11      	cmp	r3, #17
 8002d70:	d122      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d78:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002d7c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a15      	ldr	r2, [pc, #84]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d88:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x298>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d111      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d94:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <HAL_ADC_ConfigChannel+0x2a4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a11      	ldr	r2, [pc, #68]	@ (8002de0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9a      	lsrs	r2, r3, #18
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	10000012 	.word	0x10000012
 8002dd4:	40012000 	.word	0x40012000
 8002dd8:	40012300 	.word	0x40012300
 8002ddc:	20000014 	.word	0x20000014
 8002de0:	431bde83 	.word	0x431bde83

08002de4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002dec:	4b78      	ldr	r3, [pc, #480]	@ (8002fd0 <ADC_Init+0x1ec>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a77      	ldr	r2, [pc, #476]	@ (8002fd0 <ADC_Init+0x1ec>)
 8002df2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002df6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002df8:	4b75      	ldr	r3, [pc, #468]	@ (8002fd0 <ADC_Init+0x1ec>)
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4973      	ldr	r1, [pc, #460]	@ (8002fd0 <ADC_Init+0x1ec>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	4a58      	ldr	r2, [pc, #352]	@ (8002fd4 <ADC_Init+0x1f0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e00f      	b.n	8002ede <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0202 	bic.w	r2, r2, #2
 8002eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	3b01      	subs	r3, #1
 8002f38:	035a      	lsls	r2, r3, #13
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e007      	b.n	8002f54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	051a      	lsls	r2, r3, #20
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f96:	025a      	lsls	r2, r3, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	029a      	lsls	r2, r3, #10
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	0f000001 	.word	0x0f000001

08002fd8 <__NVIC_SetPriorityGrouping>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <__NVIC_SetPriorityGrouping+0x40>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	4313      	orrs	r3, r2
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <__NVIC_SetPriorityGrouping+0x40>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00
 800301c:	05fa0000 	.word	0x05fa0000

08003020 <__NVIC_GetPriorityGrouping>:
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_EnableIRQ>:
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	2b00      	cmp	r3, #0
 800304c:	db0b      	blt.n	8003066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4907      	ldr	r1, [pc, #28]	@ (8003074 <__NVIC_EnableIRQ+0x38>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2001      	movs	r0, #1
 800305e:	fa00 f202 	lsl.w	r2, r0, r2
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000e100 	.word	0xe000e100

08003078 <__NVIC_SetPriority>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	6039      	str	r1, [r7, #0]
 8003082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	db0a      	blt.n	80030a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	490c      	ldr	r1, [pc, #48]	@ (80030c4 <__NVIC_SetPriority+0x4c>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	0112      	lsls	r2, r2, #4
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	440b      	add	r3, r1
 800309c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030a0:	e00a      	b.n	80030b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <__NVIC_SetPriority+0x50>)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	3b04      	subs	r3, #4
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	440b      	add	r3, r1
 80030b6:	761a      	strb	r2, [r3, #24]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <NVIC_EncodePriority>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f1c3 0307 	rsb	r3, r3, #7
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf28      	it	cs
 80030ea:	2304      	movcs	r3, #4
 80030ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d902      	bls.n	80030fc <NVIC_EncodePriority+0x30>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3b03      	subs	r3, #3
 80030fa:	e000      	b.n	80030fe <NVIC_EncodePriority+0x32>
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	f04f 32ff 	mov.w	r2, #4294967295
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43d9      	mvns	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	4313      	orrs	r3, r2
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <SysTick_Config>:
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003144:	d301      	bcc.n	800314a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003146:	2301      	movs	r3, #1
 8003148:	e00f      	b.n	800316a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <SysTick_Config+0x40>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003152:	210f      	movs	r1, #15
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	f7ff ff8e 	bl	8003078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <SysTick_Config+0x40>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <SysTick_Config+0x40>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ff29 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a0:	f7ff ff3e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 80031a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	6978      	ldr	r0, [r7, #20]
 80031ac:	f7ff ff8e 	bl	80030cc <NVIC_EncodePriority>
 80031b0:	4602      	mov	r2, r0
 80031b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff5d 	bl	8003078 <__NVIC_SetPriority>
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff31 	bl	800303c <__NVIC_EnableIRQ>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffa2 	bl	8003134 <SysTick_Config>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e175      	b.n	8003508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 8164 	bne.w	8003502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d005      	beq.n	8003252 <HAL_GPIO_Init+0x56>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d130      	bne.n	80032b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d017      	beq.n	80032f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d123      	bne.n	8003344 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	69b9      	ldr	r1, [r7, #24]
 8003340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80be 	beq.w	8003502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b66      	ldr	r3, [pc, #408]	@ (8003520 <HAL_GPIO_Init+0x324>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	4a65      	ldr	r2, [pc, #404]	@ (8003520 <HAL_GPIO_Init+0x324>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003390:	6453      	str	r3, [r2, #68]	@ 0x44
 8003392:	4b63      	ldr	r3, [pc, #396]	@ (8003520 <HAL_GPIO_Init+0x324>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800339e:	4a61      	ldr	r2, [pc, #388]	@ (8003524 <HAL_GPIO_Init+0x328>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_GPIO_Init+0x32c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d037      	beq.n	800343a <HAL_GPIO_Init+0x23e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a57      	ldr	r2, [pc, #348]	@ (800352c <HAL_GPIO_Init+0x330>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d031      	beq.n	8003436 <HAL_GPIO_Init+0x23a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a56      	ldr	r2, [pc, #344]	@ (8003530 <HAL_GPIO_Init+0x334>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <HAL_GPIO_Init+0x236>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a55      	ldr	r2, [pc, #340]	@ (8003534 <HAL_GPIO_Init+0x338>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d025      	beq.n	800342e <HAL_GPIO_Init+0x232>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a54      	ldr	r2, [pc, #336]	@ (8003538 <HAL_GPIO_Init+0x33c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <HAL_GPIO_Init+0x22e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a53      	ldr	r2, [pc, #332]	@ (800353c <HAL_GPIO_Init+0x340>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x22a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a52      	ldr	r2, [pc, #328]	@ (8003540 <HAL_GPIO_Init+0x344>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a51      	ldr	r2, [pc, #324]	@ (8003544 <HAL_GPIO_Init+0x348>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x222>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a50      	ldr	r2, [pc, #320]	@ (8003548 <HAL_GPIO_Init+0x34c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a4f      	ldr	r2, [pc, #316]	@ (800354c <HAL_GPIO_Init+0x350>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x21a>
 8003412:	2309      	movs	r3, #9
 8003414:	e012      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003416:	230a      	movs	r3, #10
 8003418:	e010      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341a:	2308      	movs	r3, #8
 800341c:	e00e      	b.n	800343c <HAL_GPIO_Init+0x240>
 800341e:	2307      	movs	r3, #7
 8003420:	e00c      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003422:	2306      	movs	r3, #6
 8003424:	e00a      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003426:	2305      	movs	r3, #5
 8003428:	e008      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342a:	2304      	movs	r3, #4
 800342c:	e006      	b.n	800343c <HAL_GPIO_Init+0x240>
 800342e:	2303      	movs	r3, #3
 8003430:	e004      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003432:	2302      	movs	r3, #2
 8003434:	e002      	b.n	800343c <HAL_GPIO_Init+0x240>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <HAL_GPIO_Init+0x240>
 800343a:	2300      	movs	r3, #0
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	f002 0203 	and.w	r2, r2, #3
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	4093      	lsls	r3, r2
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800344c:	4935      	ldr	r1, [pc, #212]	@ (8003524 <HAL_GPIO_Init+0x328>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	3302      	adds	r3, #2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345a:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <HAL_GPIO_Init+0x354>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347e:	4a34      	ldr	r2, [pc, #208]	@ (8003550 <HAL_GPIO_Init+0x354>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003484:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_GPIO_Init+0x354>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a8:	4a29      	ldr	r2, [pc, #164]	@ (8003550 <HAL_GPIO_Init+0x354>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ae:	4b28      	ldr	r3, [pc, #160]	@ (8003550 <HAL_GPIO_Init+0x354>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003550 <HAL_GPIO_Init+0x354>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <HAL_GPIO_Init+0x354>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_GPIO_Init+0x354>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	f67f ae86 	bls.w	800321c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	3724      	adds	r7, #36	@ 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40013800 	.word	0x40013800
 8003528:	40020000 	.word	0x40020000
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
 800353c:	40021400 	.word	0x40021400
 8003540:	40021800 	.word	0x40021800
 8003544:	40021c00 	.word	0x40021c00
 8003548:	40022000 	.word	0x40022000
 800354c:	40022400 	.word	0x40022400
 8003550:	40013c00 	.word	0x40013c00

08003554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
 8003560:	4613      	mov	r3, r2
 8003562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003564:	787b      	ldrb	r3, [r7, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003570:	e003      	b.n	800357a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003572:	887b      	ldrh	r3, [r7, #2]
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	619a      	str	r2, [r3, #24]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003586:	b480      	push	{r7}
 8003588:	b085      	sub	sp, #20
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003598:	887a      	ldrh	r2, [r7, #2]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4013      	ands	r3, r2
 800359e:	041a      	lsls	r2, r3, #16
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	400b      	ands	r3, r1
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e08b      	b.n	80036e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe fbf2 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	@ 0x24
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800360c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800361c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	e006      	b.n	8003644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d108      	bne.n	800365e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	e007      	b.n	800366e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <HAL_I2C_Init+0x134>)
 800367a:	430b      	orrs	r3, r1
 800367c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	02008000 	.word	0x02008000

080036f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d138      	bne.n	800377c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003714:	2302      	movs	r3, #2
 8003716:	e032      	b.n	800377e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b20      	cmp	r3, #32
 800379e:	d139      	bne.n	8003814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e033      	b.n	8003816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2224      	movs	r2, #36	@ 0x24
 80037ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a04      	ldr	r2, [pc, #16]	@ (8003840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800382e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40007000 	.word	0x40007000

08003844 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <HAL_PWREx_EnableOverDrive+0x98>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <HAL_PWREx_EnableOverDrive+0x98>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	@ 0x40
 800385a:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_PWREx_EnableOverDrive+0x98>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003866:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003872:	f7ff f8ed 	bl	8002a50 <HAL_GetTick>
 8003876:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003878:	e009      	b.n	800388e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800387a:	f7ff f8e9 	bl	8002a50 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003888:	d901      	bls.n	800388e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e022      	b.n	80038d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800388e:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389a:	d1ee      	bne.n	800387a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800389c:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038a8:	f7ff f8d2 	bl	8002a50 <HAL_GetTick>
 80038ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038ae:	e009      	b.n	80038c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038b0:	f7ff f8ce 	bl	8002a50 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038be:	d901      	bls.n	80038c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e007      	b.n	80038d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d0:	d1ee      	bne.n	80038b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40007000 	.word	0x40007000

080038e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e29b      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8087 	beq.w	8003a16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003908:	4b96      	ldr	r3, [pc, #600]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b04      	cmp	r3, #4
 8003912:	d00c      	beq.n	800392e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003914:	4b93      	ldr	r3, [pc, #588]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	2b08      	cmp	r3, #8
 800391e:	d112      	bne.n	8003946 <HAL_RCC_OscConfig+0x62>
 8003920:	4b90      	ldr	r3, [pc, #576]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392c:	d10b      	bne.n	8003946 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d06c      	beq.n	8003a14 <HAL_RCC_OscConfig+0x130>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d168      	bne.n	8003a14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e275      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x7a>
 8003950:	4b84      	ldr	r3, [pc, #528]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a83      	ldr	r2, [pc, #524]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e02e      	b.n	80039bc <HAL_RCC_OscConfig+0xd8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10c      	bne.n	8003980 <HAL_RCC_OscConfig+0x9c>
 8003966:	4b7f      	ldr	r3, [pc, #508]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	4b7c      	ldr	r3, [pc, #496]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7b      	ldr	r2, [pc, #492]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003978:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xd8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0xc0>
 800398a:	4b76      	ldr	r3, [pc, #472]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a75      	ldr	r2, [pc, #468]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b73      	ldr	r3, [pc, #460]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a72      	ldr	r2, [pc, #456]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xd8>
 80039a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7ff f844 	bl	8002a50 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7ff f840 	bl	8002a50 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	@ 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e229      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b61      	ldr	r3, [pc, #388]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xe8>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7ff f830 	bl	8002a50 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7ff f82c 	bl	8002a50 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e215      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b57      	ldr	r3, [pc, #348]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x110>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d069      	beq.n	8003af6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a22:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x190>
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x17a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1e9      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b41      	ldr	r3, [pc, #260]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	493d      	ldr	r1, [pc, #244]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e040      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b39      	ldr	r3, [pc, #228]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a38      	ldr	r2, [pc, #224]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fe ffe2 	bl	8002a50 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a90:	f7fe ffde 	bl	8002a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1c7      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b30      	ldr	r3, [pc, #192]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4929      	ldr	r1, [pc, #164]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
 8003ac2:	e018      	b.n	8003af6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac4:	4b27      	ldr	r3, [pc, #156]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe ffbe 	bl	8002a50 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad8:	f7fe ffba 	bl	8002a50 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1a3      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	4b1e      	ldr	r3, [pc, #120]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d038      	beq.n	8003b74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d019      	beq.n	8003b3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b0a:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0e:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fe ff9b 	bl	8002a50 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fe ff97 	bl	8002a50 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e180      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b30:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x23a>
 8003b3c:	e01a      	b.n	8003b74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	4a08      	ldr	r2, [pc, #32]	@ (8003b64 <HAL_RCC_OscConfig+0x280>)
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7fe ff81 	bl	8002a50 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fe ff7d 	bl	8002a50 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d903      	bls.n	8003b68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e166      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
 8003b64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	4b92      	ldr	r3, [pc, #584]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a4 	beq.w	8003cca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b82:	4b8c      	ldr	r3, [pc, #560]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	4b89      	ldr	r3, [pc, #548]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	4a88      	ldr	r2, [pc, #544]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b9a:	4b86      	ldr	r3, [pc, #536]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003baa:	4b83      	ldr	r3, [pc, #524]	@ (8003db8 <HAL_RCC_OscConfig+0x4d4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003bb6:	4b80      	ldr	r3, [pc, #512]	@ (8003db8 <HAL_RCC_OscConfig+0x4d4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7f      	ldr	r2, [pc, #508]	@ (8003db8 <HAL_RCC_OscConfig+0x4d4>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe ff45 	bl	8002a50 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fe ff41 	bl	8002a50 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	@ 0x64
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e12a      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bdc:	4b76      	ldr	r3, [pc, #472]	@ (8003db8 <HAL_RCC_OscConfig+0x4d4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x31a>
 8003bf0:	4b70      	ldr	r3, [pc, #448]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf4:	4a6f      	ldr	r2, [pc, #444]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bfc:	e02d      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x33c>
 8003c06:	4b6b      	ldr	r3, [pc, #428]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c12:	4b68      	ldr	r3, [pc, #416]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	4a67      	ldr	r2, [pc, #412]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1e:	e01c      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCC_OscConfig+0x35e>
 8003c28:	4b62      	ldr	r3, [pc, #392]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2c:	4a61      	ldr	r2, [pc, #388]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c34:	4b5f      	ldr	r3, [pc, #380]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	4a5e      	ldr	r2, [pc, #376]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c40:	e00b      	b.n	8003c5a <HAL_RCC_OscConfig+0x376>
 8003c42:	4b5c      	ldr	r3, [pc, #368]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	4a5b      	ldr	r2, [pc, #364]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4e:	4b59      	ldr	r3, [pc, #356]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	4a58      	ldr	r2, [pc, #352]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	f023 0304 	bic.w	r3, r3, #4
 8003c58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fe fef5 	bl	8002a50 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe fef1 	bl	8002a50 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0d8      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	4b4c      	ldr	r3, [pc, #304]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ee      	beq.n	8003c6a <HAL_RCC_OscConfig+0x386>
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fedf 	bl	8002a50 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7fe fedb 	bl	8002a50 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0c2      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cac:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ee      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d105      	bne.n	8003cca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80ae 	beq.w	8003e30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd4:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d06d      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d14b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b32      	ldr	r3, [pc, #200]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a31      	ldr	r2, [pc, #196]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe feac 	bl	8002a50 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe fea8 	bl	8002a50 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e091      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b29      	ldr	r3, [pc, #164]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	071b      	lsls	r3, r3, #28
 8003d46:	491b      	ldr	r1, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d4c:	4b19      	ldr	r3, [pc, #100]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a18      	ldr	r2, [pc, #96]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe fe7a 	bl	8002a50 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe fe76 	bl	8002a50 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e05f      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x47c>
 8003d7e:	e057      	b.n	8003e30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d80:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0b      	ldr	r2, [pc, #44]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fe60 	bl	8002a50 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fe fe5c 	bl	8002a50 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e045      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x4b0>
 8003db2:	e03d      	b.n	8003e30 <HAL_RCC_OscConfig+0x54c>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <HAL_RCC_OscConfig+0x558>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d030      	beq.n	8003e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d129      	bne.n	8003e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d122      	bne.n	8003e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003df2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d119      	bne.n	8003e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	3b01      	subs	r3, #1
 8003e06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10f      	bne.n	8003e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800

08003e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0d0      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b6a      	ldr	r3, [pc, #424]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d910      	bls.n	8003e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b67      	ldr	r3, [pc, #412]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 020f 	bic.w	r2, r3, #15
 8003e6e:	4965      	ldr	r1, [pc, #404]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b63      	ldr	r3, [pc, #396]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0b8      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea0:	4b59      	ldr	r3, [pc, #356]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a58      	ldr	r2, [pc, #352]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb8:	4b53      	ldr	r3, [pc, #332]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b50      	ldr	r3, [pc, #320]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	494d      	ldr	r1, [pc, #308]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d040      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d115      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e07f      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e073      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3d      	ldr	r3, [pc, #244]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06b      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b39      	ldr	r3, [pc, #228]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4936      	ldr	r1, [pc, #216]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f34:	f7fe fd8c 	bl	8002a50 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fe fd88 	bl	8002a50 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e053      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d210      	bcs.n	8003f94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 020f 	bic.w	r2, r3, #15
 8003f7a:	4922      	ldr	r1, [pc, #136]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b20      	ldr	r3, [pc, #128]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e032      	b.n	8003ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa0:	4b19      	ldr	r3, [pc, #100]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4916      	ldr	r1, [pc, #88]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fbe:	4b12      	ldr	r3, [pc, #72]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	490e      	ldr	r1, [pc, #56]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd2:	f000 f821 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	490a      	ldr	r1, [pc, #40]	@ (800400c <HAL_RCC_ClockConfig+0x1cc>)
 8003fe4:	5ccb      	ldrb	r3, [r1, r3]
 8003fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fea:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <HAL_RCC_ClockConfig+0x1d0>)
 8003fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <HAL_RCC_ClockConfig+0x1d4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fce8 	bl	80029c8 <HAL_InitTick>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40023c00 	.word	0x40023c00
 8004008:	40023800 	.word	0x40023800
 800400c:	08008470 	.word	0x08008470
 8004010:	20000014 	.word	0x20000014
 8004014:	20000018 	.word	0x20000018

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b094      	sub	sp, #80	@ 0x50
 800401e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	647b      	str	r3, [r7, #68]	@ 0x44
 8004024:	2300      	movs	r3, #0
 8004026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004028:	2300      	movs	r3, #0
 800402a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004030:	4b79      	ldr	r3, [pc, #484]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b08      	cmp	r3, #8
 800403a:	d00d      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x40>
 800403c:	2b08      	cmp	r3, #8
 800403e:	f200 80e1 	bhi.w	8004204 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x34>
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x3a>
 800404a:	e0db      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b73      	ldr	r3, [pc, #460]	@ (800421c <HAL_RCC_GetSysClockFreq+0x204>)
 800404e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004050:	e0db      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004052:	4b73      	ldr	r3, [pc, #460]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x208>)
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004056:	e0d8      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004058:	4b6f      	ldr	r3, [pc, #444]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004060:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004062:	4b6d      	ldr	r3, [pc, #436]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	4b6a      	ldr	r3, [pc, #424]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	2200      	movs	r2, #0
 8004076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004078:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800407a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004080:	633b      	str	r3, [r7, #48]	@ 0x30
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	@ 0x34
 8004086:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800408a:	4622      	mov	r2, r4
 800408c:	462b      	mov	r3, r5
 800408e:	f04f 0000 	mov.w	r0, #0
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	0159      	lsls	r1, r3, #5
 8004098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800409c:	0150      	lsls	r0, r2, #5
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4621      	mov	r1, r4
 80040a4:	1a51      	subs	r1, r2, r1
 80040a6:	6139      	str	r1, [r7, #16]
 80040a8:	4629      	mov	r1, r5
 80040aa:	eb63 0301 	sbc.w	r3, r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	018b      	lsls	r3, r1, #6
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c6:	4651      	mov	r1, sl
 80040c8:	018a      	lsls	r2, r1, #6
 80040ca:	4651      	mov	r1, sl
 80040cc:	ebb2 0801 	subs.w	r8, r2, r1
 80040d0:	4659      	mov	r1, fp
 80040d2:	eb63 0901 	sbc.w	r9, r3, r1
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ea:	4690      	mov	r8, r2
 80040ec:	4699      	mov	r9, r3
 80040ee:	4623      	mov	r3, r4
 80040f0:	eb18 0303 	adds.w	r3, r8, r3
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	462b      	mov	r3, r5
 80040f8:	eb49 0303 	adc.w	r3, r9, r3
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410a:	4629      	mov	r1, r5
 800410c:	024b      	lsls	r3, r1, #9
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004114:	4621      	mov	r1, r4
 8004116:	024a      	lsls	r2, r1, #9
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411e:	2200      	movs	r2, #0
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004128:	f7fc f8da 	bl	80002e0 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004134:	e058      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004136:	4b38      	ldr	r3, [pc, #224]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	099b      	lsrs	r3, r3, #6
 800413c:	2200      	movs	r2, #0
 800413e:	4618      	mov	r0, r3
 8004140:	4611      	mov	r1, r2
 8004142:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004146:	623b      	str	r3, [r7, #32]
 8004148:	2300      	movs	r3, #0
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
 800414c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004150:	4642      	mov	r2, r8
 8004152:	464b      	mov	r3, r9
 8004154:	f04f 0000 	mov.w	r0, #0
 8004158:	f04f 0100 	mov.w	r1, #0
 800415c:	0159      	lsls	r1, r3, #5
 800415e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004162:	0150      	lsls	r0, r2, #5
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4641      	mov	r1, r8
 800416a:	ebb2 0a01 	subs.w	sl, r2, r1
 800416e:	4649      	mov	r1, r9
 8004170:	eb63 0b01 	sbc.w	fp, r3, r1
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004180:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004184:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004188:	ebb2 040a 	subs.w	r4, r2, sl
 800418c:	eb63 050b 	sbc.w	r5, r3, fp
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	00eb      	lsls	r3, r5, #3
 800419a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419e:	00e2      	lsls	r2, r4, #3
 80041a0:	4614      	mov	r4, r2
 80041a2:	461d      	mov	r5, r3
 80041a4:	4643      	mov	r3, r8
 80041a6:	18e3      	adds	r3, r4, r3
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	464b      	mov	r3, r9
 80041ac:	eb45 0303 	adc.w	r3, r5, r3
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041be:	4629      	mov	r1, r5
 80041c0:	028b      	lsls	r3, r1, #10
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c8:	4621      	mov	r1, r4
 80041ca:	028a      	lsls	r2, r1, #10
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d2:	2200      	movs	r2, #0
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	61fa      	str	r2, [r7, #28]
 80041d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041dc:	f7fc f880 	bl	80002e0 <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	3301      	adds	r3, #1
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004202:	e002      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_RCC_GetSysClockFreq+0x204>)
 8004206:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800420c:	4618      	mov	r0, r3
 800420e:	3750      	adds	r7, #80	@ 0x50
 8004210:	46bd      	mov	sp, r7
 8004212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	00f42400 	.word	0x00f42400
 8004220:	007a1200 	.word	0x007a1200

08004224 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <HAL_RCC_GetHCLKFreq+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000014 	.word	0x20000014

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004240:	f7ff fff0 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	@ (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	08008480 	.word	0x08008480

08004264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004268:	f7ff ffdc 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	0b5b      	lsrs	r3, r3, #13
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4903      	ldr	r1, [pc, #12]	@ (8004288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40023800 	.word	0x40023800
 8004288:	08008480 	.word	0x08008480

0800428c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d012      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042b4:	4b69      	ldr	r3, [pc, #420]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4a68      	ldr	r2, [pc, #416]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042be:	6093      	str	r3, [r2, #8]
 80042c0:	4b66      	ldr	r3, [pc, #408]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	4964      	ldr	r1, [pc, #400]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d017      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e6:	4b5d      	ldr	r3, [pc, #372]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	4959      	ldr	r1, [pc, #356]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004300:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004304:	d101      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004322:	4b4e      	ldr	r3, [pc, #312]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004328:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	494a      	ldr	r1, [pc, #296]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004340:	d101      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 808b 	beq.w	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004370:	4b3a      	ldr	r3, [pc, #232]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	4a39      	ldr	r2, [pc, #228]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800437a:	6413      	str	r3, [r2, #64]	@ 0x40
 800437c:	4b37      	ldr	r3, [pc, #220]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004388:	4b35      	ldr	r3, [pc, #212]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a34      	ldr	r2, [pc, #208]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004394:	f7fe fb5c 	bl	8002a50 <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439c:	f7fe fb58 	bl	8002a50 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e38f      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ba:	4b28      	ldr	r3, [pc, #160]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d035      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d02e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d8:	4b20      	ldr	r3, [pc, #128]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ee:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	4a1a      	ldr	r2, [pc, #104]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043fa:	4a18      	ldr	r2, [pc, #96]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004400:	4b16      	ldr	r3, [pc, #88]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d114      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe fb20 	bl	8002a50 <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	e00a      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004414:	f7fe fb1c 	bl	8002a50 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e351      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442a:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0ee      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004442:	d111      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004452:	400b      	ands	r3, r1
 8004454:	4901      	ldr	r1, [pc, #4]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
 800445a:	e00b      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	0ffffcff 	.word	0x0ffffcff
 8004468:	4bac      	ldr	r3, [pc, #688]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4aab      	ldr	r2, [pc, #684]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004472:	6093      	str	r3, [r2, #8]
 8004474:	4ba9      	ldr	r3, [pc, #676]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	49a6      	ldr	r1, [pc, #664]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004482:	4313      	orrs	r3, r2
 8004484:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004492:	4ba2      	ldr	r3, [pc, #648]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004498:	4aa0      	ldr	r2, [pc, #640]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800449e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80044a2:	4b9e      	ldr	r3, [pc, #632]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ac:	499b      	ldr	r1, [pc, #620]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c0:	4b96      	ldr	r3, [pc, #600]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ce:	4993      	ldr	r1, [pc, #588]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e2:	4b8e      	ldr	r3, [pc, #568]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f0:	498a      	ldr	r1, [pc, #552]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004504:	4b85      	ldr	r3, [pc, #532]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004512:	4982      	ldr	r1, [pc, #520]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004526:	4b7d      	ldr	r3, [pc, #500]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004534:	4979      	ldr	r1, [pc, #484]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004548:	4b74      	ldr	r3, [pc, #464]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f023 0203 	bic.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	4971      	ldr	r1, [pc, #452]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800456a:	4b6c      	ldr	r3, [pc, #432]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	f023 020c 	bic.w	r2, r3, #12
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004578:	4968      	ldr	r1, [pc, #416]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800458c:	4b63      	ldr	r3, [pc, #396]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004592:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800459a:	4960      	ldr	r1, [pc, #384]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045ae:	4b5b      	ldr	r3, [pc, #364]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045bc:	4957      	ldr	r1, [pc, #348]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d0:	4b52      	ldr	r3, [pc, #328]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045de:	494f      	ldr	r1, [pc, #316]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004600:	4946      	ldr	r1, [pc, #280]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004614:	4b41      	ldr	r3, [pc, #260]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	493e      	ldr	r1, [pc, #248]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004636:	4b39      	ldr	r3, [pc, #228]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004644:	4935      	ldr	r1, [pc, #212]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004658:	4b30      	ldr	r3, [pc, #192]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004666:	492d      	ldr	r1, [pc, #180]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800467a:	4b28      	ldr	r3, [pc, #160]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004688:	4924      	ldr	r1, [pc, #144]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004698:	d101      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ba:	4b18      	ldr	r3, [pc, #96]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c8:	4914      	ldr	r1, [pc, #80]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ec:	490b      	ldr	r1, [pc, #44]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004706:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004710:	4902      	ldr	r1, [pc, #8]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004718:	e002      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800472c:	4b8a      	ldr	r3, [pc, #552]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004732:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473c:	4986      	ldr	r1, [pc, #536]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004750:	4b81      	ldr	r3, [pc, #516]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004756:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004760:	497d      	ldr	r1, [pc, #500]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d006      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80d6 	beq.w	8004928 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800477c:	4b76      	ldr	r3, [pc, #472]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a75      	ldr	r2, [pc, #468]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004788:	f7fe f962 	bl	8002a50 <HAL_GetTick>
 800478c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004790:	f7fe f95e 	bl	8002a50 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	@ 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e195      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d021      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11d      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047c2:	4b65      	ldr	r3, [pc, #404]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047d0:	4b61      	ldr	r3, [pc, #388]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d6:	0e1b      	lsrs	r3, r3, #24
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	019a      	lsls	r2, r3, #6
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	071b      	lsls	r3, r3, #28
 80047f6:	4958      	ldr	r1, [pc, #352]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02e      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004828:	d129      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800482a:	4b4b      	ldr	r3, [pc, #300]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004838:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483e:	0f1b      	lsrs	r3, r3, #28
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	019a      	lsls	r2, r3, #6
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	071b      	lsls	r3, r3, #28
 800485e:	493e      	ldr	r1, [pc, #248]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004866:	4b3c      	ldr	r3, [pc, #240]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800486c:	f023 021f 	bic.w	r2, r3, #31
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	3b01      	subs	r3, #1
 8004876:	4938      	ldr	r1, [pc, #224]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01d      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800488a:	4b33      	ldr	r3, [pc, #204]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004898:	4b2f      	ldr	r3, [pc, #188]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800489e:	0f1b      	lsrs	r3, r3, #28
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	019a      	lsls	r2, r3, #6
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	4926      	ldr	r1, [pc, #152]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d011      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	019a      	lsls	r2, r3, #6
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	061b      	lsls	r3, r3, #24
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	071b      	lsls	r3, r3, #28
 80048ee:	491a      	ldr	r1, [pc, #104]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048f6:	4b18      	ldr	r3, [pc, #96]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004902:	f7fe f8a5 	bl	8002a50 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800490a:	f7fe f8a1 	bl	8002a50 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b64      	cmp	r3, #100	@ 0x64
 8004916:	d901      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0d8      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	f040 80ce 	bne.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004930:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a08      	ldr	r2, [pc, #32]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800493a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493c:	f7fe f888 	bl	8002a50 <HAL_GetTick>
 8004940:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004942:	e00b      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004944:	f7fe f884 	bl	8002a50 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	@ 0x64
 8004950:	d904      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e0bb      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800495c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004968:	d0ec      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02e      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d12a      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004992:	4b51      	ldr	r3, [pc, #324]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049a0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	0f1b      	lsrs	r3, r3, #28
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	019a      	lsls	r2, r3, #6
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	4944      	ldr	r1, [pc, #272]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049ce:	4b42      	ldr	r3, [pc, #264]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	493d      	ldr	r1, [pc, #244]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d022      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049fc:	d11d      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049fe:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a04:	0e1b      	lsrs	r3, r3, #24
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a0c:	4b32      	ldr	r3, [pc, #200]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	0f1b      	lsrs	r3, r3, #28
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	019a      	lsls	r2, r3, #6
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	061b      	lsls	r3, r3, #24
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	071b      	lsls	r3, r3, #28
 8004a32:	4929      	ldr	r1, [pc, #164]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a46:	4b24      	ldr	r3, [pc, #144]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	0e1b      	lsrs	r3, r3, #24
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a54:	4b20      	ldr	r3, [pc, #128]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	019a      	lsls	r2, r3, #6
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	071b      	lsls	r3, r3, #28
 8004a7a:	4917      	ldr	r1, [pc, #92]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a82:	4b15      	ldr	r3, [pc, #84]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	4911      	ldr	r1, [pc, #68]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fd ffd4 	bl	8002a50 <HAL_GetTick>
 8004aa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004aac:	f7fd ffd0 	bl	8002a50 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e007      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aca:	d1ef      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800

08004adc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e09d      	b.n	8004c2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004afe:	d009      	beq.n	8004b14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]
 8004b06:	e005      	b.n	8004b14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd f9f4 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b54:	d902      	bls.n	8004b5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	e002      	b.n	8004b62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004b6a:	d007      	beq.n	8004b7c <HAL_SPI_Init+0xa0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b74:	d002      	beq.n	8004b7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bbe:	ea42 0103 	orr.w	r1, r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 0204 	and.w	r2, r3, #4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004bf8:	ea42 0103 	orr.w	r1, r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e049      	b.n	8004cd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fd f9df 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f001 f819 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d001      	beq.n	8004cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e054      	b.n	8004da2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a26      	ldr	r2, [pc, #152]	@ (8004db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d022      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d22:	d01d      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a22      	ldr	r2, [pc, #136]	@ (8004db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a21      	ldr	r2, [pc, #132]	@ (8004db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0x80>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d115      	bne.n	8004d8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	4b19      	ldr	r3, [pc, #100]	@ (8004dcc <HAL_TIM_Base_Start_IT+0xec>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b06      	cmp	r3, #6
 8004d70:	d015      	beq.n	8004d9e <HAL_TIM_Base_Start_IT+0xbe>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d78:	d011      	beq.n	8004d9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	e008      	b.n	8004d9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e000      	b.n	8004da0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40010000 	.word	0x40010000
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40010400 	.word	0x40010400
 8004dc4:	40014000 	.word	0x40014000
 8004dc8:	40001800 	.word	0x40001800
 8004dcc:	00010007 	.word	0x00010007

08004dd0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e049      	b.n	8004e76 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f841 	bl	8004e7e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 ff4a 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e049      	b.n	8004f38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fd f9bf 	bl	800223c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f000 fee9 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d109      	bne.n	8004f64 <HAL_TIM_PWM_Start+0x24>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	e03c      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d109      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x3e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	bf14      	ite	ne
 8004f76:	2301      	movne	r3, #1
 8004f78:	2300      	moveq	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	e02f      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d109      	bne.n	8004f98 <HAL_TIM_PWM_Start+0x58>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	bf14      	ite	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	2300      	moveq	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	e022      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d109      	bne.n	8004fb2 <HAL_TIM_PWM_Start+0x72>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e015      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d109      	bne.n	8004fcc <HAL_TIM_PWM_Start+0x8c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e008      	b.n	8004fde <HAL_TIM_PWM_Start+0x9e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e092      	b.n	800510c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0xb6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff4:	e023      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d104      	bne.n	8005006 <HAL_TIM_PWM_Start+0xc6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005004:	e01b      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xd6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005014:	e013      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xe6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005024:	e00b      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b10      	cmp	r3, #16
 800502a:	d104      	bne.n	8005036 <HAL_TIM_PWM_Start+0xf6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005034:	e003      	b.n	800503e <HAL_TIM_PWM_Start+0xfe>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2201      	movs	r2, #1
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fafc 	bl	8006644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	@ (8005114 <HAL_TIM_PWM_Start+0x1d4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIM_PWM_Start+0x120>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <HAL_TIM_PWM_Start+0x1d8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_TIM_PWM_Start+0x124>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_TIM_PWM_Start+0x126>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005078:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a25      	ldr	r2, [pc, #148]	@ (8005114 <HAL_TIM_PWM_Start+0x1d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508c:	d01d      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a22      	ldr	r2, [pc, #136]	@ (800511c <HAL_TIM_PWM_Start+0x1dc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d018      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a20      	ldr	r2, [pc, #128]	@ (8005120 <HAL_TIM_PWM_Start+0x1e0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005124 <HAL_TIM_PWM_Start+0x1e4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <HAL_TIM_PWM_Start+0x1d8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005128 <HAL_TIM_PWM_Start+0x1e8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_TIM_PWM_Start+0x18a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a19      	ldr	r2, [pc, #100]	@ (800512c <HAL_TIM_PWM_Start+0x1ec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d115      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4b17      	ldr	r3, [pc, #92]	@ (8005130 <HAL_TIM_PWM_Start+0x1f0>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b06      	cmp	r3, #6
 80050da:	d015      	beq.n	8005108 <HAL_TIM_PWM_Start+0x1c8>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e2:	d011      	beq.n	8005108 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	e008      	b.n	8005108 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e000      	b.n	800510a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40010000 	.word	0x40010000
 8005118:	40010400 	.word	0x40010400
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40014000 	.word	0x40014000
 800512c:	40001800 	.word	0x40001800
 8005130:	00010007 	.word	0x00010007

08005134 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e049      	b.n	80051da <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f841 	bl	80051e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f000 fd98 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e08f      	b.n	800532c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fc ff95 	bl	8002150 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4b3e      	ldr	r3, [pc, #248]	@ (8005334 <HAL_TIM_Encoder_Init+0x13c>)
 800523a:	400b      	ands	r3, r1
 800523c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3304      	adds	r3, #4
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 fd2d 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4b31      	ldr	r3, [pc, #196]	@ (8005338 <HAL_TIM_Encoder_Init+0x140>)
 8005274:	4013      	ands	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	4313      	orrs	r3, r2
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4b2b      	ldr	r3, [pc, #172]	@ (800533c <HAL_TIM_Encoder_Init+0x144>)
 800528e:	4013      	ands	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4b2a      	ldr	r3, [pc, #168]	@ (8005340 <HAL_TIM_Encoder_Init+0x148>)
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	4313      	orrs	r3, r2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	011a      	lsls	r2, r3, #4
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	031b      	lsls	r3, r3, #12
 80052b8:	4313      	orrs	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4313      	orrs	r3, r2
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	fffebff8 	.word	0xfffebff8
 8005338:	fffffcfc 	.word	0xfffffcfc
 800533c:	fffff3f3 	.word	0xfffff3f3
 8005340:	ffff0f0f 	.word	0xffff0f0f

08005344 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005354:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800535c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005364:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800536c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d110      	bne.n	8005396 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d102      	bne.n	8005380 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800537a:	7b7b      	ldrb	r3, [r7, #13]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e069      	b.n	8005458 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005394:	e031      	b.n	80053fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d110      	bne.n	80053be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d102      	bne.n	80053a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053a2:	7b3b      	ldrb	r3, [r7, #12]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e055      	b.n	8005458 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053bc:	e01d      	b.n	80053fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d108      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ca:	7b7b      	ldrb	r3, [r7, #13]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80053d0:	7b3b      	ldrb	r3, [r7, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d001      	beq.n	80053da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e03e      	b.n	8005458 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_TIM_Encoder_Start+0xc4>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b04      	cmp	r3, #4
 8005404:	d008      	beq.n	8005418 <HAL_TIM_Encoder_Start+0xd4>
 8005406:	e00f      	b.n	8005428 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2201      	movs	r2, #1
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f917 	bl	8006644 <TIM_CCxChannelCmd>
      break;
 8005416:	e016      	b.n	8005446 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	2104      	movs	r1, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f001 f90f 	bl	8006644 <TIM_CCxChannelCmd>
      break;
 8005426:	e00e      	b.n	8005446 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2201      	movs	r2, #1
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f001 f907 	bl	8006644 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	2104      	movs	r1, #4
 800543e:	4618      	mov	r0, r3
 8005440:	f001 f900 	bl	8006644 <TIM_CCxChannelCmd>
      break;
 8005444:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d020      	beq.n	80054c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0202 	mvn.w	r2, #2
 8005494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fbde 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fbd0 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fbe1 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0204 	mvn.w	r2, #4
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fbb8 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fbaa 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fbbb 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0208 	mvn.w	r2, #8
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2204      	movs	r2, #4
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fb92 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb84 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fb95 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	d020      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0210 	mvn.w	r2, #16
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2208      	movs	r2, #8
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fb6c 	bl	8005c6c <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fb5e 	bl	8005c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb6f 	bl	8005c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0201 	mvn.w	r2, #1
 80055c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb f8de 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 f961 	bl	80068bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 f959 	bl	80068d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800563a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb29 	bl	8005c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0220 	mvn.w	r2, #32
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f921 	bl	80068a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <HAL_TIM_OC_ConfigChannel+0x1e>
 800568a:	2302      	movs	r3, #2
 800568c:	e066      	b.n	800575c <HAL_TIM_OC_ConfigChannel+0xec>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b14      	cmp	r3, #20
 800569a:	d857      	bhi.n	800574c <HAL_TIM_OC_ConfigChannel+0xdc>
 800569c:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	0800574d 	.word	0x0800574d
 80056ac:	0800574d 	.word	0x0800574d
 80056b0:	0800574d 	.word	0x0800574d
 80056b4:	08005707 	.word	0x08005707
 80056b8:	0800574d 	.word	0x0800574d
 80056bc:	0800574d 	.word	0x0800574d
 80056c0:	0800574d 	.word	0x0800574d
 80056c4:	08005715 	.word	0x08005715
 80056c8:	0800574d 	.word	0x0800574d
 80056cc:	0800574d 	.word	0x0800574d
 80056d0:	0800574d 	.word	0x0800574d
 80056d4:	08005723 	.word	0x08005723
 80056d8:	0800574d 	.word	0x0800574d
 80056dc:	0800574d 	.word	0x0800574d
 80056e0:	0800574d 	.word	0x0800574d
 80056e4:	08005731 	.word	0x08005731
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	0800574d 	.word	0x0800574d
 80056f0:	0800574d 	.word	0x0800574d
 80056f4:	0800573f 	.word	0x0800573f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fb7e 	bl	8005e00 <TIM_OC1_SetConfig>
      break;
 8005704:	e025      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fbe9 	bl	8005ee4 <TIM_OC2_SetConfig>
      break;
 8005712:	e01e      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fc5a 	bl	8005fd4 <TIM_OC3_SetConfig>
      break;
 8005720:	e017      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fcc9 	bl	80060c0 <TIM_OC4_SetConfig>
      break;
 800572e:	e010      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fd1a 	bl	8006170 <TIM_OC5_SetConfig>
      break;
 800573c:	e009      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fd65 	bl	8006214 <TIM_OC6_SetConfig>
      break;
 800574a:	e002      	b.n	8005752 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]
      break;
 8005750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_IC_ConfigChannel+0x1e>
 800577e:	2302      	movs	r3, #2
 8005780:	e088      	b.n	8005894 <HAL_TIM_IC_ConfigChannel+0x130>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80057a0:	f000 fd8c 	bl	80062bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 020c 	bic.w	r2, r2, #12
 80057b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6999      	ldr	r1, [r3, #24]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	619a      	str	r2, [r3, #24]
 80057c6:	e060      	b.n	800588a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d11c      	bne.n	8005808 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80057de:	f000 fe10 	bl	8006402 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6999      	ldr	r1, [r3, #24]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	021a      	lsls	r2, r3, #8
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	619a      	str	r2, [r3, #24]
 8005806:	e040      	b.n	800588a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d11b      	bne.n	8005846 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800581e:	f000 fe5d 	bl	80064dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 020c 	bic.w	r2, r2, #12
 8005830:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	61da      	str	r2, [r3, #28]
 8005844:	e021      	b.n	800588a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b0c      	cmp	r3, #12
 800584a:	d11c      	bne.n	8005886 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800585c:	f000 fe7a 	bl	8006554 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69da      	ldr	r2, [r3, #28]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800586e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69d9      	ldr	r1, [r3, #28]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	021a      	lsls	r2, r3, #8
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	61da      	str	r2, [r3, #28]
 8005884:	e001      	b.n	800588a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005892:	7dfb      	ldrb	r3, [r7, #23]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0ff      	b.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b14      	cmp	r3, #20
 80058c6:	f200 80f0 	bhi.w	8005aaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005925 	.word	0x08005925
 80058d4:	08005aab 	.word	0x08005aab
 80058d8:	08005aab 	.word	0x08005aab
 80058dc:	08005aab 	.word	0x08005aab
 80058e0:	08005965 	.word	0x08005965
 80058e4:	08005aab 	.word	0x08005aab
 80058e8:	08005aab 	.word	0x08005aab
 80058ec:	08005aab 	.word	0x08005aab
 80058f0:	080059a7 	.word	0x080059a7
 80058f4:	08005aab 	.word	0x08005aab
 80058f8:	08005aab 	.word	0x08005aab
 80058fc:	08005aab 	.word	0x08005aab
 8005900:	080059e7 	.word	0x080059e7
 8005904:	08005aab 	.word	0x08005aab
 8005908:	08005aab 	.word	0x08005aab
 800590c:	08005aab 	.word	0x08005aab
 8005910:	08005a29 	.word	0x08005a29
 8005914:	08005aab 	.word	0x08005aab
 8005918:	08005aab 	.word	0x08005aab
 800591c:	08005aab 	.word	0x08005aab
 8005920:	08005a69 	.word	0x08005a69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fa68 	bl	8005e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0208 	orr.w	r2, r2, #8
 800593e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0204 	bic.w	r2, r2, #4
 800594e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	619a      	str	r2, [r3, #24]
      break;
 8005962:	e0a5      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4618      	mov	r0, r3
 800596c:	f000 faba 	bl	8005ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699a      	ldr	r2, [r3, #24]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800598e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6999      	ldr	r1, [r3, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	619a      	str	r2, [r3, #24]
      break;
 80059a4:	e084      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fb11 	bl	8005fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0208 	orr.w	r2, r2, #8
 80059c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0204 	bic.w	r2, r2, #4
 80059d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	61da      	str	r2, [r3, #28]
      break;
 80059e4:	e064      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fb67 	bl	80060c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	021a      	lsls	r2, r3, #8
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	61da      	str	r2, [r3, #28]
      break;
 8005a26:	e043      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fb9e 	bl	8006170 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0208 	orr.w	r2, r2, #8
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0204 	bic.w	r2, r2, #4
 8005a52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a66:	e023      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fbd0 	bl	8006214 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005aa8:	e002      	b.n	8005ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
      break;
 8005aae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0b4      	b.n	8005c4a <HAL_TIM_ConfigClockSource+0x186>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4b56      	ldr	r3, [pc, #344]	@ (8005c54 <HAL_TIM_ConfigClockSource+0x190>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0xd4>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b1e:	f200 8087 	bhi.w	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b26:	f000 8086 	beq.w	8005c36 <HAL_TIM_ConfigClockSource+0x172>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2e:	d87f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b70      	cmp	r3, #112	@ 0x70
 8005b32:	d01a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xa6>
 8005b34:	2b70      	cmp	r3, #112	@ 0x70
 8005b36:	d87b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b60      	cmp	r3, #96	@ 0x60
 8005b3a:	d050      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x11a>
 8005b3c:	2b60      	cmp	r3, #96	@ 0x60
 8005b3e:	d877      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b50      	cmp	r3, #80	@ 0x50
 8005b42:	d03c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xfa>
 8005b44:	2b50      	cmp	r3, #80	@ 0x50
 8005b46:	d873      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b40      	cmp	r3, #64	@ 0x40
 8005b4a:	d058      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x13a>
 8005b4c:	2b40      	cmp	r3, #64	@ 0x40
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d064      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b30      	cmp	r3, #48	@ 0x30
 8005b56:	d86b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d060      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d867      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d05a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	e062      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b7a:	f000 fd43 	bl	8006604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
      break;
 8005b96:	e04f      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba8:	f000 fd2c 	bl	8006604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e03c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fbea 	bl	80063a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2150      	movs	r1, #80	@ 0x50
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fcf9 	bl	80065ce <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e02c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fc46 	bl	800647c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2160      	movs	r1, #96	@ 0x60
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fce9 	bl	80065ce <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e01c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 fbca 	bl	80063a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2140      	movs	r1, #64	@ 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fcd9 	bl	80065ce <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e00c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 fcd0 	bl	80065ce <TIM_ITRx_SetConfig>
      break;
 8005c2e:	e003      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	fffeff88 	.word	0xfffeff88

08005c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a46      	ldr	r2, [pc, #280]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a43      	ldr	r2, [pc, #268]	@ (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a42      	ldr	r2, [pc, #264]	@ (8005ddc <TIM_Base_SetConfig+0x134>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a41      	ldr	r2, [pc, #260]	@ (8005de0 <TIM_Base_SetConfig+0x138>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a40      	ldr	r2, [pc, #256]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a35      	ldr	r2, [pc, #212]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d027      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d023      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a31      	ldr	r2, [pc, #196]	@ (8005ddc <TIM_Base_SetConfig+0x134>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	@ (8005de0 <TIM_Base_SetConfig+0x138>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2f      	ldr	r2, [pc, #188]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d017      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005de8 <TIM_Base_SetConfig+0x140>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2d      	ldr	r2, [pc, #180]	@ (8005dec <TIM_Base_SetConfig+0x144>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <TIM_Base_SetConfig+0x148>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2b      	ldr	r2, [pc, #172]	@ (8005df4 <TIM_Base_SetConfig+0x14c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8005df8 <TIM_Base_SetConfig+0x150>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <TIM_Base_SetConfig+0x154>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a10      	ldr	r2, [pc, #64]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a12      	ldr	r2, [pc, #72]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800
 8005df4:	40001800 	.word	0x40001800
 8005df8:	40001c00 	.word	0x40001c00
 8005dfc:	40002000 	.word	0x40002000

08005e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f023 0201 	bic.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed8 <TIM_OC1_SetConfig+0xd8>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 0302 	bic.w	r3, r3, #2
 8005e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <TIM_OC1_SetConfig+0xdc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC1_SetConfig+0x64>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ee0 <TIM_OC1_SetConfig+0xe0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0308 	bic.w	r3, r3, #8
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <TIM_OC1_SetConfig+0xdc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC1_SetConfig+0x8e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a15      	ldr	r2, [pc, #84]	@ (8005ee0 <TIM_OC1_SetConfig+0xe0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d111      	bne.n	8005eb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	fffeff8f 	.word	0xfffeff8f
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f023 0210 	bic.w	r2, r3, #16
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8005fc8 <TIM_OC2_SetConfig+0xe4>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a23      	ldr	r2, [pc, #140]	@ (8005fcc <TIM_OC2_SetConfig+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0x68>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a22      	ldr	r2, [pc, #136]	@ (8005fd0 <TIM_OC2_SetConfig+0xec>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10d      	bne.n	8005f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	@ (8005fcc <TIM_OC2_SetConfig+0xe8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC2_SetConfig+0x94>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a17      	ldr	r2, [pc, #92]	@ (8005fd0 <TIM_OC2_SetConfig+0xec>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d113      	bne.n	8005fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	feff8fff 	.word	0xfeff8fff
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40010400 	.word	0x40010400

08005fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80060b4 <TIM_OC3_SetConfig+0xe0>)
 8006000:	4013      	ands	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800601c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a22      	ldr	r2, [pc, #136]	@ (80060b8 <TIM_OC3_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC3_SetConfig+0x66>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a21      	ldr	r2, [pc, #132]	@ (80060bc <TIM_OC3_SetConfig+0xe8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10d      	bne.n	8006056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <TIM_OC3_SetConfig+0xe4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d003      	beq.n	8006066 <TIM_OC3_SetConfig+0x92>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a16      	ldr	r2, [pc, #88]	@ (80060bc <TIM_OC3_SetConfig+0xe8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d113      	bne.n	800608e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800606c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	621a      	str	r2, [r3, #32]
}
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	fffeff8f 	.word	0xfffeff8f
 80060b8:	40010000 	.word	0x40010000
 80060bc:	40010400 	.word	0x40010400

080060c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006164 <TIM_OC4_SetConfig+0xa4>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800610a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a13      	ldr	r2, [pc, #76]	@ (8006168 <TIM_OC4_SetConfig+0xa8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_OC4_SetConfig+0x68>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a12      	ldr	r2, [pc, #72]	@ (800616c <TIM_OC4_SetConfig+0xac>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d109      	bne.n	800613c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800612e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	019b      	lsls	r3, r3, #6
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	feff8fff 	.word	0xfeff8fff
 8006168:	40010000 	.word	0x40010000
 800616c:	40010400 	.word	0x40010400

08006170 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <TIM_OC5_SetConfig+0x98>)
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	041b      	lsls	r3, r3, #16
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a12      	ldr	r2, [pc, #72]	@ (800620c <TIM_OC5_SetConfig+0x9c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_OC5_SetConfig+0x5e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a11      	ldr	r2, [pc, #68]	@ (8006210 <TIM_OC5_SetConfig+0xa0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d109      	bne.n	80061e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	bf00      	nop
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	fffeff8f 	.word	0xfffeff8f
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4b1c      	ldr	r3, [pc, #112]	@ (80062b0 <TIM_OC6_SetConfig+0x9c>)
 8006240:	4013      	ands	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	051b      	lsls	r3, r3, #20
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a13      	ldr	r2, [pc, #76]	@ (80062b4 <TIM_OC6_SetConfig+0xa0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC6_SetConfig+0x60>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <TIM_OC6_SetConfig+0xa4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d109      	bne.n	8006288 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	feff8fff 	.word	0xfeff8fff
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40010400 	.word	0x40010400

080062bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f023 0201 	bic.w	r2, r3, #1
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a28      	ldr	r2, [pc, #160]	@ (8006388 <TIM_TI1_SetConfig+0xcc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01b      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f0:	d017      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a25      	ldr	r2, [pc, #148]	@ (800638c <TIM_TI1_SetConfig+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a24      	ldr	r2, [pc, #144]	@ (8006390 <TIM_TI1_SetConfig+0xd4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00f      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a23      	ldr	r2, [pc, #140]	@ (8006394 <TIM_TI1_SetConfig+0xd8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00b      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a22      	ldr	r2, [pc, #136]	@ (8006398 <TIM_TI1_SetConfig+0xdc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d007      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a21      	ldr	r2, [pc, #132]	@ (800639c <TIM_TI1_SetConfig+0xe0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d003      	beq.n	8006322 <TIM_TI1_SetConfig+0x66>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a20      	ldr	r2, [pc, #128]	@ (80063a0 <TIM_TI1_SetConfig+0xe4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <TIM_TI1_SetConfig+0x6a>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <TIM_TI1_SetConfig+0x6c>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e003      	b.n	8006346 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800634c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	b2db      	uxtb	r3, r3
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f003 030a 	and.w	r3, r3, #10
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40010400 	.word	0x40010400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40001800 	.word	0x40001800

080063a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f023 0201 	bic.w	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f023 030a 	bic.w	r3, r3, #10
 80063e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	621a      	str	r2, [r3, #32]
}
 80063f6:	bf00      	nop
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f023 0210 	bic.w	r2, r3, #16
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	031b      	lsls	r3, r3, #12
 8006446:	b29b      	uxth	r3, r3
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006454:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	621a      	str	r2, [r3, #32]
}
 8006470:	bf00      	nop
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f023 0210 	bic.w	r2, r3, #16
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f023 0303 	bic.w	r3, r3, #3
 8006508:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006518:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	b2db      	uxtb	r3, r3
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800652c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006580:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006592:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	031b      	lsls	r3, r3, #12
 8006598:	b29b      	uxth	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80065a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	031b      	lsls	r3, r3, #12
 80065ac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	621a      	str	r2, [r3, #32]
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f043 0307 	orr.w	r3, r3, #7
 80065f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	609a      	str	r2, [r3, #8]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800661e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	021a      	lsls	r2, r3, #8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	431a      	orrs	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	609a      	str	r2, [r3, #8]
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2201      	movs	r2, #1
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	43db      	mvns	r3, r3
 8006666:	401a      	ands	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	fa01 f303 	lsl.w	r3, r1, r3
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e06d      	b.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a30      	ldr	r2, [pc, #192]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d108      	bne.n	80066ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a20      	ldr	r2, [pc, #128]	@ (8006790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d022      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671a:	d01d      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1d      	ldr	r2, [pc, #116]	@ (8006798 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d018      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1c      	ldr	r2, [pc, #112]	@ (800679c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d013      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1a      	ldr	r2, [pc, #104]	@ (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00e      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a15      	ldr	r2, [pc, #84]	@ (8006794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d009      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a15      	ldr	r2, [pc, #84]	@ (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d10c      	bne.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	4313      	orrs	r3, r2
 8006768:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40010000 	.word	0x40010000
 8006794:	40010400 	.word	0x40010400
 8006798:	40000400 	.word	0x40000400
 800679c:	40000800 	.word	0x40000800
 80067a0:	40000c00 	.word	0x40000c00
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40001800 	.word	0x40001800

080067ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e065      	b.n	8006894 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a16      	ldr	r2, [pc, #88]	@ (80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d004      	beq.n	8006856 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a14      	ldr	r2, [pc, #80]	@ (80068a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d115      	bne.n	8006882 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006860:	051b      	lsls	r3, r3, #20
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40010400 	.word	0x40010400

080068a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e040      	b.n	8006978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fd84 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	@ 0x24
 8006910:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fbde 	bl	80070ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f977 	bl	8006c24 <UART_SetConfig>
 8006936:	4603      	mov	r3, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e01b      	b.n	8006978 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800694e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800695e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc5d 	bl	8007230 <UART_CheckIdleState>
 8006976:	4603      	mov	r3, r0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	@ 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006994:	2b20      	cmp	r3, #32
 8006996:	d177      	bne.n	8006a88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_UART_Transmit+0x24>
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e070      	b.n	8006a8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2221      	movs	r2, #33	@ 0x21
 80069b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b6:	f7fc f84b 	bl	8002a50 <HAL_GetTick>
 80069ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d4:	d108      	bne.n	80069e8 <HAL_UART_Transmit+0x68>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	e003      	b.n	80069f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069f0:	e02f      	b.n	8006a52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2180      	movs	r1, #128	@ 0x80
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fcbf 	bl	8007380 <UART_WaitOnFlagUntilTimeout>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e03b      	b.n	8006a8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	e007      	b.n	8006a40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	781a      	ldrb	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1c9      	bne.n	80069f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2140      	movs	r1, #64	@ 0x40
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fc89 	bl	8007380 <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e005      	b.n	8006a8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	e000      	b.n	8006a8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b08a      	sub	sp, #40	@ 0x28
 8006a96:	af02      	add	r7, sp, #8
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	f040 80b5 	bne.w	8006c18 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <HAL_UART_Receive+0x28>
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e0ad      	b.n	8006c1a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2222      	movs	r2, #34	@ 0x22
 8006aca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad4:	f7fb ffbc 	bl	8002a50 <HAL_GetTick>
 8006ad8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	88fa      	ldrh	r2, [r7, #6]
 8006ae6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af2:	d10e      	bne.n	8006b12 <HAL_UART_Receive+0x80>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_UART_Receive+0x76>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b06:	e02d      	b.n	8006b64 <HAL_UART_Receive+0xd2>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	22ff      	movs	r2, #255	@ 0xff
 8006b0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b10:	e028      	b.n	8006b64 <HAL_UART_Receive+0xd2>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10d      	bne.n	8006b36 <HAL_UART_Receive+0xa4>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d104      	bne.n	8006b2c <HAL_UART_Receive+0x9a>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	22ff      	movs	r2, #255	@ 0xff
 8006b26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b2a:	e01b      	b.n	8006b64 <HAL_UART_Receive+0xd2>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	227f      	movs	r2, #127	@ 0x7f
 8006b30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b34:	e016      	b.n	8006b64 <HAL_UART_Receive+0xd2>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b3e:	d10d      	bne.n	8006b5c <HAL_UART_Receive+0xca>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <HAL_UART_Receive+0xc0>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	227f      	movs	r2, #127	@ 0x7f
 8006b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b50:	e008      	b.n	8006b64 <HAL_UART_Receive+0xd2>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	223f      	movs	r2, #63	@ 0x3f
 8006b56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b5a:	e003      	b.n	8006b64 <HAL_UART_Receive+0xd2>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b74:	d108      	bne.n	8006b88 <HAL_UART_Receive+0xf6>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e003      	b.n	8006b90 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b90:	e036      	b.n	8006c00 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2120      	movs	r1, #32
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fbef 	bl	8007380 <UART_WaitOnFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e032      	b.n	8006c1a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	e00c      	b.n	8006bee <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	8a7b      	ldrh	r3, [r7, #18]
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	4013      	ands	r3, r2
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1c2      	bne.n	8006b92 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	e000      	b.n	8006c1a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
  }
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ee8 <UART_SetConfig+0x2c4>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6812      	ldr	r2, [r2, #0]
 8006c56:	6979      	ldr	r1, [r7, #20]
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a94      	ldr	r2, [pc, #592]	@ (8006eec <UART_SetConfig+0x2c8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d120      	bne.n	8006ce2 <UART_SetConfig+0xbe>
 8006ca0:	4b93      	ldr	r3, [pc, #588]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d816      	bhi.n	8006cdc <UART_SetConfig+0xb8>
 8006cae:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <UART_SetConfig+0x90>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cc5 	.word	0x08006cc5
 8006cb8:	08006cd1 	.word	0x08006cd1
 8006cbc:	08006ccb 	.word	0x08006ccb
 8006cc0:	08006cd7 	.word	0x08006cd7
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e150      	b.n	8006f6c <UART_SetConfig+0x348>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e14d      	b.n	8006f6c <UART_SetConfig+0x348>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e14a      	b.n	8006f6c <UART_SetConfig+0x348>
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e147      	b.n	8006f6c <UART_SetConfig+0x348>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e144      	b.n	8006f6c <UART_SetConfig+0x348>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a83      	ldr	r2, [pc, #524]	@ (8006ef4 <UART_SetConfig+0x2d0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d132      	bne.n	8006d52 <UART_SetConfig+0x12e>
 8006cec:	4b80      	ldr	r3, [pc, #512]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b0c      	cmp	r3, #12
 8006cf8:	d828      	bhi.n	8006d4c <UART_SetConfig+0x128>
 8006cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <UART_SetConfig+0xdc>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d4d 	.word	0x08006d4d
 8006d08:	08006d4d 	.word	0x08006d4d
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d41 	.word	0x08006d41
 8006d14:	08006d4d 	.word	0x08006d4d
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d3b 	.word	0x08006d3b
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d4d 	.word	0x08006d4d
 8006d30:	08006d47 	.word	0x08006d47
 8006d34:	2300      	movs	r3, #0
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e118      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e115      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d40:	2304      	movs	r3, #4
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e112      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d46:	2308      	movs	r3, #8
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e10f      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e10c      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a68      	ldr	r2, [pc, #416]	@ (8006ef8 <UART_SetConfig+0x2d4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d120      	bne.n	8006d9e <UART_SetConfig+0x17a>
 8006d5c:	4b64      	ldr	r3, [pc, #400]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d66:	2b30      	cmp	r3, #48	@ 0x30
 8006d68:	d013      	beq.n	8006d92 <UART_SetConfig+0x16e>
 8006d6a:	2b30      	cmp	r3, #48	@ 0x30
 8006d6c:	d814      	bhi.n	8006d98 <UART_SetConfig+0x174>
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d009      	beq.n	8006d86 <UART_SetConfig+0x162>
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d810      	bhi.n	8006d98 <UART_SetConfig+0x174>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <UART_SetConfig+0x15c>
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d006      	beq.n	8006d8c <UART_SetConfig+0x168>
 8006d7e:	e00b      	b.n	8006d98 <UART_SetConfig+0x174>
 8006d80:	2300      	movs	r3, #0
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e0f2      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d86:	2302      	movs	r3, #2
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e0ef      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e0ec      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d92:	2308      	movs	r3, #8
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e0e9      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e0e6      	b.n	8006f6c <UART_SetConfig+0x348>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a56      	ldr	r2, [pc, #344]	@ (8006efc <UART_SetConfig+0x2d8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d120      	bne.n	8006dea <UART_SetConfig+0x1c6>
 8006da8:	4b51      	ldr	r3, [pc, #324]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db4:	d013      	beq.n	8006dde <UART_SetConfig+0x1ba>
 8006db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db8:	d814      	bhi.n	8006de4 <UART_SetConfig+0x1c0>
 8006dba:	2b80      	cmp	r3, #128	@ 0x80
 8006dbc:	d009      	beq.n	8006dd2 <UART_SetConfig+0x1ae>
 8006dbe:	2b80      	cmp	r3, #128	@ 0x80
 8006dc0:	d810      	bhi.n	8006de4 <UART_SetConfig+0x1c0>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <UART_SetConfig+0x1a8>
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	d006      	beq.n	8006dd8 <UART_SetConfig+0x1b4>
 8006dca:	e00b      	b.n	8006de4 <UART_SetConfig+0x1c0>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e0cc      	b.n	8006f6c <UART_SetConfig+0x348>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e0c9      	b.n	8006f6c <UART_SetConfig+0x348>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e0c6      	b.n	8006f6c <UART_SetConfig+0x348>
 8006dde:	2308      	movs	r3, #8
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e0c3      	b.n	8006f6c <UART_SetConfig+0x348>
 8006de4:	2310      	movs	r3, #16
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e0c0      	b.n	8006f6c <UART_SetConfig+0x348>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a44      	ldr	r2, [pc, #272]	@ (8006f00 <UART_SetConfig+0x2dc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d125      	bne.n	8006e40 <UART_SetConfig+0x21c>
 8006df4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e02:	d017      	beq.n	8006e34 <UART_SetConfig+0x210>
 8006e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e08:	d817      	bhi.n	8006e3a <UART_SetConfig+0x216>
 8006e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e0e:	d00b      	beq.n	8006e28 <UART_SetConfig+0x204>
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e14:	d811      	bhi.n	8006e3a <UART_SetConfig+0x216>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <UART_SetConfig+0x1fe>
 8006e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e1e:	d006      	beq.n	8006e2e <UART_SetConfig+0x20a>
 8006e20:	e00b      	b.n	8006e3a <UART_SetConfig+0x216>
 8006e22:	2300      	movs	r3, #0
 8006e24:	77fb      	strb	r3, [r7, #31]
 8006e26:	e0a1      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	77fb      	strb	r3, [r7, #31]
 8006e2c:	e09e      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e2e:	2304      	movs	r3, #4
 8006e30:	77fb      	strb	r3, [r7, #31]
 8006e32:	e09b      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e34:	2308      	movs	r3, #8
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e098      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e3a:	2310      	movs	r3, #16
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e095      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2f      	ldr	r2, [pc, #188]	@ (8006f04 <UART_SetConfig+0x2e0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d125      	bne.n	8006e96 <UART_SetConfig+0x272>
 8006e4a:	4b29      	ldr	r3, [pc, #164]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e58:	d017      	beq.n	8006e8a <UART_SetConfig+0x266>
 8006e5a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e5e:	d817      	bhi.n	8006e90 <UART_SetConfig+0x26c>
 8006e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e64:	d00b      	beq.n	8006e7e <UART_SetConfig+0x25a>
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e6a:	d811      	bhi.n	8006e90 <UART_SetConfig+0x26c>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <UART_SetConfig+0x254>
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e74:	d006      	beq.n	8006e84 <UART_SetConfig+0x260>
 8006e76:	e00b      	b.n	8006e90 <UART_SetConfig+0x26c>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e076      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	77fb      	strb	r3, [r7, #31]
 8006e82:	e073      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e84:	2304      	movs	r3, #4
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e070      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	77fb      	strb	r3, [r7, #31]
 8006e8e:	e06d      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e90:	2310      	movs	r3, #16
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e06a      	b.n	8006f6c <UART_SetConfig+0x348>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f08 <UART_SetConfig+0x2e4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d138      	bne.n	8006f12 <UART_SetConfig+0x2ee>
 8006ea0:	4b13      	ldr	r3, [pc, #76]	@ (8006ef0 <UART_SetConfig+0x2cc>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006eaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006eae:	d017      	beq.n	8006ee0 <UART_SetConfig+0x2bc>
 8006eb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006eb4:	d82a      	bhi.n	8006f0c <UART_SetConfig+0x2e8>
 8006eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eba:	d00b      	beq.n	8006ed4 <UART_SetConfig+0x2b0>
 8006ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec0:	d824      	bhi.n	8006f0c <UART_SetConfig+0x2e8>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <UART_SetConfig+0x2aa>
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eca:	d006      	beq.n	8006eda <UART_SetConfig+0x2b6>
 8006ecc:	e01e      	b.n	8006f0c <UART_SetConfig+0x2e8>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e04b      	b.n	8006f6c <UART_SetConfig+0x348>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e048      	b.n	8006f6c <UART_SetConfig+0x348>
 8006eda:	2304      	movs	r3, #4
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e045      	b.n	8006f6c <UART_SetConfig+0x348>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e042      	b.n	8006f6c <UART_SetConfig+0x348>
 8006ee6:	bf00      	nop
 8006ee8:	efff69f3 	.word	0xefff69f3
 8006eec:	40011000 	.word	0x40011000
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40004400 	.word	0x40004400
 8006ef8:	40004800 	.word	0x40004800
 8006efc:	40004c00 	.word	0x40004c00
 8006f00:	40005000 	.word	0x40005000
 8006f04:	40011400 	.word	0x40011400
 8006f08:	40007800 	.word	0x40007800
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e02c      	b.n	8006f6c <UART_SetConfig+0x348>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a72      	ldr	r2, [pc, #456]	@ (80070e0 <UART_SetConfig+0x4bc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d125      	bne.n	8006f68 <UART_SetConfig+0x344>
 8006f1c:	4b71      	ldr	r3, [pc, #452]	@ (80070e4 <UART_SetConfig+0x4c0>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006f26:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f2a:	d017      	beq.n	8006f5c <UART_SetConfig+0x338>
 8006f2c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006f30:	d817      	bhi.n	8006f62 <UART_SetConfig+0x33e>
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f36:	d00b      	beq.n	8006f50 <UART_SetConfig+0x32c>
 8006f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f3c:	d811      	bhi.n	8006f62 <UART_SetConfig+0x33e>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <UART_SetConfig+0x326>
 8006f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f46:	d006      	beq.n	8006f56 <UART_SetConfig+0x332>
 8006f48:	e00b      	b.n	8006f62 <UART_SetConfig+0x33e>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e00d      	b.n	8006f6c <UART_SetConfig+0x348>
 8006f50:	2302      	movs	r3, #2
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e00a      	b.n	8006f6c <UART_SetConfig+0x348>
 8006f56:	2304      	movs	r3, #4
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e007      	b.n	8006f6c <UART_SetConfig+0x348>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e004      	b.n	8006f6c <UART_SetConfig+0x348>
 8006f62:	2310      	movs	r3, #16
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e001      	b.n	8006f6c <UART_SetConfig+0x348>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f74:	d15b      	bne.n	800702e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006f76:	7ffb      	ldrb	r3, [r7, #31]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d828      	bhi.n	8006fce <UART_SetConfig+0x3aa>
 8006f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0x360>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	08006fcf 	.word	0x08006fcf
 8006f94:	08006fbf 	.word	0x08006fbf
 8006f98:	08006fcf 	.word	0x08006fcf
 8006f9c:	08006fcf 	.word	0x08006fcf
 8006fa0:	08006fcf 	.word	0x08006fcf
 8006fa4:	08006fc7 	.word	0x08006fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fd f948 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8006fac:	61b8      	str	r0, [r7, #24]
        break;
 8006fae:	e013      	b.n	8006fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fb0:	f7fd f958 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 8006fb4:	61b8      	str	r0, [r7, #24]
        break;
 8006fb6:	e00f      	b.n	8006fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80070e8 <UART_SetConfig+0x4c4>)
 8006fba:	61bb      	str	r3, [r7, #24]
        break;
 8006fbc:	e00c      	b.n	8006fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fbe:	f7fd f82b 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8006fc2:	61b8      	str	r0, [r7, #24]
        break;
 8006fc4:	e008      	b.n	8006fd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fca:	61bb      	str	r3, [r7, #24]
        break;
 8006fcc:	e004      	b.n	8006fd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	77bb      	strb	r3, [r7, #30]
        break;
 8006fd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d074      	beq.n	80070c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	005a      	lsls	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	441a      	add	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b0f      	cmp	r3, #15
 8006ff8:	d916      	bls.n	8007028 <UART_SetConfig+0x404>
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007000:	d212      	bcs.n	8007028 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f023 030f 	bic.w	r3, r3, #15
 800700a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	b29b      	uxth	r3, r3
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	b29a      	uxth	r2, r3
 8007018:	89fb      	ldrh	r3, [r7, #14]
 800701a:	4313      	orrs	r3, r2
 800701c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	89fa      	ldrh	r2, [r7, #14]
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	e04f      	b.n	80070c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	77bb      	strb	r3, [r7, #30]
 800702c:	e04c      	b.n	80070c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800702e:	7ffb      	ldrb	r3, [r7, #31]
 8007030:	2b08      	cmp	r3, #8
 8007032:	d828      	bhi.n	8007086 <UART_SetConfig+0x462>
 8007034:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0x418>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007061 	.word	0x08007061
 8007040:	08007069 	.word	0x08007069
 8007044:	08007071 	.word	0x08007071
 8007048:	08007087 	.word	0x08007087
 800704c:	08007077 	.word	0x08007077
 8007050:	08007087 	.word	0x08007087
 8007054:	08007087 	.word	0x08007087
 8007058:	08007087 	.word	0x08007087
 800705c:	0800707f 	.word	0x0800707f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007060:	f7fd f8ec 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8007064:	61b8      	str	r0, [r7, #24]
        break;
 8007066:	e013      	b.n	8007090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007068:	f7fd f8fc 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 800706c:	61b8      	str	r0, [r7, #24]
        break;
 800706e:	e00f      	b.n	8007090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007070:	4b1d      	ldr	r3, [pc, #116]	@ (80070e8 <UART_SetConfig+0x4c4>)
 8007072:	61bb      	str	r3, [r7, #24]
        break;
 8007074:	e00c      	b.n	8007090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007076:	f7fc ffcf 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 800707a:	61b8      	str	r0, [r7, #24]
        break;
 800707c:	e008      	b.n	8007090 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007082:	61bb      	str	r3, [r7, #24]
        break;
 8007084:	e004      	b.n	8007090 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	77bb      	strb	r3, [r7, #30]
        break;
 800708e:	bf00      	nop
    }

    if (pclk != 0U)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d018      	beq.n	80070c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	085a      	lsrs	r2, r3, #1
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	441a      	add	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b0f      	cmp	r3, #15
 80070ae:	d909      	bls.n	80070c4 <UART_SetConfig+0x4a0>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b6:	d205      	bcs.n	80070c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	e001      	b.n	80070c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3720      	adds	r7, #32
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40007c00 	.word	0x40007c00
 80070e4:	40023800 	.word	0x40023800
 80070e8:	00f42400 	.word	0x00f42400

080070ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715e:	f003 0304 	and.w	r3, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01a      	beq.n	8007202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ea:	d10a      	bne.n	8007202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	605a      	str	r2, [r3, #4]
  }
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b098      	sub	sp, #96	@ 0x60
 8007234:	af02      	add	r7, sp, #8
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007240:	f7fb fc06 	bl	8002a50 <HAL_GetTick>
 8007244:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b08      	cmp	r3, #8
 8007252:	d12e      	bne.n	80072b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800725c:	2200      	movs	r2, #0
 800725e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f88c 	bl	8007380 <UART_WaitOnFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d021      	beq.n	80072b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800727c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007282:	653b      	str	r3, [r7, #80]	@ 0x50
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800728c:	647b      	str	r3, [r7, #68]	@ 0x44
 800728e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800729a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e6      	bne.n	800726e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e062      	b.n	8007378 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d149      	bne.n	8007354 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c8:	2200      	movs	r2, #0
 80072ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f856 	bl	8007380 <UART_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d03c      	beq.n	8007354 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	623b      	str	r3, [r7, #32]
   return(result);
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e6      	bne.n	80072da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	60fb      	str	r3, [r7, #12]
   return(result);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800732c:	61fa      	str	r2, [r7, #28]
 800732e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	69b9      	ldr	r1, [r7, #24]
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	617b      	str	r3, [r7, #20]
   return(result);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e011      	b.n	8007378 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3758      	adds	r7, #88	@ 0x58
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4613      	mov	r3, r2
 800738e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007390:	e04f      	b.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d04b      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739a:	f7fb fb59 	bl	8002a50 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d302      	bcc.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e04e      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d037      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b80      	cmp	r3, #128	@ 0x80
 80073c6:	d034      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	d031      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d110      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2208      	movs	r2, #8
 80073e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f838 	bl	800745a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2208      	movs	r2, #8
 80073ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e029      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800740c:	d111      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f81e 	bl	800745a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e00f      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69da      	ldr	r2, [r3, #28]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4013      	ands	r3, r2
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	bf0c      	ite	eq
 8007442:	2301      	moveq	r3, #1
 8007444:	2300      	movne	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	461a      	mov	r2, r3
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	429a      	cmp	r2, r3
 800744e:	d0a0      	beq.n	8007392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800745a:	b480      	push	{r7}
 800745c:	b095      	sub	sp, #84	@ 0x54
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007480:	643b      	str	r3, [r7, #64]	@ 0x40
 8007482:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e6      	bne.n	8007462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f023 0301 	bic.w	r3, r3, #1
 80074aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3308      	adds	r3, #8
 80074b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e5      	bne.n	8007494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d118      	bne.n	8007502 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	613b      	str	r3, [r7, #16]
   return(result);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e6      	bne.n	80074d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007516:	bf00      	nop
 8007518:	3754      	adds	r7, #84	@ 0x54
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <std>:
 8007524:	2300      	movs	r3, #0
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	e9c0 3300 	strd	r3, r3, [r0]
 800752e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007532:	6083      	str	r3, [r0, #8]
 8007534:	8181      	strh	r1, [r0, #12]
 8007536:	6643      	str	r3, [r0, #100]	@ 0x64
 8007538:	81c2      	strh	r2, [r0, #14]
 800753a:	6183      	str	r3, [r0, #24]
 800753c:	4619      	mov	r1, r3
 800753e:	2208      	movs	r2, #8
 8007540:	305c      	adds	r0, #92	@ 0x5c
 8007542:	f000 f906 	bl	8007752 <memset>
 8007546:	4b0d      	ldr	r3, [pc, #52]	@ (800757c <std+0x58>)
 8007548:	6263      	str	r3, [r4, #36]	@ 0x24
 800754a:	4b0d      	ldr	r3, [pc, #52]	@ (8007580 <std+0x5c>)
 800754c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800754e:	4b0d      	ldr	r3, [pc, #52]	@ (8007584 <std+0x60>)
 8007550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007552:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <std+0x64>)
 8007554:	6323      	str	r3, [r4, #48]	@ 0x30
 8007556:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <std+0x68>)
 8007558:	6224      	str	r4, [r4, #32]
 800755a:	429c      	cmp	r4, r3
 800755c:	d006      	beq.n	800756c <std+0x48>
 800755e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007562:	4294      	cmp	r4, r2
 8007564:	d002      	beq.n	800756c <std+0x48>
 8007566:	33d0      	adds	r3, #208	@ 0xd0
 8007568:	429c      	cmp	r4, r3
 800756a:	d105      	bne.n	8007578 <std+0x54>
 800756c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007574:	f000 b966 	b.w	8007844 <__retarget_lock_init_recursive>
 8007578:	bd10      	pop	{r4, pc}
 800757a:	bf00      	nop
 800757c:	080076cd 	.word	0x080076cd
 8007580:	080076ef 	.word	0x080076ef
 8007584:	08007727 	.word	0x08007727
 8007588:	0800774b 	.word	0x0800774b
 800758c:	200007fc 	.word	0x200007fc

08007590 <stdio_exit_handler>:
 8007590:	4a02      	ldr	r2, [pc, #8]	@ (800759c <stdio_exit_handler+0xc>)
 8007592:	4903      	ldr	r1, [pc, #12]	@ (80075a0 <stdio_exit_handler+0x10>)
 8007594:	4803      	ldr	r0, [pc, #12]	@ (80075a4 <stdio_exit_handler+0x14>)
 8007596:	f000 b869 	b.w	800766c <_fwalk_sglue>
 800759a:	bf00      	nop
 800759c:	20000020 	.word	0x20000020
 80075a0:	08008101 	.word	0x08008101
 80075a4:	20000030 	.word	0x20000030

080075a8 <cleanup_stdio>:
 80075a8:	6841      	ldr	r1, [r0, #4]
 80075aa:	4b0c      	ldr	r3, [pc, #48]	@ (80075dc <cleanup_stdio+0x34>)
 80075ac:	4299      	cmp	r1, r3
 80075ae:	b510      	push	{r4, lr}
 80075b0:	4604      	mov	r4, r0
 80075b2:	d001      	beq.n	80075b8 <cleanup_stdio+0x10>
 80075b4:	f000 fda4 	bl	8008100 <_fflush_r>
 80075b8:	68a1      	ldr	r1, [r4, #8]
 80075ba:	4b09      	ldr	r3, [pc, #36]	@ (80075e0 <cleanup_stdio+0x38>)
 80075bc:	4299      	cmp	r1, r3
 80075be:	d002      	beq.n	80075c6 <cleanup_stdio+0x1e>
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fd9d 	bl	8008100 <_fflush_r>
 80075c6:	68e1      	ldr	r1, [r4, #12]
 80075c8:	4b06      	ldr	r3, [pc, #24]	@ (80075e4 <cleanup_stdio+0x3c>)
 80075ca:	4299      	cmp	r1, r3
 80075cc:	d004      	beq.n	80075d8 <cleanup_stdio+0x30>
 80075ce:	4620      	mov	r0, r4
 80075d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d4:	f000 bd94 	b.w	8008100 <_fflush_r>
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	200007fc 	.word	0x200007fc
 80075e0:	20000864 	.word	0x20000864
 80075e4:	200008cc 	.word	0x200008cc

080075e8 <global_stdio_init.part.0>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007618 <global_stdio_init.part.0+0x30>)
 80075ec:	4c0b      	ldr	r4, [pc, #44]	@ (800761c <global_stdio_init.part.0+0x34>)
 80075ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007620 <global_stdio_init.part.0+0x38>)
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	4620      	mov	r0, r4
 80075f4:	2200      	movs	r2, #0
 80075f6:	2104      	movs	r1, #4
 80075f8:	f7ff ff94 	bl	8007524 <std>
 80075fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007600:	2201      	movs	r2, #1
 8007602:	2109      	movs	r1, #9
 8007604:	f7ff ff8e 	bl	8007524 <std>
 8007608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800760c:	2202      	movs	r2, #2
 800760e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007612:	2112      	movs	r1, #18
 8007614:	f7ff bf86 	b.w	8007524 <std>
 8007618:	20000934 	.word	0x20000934
 800761c:	200007fc 	.word	0x200007fc
 8007620:	08007591 	.word	0x08007591

08007624 <__sfp_lock_acquire>:
 8007624:	4801      	ldr	r0, [pc, #4]	@ (800762c <__sfp_lock_acquire+0x8>)
 8007626:	f000 b90e 	b.w	8007846 <__retarget_lock_acquire_recursive>
 800762a:	bf00      	nop
 800762c:	2000093d 	.word	0x2000093d

08007630 <__sfp_lock_release>:
 8007630:	4801      	ldr	r0, [pc, #4]	@ (8007638 <__sfp_lock_release+0x8>)
 8007632:	f000 b909 	b.w	8007848 <__retarget_lock_release_recursive>
 8007636:	bf00      	nop
 8007638:	2000093d 	.word	0x2000093d

0800763c <__sinit>:
 800763c:	b510      	push	{r4, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	f7ff fff0 	bl	8007624 <__sfp_lock_acquire>
 8007644:	6a23      	ldr	r3, [r4, #32]
 8007646:	b11b      	cbz	r3, 8007650 <__sinit+0x14>
 8007648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764c:	f7ff bff0 	b.w	8007630 <__sfp_lock_release>
 8007650:	4b04      	ldr	r3, [pc, #16]	@ (8007664 <__sinit+0x28>)
 8007652:	6223      	str	r3, [r4, #32]
 8007654:	4b04      	ldr	r3, [pc, #16]	@ (8007668 <__sinit+0x2c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f5      	bne.n	8007648 <__sinit+0xc>
 800765c:	f7ff ffc4 	bl	80075e8 <global_stdio_init.part.0>
 8007660:	e7f2      	b.n	8007648 <__sinit+0xc>
 8007662:	bf00      	nop
 8007664:	080075a9 	.word	0x080075a9
 8007668:	20000934 	.word	0x20000934

0800766c <_fwalk_sglue>:
 800766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007670:	4607      	mov	r7, r0
 8007672:	4688      	mov	r8, r1
 8007674:	4614      	mov	r4, r2
 8007676:	2600      	movs	r6, #0
 8007678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800767c:	f1b9 0901 	subs.w	r9, r9, #1
 8007680:	d505      	bpl.n	800768e <_fwalk_sglue+0x22>
 8007682:	6824      	ldr	r4, [r4, #0]
 8007684:	2c00      	cmp	r4, #0
 8007686:	d1f7      	bne.n	8007678 <_fwalk_sglue+0xc>
 8007688:	4630      	mov	r0, r6
 800768a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d907      	bls.n	80076a4 <_fwalk_sglue+0x38>
 8007694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007698:	3301      	adds	r3, #1
 800769a:	d003      	beq.n	80076a4 <_fwalk_sglue+0x38>
 800769c:	4629      	mov	r1, r5
 800769e:	4638      	mov	r0, r7
 80076a0:	47c0      	blx	r8
 80076a2:	4306      	orrs	r6, r0
 80076a4:	3568      	adds	r5, #104	@ 0x68
 80076a6:	e7e9      	b.n	800767c <_fwalk_sglue+0x10>

080076a8 <iprintf>:
 80076a8:	b40f      	push	{r0, r1, r2, r3}
 80076aa:	b507      	push	{r0, r1, r2, lr}
 80076ac:	4906      	ldr	r1, [pc, #24]	@ (80076c8 <iprintf+0x20>)
 80076ae:	ab04      	add	r3, sp, #16
 80076b0:	6808      	ldr	r0, [r1, #0]
 80076b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b6:	6881      	ldr	r1, [r0, #8]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	f000 f9f7 	bl	8007aac <_vfiprintf_r>
 80076be:	b003      	add	sp, #12
 80076c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076c4:	b004      	add	sp, #16
 80076c6:	4770      	bx	lr
 80076c8:	2000002c 	.word	0x2000002c

080076cc <__sread>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	460c      	mov	r4, r1
 80076d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d4:	f000 f868 	bl	80077a8 <_read_r>
 80076d8:	2800      	cmp	r0, #0
 80076da:	bfab      	itete	ge
 80076dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076de:	89a3      	ldrhlt	r3, [r4, #12]
 80076e0:	181b      	addge	r3, r3, r0
 80076e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076e6:	bfac      	ite	ge
 80076e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076ea:	81a3      	strhlt	r3, [r4, #12]
 80076ec:	bd10      	pop	{r4, pc}

080076ee <__swrite>:
 80076ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f2:	461f      	mov	r7, r3
 80076f4:	898b      	ldrh	r3, [r1, #12]
 80076f6:	05db      	lsls	r3, r3, #23
 80076f8:	4605      	mov	r5, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	4616      	mov	r6, r2
 80076fe:	d505      	bpl.n	800770c <__swrite+0x1e>
 8007700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007704:	2302      	movs	r3, #2
 8007706:	2200      	movs	r2, #0
 8007708:	f000 f83c 	bl	8007784 <_lseek_r>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	4632      	mov	r2, r6
 800771a:	463b      	mov	r3, r7
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007722:	f000 b853 	b.w	80077cc <_write_r>

08007726 <__sseek>:
 8007726:	b510      	push	{r4, lr}
 8007728:	460c      	mov	r4, r1
 800772a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772e:	f000 f829 	bl	8007784 <_lseek_r>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	bf15      	itete	ne
 8007738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800773a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800773e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007742:	81a3      	strheq	r3, [r4, #12]
 8007744:	bf18      	it	ne
 8007746:	81a3      	strhne	r3, [r4, #12]
 8007748:	bd10      	pop	{r4, pc}

0800774a <__sclose>:
 800774a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774e:	f000 b809 	b.w	8007764 <_close_r>

08007752 <memset>:
 8007752:	4402      	add	r2, r0
 8007754:	4603      	mov	r3, r0
 8007756:	4293      	cmp	r3, r2
 8007758:	d100      	bne.n	800775c <memset+0xa>
 800775a:	4770      	bx	lr
 800775c:	f803 1b01 	strb.w	r1, [r3], #1
 8007760:	e7f9      	b.n	8007756 <memset+0x4>
	...

08007764 <_close_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	@ (8007780 <_close_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7fb f873 	bl	800285a <_close>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_close_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_close_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20000938 	.word	0x20000938

08007784 <_lseek_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	@ (80077a4 <_lseek_r+0x20>)
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7fb f888 	bl	80028a8 <_lseek>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_lseek_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_lseek_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000938 	.word	0x20000938

080077a8 <_read_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d07      	ldr	r5, [pc, #28]	@ (80077c8 <_read_r+0x20>)
 80077ac:	4604      	mov	r4, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7fb f832 	bl	8002820 <_read>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_read_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_read_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20000938 	.word	0x20000938

080077cc <_write_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d07      	ldr	r5, [pc, #28]	@ (80077ec <_write_r+0x20>)
 80077d0:	4604      	mov	r4, r0
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	602a      	str	r2, [r5, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f7f8 ffb6 	bl	800074c <_write>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_write_r+0x1e>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_write_r+0x1e>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000938 	.word	0x20000938

080077f0 <__errno>:
 80077f0:	4b01      	ldr	r3, [pc, #4]	@ (80077f8 <__errno+0x8>)
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	2000002c 	.word	0x2000002c

080077fc <__libc_init_array>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007834 <__libc_init_array+0x38>)
 8007800:	4c0d      	ldr	r4, [pc, #52]	@ (8007838 <__libc_init_array+0x3c>)
 8007802:	1b64      	subs	r4, r4, r5
 8007804:	10a4      	asrs	r4, r4, #2
 8007806:	2600      	movs	r6, #0
 8007808:	42a6      	cmp	r6, r4
 800780a:	d109      	bne.n	8007820 <__libc_init_array+0x24>
 800780c:	4d0b      	ldr	r5, [pc, #44]	@ (800783c <__libc_init_array+0x40>)
 800780e:	4c0c      	ldr	r4, [pc, #48]	@ (8007840 <__libc_init_array+0x44>)
 8007810:	f000 fe1c 	bl	800844c <_init>
 8007814:	1b64      	subs	r4, r4, r5
 8007816:	10a4      	asrs	r4, r4, #2
 8007818:	2600      	movs	r6, #0
 800781a:	42a6      	cmp	r6, r4
 800781c:	d105      	bne.n	800782a <__libc_init_array+0x2e>
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	f855 3b04 	ldr.w	r3, [r5], #4
 8007824:	4798      	blx	r3
 8007826:	3601      	adds	r6, #1
 8007828:	e7ee      	b.n	8007808 <__libc_init_array+0xc>
 800782a:	f855 3b04 	ldr.w	r3, [r5], #4
 800782e:	4798      	blx	r3
 8007830:	3601      	adds	r6, #1
 8007832:	e7f2      	b.n	800781a <__libc_init_array+0x1e>
 8007834:	080084c4 	.word	0x080084c4
 8007838:	080084c4 	.word	0x080084c4
 800783c:	080084c4 	.word	0x080084c4
 8007840:	080084c8 	.word	0x080084c8

08007844 <__retarget_lock_init_recursive>:
 8007844:	4770      	bx	lr

08007846 <__retarget_lock_acquire_recursive>:
 8007846:	4770      	bx	lr

08007848 <__retarget_lock_release_recursive>:
 8007848:	4770      	bx	lr

0800784a <memcpy>:
 800784a:	440a      	add	r2, r1
 800784c:	4291      	cmp	r1, r2
 800784e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007852:	d100      	bne.n	8007856 <memcpy+0xc>
 8007854:	4770      	bx	lr
 8007856:	b510      	push	{r4, lr}
 8007858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007860:	4291      	cmp	r1, r2
 8007862:	d1f9      	bne.n	8007858 <memcpy+0xe>
 8007864:	bd10      	pop	{r4, pc}
	...

08007868 <_free_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4605      	mov	r5, r0
 800786c:	2900      	cmp	r1, #0
 800786e:	d041      	beq.n	80078f4 <_free_r+0x8c>
 8007870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007874:	1f0c      	subs	r4, r1, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	bfb8      	it	lt
 800787a:	18e4      	addlt	r4, r4, r3
 800787c:	f000 f8e0 	bl	8007a40 <__malloc_lock>
 8007880:	4a1d      	ldr	r2, [pc, #116]	@ (80078f8 <_free_r+0x90>)
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	b933      	cbnz	r3, 8007894 <_free_r+0x2c>
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	6014      	str	r4, [r2, #0]
 800788a:	4628      	mov	r0, r5
 800788c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007890:	f000 b8dc 	b.w	8007a4c <__malloc_unlock>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d908      	bls.n	80078aa <_free_r+0x42>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	1821      	adds	r1, r4, r0
 800789c:	428b      	cmp	r3, r1
 800789e:	bf01      	itttt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	1809      	addeq	r1, r1, r0
 80078a6:	6021      	streq	r1, [r4, #0]
 80078a8:	e7ed      	b.n	8007886 <_free_r+0x1e>
 80078aa:	461a      	mov	r2, r3
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b10b      	cbz	r3, 80078b4 <_free_r+0x4c>
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d9fa      	bls.n	80078aa <_free_r+0x42>
 80078b4:	6811      	ldr	r1, [r2, #0]
 80078b6:	1850      	adds	r0, r2, r1
 80078b8:	42a0      	cmp	r0, r4
 80078ba:	d10b      	bne.n	80078d4 <_free_r+0x6c>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	4401      	add	r1, r0
 80078c0:	1850      	adds	r0, r2, r1
 80078c2:	4283      	cmp	r3, r0
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	d1e0      	bne.n	800788a <_free_r+0x22>
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	6053      	str	r3, [r2, #4]
 80078ce:	4408      	add	r0, r1
 80078d0:	6010      	str	r0, [r2, #0]
 80078d2:	e7da      	b.n	800788a <_free_r+0x22>
 80078d4:	d902      	bls.n	80078dc <_free_r+0x74>
 80078d6:	230c      	movs	r3, #12
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	e7d6      	b.n	800788a <_free_r+0x22>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	1821      	adds	r1, r4, r0
 80078e0:	428b      	cmp	r3, r1
 80078e2:	bf04      	itt	eq
 80078e4:	6819      	ldreq	r1, [r3, #0]
 80078e6:	685b      	ldreq	r3, [r3, #4]
 80078e8:	6063      	str	r3, [r4, #4]
 80078ea:	bf04      	itt	eq
 80078ec:	1809      	addeq	r1, r1, r0
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	6054      	str	r4, [r2, #4]
 80078f2:	e7ca      	b.n	800788a <_free_r+0x22>
 80078f4:	bd38      	pop	{r3, r4, r5, pc}
 80078f6:	bf00      	nop
 80078f8:	20000944 	.word	0x20000944

080078fc <sbrk_aligned>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4e0f      	ldr	r6, [pc, #60]	@ (800793c <sbrk_aligned+0x40>)
 8007900:	460c      	mov	r4, r1
 8007902:	6831      	ldr	r1, [r6, #0]
 8007904:	4605      	mov	r5, r0
 8007906:	b911      	cbnz	r1, 800790e <sbrk_aligned+0x12>
 8007908:	f000 fcb6 	bl	8008278 <_sbrk_r>
 800790c:	6030      	str	r0, [r6, #0]
 800790e:	4621      	mov	r1, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f000 fcb1 	bl	8008278 <_sbrk_r>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d103      	bne.n	8007922 <sbrk_aligned+0x26>
 800791a:	f04f 34ff 	mov.w	r4, #4294967295
 800791e:	4620      	mov	r0, r4
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	1cc4      	adds	r4, r0, #3
 8007924:	f024 0403 	bic.w	r4, r4, #3
 8007928:	42a0      	cmp	r0, r4
 800792a:	d0f8      	beq.n	800791e <sbrk_aligned+0x22>
 800792c:	1a21      	subs	r1, r4, r0
 800792e:	4628      	mov	r0, r5
 8007930:	f000 fca2 	bl	8008278 <_sbrk_r>
 8007934:	3001      	adds	r0, #1
 8007936:	d1f2      	bne.n	800791e <sbrk_aligned+0x22>
 8007938:	e7ef      	b.n	800791a <sbrk_aligned+0x1e>
 800793a:	bf00      	nop
 800793c:	20000940 	.word	0x20000940

08007940 <_malloc_r>:
 8007940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007944:	1ccd      	adds	r5, r1, #3
 8007946:	f025 0503 	bic.w	r5, r5, #3
 800794a:	3508      	adds	r5, #8
 800794c:	2d0c      	cmp	r5, #12
 800794e:	bf38      	it	cc
 8007950:	250c      	movcc	r5, #12
 8007952:	2d00      	cmp	r5, #0
 8007954:	4606      	mov	r6, r0
 8007956:	db01      	blt.n	800795c <_malloc_r+0x1c>
 8007958:	42a9      	cmp	r1, r5
 800795a:	d904      	bls.n	8007966 <_malloc_r+0x26>
 800795c:	230c      	movs	r3, #12
 800795e:	6033      	str	r3, [r6, #0]
 8007960:	2000      	movs	r0, #0
 8007962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a3c <_malloc_r+0xfc>
 800796a:	f000 f869 	bl	8007a40 <__malloc_lock>
 800796e:	f8d8 3000 	ldr.w	r3, [r8]
 8007972:	461c      	mov	r4, r3
 8007974:	bb44      	cbnz	r4, 80079c8 <_malloc_r+0x88>
 8007976:	4629      	mov	r1, r5
 8007978:	4630      	mov	r0, r6
 800797a:	f7ff ffbf 	bl	80078fc <sbrk_aligned>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	4604      	mov	r4, r0
 8007982:	d158      	bne.n	8007a36 <_malloc_r+0xf6>
 8007984:	f8d8 4000 	ldr.w	r4, [r8]
 8007988:	4627      	mov	r7, r4
 800798a:	2f00      	cmp	r7, #0
 800798c:	d143      	bne.n	8007a16 <_malloc_r+0xd6>
 800798e:	2c00      	cmp	r4, #0
 8007990:	d04b      	beq.n	8007a2a <_malloc_r+0xea>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	4639      	mov	r1, r7
 8007996:	4630      	mov	r0, r6
 8007998:	eb04 0903 	add.w	r9, r4, r3
 800799c:	f000 fc6c 	bl	8008278 <_sbrk_r>
 80079a0:	4581      	cmp	r9, r0
 80079a2:	d142      	bne.n	8007a2a <_malloc_r+0xea>
 80079a4:	6821      	ldr	r1, [r4, #0]
 80079a6:	1a6d      	subs	r5, r5, r1
 80079a8:	4629      	mov	r1, r5
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ffa6 	bl	80078fc <sbrk_aligned>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d03a      	beq.n	8007a2a <_malloc_r+0xea>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	442b      	add	r3, r5
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	f8d8 3000 	ldr.w	r3, [r8]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	bb62      	cbnz	r2, 8007a1c <_malloc_r+0xdc>
 80079c2:	f8c8 7000 	str.w	r7, [r8]
 80079c6:	e00f      	b.n	80079e8 <_malloc_r+0xa8>
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	1b52      	subs	r2, r2, r5
 80079cc:	d420      	bmi.n	8007a10 <_malloc_r+0xd0>
 80079ce:	2a0b      	cmp	r2, #11
 80079d0:	d917      	bls.n	8007a02 <_malloc_r+0xc2>
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	6025      	str	r5, [r4, #0]
 80079d8:	bf18      	it	ne
 80079da:	6059      	strne	r1, [r3, #4]
 80079dc:	6863      	ldr	r3, [r4, #4]
 80079de:	bf08      	it	eq
 80079e0:	f8c8 1000 	streq.w	r1, [r8]
 80079e4:	5162      	str	r2, [r4, r5]
 80079e6:	604b      	str	r3, [r1, #4]
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 f82f 	bl	8007a4c <__malloc_unlock>
 80079ee:	f104 000b 	add.w	r0, r4, #11
 80079f2:	1d23      	adds	r3, r4, #4
 80079f4:	f020 0007 	bic.w	r0, r0, #7
 80079f8:	1ac2      	subs	r2, r0, r3
 80079fa:	bf1c      	itt	ne
 80079fc:	1a1b      	subne	r3, r3, r0
 80079fe:	50a3      	strne	r3, [r4, r2]
 8007a00:	e7af      	b.n	8007962 <_malloc_r+0x22>
 8007a02:	6862      	ldr	r2, [r4, #4]
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	bf0c      	ite	eq
 8007a08:	f8c8 2000 	streq.w	r2, [r8]
 8007a0c:	605a      	strne	r2, [r3, #4]
 8007a0e:	e7eb      	b.n	80079e8 <_malloc_r+0xa8>
 8007a10:	4623      	mov	r3, r4
 8007a12:	6864      	ldr	r4, [r4, #4]
 8007a14:	e7ae      	b.n	8007974 <_malloc_r+0x34>
 8007a16:	463c      	mov	r4, r7
 8007a18:	687f      	ldr	r7, [r7, #4]
 8007a1a:	e7b6      	b.n	800798a <_malloc_r+0x4a>
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	d1fb      	bne.n	8007a1c <_malloc_r+0xdc>
 8007a24:	2300      	movs	r3, #0
 8007a26:	6053      	str	r3, [r2, #4]
 8007a28:	e7de      	b.n	80079e8 <_malloc_r+0xa8>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f80c 	bl	8007a4c <__malloc_unlock>
 8007a34:	e794      	b.n	8007960 <_malloc_r+0x20>
 8007a36:	6005      	str	r5, [r0, #0]
 8007a38:	e7d6      	b.n	80079e8 <_malloc_r+0xa8>
 8007a3a:	bf00      	nop
 8007a3c:	20000944 	.word	0x20000944

08007a40 <__malloc_lock>:
 8007a40:	4801      	ldr	r0, [pc, #4]	@ (8007a48 <__malloc_lock+0x8>)
 8007a42:	f7ff bf00 	b.w	8007846 <__retarget_lock_acquire_recursive>
 8007a46:	bf00      	nop
 8007a48:	2000093c 	.word	0x2000093c

08007a4c <__malloc_unlock>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	@ (8007a54 <__malloc_unlock+0x8>)
 8007a4e:	f7ff befb 	b.w	8007848 <__retarget_lock_release_recursive>
 8007a52:	bf00      	nop
 8007a54:	2000093c 	.word	0x2000093c

08007a58 <__sfputc_r>:
 8007a58:	6893      	ldr	r3, [r2, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	b410      	push	{r4}
 8007a60:	6093      	str	r3, [r2, #8]
 8007a62:	da08      	bge.n	8007a76 <__sfputc_r+0x1e>
 8007a64:	6994      	ldr	r4, [r2, #24]
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	db01      	blt.n	8007a6e <__sfputc_r+0x16>
 8007a6a:	290a      	cmp	r1, #10
 8007a6c:	d103      	bne.n	8007a76 <__sfputc_r+0x1e>
 8007a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a72:	f000 bb6d 	b.w	8008150 <__swbuf_r>
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	1c58      	adds	r0, r3, #1
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	7019      	strb	r1, [r3, #0]
 8007a7e:	4608      	mov	r0, r1
 8007a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <__sfputs_r>:
 8007a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a88:	4606      	mov	r6, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	18d5      	adds	r5, r2, r3
 8007a90:	42ac      	cmp	r4, r5
 8007a92:	d101      	bne.n	8007a98 <__sfputs_r+0x12>
 8007a94:	2000      	movs	r0, #0
 8007a96:	e007      	b.n	8007aa8 <__sfputs_r+0x22>
 8007a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9c:	463a      	mov	r2, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff ffda 	bl	8007a58 <__sfputc_r>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d1f3      	bne.n	8007a90 <__sfputs_r+0xa>
 8007aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aac <_vfiprintf_r>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	b09d      	sub	sp, #116	@ 0x74
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	4698      	mov	r8, r3
 8007ab8:	4606      	mov	r6, r0
 8007aba:	b118      	cbz	r0, 8007ac4 <_vfiprintf_r+0x18>
 8007abc:	6a03      	ldr	r3, [r0, #32]
 8007abe:	b90b      	cbnz	r3, 8007ac4 <_vfiprintf_r+0x18>
 8007ac0:	f7ff fdbc 	bl	800763c <__sinit>
 8007ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ac6:	07d9      	lsls	r1, r3, #31
 8007ac8:	d405      	bmi.n	8007ad6 <_vfiprintf_r+0x2a>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	059a      	lsls	r2, r3, #22
 8007ace:	d402      	bmi.n	8007ad6 <_vfiprintf_r+0x2a>
 8007ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ad2:	f7ff feb8 	bl	8007846 <__retarget_lock_acquire_recursive>
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	071b      	lsls	r3, r3, #28
 8007ada:	d501      	bpl.n	8007ae0 <_vfiprintf_r+0x34>
 8007adc:	692b      	ldr	r3, [r5, #16]
 8007ade:	b99b      	cbnz	r3, 8007b08 <_vfiprintf_r+0x5c>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 fb72 	bl	80081cc <__swsetup_r>
 8007ae8:	b170      	cbz	r0, 8007b08 <_vfiprintf_r+0x5c>
 8007aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aec:	07dc      	lsls	r4, r3, #31
 8007aee:	d504      	bpl.n	8007afa <_vfiprintf_r+0x4e>
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	b01d      	add	sp, #116	@ 0x74
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	89ab      	ldrh	r3, [r5, #12]
 8007afc:	0598      	lsls	r0, r3, #22
 8007afe:	d4f7      	bmi.n	8007af0 <_vfiprintf_r+0x44>
 8007b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b02:	f7ff fea1 	bl	8007848 <__retarget_lock_release_recursive>
 8007b06:	e7f3      	b.n	8007af0 <_vfiprintf_r+0x44>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b0c:	2320      	movs	r3, #32
 8007b0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b16:	2330      	movs	r3, #48	@ 0x30
 8007b18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007cc8 <_vfiprintf_r+0x21c>
 8007b1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b20:	f04f 0901 	mov.w	r9, #1
 8007b24:	4623      	mov	r3, r4
 8007b26:	469a      	mov	sl, r3
 8007b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2c:	b10a      	cbz	r2, 8007b32 <_vfiprintf_r+0x86>
 8007b2e:	2a25      	cmp	r2, #37	@ 0x25
 8007b30:	d1f9      	bne.n	8007b26 <_vfiprintf_r+0x7a>
 8007b32:	ebba 0b04 	subs.w	fp, sl, r4
 8007b36:	d00b      	beq.n	8007b50 <_vfiprintf_r+0xa4>
 8007b38:	465b      	mov	r3, fp
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff ffa1 	bl	8007a86 <__sfputs_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	f000 80a7 	beq.w	8007c98 <_vfiprintf_r+0x1ec>
 8007b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b4c:	445a      	add	r2, fp
 8007b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b50:	f89a 3000 	ldrb.w	r3, [sl]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 809f 	beq.w	8007c98 <_vfiprintf_r+0x1ec>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b64:	f10a 0a01 	add.w	sl, sl, #1
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	9307      	str	r3, [sp, #28]
 8007b6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b72:	4654      	mov	r4, sl
 8007b74:	2205      	movs	r2, #5
 8007b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7a:	4853      	ldr	r0, [pc, #332]	@ (8007cc8 <_vfiprintf_r+0x21c>)
 8007b7c:	f7f8 fb60 	bl	8000240 <memchr>
 8007b80:	9a04      	ldr	r2, [sp, #16]
 8007b82:	b9d8      	cbnz	r0, 8007bbc <_vfiprintf_r+0x110>
 8007b84:	06d1      	lsls	r1, r2, #27
 8007b86:	bf44      	itt	mi
 8007b88:	2320      	movmi	r3, #32
 8007b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b8e:	0713      	lsls	r3, r2, #28
 8007b90:	bf44      	itt	mi
 8007b92:	232b      	movmi	r3, #43	@ 0x2b
 8007b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b98:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b9e:	d015      	beq.n	8007bcc <_vfiprintf_r+0x120>
 8007ba0:	9a07      	ldr	r2, [sp, #28]
 8007ba2:	4654      	mov	r4, sl
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	f04f 0c0a 	mov.w	ip, #10
 8007baa:	4621      	mov	r1, r4
 8007bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb0:	3b30      	subs	r3, #48	@ 0x30
 8007bb2:	2b09      	cmp	r3, #9
 8007bb4:	d94b      	bls.n	8007c4e <_vfiprintf_r+0x1a2>
 8007bb6:	b1b0      	cbz	r0, 8007be6 <_vfiprintf_r+0x13a>
 8007bb8:	9207      	str	r2, [sp, #28]
 8007bba:	e014      	b.n	8007be6 <_vfiprintf_r+0x13a>
 8007bbc:	eba0 0308 	sub.w	r3, r0, r8
 8007bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	46a2      	mov	sl, r4
 8007bca:	e7d2      	b.n	8007b72 <_vfiprintf_r+0xc6>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	1d19      	adds	r1, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	9103      	str	r1, [sp, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bfbb      	ittet	lt
 8007bd8:	425b      	neglt	r3, r3
 8007bda:	f042 0202 	orrlt.w	r2, r2, #2
 8007bde:	9307      	strge	r3, [sp, #28]
 8007be0:	9307      	strlt	r3, [sp, #28]
 8007be2:	bfb8      	it	lt
 8007be4:	9204      	strlt	r2, [sp, #16]
 8007be6:	7823      	ldrb	r3, [r4, #0]
 8007be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bea:	d10a      	bne.n	8007c02 <_vfiprintf_r+0x156>
 8007bec:	7863      	ldrb	r3, [r4, #1]
 8007bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf0:	d132      	bne.n	8007c58 <_vfiprintf_r+0x1ac>
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	1d1a      	adds	r2, r3, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	9203      	str	r2, [sp, #12]
 8007bfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bfe:	3402      	adds	r4, #2
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007cd8 <_vfiprintf_r+0x22c>
 8007c06:	7821      	ldrb	r1, [r4, #0]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f7f8 fb18 	bl	8000240 <memchr>
 8007c10:	b138      	cbz	r0, 8007c22 <_vfiprintf_r+0x176>
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	eba0 000a 	sub.w	r0, r0, sl
 8007c18:	2240      	movs	r2, #64	@ 0x40
 8007c1a:	4082      	lsls	r2, r0
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	3401      	adds	r4, #1
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c26:	4829      	ldr	r0, [pc, #164]	@ (8007ccc <_vfiprintf_r+0x220>)
 8007c28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c2c:	2206      	movs	r2, #6
 8007c2e:	f7f8 fb07 	bl	8000240 <memchr>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d03f      	beq.n	8007cb6 <_vfiprintf_r+0x20a>
 8007c36:	4b26      	ldr	r3, [pc, #152]	@ (8007cd0 <_vfiprintf_r+0x224>)
 8007c38:	bb1b      	cbnz	r3, 8007c82 <_vfiprintf_r+0x1d6>
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	3307      	adds	r3, #7
 8007c3e:	f023 0307 	bic.w	r3, r3, #7
 8007c42:	3308      	adds	r3, #8
 8007c44:	9303      	str	r3, [sp, #12]
 8007c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c48:	443b      	add	r3, r7
 8007c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c4c:	e76a      	b.n	8007b24 <_vfiprintf_r+0x78>
 8007c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c52:	460c      	mov	r4, r1
 8007c54:	2001      	movs	r0, #1
 8007c56:	e7a8      	b.n	8007baa <_vfiprintf_r+0xfe>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	3401      	adds	r4, #1
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	f04f 0c0a 	mov.w	ip, #10
 8007c64:	4620      	mov	r0, r4
 8007c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6a:	3a30      	subs	r2, #48	@ 0x30
 8007c6c:	2a09      	cmp	r2, #9
 8007c6e:	d903      	bls.n	8007c78 <_vfiprintf_r+0x1cc>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0c6      	beq.n	8007c02 <_vfiprintf_r+0x156>
 8007c74:	9105      	str	r1, [sp, #20]
 8007c76:	e7c4      	b.n	8007c02 <_vfiprintf_r+0x156>
 8007c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e7f0      	b.n	8007c64 <_vfiprintf_r+0x1b8>
 8007c82:	ab03      	add	r3, sp, #12
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	462a      	mov	r2, r5
 8007c88:	4b12      	ldr	r3, [pc, #72]	@ (8007cd4 <_vfiprintf_r+0x228>)
 8007c8a:	a904      	add	r1, sp, #16
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f3af 8000 	nop.w
 8007c92:	4607      	mov	r7, r0
 8007c94:	1c78      	adds	r0, r7, #1
 8007c96:	d1d6      	bne.n	8007c46 <_vfiprintf_r+0x19a>
 8007c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	d405      	bmi.n	8007caa <_vfiprintf_r+0x1fe>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	059a      	lsls	r2, r3, #22
 8007ca2:	d402      	bmi.n	8007caa <_vfiprintf_r+0x1fe>
 8007ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ca6:	f7ff fdcf 	bl	8007848 <__retarget_lock_release_recursive>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	065b      	lsls	r3, r3, #25
 8007cae:	f53f af1f 	bmi.w	8007af0 <_vfiprintf_r+0x44>
 8007cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb4:	e71e      	b.n	8007af4 <_vfiprintf_r+0x48>
 8007cb6:	ab03      	add	r3, sp, #12
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	462a      	mov	r2, r5
 8007cbc:	4b05      	ldr	r3, [pc, #20]	@ (8007cd4 <_vfiprintf_r+0x228>)
 8007cbe:	a904      	add	r1, sp, #16
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 f879 	bl	8007db8 <_printf_i>
 8007cc6:	e7e4      	b.n	8007c92 <_vfiprintf_r+0x1e6>
 8007cc8:	08008488 	.word	0x08008488
 8007ccc:	08008492 	.word	0x08008492
 8007cd0:	00000000 	.word	0x00000000
 8007cd4:	08007a87 	.word	0x08007a87
 8007cd8:	0800848e 	.word	0x0800848e

08007cdc <_printf_common>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	4616      	mov	r6, r2
 8007ce2:	4698      	mov	r8, r3
 8007ce4:	688a      	ldr	r2, [r1, #8]
 8007ce6:	690b      	ldr	r3, [r1, #16]
 8007ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	bfb8      	it	lt
 8007cf0:	4613      	movlt	r3, r2
 8007cf2:	6033      	str	r3, [r6, #0]
 8007cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	b10a      	cbz	r2, 8007d02 <_printf_common+0x26>
 8007cfe:	3301      	adds	r3, #1
 8007d00:	6033      	str	r3, [r6, #0]
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	0699      	lsls	r1, r3, #26
 8007d06:	bf42      	ittt	mi
 8007d08:	6833      	ldrmi	r3, [r6, #0]
 8007d0a:	3302      	addmi	r3, #2
 8007d0c:	6033      	strmi	r3, [r6, #0]
 8007d0e:	6825      	ldr	r5, [r4, #0]
 8007d10:	f015 0506 	ands.w	r5, r5, #6
 8007d14:	d106      	bne.n	8007d24 <_printf_common+0x48>
 8007d16:	f104 0a19 	add.w	sl, r4, #25
 8007d1a:	68e3      	ldr	r3, [r4, #12]
 8007d1c:	6832      	ldr	r2, [r6, #0]
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	42ab      	cmp	r3, r5
 8007d22:	dc26      	bgt.n	8007d72 <_printf_common+0x96>
 8007d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d28:	6822      	ldr	r2, [r4, #0]
 8007d2a:	3b00      	subs	r3, #0
 8007d2c:	bf18      	it	ne
 8007d2e:	2301      	movne	r3, #1
 8007d30:	0692      	lsls	r2, r2, #26
 8007d32:	d42b      	bmi.n	8007d8c <_printf_common+0xb0>
 8007d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d38:	4641      	mov	r1, r8
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	47c8      	blx	r9
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d01e      	beq.n	8007d80 <_printf_common+0xa4>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	6922      	ldr	r2, [r4, #16]
 8007d46:	f003 0306 	and.w	r3, r3, #6
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	bf02      	ittt	eq
 8007d4e:	68e5      	ldreq	r5, [r4, #12]
 8007d50:	6833      	ldreq	r3, [r6, #0]
 8007d52:	1aed      	subeq	r5, r5, r3
 8007d54:	68a3      	ldr	r3, [r4, #8]
 8007d56:	bf0c      	ite	eq
 8007d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d5c:	2500      	movne	r5, #0
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	bfc4      	itt	gt
 8007d62:	1a9b      	subgt	r3, r3, r2
 8007d64:	18ed      	addgt	r5, r5, r3
 8007d66:	2600      	movs	r6, #0
 8007d68:	341a      	adds	r4, #26
 8007d6a:	42b5      	cmp	r5, r6
 8007d6c:	d11a      	bne.n	8007da4 <_printf_common+0xc8>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e008      	b.n	8007d84 <_printf_common+0xa8>
 8007d72:	2301      	movs	r3, #1
 8007d74:	4652      	mov	r2, sl
 8007d76:	4641      	mov	r1, r8
 8007d78:	4638      	mov	r0, r7
 8007d7a:	47c8      	blx	r9
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d103      	bne.n	8007d88 <_printf_common+0xac>
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d88:	3501      	adds	r5, #1
 8007d8a:	e7c6      	b.n	8007d1a <_printf_common+0x3e>
 8007d8c:	18e1      	adds	r1, r4, r3
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	2030      	movs	r0, #48	@ 0x30
 8007d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d96:	4422      	add	r2, r4
 8007d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007da0:	3302      	adds	r3, #2
 8007da2:	e7c7      	b.n	8007d34 <_printf_common+0x58>
 8007da4:	2301      	movs	r3, #1
 8007da6:	4622      	mov	r2, r4
 8007da8:	4641      	mov	r1, r8
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c8      	blx	r9
 8007dae:	3001      	adds	r0, #1
 8007db0:	d0e6      	beq.n	8007d80 <_printf_common+0xa4>
 8007db2:	3601      	adds	r6, #1
 8007db4:	e7d9      	b.n	8007d6a <_printf_common+0x8e>
	...

08007db8 <_printf_i>:
 8007db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	7e0f      	ldrb	r7, [r1, #24]
 8007dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dc0:	2f78      	cmp	r7, #120	@ 0x78
 8007dc2:	4691      	mov	r9, r2
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	469a      	mov	sl, r3
 8007dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dce:	d807      	bhi.n	8007de0 <_printf_i+0x28>
 8007dd0:	2f62      	cmp	r7, #98	@ 0x62
 8007dd2:	d80a      	bhi.n	8007dea <_printf_i+0x32>
 8007dd4:	2f00      	cmp	r7, #0
 8007dd6:	f000 80d2 	beq.w	8007f7e <_printf_i+0x1c6>
 8007dda:	2f58      	cmp	r7, #88	@ 0x58
 8007ddc:	f000 80b9 	beq.w	8007f52 <_printf_i+0x19a>
 8007de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007de8:	e03a      	b.n	8007e60 <_printf_i+0xa8>
 8007dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dee:	2b15      	cmp	r3, #21
 8007df0:	d8f6      	bhi.n	8007de0 <_printf_i+0x28>
 8007df2:	a101      	add	r1, pc, #4	@ (adr r1, 8007df8 <_printf_i+0x40>)
 8007df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df8:	08007e51 	.word	0x08007e51
 8007dfc:	08007e65 	.word	0x08007e65
 8007e00:	08007de1 	.word	0x08007de1
 8007e04:	08007de1 	.word	0x08007de1
 8007e08:	08007de1 	.word	0x08007de1
 8007e0c:	08007de1 	.word	0x08007de1
 8007e10:	08007e65 	.word	0x08007e65
 8007e14:	08007de1 	.word	0x08007de1
 8007e18:	08007de1 	.word	0x08007de1
 8007e1c:	08007de1 	.word	0x08007de1
 8007e20:	08007de1 	.word	0x08007de1
 8007e24:	08007f65 	.word	0x08007f65
 8007e28:	08007e8f 	.word	0x08007e8f
 8007e2c:	08007f1f 	.word	0x08007f1f
 8007e30:	08007de1 	.word	0x08007de1
 8007e34:	08007de1 	.word	0x08007de1
 8007e38:	08007f87 	.word	0x08007f87
 8007e3c:	08007de1 	.word	0x08007de1
 8007e40:	08007e8f 	.word	0x08007e8f
 8007e44:	08007de1 	.word	0x08007de1
 8007e48:	08007de1 	.word	0x08007de1
 8007e4c:	08007f27 	.word	0x08007f27
 8007e50:	6833      	ldr	r3, [r6, #0]
 8007e52:	1d1a      	adds	r2, r3, #4
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6032      	str	r2, [r6, #0]
 8007e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e60:	2301      	movs	r3, #1
 8007e62:	e09d      	b.n	8007fa0 <_printf_i+0x1e8>
 8007e64:	6833      	ldr	r3, [r6, #0]
 8007e66:	6820      	ldr	r0, [r4, #0]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	6031      	str	r1, [r6, #0]
 8007e6c:	0606      	lsls	r6, r0, #24
 8007e6e:	d501      	bpl.n	8007e74 <_printf_i+0xbc>
 8007e70:	681d      	ldr	r5, [r3, #0]
 8007e72:	e003      	b.n	8007e7c <_printf_i+0xc4>
 8007e74:	0645      	lsls	r5, r0, #25
 8007e76:	d5fb      	bpl.n	8007e70 <_printf_i+0xb8>
 8007e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	da03      	bge.n	8007e88 <_printf_i+0xd0>
 8007e80:	232d      	movs	r3, #45	@ 0x2d
 8007e82:	426d      	negs	r5, r5
 8007e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e88:	4859      	ldr	r0, [pc, #356]	@ (8007ff0 <_printf_i+0x238>)
 8007e8a:	230a      	movs	r3, #10
 8007e8c:	e011      	b.n	8007eb2 <_printf_i+0xfa>
 8007e8e:	6821      	ldr	r1, [r4, #0]
 8007e90:	6833      	ldr	r3, [r6, #0]
 8007e92:	0608      	lsls	r0, r1, #24
 8007e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e98:	d402      	bmi.n	8007ea0 <_printf_i+0xe8>
 8007e9a:	0649      	lsls	r1, r1, #25
 8007e9c:	bf48      	it	mi
 8007e9e:	b2ad      	uxthmi	r5, r5
 8007ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ea2:	4853      	ldr	r0, [pc, #332]	@ (8007ff0 <_printf_i+0x238>)
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	bf14      	ite	ne
 8007ea8:	230a      	movne	r3, #10
 8007eaa:	2308      	moveq	r3, #8
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007eb2:	6866      	ldr	r6, [r4, #4]
 8007eb4:	60a6      	str	r6, [r4, #8]
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90d      	cbnz	r5, 8007ec8 <_printf_i+0x110>
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	d04b      	beq.n	8007f60 <_printf_i+0x1a8>
 8007ec8:	4616      	mov	r6, r2
 8007eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ece:	fb03 5711 	mls	r7, r3, r1, r5
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ed8:	462f      	mov	r7, r5
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460d      	mov	r5, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x112>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x144>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07df      	lsls	r7, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x144>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	@ 0x30
 8007ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007efc:	1b92      	subs	r2, r2, r6
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee6 	bl	8007cdc <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14a      	bne.n	8007faa <_printf_i+0x1f2>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f043 0320 	orr.w	r3, r3, #32
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	4833      	ldr	r0, [pc, #204]	@ (8007ff4 <_printf_i+0x23c>)
 8007f28:	2778      	movs	r7, #120	@ 0x78
 8007f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	6831      	ldr	r1, [r6, #0]
 8007f32:	061f      	lsls	r7, r3, #24
 8007f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f38:	d402      	bmi.n	8007f40 <_printf_i+0x188>
 8007f3a:	065f      	lsls	r7, r3, #25
 8007f3c:	bf48      	it	mi
 8007f3e:	b2ad      	uxthmi	r5, r5
 8007f40:	6031      	str	r1, [r6, #0]
 8007f42:	07d9      	lsls	r1, r3, #31
 8007f44:	bf44      	itt	mi
 8007f46:	f043 0320 	orrmi.w	r3, r3, #32
 8007f4a:	6023      	strmi	r3, [r4, #0]
 8007f4c:	b11d      	cbz	r5, 8007f56 <_printf_i+0x19e>
 8007f4e:	2310      	movs	r3, #16
 8007f50:	e7ac      	b.n	8007eac <_printf_i+0xf4>
 8007f52:	4827      	ldr	r0, [pc, #156]	@ (8007ff0 <_printf_i+0x238>)
 8007f54:	e7e9      	b.n	8007f2a <_printf_i+0x172>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	f023 0320 	bic.w	r3, r3, #32
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	e7f6      	b.n	8007f4e <_printf_i+0x196>
 8007f60:	4616      	mov	r6, r2
 8007f62:	e7bd      	b.n	8007ee0 <_printf_i+0x128>
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	6825      	ldr	r5, [r4, #0]
 8007f68:	6961      	ldr	r1, [r4, #20]
 8007f6a:	1d18      	adds	r0, r3, #4
 8007f6c:	6030      	str	r0, [r6, #0]
 8007f6e:	062e      	lsls	r6, r5, #24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	d501      	bpl.n	8007f78 <_printf_i+0x1c0>
 8007f74:	6019      	str	r1, [r3, #0]
 8007f76:	e002      	b.n	8007f7e <_printf_i+0x1c6>
 8007f78:	0668      	lsls	r0, r5, #25
 8007f7a:	d5fb      	bpl.n	8007f74 <_printf_i+0x1bc>
 8007f7c:	8019      	strh	r1, [r3, #0]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6123      	str	r3, [r4, #16]
 8007f82:	4616      	mov	r6, r2
 8007f84:	e7bc      	b.n	8007f00 <_printf_i+0x148>
 8007f86:	6833      	ldr	r3, [r6, #0]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	6032      	str	r2, [r6, #0]
 8007f8c:	681e      	ldr	r6, [r3, #0]
 8007f8e:	6862      	ldr	r2, [r4, #4]
 8007f90:	2100      	movs	r1, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7f8 f954 	bl	8000240 <memchr>
 8007f98:	b108      	cbz	r0, 8007f9e <_printf_i+0x1e6>
 8007f9a:	1b80      	subs	r0, r0, r6
 8007f9c:	6060      	str	r0, [r4, #4]
 8007f9e:	6863      	ldr	r3, [r4, #4]
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fa8:	e7aa      	b.n	8007f00 <_printf_i+0x148>
 8007faa:	6923      	ldr	r3, [r4, #16]
 8007fac:	4632      	mov	r2, r6
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	47d0      	blx	sl
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d0ad      	beq.n	8007f14 <_printf_i+0x15c>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	079b      	lsls	r3, r3, #30
 8007fbc:	d413      	bmi.n	8007fe6 <_printf_i+0x22e>
 8007fbe:	68e0      	ldr	r0, [r4, #12]
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	4298      	cmp	r0, r3
 8007fc4:	bfb8      	it	lt
 8007fc6:	4618      	movlt	r0, r3
 8007fc8:	e7a6      	b.n	8007f18 <_printf_i+0x160>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4632      	mov	r2, r6
 8007fce:	4649      	mov	r1, r9
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	47d0      	blx	sl
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d09d      	beq.n	8007f14 <_printf_i+0x15c>
 8007fd8:	3501      	adds	r5, #1
 8007fda:	68e3      	ldr	r3, [r4, #12]
 8007fdc:	9903      	ldr	r1, [sp, #12]
 8007fde:	1a5b      	subs	r3, r3, r1
 8007fe0:	42ab      	cmp	r3, r5
 8007fe2:	dcf2      	bgt.n	8007fca <_printf_i+0x212>
 8007fe4:	e7eb      	b.n	8007fbe <_printf_i+0x206>
 8007fe6:	2500      	movs	r5, #0
 8007fe8:	f104 0619 	add.w	r6, r4, #25
 8007fec:	e7f5      	b.n	8007fda <_printf_i+0x222>
 8007fee:	bf00      	nop
 8007ff0:	08008499 	.word	0x08008499
 8007ff4:	080084aa 	.word	0x080084aa

08007ff8 <__sflush_r>:
 8007ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008000:	0716      	lsls	r6, r2, #28
 8008002:	4605      	mov	r5, r0
 8008004:	460c      	mov	r4, r1
 8008006:	d454      	bmi.n	80080b2 <__sflush_r+0xba>
 8008008:	684b      	ldr	r3, [r1, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc02      	bgt.n	8008014 <__sflush_r+0x1c>
 800800e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	dd48      	ble.n	80080a6 <__sflush_r+0xae>
 8008014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008016:	2e00      	cmp	r6, #0
 8008018:	d045      	beq.n	80080a6 <__sflush_r+0xae>
 800801a:	2300      	movs	r3, #0
 800801c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008020:	682f      	ldr	r7, [r5, #0]
 8008022:	6a21      	ldr	r1, [r4, #32]
 8008024:	602b      	str	r3, [r5, #0]
 8008026:	d030      	beq.n	800808a <__sflush_r+0x92>
 8008028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	0759      	lsls	r1, r3, #29
 800802e:	d505      	bpl.n	800803c <__sflush_r+0x44>
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	1ad2      	subs	r2, r2, r3
 8008034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008036:	b10b      	cbz	r3, 800803c <__sflush_r+0x44>
 8008038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	2300      	movs	r3, #0
 800803e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008040:	6a21      	ldr	r1, [r4, #32]
 8008042:	4628      	mov	r0, r5
 8008044:	47b0      	blx	r6
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	d106      	bne.n	800805a <__sflush_r+0x62>
 800804c:	6829      	ldr	r1, [r5, #0]
 800804e:	291d      	cmp	r1, #29
 8008050:	d82b      	bhi.n	80080aa <__sflush_r+0xb2>
 8008052:	4a2a      	ldr	r2, [pc, #168]	@ (80080fc <__sflush_r+0x104>)
 8008054:	410a      	asrs	r2, r1
 8008056:	07d6      	lsls	r6, r2, #31
 8008058:	d427      	bmi.n	80080aa <__sflush_r+0xb2>
 800805a:	2200      	movs	r2, #0
 800805c:	6062      	str	r2, [r4, #4]
 800805e:	04d9      	lsls	r1, r3, #19
 8008060:	6922      	ldr	r2, [r4, #16]
 8008062:	6022      	str	r2, [r4, #0]
 8008064:	d504      	bpl.n	8008070 <__sflush_r+0x78>
 8008066:	1c42      	adds	r2, r0, #1
 8008068:	d101      	bne.n	800806e <__sflush_r+0x76>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	b903      	cbnz	r3, 8008070 <__sflush_r+0x78>
 800806e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008072:	602f      	str	r7, [r5, #0]
 8008074:	b1b9      	cbz	r1, 80080a6 <__sflush_r+0xae>
 8008076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800807a:	4299      	cmp	r1, r3
 800807c:	d002      	beq.n	8008084 <__sflush_r+0x8c>
 800807e:	4628      	mov	r0, r5
 8008080:	f7ff fbf2 	bl	8007868 <_free_r>
 8008084:	2300      	movs	r3, #0
 8008086:	6363      	str	r3, [r4, #52]	@ 0x34
 8008088:	e00d      	b.n	80080a6 <__sflush_r+0xae>
 800808a:	2301      	movs	r3, #1
 800808c:	4628      	mov	r0, r5
 800808e:	47b0      	blx	r6
 8008090:	4602      	mov	r2, r0
 8008092:	1c50      	adds	r0, r2, #1
 8008094:	d1c9      	bne.n	800802a <__sflush_r+0x32>
 8008096:	682b      	ldr	r3, [r5, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0c6      	beq.n	800802a <__sflush_r+0x32>
 800809c:	2b1d      	cmp	r3, #29
 800809e:	d001      	beq.n	80080a4 <__sflush_r+0xac>
 80080a0:	2b16      	cmp	r3, #22
 80080a2:	d11e      	bne.n	80080e2 <__sflush_r+0xea>
 80080a4:	602f      	str	r7, [r5, #0]
 80080a6:	2000      	movs	r0, #0
 80080a8:	e022      	b.n	80080f0 <__sflush_r+0xf8>
 80080aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ae:	b21b      	sxth	r3, r3
 80080b0:	e01b      	b.n	80080ea <__sflush_r+0xf2>
 80080b2:	690f      	ldr	r7, [r1, #16]
 80080b4:	2f00      	cmp	r7, #0
 80080b6:	d0f6      	beq.n	80080a6 <__sflush_r+0xae>
 80080b8:	0793      	lsls	r3, r2, #30
 80080ba:	680e      	ldr	r6, [r1, #0]
 80080bc:	bf08      	it	eq
 80080be:	694b      	ldreq	r3, [r1, #20]
 80080c0:	600f      	str	r7, [r1, #0]
 80080c2:	bf18      	it	ne
 80080c4:	2300      	movne	r3, #0
 80080c6:	eba6 0807 	sub.w	r8, r6, r7
 80080ca:	608b      	str	r3, [r1, #8]
 80080cc:	f1b8 0f00 	cmp.w	r8, #0
 80080d0:	dde9      	ble.n	80080a6 <__sflush_r+0xae>
 80080d2:	6a21      	ldr	r1, [r4, #32]
 80080d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080d6:	4643      	mov	r3, r8
 80080d8:	463a      	mov	r2, r7
 80080da:	4628      	mov	r0, r5
 80080dc:	47b0      	blx	r6
 80080de:	2800      	cmp	r0, #0
 80080e0:	dc08      	bgt.n	80080f4 <__sflush_r+0xfc>
 80080e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ea:	81a3      	strh	r3, [r4, #12]
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080f4:	4407      	add	r7, r0
 80080f6:	eba8 0800 	sub.w	r8, r8, r0
 80080fa:	e7e7      	b.n	80080cc <__sflush_r+0xd4>
 80080fc:	dfbffffe 	.word	0xdfbffffe

08008100 <_fflush_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	690b      	ldr	r3, [r1, #16]
 8008104:	4605      	mov	r5, r0
 8008106:	460c      	mov	r4, r1
 8008108:	b913      	cbnz	r3, 8008110 <_fflush_r+0x10>
 800810a:	2500      	movs	r5, #0
 800810c:	4628      	mov	r0, r5
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	b118      	cbz	r0, 800811a <_fflush_r+0x1a>
 8008112:	6a03      	ldr	r3, [r0, #32]
 8008114:	b90b      	cbnz	r3, 800811a <_fflush_r+0x1a>
 8008116:	f7ff fa91 	bl	800763c <__sinit>
 800811a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f3      	beq.n	800810a <_fflush_r+0xa>
 8008122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008124:	07d0      	lsls	r0, r2, #31
 8008126:	d404      	bmi.n	8008132 <_fflush_r+0x32>
 8008128:	0599      	lsls	r1, r3, #22
 800812a:	d402      	bmi.n	8008132 <_fflush_r+0x32>
 800812c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800812e:	f7ff fb8a 	bl	8007846 <__retarget_lock_acquire_recursive>
 8008132:	4628      	mov	r0, r5
 8008134:	4621      	mov	r1, r4
 8008136:	f7ff ff5f 	bl	8007ff8 <__sflush_r>
 800813a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800813c:	07da      	lsls	r2, r3, #31
 800813e:	4605      	mov	r5, r0
 8008140:	d4e4      	bmi.n	800810c <_fflush_r+0xc>
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	059b      	lsls	r3, r3, #22
 8008146:	d4e1      	bmi.n	800810c <_fflush_r+0xc>
 8008148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800814a:	f7ff fb7d 	bl	8007848 <__retarget_lock_release_recursive>
 800814e:	e7dd      	b.n	800810c <_fflush_r+0xc>

08008150 <__swbuf_r>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	460e      	mov	r6, r1
 8008154:	4614      	mov	r4, r2
 8008156:	4605      	mov	r5, r0
 8008158:	b118      	cbz	r0, 8008162 <__swbuf_r+0x12>
 800815a:	6a03      	ldr	r3, [r0, #32]
 800815c:	b90b      	cbnz	r3, 8008162 <__swbuf_r+0x12>
 800815e:	f7ff fa6d 	bl	800763c <__sinit>
 8008162:	69a3      	ldr	r3, [r4, #24]
 8008164:	60a3      	str	r3, [r4, #8]
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	071a      	lsls	r2, r3, #28
 800816a:	d501      	bpl.n	8008170 <__swbuf_r+0x20>
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	b943      	cbnz	r3, 8008182 <__swbuf_r+0x32>
 8008170:	4621      	mov	r1, r4
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f82a 	bl	80081cc <__swsetup_r>
 8008178:	b118      	cbz	r0, 8008182 <__swbuf_r+0x32>
 800817a:	f04f 37ff 	mov.w	r7, #4294967295
 800817e:	4638      	mov	r0, r7
 8008180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	6922      	ldr	r2, [r4, #16]
 8008186:	1a98      	subs	r0, r3, r2
 8008188:	6963      	ldr	r3, [r4, #20]
 800818a:	b2f6      	uxtb	r6, r6
 800818c:	4283      	cmp	r3, r0
 800818e:	4637      	mov	r7, r6
 8008190:	dc05      	bgt.n	800819e <__swbuf_r+0x4e>
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f7ff ffb3 	bl	8008100 <_fflush_r>
 800819a:	2800      	cmp	r0, #0
 800819c:	d1ed      	bne.n	800817a <__swbuf_r+0x2a>
 800819e:	68a3      	ldr	r3, [r4, #8]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	60a3      	str	r3, [r4, #8]
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	6022      	str	r2, [r4, #0]
 80081aa:	701e      	strb	r6, [r3, #0]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d004      	beq.n	80081be <__swbuf_r+0x6e>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	07db      	lsls	r3, r3, #31
 80081b8:	d5e1      	bpl.n	800817e <__swbuf_r+0x2e>
 80081ba:	2e0a      	cmp	r6, #10
 80081bc:	d1df      	bne.n	800817e <__swbuf_r+0x2e>
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7ff ff9d 	bl	8008100 <_fflush_r>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d0d9      	beq.n	800817e <__swbuf_r+0x2e>
 80081ca:	e7d6      	b.n	800817a <__swbuf_r+0x2a>

080081cc <__swsetup_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4b29      	ldr	r3, [pc, #164]	@ (8008274 <__swsetup_r+0xa8>)
 80081d0:	4605      	mov	r5, r0
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	460c      	mov	r4, r1
 80081d6:	b118      	cbz	r0, 80081e0 <__swsetup_r+0x14>
 80081d8:	6a03      	ldr	r3, [r0, #32]
 80081da:	b90b      	cbnz	r3, 80081e0 <__swsetup_r+0x14>
 80081dc:	f7ff fa2e 	bl	800763c <__sinit>
 80081e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e4:	0719      	lsls	r1, r3, #28
 80081e6:	d422      	bmi.n	800822e <__swsetup_r+0x62>
 80081e8:	06da      	lsls	r2, r3, #27
 80081ea:	d407      	bmi.n	80081fc <__swsetup_r+0x30>
 80081ec:	2209      	movs	r2, #9
 80081ee:	602a      	str	r2, [r5, #0]
 80081f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295
 80081fa:	e033      	b.n	8008264 <__swsetup_r+0x98>
 80081fc:	0758      	lsls	r0, r3, #29
 80081fe:	d512      	bpl.n	8008226 <__swsetup_r+0x5a>
 8008200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008202:	b141      	cbz	r1, 8008216 <__swsetup_r+0x4a>
 8008204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <__swsetup_r+0x46>
 800820c:	4628      	mov	r0, r5
 800820e:	f7ff fb2b 	bl	8007868 <_free_r>
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	@ 0x34
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	2300      	movs	r3, #0
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	b94b      	cbnz	r3, 8008246 <__swsetup_r+0x7a>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800823c:	d003      	beq.n	8008246 <__swsetup_r+0x7a>
 800823e:	4621      	mov	r1, r4
 8008240:	4628      	mov	r0, r5
 8008242:	f000 f84f 	bl	80082e4 <__smakebuf_r>
 8008246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824a:	f013 0201 	ands.w	r2, r3, #1
 800824e:	d00a      	beq.n	8008266 <__swsetup_r+0x9a>
 8008250:	2200      	movs	r2, #0
 8008252:	60a2      	str	r2, [r4, #8]
 8008254:	6962      	ldr	r2, [r4, #20]
 8008256:	4252      	negs	r2, r2
 8008258:	61a2      	str	r2, [r4, #24]
 800825a:	6922      	ldr	r2, [r4, #16]
 800825c:	b942      	cbnz	r2, 8008270 <__swsetup_r+0xa4>
 800825e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008262:	d1c5      	bne.n	80081f0 <__swsetup_r+0x24>
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	0799      	lsls	r1, r3, #30
 8008268:	bf58      	it	pl
 800826a:	6962      	ldrpl	r2, [r4, #20]
 800826c:	60a2      	str	r2, [r4, #8]
 800826e:	e7f4      	b.n	800825a <__swsetup_r+0x8e>
 8008270:	2000      	movs	r0, #0
 8008272:	e7f7      	b.n	8008264 <__swsetup_r+0x98>
 8008274:	2000002c 	.word	0x2000002c

08008278 <_sbrk_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d06      	ldr	r5, [pc, #24]	@ (8008294 <_sbrk_r+0x1c>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	f7fa fb1e 	bl	80028c4 <_sbrk>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_sbrk_r+0x1a>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_sbrk_r+0x1a>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20000938 	.word	0x20000938

08008298 <__swhatbuf_r>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	2900      	cmp	r1, #0
 80082a2:	b096      	sub	sp, #88	@ 0x58
 80082a4:	4615      	mov	r5, r2
 80082a6:	461e      	mov	r6, r3
 80082a8:	da0d      	bge.n	80082c6 <__swhatbuf_r+0x2e>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	bf14      	ite	ne
 80082b6:	2340      	movne	r3, #64	@ 0x40
 80082b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082bc:	2000      	movs	r0, #0
 80082be:	6031      	str	r1, [r6, #0]
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	b016      	add	sp, #88	@ 0x58
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	466a      	mov	r2, sp
 80082c8:	f000 f848 	bl	800835c <_fstat_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	dbec      	blt.n	80082aa <__swhatbuf_r+0x12>
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082da:	4259      	negs	r1, r3
 80082dc:	4159      	adcs	r1, r3
 80082de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082e2:	e7eb      	b.n	80082bc <__swhatbuf_r+0x24>

080082e4 <__smakebuf_r>:
 80082e4:	898b      	ldrh	r3, [r1, #12]
 80082e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082e8:	079d      	lsls	r5, r3, #30
 80082ea:	4606      	mov	r6, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	d507      	bpl.n	8008300 <__smakebuf_r+0x1c>
 80082f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	6123      	str	r3, [r4, #16]
 80082f8:	2301      	movs	r3, #1
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	b003      	add	sp, #12
 80082fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008300:	ab01      	add	r3, sp, #4
 8008302:	466a      	mov	r2, sp
 8008304:	f7ff ffc8 	bl	8008298 <__swhatbuf_r>
 8008308:	9f00      	ldr	r7, [sp, #0]
 800830a:	4605      	mov	r5, r0
 800830c:	4639      	mov	r1, r7
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff fb16 	bl	8007940 <_malloc_r>
 8008314:	b948      	cbnz	r0, 800832a <__smakebuf_r+0x46>
 8008316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831a:	059a      	lsls	r2, r3, #22
 800831c:	d4ee      	bmi.n	80082fc <__smakebuf_r+0x18>
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	f043 0302 	orr.w	r3, r3, #2
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	e7e2      	b.n	80082f0 <__smakebuf_r+0xc>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	6020      	str	r0, [r4, #0]
 800832e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800833a:	b15b      	cbz	r3, 8008354 <__smakebuf_r+0x70>
 800833c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f81d 	bl	8008380 <_isatty_r>
 8008346:	b128      	cbz	r0, 8008354 <__smakebuf_r+0x70>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	431d      	orrs	r5, r3
 8008358:	81a5      	strh	r5, [r4, #12]
 800835a:	e7cf      	b.n	80082fc <__smakebuf_r+0x18>

0800835c <_fstat_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	@ (800837c <_fstat_r+0x20>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	f7fa fa82 	bl	8002872 <_fstat>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d102      	bne.n	8008378 <_fstat_r+0x1c>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	b103      	cbz	r3, 8008378 <_fstat_r+0x1c>
 8008376:	6023      	str	r3, [r4, #0]
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	bf00      	nop
 800837c:	20000938 	.word	0x20000938

08008380 <_isatty_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d06      	ldr	r5, [pc, #24]	@ (800839c <_isatty_r+0x1c>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7fa fa81 	bl	8002892 <_isatty>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_isatty_r+0x1a>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_isatty_r+0x1a>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	20000938 	.word	0x20000938

080083a0 <fmaxf>:
 80083a0:	b508      	push	{r3, lr}
 80083a2:	ed2d 8b02 	vpush	{d8}
 80083a6:	eeb0 8a40 	vmov.f32	s16, s0
 80083aa:	eef0 8a60 	vmov.f32	s17, s1
 80083ae:	f000 f831 	bl	8008414 <__fpclassifyf>
 80083b2:	b930      	cbnz	r0, 80083c2 <fmaxf+0x22>
 80083b4:	eeb0 8a68 	vmov.f32	s16, s17
 80083b8:	eeb0 0a48 	vmov.f32	s0, s16
 80083bc:	ecbd 8b02 	vpop	{d8}
 80083c0:	bd08      	pop	{r3, pc}
 80083c2:	eeb0 0a68 	vmov.f32	s0, s17
 80083c6:	f000 f825 	bl	8008414 <__fpclassifyf>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d0f4      	beq.n	80083b8 <fmaxf+0x18>
 80083ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80083d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d6:	dded      	ble.n	80083b4 <fmaxf+0x14>
 80083d8:	e7ee      	b.n	80083b8 <fmaxf+0x18>

080083da <fminf>:
 80083da:	b508      	push	{r3, lr}
 80083dc:	ed2d 8b02 	vpush	{d8}
 80083e0:	eeb0 8a40 	vmov.f32	s16, s0
 80083e4:	eef0 8a60 	vmov.f32	s17, s1
 80083e8:	f000 f814 	bl	8008414 <__fpclassifyf>
 80083ec:	b930      	cbnz	r0, 80083fc <fminf+0x22>
 80083ee:	eeb0 8a68 	vmov.f32	s16, s17
 80083f2:	eeb0 0a48 	vmov.f32	s0, s16
 80083f6:	ecbd 8b02 	vpop	{d8}
 80083fa:	bd08      	pop	{r3, pc}
 80083fc:	eeb0 0a68 	vmov.f32	s0, s17
 8008400:	f000 f808 	bl	8008414 <__fpclassifyf>
 8008404:	2800      	cmp	r0, #0
 8008406:	d0f4      	beq.n	80083f2 <fminf+0x18>
 8008408:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800840c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008410:	d5ed      	bpl.n	80083ee <fminf+0x14>
 8008412:	e7ee      	b.n	80083f2 <fminf+0x18>

08008414 <__fpclassifyf>:
 8008414:	ee10 3a10 	vmov	r3, s0
 8008418:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800841c:	d00d      	beq.n	800843a <__fpclassifyf+0x26>
 800841e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008422:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008426:	d30a      	bcc.n	800843e <__fpclassifyf+0x2a>
 8008428:	4b07      	ldr	r3, [pc, #28]	@ (8008448 <__fpclassifyf+0x34>)
 800842a:	1e42      	subs	r2, r0, #1
 800842c:	429a      	cmp	r2, r3
 800842e:	d908      	bls.n	8008442 <__fpclassifyf+0x2e>
 8008430:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008434:	4258      	negs	r0, r3
 8008436:	4158      	adcs	r0, r3
 8008438:	4770      	bx	lr
 800843a:	2002      	movs	r0, #2
 800843c:	4770      	bx	lr
 800843e:	2004      	movs	r0, #4
 8008440:	4770      	bx	lr
 8008442:	2003      	movs	r0, #3
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	007ffffe 	.word	0x007ffffe

0800844c <_init>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr

08008458 <_fini>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr
