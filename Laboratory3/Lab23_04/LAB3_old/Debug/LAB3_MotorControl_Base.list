
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd0  08008bd0  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd8  08008bd8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd8  08008bd8  00009bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bdc  08008bdc  00009bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008be0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000068  08008c48  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  08008c48  0000a908  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180ad  00000000  00000000  0000a096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef2  00000000  00000000  00022143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00025038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107c  00000000  00000000  00026538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029165  00000000  00000000  000275b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b190  00000000  00000000  00050719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107e53  00000000  00000000  0006b8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001736fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  00173740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00179840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08008ae8 	.word	0x08008ae8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08008ae8 	.word	0x08008ae8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ertc_dlog_update>:

	return 0;
}

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	1c59      	adds	r1, r3, #1
 80005e2:	2303      	movs	r3, #3
 80005e4:	2201      	movs	r2, #1
 80005e6:	f006 fd9b 	bl	8007120 <HAL_UART_Receive>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d111      	bne.n	8000614 <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	785b      	ldrb	r3, [r3, #1]
 80005f4:	2b41      	cmp	r3, #65	@ 0x41
 80005f6:	d002      	beq.n	80005fe <ertc_dlog_update+0x2e>
 80005f8:	2b42      	cmp	r3, #66	@ 0x42
 80005fa:	d004      	beq.n	8000606 <ertc_dlog_update+0x36>
 80005fc:	e007      	b.n	800060e <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
				break;
 8000604:	e006      	b.n	8000614 <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
				break;
 800060c:	e002      	b.n	8000614 <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000626:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800062a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d013      	beq.n	800065e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000636:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800063a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800063e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00b      	beq.n	800065e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000646:	e000      	b.n	800064a <ITM_SendChar+0x2c>
    {
      __NOP();
 8000648:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800064a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000654:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <HAL_TIM_PeriodElapsedCallback>:
		input_buffer[0] = '\0';
		printf("Input cleared\n");
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a04      	ldr	r2, [pc, #16]	@ (800068c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d102      	bne.n	8000684 <HAL_TIM_PeriodElapsedCallback+0x18>
//		data.mot1_speed_rpm = motor1_encoder.speed_rpm;
//		data.mot2_speed_rpm = motor2_encoder.speed_rpm;
//		data.u1 = u1;
//		data.u1 = u2;

		printf("it s working maybe\n");
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000680:	f007 fbc0 	bl	8007e04 <puts>
	}
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40001000 	.word	0x40001000
 8000690:	08008b44 	.word	0x08008b44

08000694 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800069a:	f002 f9a4 	bl	80029e6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800069e:	f000 fa71 	bl	8000b84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006a2:	f001 f8c9 	bl	8001838 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80006a6:	f001 f897 	bl	80017d8 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 80006aa:	f000 fadd 	bl	8000c68 <MX_ADC1_Init>
	MX_I2C1_Init();
 80006ae:	f000 fb2d 	bl	8000d0c <MX_I2C1_Init>
	MX_I2C2_Init();
 80006b2:	f000 fb6b 	bl	8000d8c <MX_I2C2_Init>
	MX_SPI1_Init();
 80006b6:	f000 fba9 	bl	8000e0c <MX_SPI1_Init>
	MX_TIM1_Init();
 80006ba:	f000 fbe5 	bl	8000e88 <MX_TIM1_Init>
	MX_TIM2_Init();
 80006be:	f000 fcb3 	bl	8001028 <MX_TIM2_Init>
	MX_TIM3_Init();
 80006c2:	f000 fd4b 	bl	800115c <MX_TIM3_Init>
	MX_TIM4_Init();
 80006c6:	f000 fd9f 	bl	8001208 <MX_TIM4_Init>
	MX_TIM5_Init();
 80006ca:	f000 fdf3 	bl	80012b4 <MX_TIM5_Init>
	MX_TIM8_Init();
 80006ce:	f000 fea1 	bl	8001414 <MX_TIM8_Init>
	MX_UART4_Init();
 80006d2:	f000 ffc1 	bl	8001658 <MX_UART4_Init>
	MX_UART5_Init();
 80006d6:	f000 ffef 	bl	80016b8 <MX_UART5_Init>
	MX_USART1_UART_Init();
 80006da:	f001 f81d 	bl	8001718 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80006de:	f001 f84b 	bl	8001778 <MX_USART2_UART_Init>
	MX_TIM9_Init();
 80006e2:	f000 ff69 	bl	80015b8 <MX_TIM9_Init>
	MX_TIM6_Init();
 80006e6:	f000 fe5d 	bl	80013a4 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	logger.uart_handle = huart3; // for serial
 80006ea:	4bb9      	ldr	r3, [pc, #740]	@ (80009d0 <main+0x33c>)
 80006ec:	4ab9      	ldr	r2, [pc, #740]	@ (80009d4 <main+0x340>)
 80006ee:	3344      	adds	r3, #68	@ 0x44
 80006f0:	4611      	mov	r1, r2
 80006f2:	2288      	movs	r2, #136	@ 0x88
 80006f4:	4618      	mov	r0, r3
 80006f6:	f007 fce0 	bl	80080ba <memcpy>
	//logger.uart_handle = huart2; // for wifi

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin,
 80006fa:	2201      	movs	r2, #1
 80006fc:	2110      	movs	r1, #16
 80006fe:	48b6      	ldr	r0, [pc, #728]	@ (80009d8 <main+0x344>)
 8000700:	f002 ff76 	bl	80035f0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000704:	200a      	movs	r0, #10
 8000706:	f002 fdac 	bl	8003262 <HAL_NVIC_DisableIRQ>

	ITM_SendChar('h');
 800070a:	2068      	movs	r0, #104	@ 0x68
 800070c:	f7ff ff87 	bl	800061e <ITM_SendChar>

	/* Software reset */
	data = 0x12;
 8000710:	2312      	movs	r3, #18
 8000712:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data,
 8000714:	23c8      	movs	r3, #200	@ 0xc8
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	2301      	movs	r3, #1
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	227d      	movs	r2, #125	@ 0x7d
 8000724:	217e      	movs	r1, #126	@ 0x7e
 8000726:	48ad      	ldr	r0, [pc, #692]	@ (80009dc <main+0x348>)
 8000728:	f003 f832 	bl	8003790 <HAL_I2C_Mem_Write>
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d004      	beq.n	8000740 <main+0xac>
		printf("I2C communication error (%X).\n", status);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4619      	mov	r1, r3
 800073a:	48a9      	ldr	r0, [pc, #676]	@ (80009e0 <main+0x34c>)
 800073c:	f007 fafa 	bl	8007d34 <iprintf>

	data = 0x34;
 8000740:	2334      	movs	r3, #52	@ 0x34
 8000742:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data,
 8000744:	23c8      	movs	r3, #200	@ 0xc8
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	2301      	movs	r3, #1
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	1dbb      	adds	r3, r7, #6
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	227d      	movs	r2, #125	@ 0x7d
 8000754:	217e      	movs	r1, #126	@ 0x7e
 8000756:	48a1      	ldr	r0, [pc, #644]	@ (80009dc <main+0x348>)
 8000758:	f003 f81a 	bl	8003790 <HAL_I2C_Mem_Write>
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d004      	beq.n	8000770 <main+0xdc>
		printf("I2C communication error (%X).\n", status);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4619      	mov	r1, r3
 800076a:	489d      	ldr	r0, [pc, #628]	@ (80009e0 <main+0x34c>)
 800076c:	f007 fae2 	bl	8007d34 <iprintf>

	HAL_Delay(100);
 8000770:	2064      	movs	r0, #100	@ 0x64
 8000772:	f002 f995 	bl	8002aa0 <HAL_Delay>

	/* Set KeyPad scanning engine */

	/* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
	data = 0x40;
 8000776:	2340      	movs	r3, #64	@ 0x40
 8000778:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data,
 800077a:	23c8      	movs	r3, #200	@ 0xc8
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	1dbb      	adds	r3, r7, #6
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	221e      	movs	r2, #30
 800078a:	217e      	movs	r1, #126	@ 0x7e
 800078c:	4893      	ldr	r0, [pc, #588]	@ (80009dc <main+0x348>)
 800078e:	f002 ffff 	bl	8003790 <HAL_I2C_Mem_Write>
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d004      	beq.n	80007a6 <main+0x112>
		printf("I2C communication error (%X).\n", status);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4619      	mov	r1, r3
 80007a0:	488f      	ldr	r0, [pc, #572]	@ (80009e0 <main+0x34c>)
 80007a2:	f007 fac7 	bl	8007d34 <iprintf>

	/* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
	data = 0xF0;
 80007a6:	23f0      	movs	r3, #240	@ 0xf0
 80007a8:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data,
 80007aa:	23c8      	movs	r3, #200	@ 0xc8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	220f      	movs	r2, #15
 80007ba:	217e      	movs	r1, #126	@ 0x7e
 80007bc:	4887      	ldr	r0, [pc, #540]	@ (80009dc <main+0x348>)
 80007be:	f002 ffe7 	bl	8003790 <HAL_I2C_Mem_Write>
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <main+0x142>
		printf("I2C communication error (%X).\n", status);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4619      	mov	r1, r3
 80007d0:	4883      	ldr	r0, [pc, #524]	@ (80009e0 <main+0x34c>)
 80007d2:	f007 faaf 	bl	8007d34 <iprintf>

	/* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
	data = 0x0F;
 80007d6:	230f      	movs	r3, #15
 80007d8:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data,
 80007da:	23c8      	movs	r3, #200	@ 0xc8
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	2301      	movs	r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	1dbb      	adds	r3, r7, #6
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	220e      	movs	r2, #14
 80007ea:	217e      	movs	r1, #126	@ 0x7e
 80007ec:	487b      	ldr	r0, [pc, #492]	@ (80009dc <main+0x348>)
 80007ee:	f002 ffcf 	bl	8003790 <HAL_I2C_Mem_Write>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d004      	beq.n	8000806 <main+0x172>
		printf("I2C communication error (%X).\n", status);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4619      	mov	r1, r3
 8000800:	4877      	ldr	r0, [pc, #476]	@ (80009e0 <main+0x34c>)
 8000802:	f007 fa97 	bl	8007d34 <iprintf>

	/* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
	data = 0x0F;
 8000806:	230f      	movs	r3, #15
 8000808:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1,
 800080a:	23c8      	movs	r3, #200	@ 0xc8
 800080c:	9302      	str	r3, [sp, #8]
 800080e:	2301      	movs	r3, #1
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	1dbb      	adds	r3, r7, #6
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	2301      	movs	r3, #1
 8000818:	220b      	movs	r2, #11
 800081a:	217e      	movs	r1, #126	@ 0x7e
 800081c:	486f      	ldr	r0, [pc, #444]	@ (80009dc <main+0x348>)
 800081e:	f002 ffb7 	bl	8003790 <HAL_I2C_Mem_Write>
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
			&data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d004      	beq.n	8000836 <main+0x1a2>
		printf("I2C communication error (%X).\n", status);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4619      	mov	r1, r3
 8000830:	486b      	ldr	r0, [pc, #428]	@ (80009e0 <main+0x34c>)
 8000832:	f007 fa7f 	bl	8007d34 <iprintf>

	/* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
	data = 0x0F;
 8000836:	230f      	movs	r3, #15
 8000838:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1,
 800083a:	23c8      	movs	r3, #200	@ 0xc8
 800083c:	9302      	str	r3, [sp, #8]
 800083e:	2301      	movs	r3, #1
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	1dbb      	adds	r3, r7, #6
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	2206      	movs	r2, #6
 800084a:	217e      	movs	r1, #126	@ 0x7e
 800084c:	4863      	ldr	r0, [pc, #396]	@ (80009dc <main+0x348>)
 800084e:	f002 ff9f 	bl	8003790 <HAL_I2C_Mem_Write>
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
			&data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <main+0x1d2>
		printf("I2C communication error (%X).\n", status);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4619      	mov	r1, r3
 8000860:	485f      	ldr	r0, [pc, #380]	@ (80009e0 <main+0x34c>)
 8000862:	f007 fa67 	bl	8007d34 <iprintf>

	/* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
	data = 0x0F;
 8000866:	230f      	movs	r3, #15
 8000868:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1,
 800086a:	23c8      	movs	r3, #200	@ 0xc8
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	2301      	movs	r3, #1
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	1dbb      	adds	r3, r7, #6
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2301      	movs	r3, #1
 8000878:	2223      	movs	r2, #35	@ 0x23
 800087a:	217e      	movs	r1, #126	@ 0x7e
 800087c:	4857      	ldr	r0, [pc, #348]	@ (80009dc <main+0x348>)
 800087e:	f002 ff87 	bl	8003790 <HAL_I2C_Mem_Write>
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
			REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d004      	beq.n	8000896 <main+0x202>
		printf("I2C communication error (%X).\n", status);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4619      	mov	r1, r3
 8000890:	4853      	ldr	r0, [pc, #332]	@ (80009e0 <main+0x34c>)
 8000892:	f007 fa4f 	bl	8007d34 <iprintf>

	/* Set RegDebounceConfig to 0x05 (16ms debounce time) */
	data = 0x05;
 8000896:	2305      	movs	r3, #5
 8000898:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1,
 800089a:	23c8      	movs	r3, #200	@ 0xc8
 800089c:	9302      	str	r3, [sp, #8]
 800089e:	2301      	movs	r3, #1
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	2222      	movs	r2, #34	@ 0x22
 80008aa:	217e      	movs	r1, #126	@ 0x7e
 80008ac:	484b      	ldr	r0, [pc, #300]	@ (80009dc <main+0x348>)
 80008ae:	f002 ff6f 	bl	8003790 <HAL_I2C_Mem_Write>
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
			REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d004      	beq.n	80008c6 <main+0x232>
		printf("I2C communication error (%X).\n", status);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4619      	mov	r1, r3
 80008c0:	4847      	ldr	r0, [pc, #284]	@ (80009e0 <main+0x34c>)
 80008c2:	f007 fa37 	bl	8007d34 <iprintf>

	/* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
	data = 0x7D;
 80008c6:	237d      	movs	r3, #125	@ 0x7d
 80008c8:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1,
 80008ca:	23c8      	movs	r3, #200	@ 0xc8
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	1dbb      	adds	r3, r7, #6
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	2225      	movs	r2, #37	@ 0x25
 80008da:	217e      	movs	r1, #126	@ 0x7e
 80008dc:	483f      	ldr	r0, [pc, #252]	@ (80009dc <main+0x348>)
 80008de:	f002 ff57 	bl	8003790 <HAL_I2C_Mem_Write>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
			&data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d004      	beq.n	80008f6 <main+0x262>
		printf("I2C communication error (%X).\n", status);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4619      	mov	r1, r3
 80008f0:	483b      	ldr	r0, [pc, #236]	@ (80009e0 <main+0x34c>)
 80008f2:	f007 fa1f 	bl	8007d34 <iprintf>

	/* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
	data = 0x1B;
 80008f6:	231b      	movs	r3, #27
 80008f8:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1,
 80008fa:	23c8      	movs	r3, #200	@ 0xc8
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	2226      	movs	r2, #38	@ 0x26
 800090a:	217e      	movs	r1, #126	@ 0x7e
 800090c:	4833      	ldr	r0, [pc, #204]	@ (80009dc <main+0x348>)
 800090e:	f002 ff3f 	bl	8003790 <HAL_I2C_Mem_Write>
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
			&data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d004      	beq.n	8000926 <main+0x292>
		printf("I2C communication error (%X).\n", status);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4619      	mov	r1, r3
 8000920:	482f      	ldr	r0, [pc, #188]	@ (80009e0 <main+0x34c>)
 8000922:	f007 fa07 	bl	8007d34 <iprintf>

	/* Enable EXTI4_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8000926:	2064      	movs	r0, #100	@ 0x64
 8000928:	f002 f8ba 	bl	8002aa0 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800092c:	200a      	movs	r0, #10
 800092e:	f002 fc8a 	bl	8003246 <HAL_NVIC_EnableIRQ>

	/* Disable EXTI2_IRQ during SX1509 initialization */
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000932:	2008      	movs	r0, #8
 8000934:	f002 fc95 	bl	8003262 <HAL_NVIC_DisableIRQ>

	/* Software reset */
	data = 0x12;
 8000938:	2312      	movs	r3, #18
 800093a:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data,
 800093c:	23c8      	movs	r3, #200	@ 0xc8
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2301      	movs	r3, #1
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	1dbb      	adds	r3, r7, #6
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	227d      	movs	r2, #125	@ 0x7d
 800094c:	217c      	movs	r1, #124	@ 0x7c
 800094e:	4823      	ldr	r0, [pc, #140]	@ (80009dc <main+0x348>)
 8000950:	f002 ff1e 	bl	8003790 <HAL_I2C_Mem_Write>
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d004      	beq.n	8000968 <main+0x2d4>
		printf("I2C communication error (%X).\n", status);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4619      	mov	r1, r3
 8000962:	481f      	ldr	r0, [pc, #124]	@ (80009e0 <main+0x34c>)
 8000964:	f007 f9e6 	bl	8007d34 <iprintf>

	data = 0x34;
 8000968:	2334      	movs	r3, #52	@ 0x34
 800096a:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data,
 800096c:	23c8      	movs	r3, #200	@ 0xc8
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2301      	movs	r3, #1
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2301      	movs	r3, #1
 800097a:	227d      	movs	r2, #125	@ 0x7d
 800097c:	217c      	movs	r1, #124	@ 0x7c
 800097e:	4817      	ldr	r0, [pc, #92]	@ (80009dc <main+0x348>)
 8000980:	f002 ff06 	bl	8003790 <HAL_I2C_Mem_Write>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <main+0x304>
		printf("I2C communication error (%X).\n", status);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4619      	mov	r1, r3
 8000992:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <main+0x34c>)
 8000994:	f007 f9ce 	bl	8007d34 <iprintf>

	HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f002 f881 	bl	8002aa0 <HAL_Delay>

	/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 800099e:	23ff      	movs	r3, #255	@ 0xff
 80009a0:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data,
 80009a2:	23c8      	movs	r3, #200	@ 0xc8
 80009a4:	9302      	str	r3, [sp, #8]
 80009a6:	2301      	movs	r3, #1
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	220f      	movs	r2, #15
 80009b2:	217c      	movs	r1, #124	@ 0x7c
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <main+0x348>)
 80009b6:	f002 feeb 	bl	8003790 <HAL_I2C_Mem_Write>
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00f      	beq.n	80009e4 <main+0x350>
		printf("I2C communication error (%X).\n", status);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <main+0x34c>)
 80009ca:	f007 f9b3 	bl	8007d34 <iprintf>
 80009ce:	e009      	b.n	80009e4 <main+0x350>
 80009d0:	200006e0 	.word	0x200006e0
 80009d4:	20000658 	.word	0x20000658
 80009d8:	40021000 	.word	0x40021000
 80009dc:	200000cc 	.word	0x200000cc
 80009e0:	08008b58 	.word	0x08008b58

	/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 80009e4:	23ff      	movs	r3, #255	@ 0xff
 80009e6:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data,
 80009e8:	23c8      	movs	r3, #200	@ 0xc8
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	2301      	movs	r3, #1
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	220e      	movs	r2, #14
 80009f8:	217c      	movs	r1, #124	@ 0x7c
 80009fa:	4859      	ldr	r0, [pc, #356]	@ (8000b60 <main+0x4cc>)
 80009fc:	f002 fec8 	bl	8003790 <HAL_I2C_Mem_Write>
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
			1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <main+0x380>
		printf("I2C communication error (%X).\n", status);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4855      	ldr	r0, [pc, #340]	@ (8000b64 <main+0x4d0>)
 8000a10:	f007 f990 	bl	8007d34 <iprintf>

	/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
	data = 0x00;
 8000a14:	2300      	movs	r3, #0
 8000a16:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1,
 8000a18:	23c8      	movs	r3, #200	@ 0xc8
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	1dbb      	adds	r3, r7, #6
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2213      	movs	r2, #19
 8000a28:	217c      	movs	r1, #124	@ 0x7c
 8000a2a:	484d      	ldr	r0, [pc, #308]	@ (8000b60 <main+0x4cc>)
 8000a2c:	f002 feb0 	bl	8003790 <HAL_I2C_Mem_Write>
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
			REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d004      	beq.n	8000a44 <main+0x3b0>
		printf("I2C communication error (%X).\n", status);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4849      	ldr	r0, [pc, #292]	@ (8000b64 <main+0x4d0>)
 8000a40:	f007 f978 	bl	8007d34 <iprintf>

	/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000a44:	23aa      	movs	r3, #170	@ 0xaa
 8000a46:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1,
 8000a48:	23c8      	movs	r3, #200	@ 0xc8
 8000a4a:	9302      	str	r3, [sp, #8]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	1dbb      	adds	r3, r7, #6
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2301      	movs	r3, #1
 8000a56:	2216      	movs	r2, #22
 8000a58:	217c      	movs	r1, #124	@ 0x7c
 8000a5a:	4841      	ldr	r0, [pc, #260]	@ (8000b60 <main+0x4cc>)
 8000a5c:	f002 fe98 	bl	8003790 <HAL_I2C_Mem_Write>
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
			&data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d004      	beq.n	8000a74 <main+0x3e0>
		printf("I2C communication error (%X).\n", status);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	483d      	ldr	r0, [pc, #244]	@ (8000b64 <main+0x4d0>)
 8000a70:	f007 f960 	bl	8007d34 <iprintf>

	/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
	data = 0xAA;
 8000a74:	23aa      	movs	r3, #170	@ 0xaa
 8000a76:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1,
 8000a78:	23c8      	movs	r3, #200	@ 0xc8
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	2217      	movs	r2, #23
 8000a88:	217c      	movs	r1, #124	@ 0x7c
 8000a8a:	4835      	ldr	r0, [pc, #212]	@ (8000b60 <main+0x4cc>)
 8000a8c:	f002 fe80 	bl	8003790 <HAL_I2C_Mem_Write>
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
			&data, 1, I2C_TIMEOUT);
	if (status != HAL_OK)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d004      	beq.n	8000aa4 <main+0x410>
		printf("I2C communication error (%X).\n", status);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4831      	ldr	r0, [pc, #196]	@ (8000b64 <main+0x4d0>)
 8000aa0:	f007 f948 	bl	8007d34 <iprintf>

	/* Enable EXTI2_IRQ after SX1509 initialization */
	HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	@ 0x64
 8000aa6:	f001 fffb 	bl	8002aa0 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f002 fbcb 	bl	8003246 <HAL_NVIC_EnableIRQ>

	printf("Ready\n");
 8000ab0:	482d      	ldr	r0, [pc, #180]	@ (8000b68 <main+0x4d4>)
 8000ab2:	f007 f9a7 	bl	8007e04 <puts>

	HAL_Delay(1000);
 8000ab6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aba:	f001 fff1 	bl	8002aa0 <HAL_Delay>

	/* Start encoders timers */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000abe:	213c      	movs	r1, #60	@ 0x3c
 8000ac0:	482a      	ldr	r0, [pc, #168]	@ (8000b6c <main+0x4d8>)
 8000ac2:	f005 f80f 	bl	8005ae4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ac6:	213c      	movs	r1, #60	@ 0x3c
 8000ac8:	4829      	ldr	r0, [pc, #164]	@ (8000b70 <main+0x4dc>)
 8000aca:	f005 f80b 	bl	8005ae4 <HAL_TIM_Encoder_Start>

	/* Start servomotors PWM (avoid floating inputs to servomotors) */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4828      	ldr	r0, [pc, #160]	@ (8000b74 <main+0x4e0>)
 8000ad2:	f004 fe05 	bl	80056e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	4826      	ldr	r0, [pc, #152]	@ (8000b74 <main+0x4e0>)
 8000ada:	f004 fe01 	bl	80056e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4824      	ldr	r0, [pc, #144]	@ (8000b74 <main+0x4e0>)
 8000ae2:	f004 fdfd 	bl	80056e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ae6:	210c      	movs	r1, #12
 8000ae8:	4822      	ldr	r0, [pc, #136]	@ (8000b74 <main+0x4e0>)
 8000aea:	f004 fdf9 	bl	80056e0 <HAL_TIM_PWM_Start>

	/* Start motor PWM */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <main+0x4e4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2200      	movs	r2, #0
 8000af4:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000af6:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <main+0x4e4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2200      	movs	r2, #0
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <main+0x4e4>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2200      	movs	r2, #0
 8000b04:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <main+0x4e4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4819      	ldr	r0, [pc, #100]	@ (8000b78 <main+0x4e4>)
 8000b12:	f004 fde5 	bl	80056e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b16:	2104      	movs	r1, #4
 8000b18:	4817      	ldr	r0, [pc, #92]	@ (8000b78 <main+0x4e4>)
 8000b1a:	f004 fde1 	bl	80056e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b1e:	2108      	movs	r1, #8
 8000b20:	4815      	ldr	r0, [pc, #84]	@ (8000b78 <main+0x4e4>)
 8000b22:	f004 fddd 	bl	80056e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b26:	210c      	movs	r1, #12
 8000b28:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <main+0x4e4>)
 8000b2a:	f004 fdd9 	bl	80056e0 <HAL_TIM_PWM_Start>

	/* Start speed ctrl ISR */
	HAL_TIM_Base_Start_IT(&htim6);
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <main+0x4e8>)
 8000b30:	f004 fca6 	bl	8005480 <HAL_TIM_Base_Start_IT>

	set_motor_pwm((uint32_t) 50, &htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000b34:	2304      	movs	r3, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	490f      	ldr	r1, [pc, #60]	@ (8000b78 <main+0x4e4>)
 8000b3a:	2032      	movs	r0, #50	@ 0x32
 8000b3c:	f000 ffd8 	bl	8001af0 <set_motor_pwm>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
//		handle_keypad_input(&motor1_pi);
		HAL_Delay(5);  // Prevent double reads if holding a key
 8000b40:	2005      	movs	r0, #5
 8000b42:	f001 ffad 	bl	8002aa0 <HAL_Delay>
		ertc_dlog_update(&logger);
 8000b46:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <main+0x4ec>)
 8000b48:	f7ff fd42 	bl	80005d0 <ertc_dlog_update>
		set_motor_pwm((uint32_t) 500, &htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4909      	ldr	r1, [pc, #36]	@ (8000b78 <main+0x4e4>)
 8000b52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b56:	f000 ffcb 	bl	8001af0 <set_motor_pwm>
		HAL_Delay(5);  // Prevent double reads if holding a key
 8000b5a:	bf00      	nop
 8000b5c:	e7f0      	b.n	8000b40 <main+0x4ac>
 8000b5e:	bf00      	nop
 8000b60:	200000cc 	.word	0x200000cc
 8000b64:	08008b58 	.word	0x08008b58
 8000b68:	08008b78 	.word	0x08008b78
 8000b6c:	20000270 	.word	0x20000270
 8000b70:	200002bc 	.word	0x200002bc
 8000b74:	200001d8 	.word	0x200001d8
 8000b78:	200003a0 	.word	0x200003a0
 8000b7c:	20000354 	.word	0x20000354
 8000b80:	200006e0 	.word	0x200006e0

08000b84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	@ 0x50
 8000b88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	2234      	movs	r2, #52	@ 0x34
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f007 fa16 	bl	8007fc4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000ba8:	f003 fa0c 	bl	8003fc4 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb8:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <SystemClock_Config+0xdc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <SystemClock_Config+0xe0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bcc:	4a25      	ldr	r2, [pc, #148]	@ (8000c64 <SystemClock_Config+0xe0>)
 8000bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <SystemClock_Config+0xe0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000be8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	2302      	movs	r3, #2
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000bf8:	2360      	movs	r3, #96	@ 0x60
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fa39 	bl	8004084 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x98>
		Error_Handler();
 8000c18:	f000 ff4e 	bl	8001ab8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000c1c:	f003 f9e2 	bl	8003fe4 <HAL_PWREx_EnableOverDrive>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xa6>
		Error_Handler();
 8000c26:	f000 ff47 	bl	8001ab8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2103      	movs	r1, #3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fcca 	bl	80045e0 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xd2>
		Error_Handler();
 8000c52:	f000 ff31 	bl	8001ab8 <Error_Handler>
	}
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	@ 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000c7c:	4a21      	ldr	r2, [pc, #132]	@ (8000d04 <MX_ADC1_Init+0x9c>)
 8000c7e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000c82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c86:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000caa:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <MX_ADC1_Init+0xa0>)
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cc8:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000cca:	f001 ff0d 	bl	8002ae8 <HAL_ADC_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000cd4:	f000 fef0 	bl	8001ab8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_ADC1_Init+0x98>)
 8000cea:	f001 ff41 	bl	8002b70 <HAL_ADC_ConfigChannel>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000cf4:	f000 fee0 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000084 	.word	0x20000084
 8000d04:	40012000 	.word	0x40012000
 8000d08:	0f000001 	.word	0x0f000001

08000d0c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <MX_I2C1_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d18:	4a1b      	ldr	r2, [pc, #108]	@ (8000d88 <MX_I2C1_Init+0x7c>)
 8000d1a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d46:	480e      	ldr	r0, [pc, #56]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d48:	f002 fc86 	bl	8003658 <HAL_I2C_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000d52:	f000 feb1 	bl	8001ab8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000d56:	2100      	movs	r1, #0
 8000d58:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d5a:	f003 f89b 	bl	8003e94 <HAL_I2CEx_ConfigAnalogFilter>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000d64:	f000 fea8 	bl	8001ab8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_I2C1_Init+0x74>)
 8000d6c:	f003 f8dd 	bl	8003f2a <HAL_I2CEx_ConfigDigitalFilter>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000d76:	f000 fe9f 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000cc 	.word	0x200000cc
 8000d84:	40005400 	.word	0x40005400
 8000d88:	20303e5d 	.word	0x20303e5d

08000d8c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000d92:	4a1c      	ldr	r2, [pc, #112]	@ (8000e04 <MX_I2C2_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000d98:	4a1b      	ldr	r2, [pc, #108]	@ (8000e08 <MX_I2C2_Init+0x7c>)
 8000d9a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000dc6:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dc8:	f002 fc46 	bl	8003658 <HAL_I2C_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000dd2:	f000 fe71 	bl	8001ab8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4809      	ldr	r0, [pc, #36]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dda:	f003 f85b 	bl	8003e94 <HAL_I2CEx_ConfigAnalogFilter>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C2_Init+0x5c>
		Error_Handler();
 8000de4:	f000 fe68 	bl	8001ab8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000de8:	2100      	movs	r1, #0
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_I2C2_Init+0x74>)
 8000dec:	f003 f89d 	bl	8003f2a <HAL_I2CEx_ConfigDigitalFilter>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000df6:	f000 fe5f 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000120 	.word	0x20000120
 8000e04:	40005800 	.word	0x40005800
 8000e08:	20303e5d 	.word	0x20303e5d

08000e0c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e12:	4a1c      	ldr	r2, [pc, #112]	@ (8000e84 <MX_SPI1_Init+0x78>)
 8000e14:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e1c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e2a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e3e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <MX_SPI1_Init+0x74>)
 8000e6c:	f004 fa06 	bl	800527c <HAL_SPI_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000e76:	f000 fe1f 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000174 	.word	0x20000174
 8000e84:	40013000 	.word	0x40013000

08000e88 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09a      	sub	sp, #104	@ 0x68
 8000e8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ea8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	222c      	movs	r2, #44	@ 0x2c
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 f87e 	bl	8007fc4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ec8:	4b55      	ldr	r3, [pc, #340]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000eca:	4a56      	ldr	r2, [pc, #344]	@ (8001024 <MX_TIM1_Init+0x19c>)
 8000ecc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000ece:	4b54      	ldr	r3, [pc, #336]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b52      	ldr	r3, [pc, #328]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8000eda:	4b51      	ldr	r3, [pc, #324]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b4c      	ldr	r3, [pc, #304]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000ef2:	484b      	ldr	r0, [pc, #300]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000ef4:	f004 fa6d 	bl	80053d2 <HAL_TIM_Base_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8000efe:	f000 fddb 	bl	8001ab8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f06:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000f08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4844      	ldr	r0, [pc, #272]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000f10:	f005 f9a8 	bl	8006264 <HAL_TIM_ConfigClockSource>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x96>
		Error_Handler();
 8000f1a:	f000 fdcd 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 8000f1e:	4840      	ldr	r0, [pc, #256]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000f20:	f004 fb26 	bl	8005570 <HAL_TIM_OC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM1_Init+0xa6>
		Error_Handler();
 8000f2a:	f000 fdc5 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000f3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4837      	ldr	r0, [pc, #220]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000f42:	f005 ff75 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0xc8>
		Error_Handler();
 8000f4c:	f000 fdb4 	bl	8001ab8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000f50:	2350      	movs	r3, #80	@ 0x50
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000f6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	482a      	ldr	r0, [pc, #168]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000f76:	f004 ff4b 	bl	8005e10 <HAL_TIM_OC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0xfc>
		Error_Handler();
 8000f80:	f000 fd9a 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000f84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f88:	2204      	movs	r2, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4824      	ldr	r0, [pc, #144]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000f8e:	f004 ff3f 	bl	8005e10 <HAL_TIM_OC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0x114>
		Error_Handler();
 8000f98:	f000 fd8e 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000f9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481e      	ldr	r0, [pc, #120]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000fa6:	f004 ff33 	bl	8005e10 <HAL_TIM_OC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x12c>
		Error_Handler();
 8000fb0:	f000 fd82 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000fb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fb8:	220c      	movs	r2, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4818      	ldr	r0, [pc, #96]	@ (8001020 <MX_TIM1_Init+0x198>)
 8000fbe:	f004 ff27 	bl	8005e10 <HAL_TIM_OC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x144>
		Error_Handler();
 8000fc8:	f000 fd76 	bl	8001ab8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <MX_TIM1_Init+0x198>)
 8001002:	f005 ffa3 	bl	8006f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM1_Init+0x188>
		Error_Handler();
 800100c:	f000 fd54 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001010:	4803      	ldr	r0, [pc, #12]	@ (8001020 <MX_TIM1_Init+0x198>)
 8001012:	f001 f933 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001016:	bf00      	nop
 8001018:	3768      	adds	r7, #104	@ 0x68
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001d8 	.word	0x200001d8
 8001024:	40010000 	.word	0x40010000

08001028 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b092      	sub	sp, #72	@ 0x48
 800102c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800102e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800103c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001068:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <MX_TIM2_Init+0x130>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001070:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <MX_TIM2_Init+0x130>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b38      	ldr	r3, [pc, #224]	@ (8001158 <MX_TIM2_Init+0x130>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800107c:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <MX_TIM2_Init+0x130>)
 800107e:	f04f 32ff 	mov.w	r2, #4294967295
 8001082:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <MX_TIM2_Init+0x130>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b33      	ldr	r3, [pc, #204]	@ (8001158 <MX_TIM2_Init+0x130>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001090:	4831      	ldr	r0, [pc, #196]	@ (8001158 <MX_TIM2_Init+0x130>)
 8001092:	f004 f99e 	bl	80053d2 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x78>
		Error_Handler();
 800109c:	f000 fd0c 	bl	8001ab8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80010a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010aa:	4619      	mov	r1, r3
 80010ac:	482a      	ldr	r0, [pc, #168]	@ (8001158 <MX_TIM2_Init+0x130>)
 80010ae:	f005 f8d9 	bl	8006264 <HAL_TIM_ConfigClockSource>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x94>
		Error_Handler();
 80010b8:	f000 fcfe 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80010bc:	4826      	ldr	r0, [pc, #152]	@ (8001158 <MX_TIM2_Init+0x130>)
 80010be:	f004 fab8 	bl	8005632 <HAL_TIM_PWM_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0xa4>
		Error_Handler();
 80010c8:	f000 fcf6 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80010cc:	4822      	ldr	r0, [pc, #136]	@ (8001158 <MX_TIM2_Init+0x130>)
 80010ce:	f004 fc01 	bl	80058d4 <HAL_TIM_IC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0xb4>
		Error_Handler();
 80010d8:	f000 fcee 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80010e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	481b      	ldr	r0, [pc, #108]	@ (8001158 <MX_TIM2_Init+0x130>)
 80010ec:	f005 fea0 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0xd2>
		Error_Handler();
 80010f6:	f000 fcdf 	bl	8001ab8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010fa:	2360      	movs	r3, #96	@ 0x60
 80010fc:	613b      	str	r3, [r7, #16]
	sConfigOC.Pulse = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4811      	ldr	r0, [pc, #68]	@ (8001158 <MX_TIM2_Init+0x130>)
 8001114:	f004 ff92 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0xfa>
		Error_Handler();
 800111e:	f000 fccb 	bl	8001ab8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001126:	2301      	movs	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001132:	463b      	mov	r3, r7
 8001134:	2208      	movs	r2, #8
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	@ (8001158 <MX_TIM2_Init+0x130>)
 800113a:	f004 fee3 	bl	8005f04 <HAL_TIM_IC_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x120>
		Error_Handler();
 8001144:	f000 fcb8 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <MX_TIM2_Init+0x130>)
 800114a:	f001 f897 	bl	800227c <HAL_TIM_MspPostInit>

}
 800114e:	bf00      	nop
 8001150:	3748      	adds	r7, #72	@ 0x48
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000224 	.word	0x20000224

0800115c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2224      	movs	r2, #36	@ 0x24
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f006 ff2a 	bl	8007fc4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_TIM3_Init+0xa4>)
 800117c:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <MX_TIM3_Init+0xa8>)
 800117e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM3_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_TIM3_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = TIM3_ARR_VALUE;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_TIM3_Init+0xa4>)
 800118e:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8001192:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_TIM3_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_TIM3_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a0:	2303      	movs	r3, #3
 80011a2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 80011b0:	230f      	movs	r3, #15
 80011b2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 15;
 80011c0:	230f      	movs	r3, #15
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_TIM3_Init+0xa4>)
 80011cc:	f004 fbe4 	bl	8005998 <HAL_TIM_Encoder_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x7e>
		Error_Handler();
 80011d6:	f000 fc6f 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_TIM3_Init+0xa4>)
 80011e8:	f005 fe22 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x9a>
		Error_Handler();
 80011f2:	f000 fc61 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	@ 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000270 	.word	0x20000270
 8001204:	40000400 	.word	0x40000400

08001208 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2224      	movs	r2, #36	@ 0x24
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f006 fed4 	bl	8007fc4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001228:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <MX_TIM4_Init+0xa8>)
 800122a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_TIM4_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_ARR_VALUE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_TIM4_Init+0xa4>)
 800123a:	f640 62ff 	movw	r2, #3839	@ 0xeff
 800123e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124c:	2303      	movs	r3, #3
 800124e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 800125c:	230f      	movs	r3, #15
 800125e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 15;
 800126c:	230f      	movs	r3, #15
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001278:	f004 fb8e 	bl	8005998 <HAL_TIM_Encoder_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x7e>
		Error_Handler();
 8001282:	f000 fc19 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800128e:	463b      	mov	r3, r7
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	@ (80012ac <MX_TIM4_Init+0xa4>)
 8001294:	f005 fdcc 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0x9a>
		Error_Handler();
 800129e:	f000 fc0b 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3730      	adds	r7, #48	@ 0x30
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002bc 	.word	0x200002bc
 80012b0:	40000800 	.word	0x40000800

080012b4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	@ 0x38
 80012b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	615a      	str	r2, [r3, #20]
 80012e4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80012e6:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <MX_TIM5_Init+0xe8>)
 80012e8:	4a2d      	ldr	r2, [pc, #180]	@ (80013a0 <MX_TIM5_Init+0xec>)
 80012ea:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80012ec:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <MX_TIM5_Init+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <MX_TIM5_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80012f8:	4b28      	ldr	r3, [pc, #160]	@ (800139c <MX_TIM5_Init+0xe8>)
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <MX_TIM5_Init+0xe8>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <MX_TIM5_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800130c:	4823      	ldr	r0, [pc, #140]	@ (800139c <MX_TIM5_Init+0xe8>)
 800130e:	f004 f860 	bl	80053d2 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM5_Init+0x68>
		Error_Handler();
 8001318:	f000 fbce 	bl	8001ab8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001326:	4619      	mov	r1, r3
 8001328:	481c      	ldr	r0, [pc, #112]	@ (800139c <MX_TIM5_Init+0xe8>)
 800132a:	f004 ff9b 	bl	8006264 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM5_Init+0x84>
		Error_Handler();
 8001334:	f000 fbc0 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001338:	4818      	ldr	r0, [pc, #96]	@ (800139c <MX_TIM5_Init+0xe8>)
 800133a:	f004 f97a 	bl	8005632 <HAL_TIM_PWM_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM5_Init+0x94>
		Error_Handler();
 8001344:	f000 fbb8 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4811      	ldr	r0, [pc, #68]	@ (800139c <MX_TIM5_Init+0xe8>)
 8001358:	f005 fd6a 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM5_Init+0xb2>
		Error_Handler();
 8001362:	f000 fba9 	bl	8001ab8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001366:	2360      	movs	r3, #96	@ 0x60
 8001368:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	@ (800139c <MX_TIM5_Init+0xe8>)
 800137e:	f004 fe5d 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM5_Init+0xd8>
		Error_Handler();
 8001388:	f000 fb96 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <MX_TIM5_Init+0xe8>)
 800138e:	f000 ff75 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	@ 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000308 	.word	0x20000308
 80013a0:	40000c00 	.word	0x40000c00

080013a4 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_TIM6_Init+0x68>)
 80013b6:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <MX_TIM6_Init+0x6c>)
 80013b8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = TIM6_PSC_VALUE;
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_TIM6_Init+0x68>)
 80013bc:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80013c0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_TIM6_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = TIM6_ARR_VALUE;
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_TIM6_Init+0x68>)
 80013ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ce:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_TIM6_Init+0x68>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_TIM6_Init+0x68>)
 80013d8:	f003 fffb 	bl	80053d2 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM6_Init+0x42>
		Error_Handler();
 80013e2:	f000 fb69 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <MX_TIM6_Init+0x68>)
 80013f4:	f005 fd1c 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM6_Init+0x5e>
		Error_Handler();
 80013fe:	f000 fb5b 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000354 	.word	0x20000354
 8001410:	40001000 	.word	0x40001000

08001414 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b09a      	sub	sp, #104	@ 0x68
 8001418:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800141a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001428:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001434:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
 8001446:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	222c      	movs	r2, #44	@ 0x2c
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f006 fdb8 	bl	8007fc4 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001454:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001456:	4a57      	ldr	r2, [pc, #348]	@ (80015b4 <MX_TIM8_Init+0x1a0>)
 8001458:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800145a:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 800145c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001460:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = TIM8_ARR_VALUE;
 8001468:	4b51      	ldr	r3, [pc, #324]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 800146a:	f240 128f 	movw	r2, #399	@ 0x18f
 800146e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b4f      	ldr	r3, [pc, #316]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001476:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b4c      	ldr	r3, [pc, #304]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001482:	484b      	ldr	r0, [pc, #300]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001484:	f003 ffa5 	bl	80053d2 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM8_Init+0x7e>
		Error_Handler();
 800148e:	f000 fb13 	bl	8001ab8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001496:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001498:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800149c:	4619      	mov	r1, r3
 800149e:	4844      	ldr	r0, [pc, #272]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 80014a0:	f004 fee0 	bl	8006264 <HAL_TIM_ConfigClockSource>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM8_Init+0x9a>
		Error_Handler();
 80014aa:	f000 fb05 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 80014ae:	4840      	ldr	r0, [pc, #256]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 80014b0:	f004 f8bf 	bl	8005632 <HAL_TIM_PWM_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM8_Init+0xaa>
		Error_Handler();
 80014ba:	f000 fafd 	bl	8001ab8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 80014ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014ce:	4619      	mov	r1, r3
 80014d0:	4837      	ldr	r0, [pc, #220]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 80014d2:	f005 fcad 	bl	8006e30 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM8_Init+0xcc>
		Error_Handler();
 80014dc:	f000 faec 	bl	8001ab8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e0:	2360      	movs	r3, #96	@ 0x60
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80014fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001500:	2200      	movs	r2, #0
 8001502:	4619      	mov	r1, r3
 8001504:	482a      	ldr	r0, [pc, #168]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001506:	f004 fd99 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM8_Init+0x100>
		Error_Handler();
 8001510:	f000 fad2 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001514:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001518:	2204      	movs	r2, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4824      	ldr	r0, [pc, #144]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 800151e:	f004 fd8d 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM8_Init+0x118>
		Error_Handler();
 8001528:	f000 fac6 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800152c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001530:	2208      	movs	r2, #8
 8001532:	4619      	mov	r1, r3
 8001534:	481e      	ldr	r0, [pc, #120]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001536:	f004 fd81 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM8_Init+0x130>
		Error_Handler();
 8001540:	f000 faba 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001544:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001548:	220c      	movs	r2, #12
 800154a:	4619      	mov	r1, r3
 800154c:	4818      	ldr	r0, [pc, #96]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 800154e:	f004 fd75 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM8_Init+0x148>
		Error_Handler();
 8001558:	f000 faae 	bl	8001ab8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001570:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001574:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800157e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 8001592:	f005 fcdb 	bl	8006f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM8_Init+0x18c>
		Error_Handler();
 800159c:	f000 fa8c 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80015a0:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <MX_TIM8_Init+0x19c>)
 80015a2:	f000 fe6b 	bl	800227c <HAL_TIM_MspPostInit>

}
 80015a6:	bf00      	nop
 80015a8:	3768      	adds	r7, #104	@ 0x68
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200003a0 	.word	0x200003a0
 80015b4:	40010400 	.word	0x40010400

080015b8 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015d2:	4a20      	ldr	r2, [pc, #128]	@ (8001654 <MX_TIM9_Init+0x9c>)
 80015d4:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e8:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 80015f6:	4816      	ldr	r0, [pc, #88]	@ (8001650 <MX_TIM9_Init+0x98>)
 80015f8:	f004 f81b 	bl	8005632 <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM9_Init+0x4e>
		Error_Handler();
 8001602:	f000 fa59 	bl	8001ab8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	@ 0x60
 8001608:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <MX_TIM9_Init+0x98>)
 800161e:	f004 fd0d 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM9_Init+0x74>
		Error_Handler();
 8001628:	f000 fa46 	bl	8001ab8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2204      	movs	r2, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	@ (8001650 <MX_TIM9_Init+0x98>)
 8001634:	f004 fd02 	bl	800603c <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM9_Init+0x8a>
		Error_Handler();
 800163e:	f000 fa3b 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <MX_TIM9_Init+0x98>)
 8001644:	f000 fe1a 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200003ec 	.word	0x200003ec
 8001654:	40014000 	.word	0x40014000

08001658 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_UART4_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	@ (80016b4 <MX_UART4_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_UART4_Init+0x58>)
 8001664:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001668:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_UART4_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_UART4_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <MX_UART4_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_UART4_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <MX_UART4_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_UART4_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <MX_UART4_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <MX_UART4_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_UART4_Init+0x58>)
 800169c:	f005 fcf2 	bl	8007084 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_UART4_Init+0x52>
		Error_Handler();
 80016a6:	f000 fa07 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000438 	.word	0x20000438
 80016b4:	40004c00 	.word	0x40004c00

080016b8 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_UART5_Init+0x58>)
 80016be:	4a15      	ldr	r2, [pc, #84]	@ (8001714 <MX_UART5_Init+0x5c>)
 80016c0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80016c2:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <MX_UART5_Init+0x58>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_UART5_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_UART5_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_UART5_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_UART5_Init+0x58>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_UART5_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_UART5_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_UART5_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_UART5_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_UART5_Init+0x58>)
 80016fc:	f005 fcc2 	bl	8007084 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_UART5_Init+0x52>
		Error_Handler();
 8001706:	f000 f9d7 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200004c0 	.word	0x200004c0
 8001714:	40005000 	.word	0x40005000

08001718 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 800171e:	4a15      	ldr	r2, [pc, #84]	@ (8001774 <MX_USART1_UART_Init+0x5c>)
 8001720:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001722:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800175a:	4805      	ldr	r0, [pc, #20]	@ (8001770 <MX_USART1_UART_Init+0x58>)
 800175c:	f005 fc92 	bl	8007084 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001766:	f000 f9a7 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000548 	.word	0x20000548
 8001774:	40011000 	.word	0x40011000

08001778 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 800177e:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <MX_USART2_UART_Init+0x58>)
 8001780:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 1000000;
 8001782:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 8001784:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <MX_USART2_UART_Init+0x5c>)
 8001786:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001788:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 800179c:	220c      	movs	r2, #12
 800179e:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_USART2_UART_Init+0x54>)
 80017ba:	f005 fc63 	bl	8007084 <HAL_UART_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART2_UART_Init+0x50>
		Error_Handler();
 80017c4:	f000 f978 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200005d0 	.word	0x200005d0
 80017d0:	40004400 	.word	0x40004400
 80017d4:	000f4240 	.word	0x000f4240

080017d8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <MX_USART3_UART_Init+0x5c>)
 80017e0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 80017fe:	220c      	movs	r2, #12
 8001800:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_USART3_UART_Init+0x58>)
 800181c:	f005 fc32 	bl	8007084 <HAL_UART_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001826:	f000 f947 	bl	8001ab8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000658 	.word	0x20000658
 8001834:	40004800 	.word	0x40004800

08001838 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b08e      	sub	sp, #56	@ 0x38
 800183c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800183e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800184e:	4b93      	ldr	r3, [pc, #588]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a92      	ldr	r2, [pc, #584]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b90      	ldr	r3, [pc, #576]	@ (8001a9c <MX_GPIO_Init+0x264>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b8d      	ldr	r3, [pc, #564]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a8c      	ldr	r2, [pc, #560]	@ (8001a9c <MX_GPIO_Init+0x264>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b8a      	ldr	r3, [pc, #552]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800187e:	4b87      	ldr	r3, [pc, #540]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a86      	ldr	r2, [pc, #536]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b84      	ldr	r3, [pc, #528]	@ (8001a9c <MX_GPIO_Init+0x264>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	4b81      	ldr	r3, [pc, #516]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a80      	ldr	r2, [pc, #512]	@ (8001a9c <MX_GPIO_Init+0x264>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b7e      	ldr	r3, [pc, #504]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b7b      	ldr	r3, [pc, #492]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a7a      	ldr	r2, [pc, #488]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b78      	ldr	r3, [pc, #480]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b75      	ldr	r3, [pc, #468]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a74      	ldr	r2, [pc, #464]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b72      	ldr	r3, [pc, #456]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018de:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b6c      	ldr	r3, [pc, #432]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80018f6:	4b69      	ldr	r3, [pc, #420]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	4a68      	ldr	r2, [pc, #416]	@ (8001a9c <MX_GPIO_Init+0x264>)
 80018fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001900:	6313      	str	r3, [r2, #48]	@ 0x30
 8001902:	4b66      	ldr	r3, [pc, #408]	@ (8001a9c <MX_GPIO_Init+0x264>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800190e:	2200      	movs	r2, #0
 8001910:	2118      	movs	r1, #24
 8001912:	4863      	ldr	r0, [pc, #396]	@ (8001aa0 <MX_GPIO_Init+0x268>)
 8001914:	f001 fe6c 	bl	80035f0 <HAL_GPIO_WritePin>
			GPIO_OUT_SPI_CS_SDCARD_Pin | GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800191e:	4861      	ldr	r0, [pc, #388]	@ (8001aa4 <MX_GPIO_Init+0x26c>)
 8001920:	f001 fe66 	bl	80035f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2140      	movs	r1, #64	@ 0x40
 8001928:	485f      	ldr	r0, [pc, #380]	@ (8001aa8 <MX_GPIO_Init+0x270>)
 800192a:	f001 fe61 	bl	80035f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
	GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin | GPIO_OUT_SPI_CS_LCD_Pin;
 800192e:	2318      	movs	r3, #24
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4856      	ldr	r0, [pc, #344]	@ (8001aa0 <MX_GPIO_Init+0x268>)
 8001946:	f001 fca7 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
 GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin | GPIO_EXTI8_USER_BUT1_IRQ_Pin
 800194a:	f643 7308 	movw	r3, #16136	@ 0x3f08
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
			| GPIO_EXTI9_USER_BUT2_IRQ_Pin | GPIO_EXTI10_BUMP1_IRQ_Pin
			| GPIO_EXTI11_BUMP2_IRQ_Pin | GPIO_EXTI12_BUMP3_IRQ_Pin
			| GPIO_EXTI13_BUMP4_IRQ_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001950:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	4852      	ldr	r0, [pc, #328]	@ (8001aac <MX_GPIO_Init+0x274>)
 8001962:	f001 fc99 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
	GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 8001966:	2310      	movs	r3, #16
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800196a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	484c      	ldr	r0, [pc, #304]	@ (8001aac <MX_GPIO_Init+0x274>)
 800197c:	f001 fc8c 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001980:	2332      	movs	r3, #50	@ 0x32
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001990:	230b      	movs	r3, #11
 8001992:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	4845      	ldr	r0, [pc, #276]	@ (8001ab0 <MX_GPIO_Init+0x278>)
 800199c:	f001 fc7c 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 80019a0:	2386      	movs	r3, #134	@ 0x86
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019b0:	230b      	movs	r3, #11
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	483e      	ldr	r0, [pc, #248]	@ (8001ab4 <MX_GPIO_Init+0x27c>)
 80019bc:	f001 fc6c 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80019c0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	4832      	ldr	r0, [pc, #200]	@ (8001aa4 <MX_GPIO_Init+0x26c>)
 80019da:	f001 fc5d 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019f0:	230b      	movs	r3, #11
 80019f2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	482a      	ldr	r0, [pc, #168]	@ (8001aa4 <MX_GPIO_Init+0x26c>)
 80019fc:	f001 fc4c 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a00:	2340      	movs	r3, #64	@ 0x40
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	4824      	ldr	r0, [pc, #144]	@ (8001aa8 <MX_GPIO_Init+0x270>)
 8001a18:	f001 fc3e 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481e      	ldr	r0, [pc, #120]	@ (8001aa8 <MX_GPIO_Init+0x270>)
 8001a30:	f001 fc32 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8001a34:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a46:	230a      	movs	r3, #10
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4818      	ldr	r0, [pc, #96]	@ (8001ab4 <MX_GPIO_Init+0x27c>)
 8001a52:	f001 fc21 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4812      	ldr	r0, [pc, #72]	@ (8001ab4 <MX_GPIO_Init+0x27c>)
 8001a6c:	f001 fc14 	bl	8003298 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001a70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a82:	230b      	movs	r3, #11
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_GPIO_Init+0x270>)
 8001a8e:	f001 fc03 	bl	8003298 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a92:	bf00      	nop
 8001a94:	3738      	adds	r7, #56	@ 0x38
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40021800 	.word	0x40021800
 8001aac:	40021400 	.word	0x40021400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		static uint32_t kLed = 0;
		if (++kLed >= 1000) {
 8001ac0:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <Error_Handler+0x30>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <Error_Handler+0x30>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <Error_Handler+0x30>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ad2:	d3f5      	bcc.n	8001ac0 <Error_Handler+0x8>
			kLed = 0;
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <Error_Handler+0x30>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001ada:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ade:	4803      	ldr	r0, [pc, #12]	@ (8001aec <Error_Handler+0x34>)
 8001ae0:	f001 fd9f 	bl	8003622 <HAL_GPIO_TogglePin>
	while (1) {
 8001ae4:	e7ec      	b.n	8001ac0 <Error_Handler+0x8>
 8001ae6:	bf00      	nop
 8001ae8:	200007ac 	.word	0x200007ac
 8001aec:	40020400 	.word	0x40020400

08001af0 <set_motor_pwm>:
	return output;

}


void set_motor_pwm(int32_t duty, TIM_HandleTypeDef *htim_pwm, uint32_t ch1, uint32_t ch2) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
	// constrain duty cycle
	duty = (duty > MAX_DUTY_BOT) ? MAX_DUTY_BOT : duty;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b02:	dc09      	bgt.n	8001b18 <set_motor_pwm+0x28>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b0e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b12:	ee17 3a90 	vmov	r3, s15
 8001b16:	e000      	b.n	8001b1a <set_motor_pwm+0x2a>
 8001b18:	23c7      	movs	r3, #199	@ 0xc7
 8001b1a:	60fb      	str	r3, [r7, #12]
	duty = (duty < -MAX_DUTY_BOT) ? -MAX_DUTY_BOT : duty;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 8001b22:	db09      	blt.n	8001b38 <set_motor_pwm+0x48>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b32:	ee17 3a90 	vmov	r3, s15
 8001b36:	e001      	b.n	8001b3c <set_motor_pwm+0x4c>
 8001b38:	f06f 03c6 	mvn.w	r3, #198	@ 0xc6
 8001b3c:	60fb      	str	r3, [r7, #12]

	printf("%d\n", duty);
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	486f      	ldr	r0, [pc, #444]	@ (8001d00 <set_motor_pwm+0x210>)
 8001b42:	f006 f8f7 	bl	8007d34 <iprintf>
	if (duty >= 0) {
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db70      	blt.n	8001c2e <set_motor_pwm+0x13e>
		// Forward and coast
		// __HAL_TIM_SET_COMPARE(htim_pwm, ch1, (uint32_t )duty);
		// __HAL_TIM_SET_COMPARE(htim_pwm, ch2, 0);

		// Forward and brake
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, (uint32_t)TIM8_ARR_VALUE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <set_motor_pwm+0x6e>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f240 128f 	movw	r2, #399	@ 0x18f
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b5c:	e028      	b.n	8001bb0 <set_motor_pwm+0xc0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d105      	bne.n	8001b70 <set_motor_pwm+0x80>
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	f240 138f 	movw	r3, #399	@ 0x18f
 8001b6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b6e:	e01f      	b.n	8001bb0 <set_motor_pwm+0xc0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d105      	bne.n	8001b82 <set_motor_pwm+0x92>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	f240 138f 	movw	r3, #399	@ 0x18f
 8001b7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b80:	e016      	b.n	8001bb0 <set_motor_pwm+0xc0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d105      	bne.n	8001b94 <set_motor_pwm+0xa4>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f240 138f 	movw	r3, #399	@ 0x18f
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	e00d      	b.n	8001bb0 <set_motor_pwm+0xc0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d105      	bne.n	8001ba6 <set_motor_pwm+0xb6>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	f240 138f 	movw	r3, #399	@ 0x18f
 8001ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba4:	e004      	b.n	8001bb0 <set_motor_pwm+0xc0>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f240 138f 	movw	r3, #399	@ 0x18f
 8001bae:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t)(TIM8_ARR_VALUE - duty));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <set_motor_pwm+0xd6>
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f240 138f 	movw	r3, #399	@ 0x18f
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	6353      	str	r3, [r2, #52]	@ 0x34
	} else {
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, 0);
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
	}
}
 8001bc4:	e097      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t)(TIM8_ARR_VALUE - duty));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d107      	bne.n	8001bdc <set_motor_pwm+0xec>
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	f240 138f 	movw	r3, #399	@ 0x18f
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bda:	e08c      	b.n	8001cf6 <set_motor_pwm+0x206>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d107      	bne.n	8001bf2 <set_motor_pwm+0x102>
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	f240 138f 	movw	r3, #399	@ 0x18f
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bf0:	e081      	b.n	8001cf6 <set_motor_pwm+0x206>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d107      	bne.n	8001c08 <set_motor_pwm+0x118>
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	f240 138f 	movw	r3, #399	@ 0x18f
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	e076      	b.n	8001cf6 <set_motor_pwm+0x206>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d107      	bne.n	8001c1e <set_motor_pwm+0x12e>
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f240 138f 	movw	r3, #399	@ 0x18f
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1c:	e06b      	b.n	8001cf6 <set_motor_pwm+0x206>
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	f240 138f 	movw	r3, #399	@ 0x18f
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001c2c:	e063      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, 0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <set_motor_pwm+0x14e>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c3c:	e023      	b.n	8001c86 <set_motor_pwm+0x196>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d104      	bne.n	8001c4e <set_motor_pwm+0x15e>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c4c:	e01b      	b.n	8001c86 <set_motor_pwm+0x196>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d104      	bne.n	8001c5e <set_motor_pwm+0x16e>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001c5c:	e013      	b.n	8001c86 <set_motor_pwm+0x196>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d104      	bne.n	8001c6e <set_motor_pwm+0x17e>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6c:	e00b      	b.n	8001c86 <set_motor_pwm+0x196>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d104      	bne.n	8001c7e <set_motor_pwm+0x18e>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7c:	e003      	b.n	8001c86 <set_motor_pwm+0x196>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <set_motor_pwm+0x1a8>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	425a      	negs	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c96:	e02e      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d106      	bne.n	8001cac <set_motor_pwm+0x1bc>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4259      	negs	r1, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001caa:	e024      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d106      	bne.n	8001cc0 <set_motor_pwm+0x1d0>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4259      	negs	r1, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001cbe:	e01a      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d106      	bne.n	8001cd4 <set_motor_pwm+0x1e4>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4259      	negs	r1, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001cd2:	e010      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d106      	bne.n	8001ce8 <set_motor_pwm+0x1f8>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4259      	negs	r1, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001ce6:	e006      	b.n	8001cf6 <set_motor_pwm+0x206>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4259      	negs	r1, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001cf4:	e7ff      	b.n	8001cf6 <set_motor_pwm+0x206>
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	08008b80 	.word	0x08008b80

08001d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_MspInit+0x44>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <HAL_ADC_MspInit+0x74>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d123      	bne.n	8001db6 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_ADC_MspInit+0x78>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001d9e:	2308      	movs	r3, #8
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da2:	2303      	movs	r3, #3
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <HAL_ADC_MspInit+0x7c>)
 8001db2:	f001 fa71 	bl	8003298 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0b0      	sub	sp, #192	@ 0xc0
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2290      	movs	r2, #144	@ 0x90
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f006 f8e9 	bl	8007fc4 <memset>
  if(hi2c->Instance==I2C1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a44      	ldr	r2, [pc, #272]	@ (8001f08 <HAL_I2C_MspInit+0x13c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d13e      	bne.n	8001e7a <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fe0d 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001e18:	f7ff fe4e 	bl	8001ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a3a      	ldr	r2, [pc, #232]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b38      	ldr	r3, [pc, #224]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e58:	4619      	mov	r1, r3
 8001e5a:	482d      	ldr	r0, [pc, #180]	@ (8001f10 <HAL_I2C_MspInit+0x144>)
 8001e5c:	f001 fa1c 	bl	8003298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6c:	4b27      	ldr	r3, [pc, #156]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e78:	e041      	b.n	8001efe <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	@ (8001f14 <HAL_I2C_MspInit+0x148>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d13c      	bne.n	8001efe <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fdc9 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001ea0:	f7ff fe0a 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001eaa:	f043 0320 	orr.w	r3, r3, #32
 8001eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <HAL_I2C_MspInit+0x14c>)
 8001ee2:	f001 f9d9 	bl	8003298 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_I2C_MspInit+0x140>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	bf00      	nop
 8001f00:	37c0      	adds	r7, #192	@ 0xc0
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40005800 	.word	0x40005800
 8001f18:	40021400 	.word	0x40021400

08001f1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a33      	ldr	r2, [pc, #204]	@ (8002008 <HAL_SPI_MspInit+0xec>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d160      	bne.n	8002000 <HAL_SPI_MspInit+0xe4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a32      	ldr	r2, [pc, #200]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b30      	ldr	r3, [pc, #192]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6e:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a26      	ldr	r2, [pc, #152]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a20      	ldr	r2, [pc, #128]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_SPI_MspInit+0xf0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fae:	2305      	movs	r3, #5
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4815      	ldr	r0, [pc, #84]	@ (8002010 <HAL_SPI_MspInit+0xf4>)
 8001fba:	f001 f96d 	bl	8003298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fce:	2305      	movs	r3, #5
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480e      	ldr	r0, [pc, #56]	@ (8002014 <HAL_SPI_MspInit+0xf8>)
 8001fda:	f001 f95d 	bl	8003298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4807      	ldr	r0, [pc, #28]	@ (8002018 <HAL_SPI_MspInit+0xfc>)
 8001ffc:	f001 f94c 	bl	8003298 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002000:	bf00      	nop
 8002002:	3730      	adds	r7, #48	@ 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013000 	.word	0x40013000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021800 	.word	0x40021800

0800201c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08e      	sub	sp, #56	@ 0x38
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3f      	ldr	r2, [pc, #252]	@ (8002138 <HAL_TIM_Base_MspInit+0x11c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10c      	bne.n	8002058 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203e:	4b3f      	ldr	r3, [pc, #252]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	4a3e      	ldr	r2, [pc, #248]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6453      	str	r3, [r2, #68]	@ 0x44
 800204a:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002056:	e06b      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d129      	bne.n	80020b6 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002062:	4b36      	ldr	r3, [pc, #216]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a35      	ldr	r2, [pc, #212]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b33      	ldr	r3, [pc, #204]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b30      	ldr	r3, [pc, #192]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a2f      	ldr	r2, [pc, #188]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8002092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a4:	2301      	movs	r3, #1
 80020a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	4824      	ldr	r0, [pc, #144]	@ (8002140 <HAL_TIM_Base_MspInit+0x124>)
 80020b0:	f001 f8f2 	bl	8003298 <HAL_GPIO_Init>
}
 80020b4:	e03c      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a22      	ldr	r2, [pc, #136]	@ (8002144 <HAL_TIM_Base_MspInit+0x128>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d10c      	bne.n	80020da <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020c0:	4b1e      	ldr	r3, [pc, #120]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697b      	ldr	r3, [r7, #20]
}
 80020d8:	e02a      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1a      	ldr	r2, [pc, #104]	@ (8002148 <HAL_TIM_Base_MspInit+0x12c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d114      	bne.n	800210e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a14      	ldr	r2, [pc, #80]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2101      	movs	r1, #1
 8002100:	2036      	movs	r0, #54	@ 0x36
 8002102:	f001 f884 	bl	800320e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002106:	2036      	movs	r0, #54	@ 0x36
 8002108:	f001 f89d 	bl	8003246 <HAL_NVIC_EnableIRQ>
}
 800210c:	e010      	b.n	8002130 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_TIM_Base_MspInit+0x130>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10b      	bne.n	8002130 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	4a07      	ldr	r2, [pc, #28]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	6453      	str	r3, [r2, #68]	@ 0x44
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_TIM_Base_MspInit+0x120>)
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	bf00      	nop
 8002132:	3738      	adds	r7, #56	@ 0x38
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010000 	.word	0x40010000
 800213c:	40023800 	.word	0x40023800
 8002140:	40020400 	.word	0x40020400
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40001000 	.word	0x40001000
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2e      	ldr	r2, [pc, #184]	@ (8002228 <HAL_TIM_Encoder_MspInit+0xd8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d128      	bne.n	80021c4 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b2b      	ldr	r3, [pc, #172]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80021a2:	2330      	movs	r3, #48	@ 0x30
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b2:	2302      	movs	r3, #2
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	481c      	ldr	r0, [pc, #112]	@ (8002230 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021be:	f001 f86b 	bl	8003298 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021c2:	e02d      	b.n	8002220 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d128      	bne.n	8002220 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	4a16      	ldr	r2, [pc, #88]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b0e      	ldr	r3, [pc, #56]	@ (800222c <HAL_TIM_Encoder_MspInit+0xdc>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 80021fe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002210:	2302      	movs	r3, #2
 8002212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4807      	ldr	r0, [pc, #28]	@ (8002238 <HAL_TIM_Encoder_MspInit+0xe8>)
 800221c:	f001 f83c 	bl	8003298 <HAL_GPIO_Init>
}
 8002220:	bf00      	nop
 8002222:	3730      	adds	r7, #48	@ 0x30
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40000400 	.word	0x40000400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400
 8002234:	40000800 	.word	0x40000800
 8002238:	40020c00 	.word	0x40020c00

0800223c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_TIM_PWM_MspInit+0x38>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10b      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40014000 	.word	0x40014000
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	@ (80023f4 <HAL_TIM_MspPostInit+0x178>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11d      	bne.n	80022da <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229e:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a55      	ldr	r2, [pc, #340]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80022b6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	484a      	ldr	r0, [pc, #296]	@ (80023fc <HAL_TIM_MspPostInit+0x180>)
 80022d4:	f000 ffe0 	bl	8003298 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80022d8:	e088      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e2:	d11d      	bne.n	8002320 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b44      	ldr	r3, [pc, #272]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	4a43      	ldr	r2, [pc, #268]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f0:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80022fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230e:	2301      	movs	r3, #1
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4839      	ldr	r0, [pc, #228]	@ (8002400 <HAL_TIM_MspPostInit+0x184>)
 800231a:	f000 ffbd 	bl	8003298 <HAL_GPIO_Init>
}
 800231e:	e065      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_TIM_MspPostInit+0x188>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11c      	bne.n	8002364 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a32      	ldr	r2, [pc, #200]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002352:	2302      	movs	r3, #2
 8002354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4828      	ldr	r0, [pc, #160]	@ (8002400 <HAL_TIM_MspPostInit+0x184>)
 800235e:	f000 ff9b 	bl	8003298 <HAL_GPIO_Init>
}
 8002362:	e043      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a27      	ldr	r2, [pc, #156]	@ (8002408 <HAL_TIM_MspPostInit+0x18c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11d      	bne.n	80023aa <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	4b22      	ldr	r3, [pc, #136]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002386:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002398:	2303      	movs	r3, #3
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	481a      	ldr	r0, [pc, #104]	@ (800240c <HAL_TIM_MspPostInit+0x190>)
 80023a4:	f000 ff78 	bl	8003298 <HAL_GPIO_Init>
}
 80023a8:	e020      	b.n	80023ec <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <HAL_TIM_MspPostInit+0x194>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d11b      	bne.n	80023ec <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80023cc:	2360      	movs	r3, #96	@ 0x60
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023dc:	2303      	movs	r3, #3
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <HAL_TIM_MspPostInit+0x180>)
 80023e8:	f000 ff56 	bl	8003298 <HAL_GPIO_Init>
}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	@ 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40021000 	.word	0x40021000
 8002400:	40020000 	.word	0x40020000
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40010400 	.word	0x40010400
 800240c:	40020800 	.word	0x40020800
 8002410:	40014000 	.word	0x40014000

08002414 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b6      	sub	sp, #216	@ 0xd8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002430:	2290      	movs	r2, #144	@ 0x90
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f005 fdc5 	bl	8007fc4 <memset>
  if(huart->Instance==UART4)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4aa0      	ldr	r2, [pc, #640]	@ (80026c0 <HAL_UART_MspInit+0x2ac>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d13e      	bne.n	80024c2 <HAL_UART_MspInit+0xae>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002450:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002454:	4618      	mov	r0, r3
 8002456:	f002 fae9 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002460:	f7ff fb2a 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002464:	4b97      	ldr	r3, [pc, #604]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	4a96      	ldr	r2, [pc, #600]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800246a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002470:	4b94      	ldr	r3, [pc, #592]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002478:	633b      	str	r3, [r7, #48]	@ 0x30
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800247c:	4b91      	ldr	r3, [pc, #580]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	4a90      	ldr	r2, [pc, #576]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6313      	str	r3, [r2, #48]	@ 0x30
 8002488:	4b8e      	ldr	r3, [pc, #568]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002494:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002498:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024ae:	2308      	movs	r3, #8
 80024b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4883      	ldr	r0, [pc, #524]	@ (80026c8 <HAL_UART_MspInit+0x2b4>)
 80024bc:	f000 feec 	bl	8003298 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80024c0:	e151      	b.n	8002766 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a81      	ldr	r2, [pc, #516]	@ (80026cc <HAL_UART_MspInit+0x2b8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d160      	bne.n	800258e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 faa5 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80024e8:	f7ff fae6 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80024ec:	4b75      	ldr	r3, [pc, #468]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	4a74      	ldr	r2, [pc, #464]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f8:	4b72      	ldr	r3, [pc, #456]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002504:	4b6f      	ldr	r3, [pc, #444]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4a6e      	ldr	r2, [pc, #440]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002510:	4b6c      	ldr	r3, [pc, #432]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251c:	4b69      	ldr	r3, [pc, #420]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6313      	str	r3, [r2, #48]	@ 0x30
 8002528:	4b66      	ldr	r3, [pc, #408]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800254e:	2308      	movs	r3, #8
 8002550:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002554:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002558:	4619      	mov	r1, r3
 800255a:	485d      	ldr	r0, [pc, #372]	@ (80026d0 <HAL_UART_MspInit+0x2bc>)
 800255c:	f000 fe9c 	bl	8003298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002564:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800257a:	2308      	movs	r3, #8
 800257c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002584:	4619      	mov	r1, r3
 8002586:	4850      	ldr	r0, [pc, #320]	@ (80026c8 <HAL_UART_MspInit+0x2b4>)
 8002588:	f000 fe86 	bl	8003298 <HAL_GPIO_Init>
}
 800258c:	e0eb      	b.n	8002766 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a50      	ldr	r2, [pc, #320]	@ (80026d4 <HAL_UART_MspInit+0x2c0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d151      	bne.n	800263c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002598:	2340      	movs	r3, #64	@ 0x40
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800259c:	2300      	movs	r3, #0
 800259e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fa41 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80025b0:	f7ff fa82 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b4:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	4a42      	ldr	r2, [pc, #264]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c0:	4b40      	ldr	r3, [pc, #256]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4b3d      	ldr	r3, [pc, #244]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a3c      	ldr	r2, [pc, #240]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d8:	4b3a      	ldr	r3, [pc, #232]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025fe:	2304      	movs	r3, #4
 8002600:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002608:	4619      	mov	r1, r3
 800260a:	4831      	ldr	r0, [pc, #196]	@ (80026d0 <HAL_UART_MspInit+0x2bc>)
 800260c:	f000 fe44 	bl	8003298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002610:	2340      	movs	r3, #64	@ 0x40
 8002612:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002628:	2307      	movs	r3, #7
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002632:	4619      	mov	r1, r3
 8002634:	4826      	ldr	r0, [pc, #152]	@ (80026d0 <HAL_UART_MspInit+0x2bc>)
 8002636:	f000 fe2f 	bl	8003298 <HAL_GPIO_Init>
}
 800263a:	e094      	b.n	8002766 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	@ (80026d8 <HAL_UART_MspInit+0x2c4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d14c      	bne.n	80026e0 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002652:	4618      	mov	r0, r3
 8002654:	f002 f9ea 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 800265e:	f7ff fa2b 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002662:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266c:	6413      	str	r3, [r2, #64]	@ 0x40
 800266e:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267a:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002680:	f043 0308 	orr.w	r3, r3, #8
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_UART_MspInit+0x2b0>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002692:	2360      	movs	r3, #96	@ 0x60
 8002694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026aa:	2307      	movs	r3, #7
 80026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4809      	ldr	r0, [pc, #36]	@ (80026dc <HAL_UART_MspInit+0x2c8>)
 80026b8:	f000 fdee 	bl	8003298 <HAL_GPIO_Init>
}
 80026bc:	e053      	b.n	8002766 <HAL_UART_MspInit+0x352>
 80026be:	bf00      	nop
 80026c0:	40004c00 	.word	0x40004c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40005000 	.word	0x40005000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40011000 	.word	0x40011000
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <HAL_UART_MspInit+0x35c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13d      	bne.n	8002766 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 f996 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002706:	f7ff f9d7 	bl	8001ab8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <HAL_UART_MspInit+0x360>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	4a19      	ldr	r2, [pc, #100]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6413      	str	r3, [r2, #64]	@ 0x40
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002722:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002728:	f043 0308 	orr.w	r3, r3, #8
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_UART_MspInit+0x360>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800273a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800273e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002754:	2307      	movs	r3, #7
 8002756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	@ (8002778 <HAL_UART_MspInit+0x364>)
 8002762:	f000 fd99 	bl	8003298 <HAL_GPIO_Init>
}
 8002766:	bf00      	nop
 8002768:	37d8      	adds	r7, #216	@ 0xd8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40004800 	.word	0x40004800
 8002774:	40023800 	.word	0x40023800
 8002778:	40020c00 	.word	0x40020c00

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HardFault_Handler+0x2c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <HardFault_Handler+0x2c>)
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HardFault_Handler+0x2c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a07      	ldr	r2, [pc, #28]	@ (80027b4 <HardFault_Handler+0x30>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d9f5      	bls.n	8002788 <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 800279c:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <HardFault_Handler+0x2c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80027a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027a6:	4804      	ldr	r0, [pc, #16]	@ (80027b8 <HardFault_Handler+0x34>)
 80027a8:	f000 ff3b 	bl	8003622 <HAL_GPIO_TogglePin>
  {
 80027ac:	e7ec      	b.n	8002788 <HardFault_Handler+0x4>
 80027ae:	bf00      	nop
 80027b0:	200007b0 	.word	0x200007b0
 80027b4:	0001869f 	.word	0x0001869f
 80027b8:	40020400 	.word	0x40020400

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <MemManage_Handler+0x4>

080027c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <BusFault_Handler+0x4>

080027cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <UsageFault_Handler+0x4>

080027d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002802:	f000 f92d 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <TIM6_DAC_IRQHandler+0x10>)
 8002812:	f003 f9f5 	bl	8005c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000354 	.word	0x20000354

08002820 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
	}

return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e009      	b.n	8002880 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3301      	adds	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbf1      	blt.n	800286c <_write+0x12>
	}
	return len;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_close>:

int _close(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	return -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028ba:	605a      	str	r2, [r3, #4]
	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_isatty>:

int _isatty(int file)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
	return 1;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002904:	4a14      	ldr	r2, [pc, #80]	@ (8002958 <_sbrk+0x5c>)
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <_sbrk+0x60>)
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002910:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <_sbrk+0x64>)
 800291a:	4a12      	ldr	r2, [pc, #72]	@ (8002964 <_sbrk+0x68>)
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <_sbrk+0x64>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	429a      	cmp	r2, r3
 800292a:	d207      	bcs.n	800293c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800292c:	f005 fb98 	bl	8008060 <__errno>
 8002930:	4603      	mov	r3, r0
 8002932:	220c      	movs	r2, #12
 8002934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	e009      	b.n	8002950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800293c:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002942:	4b07      	ldr	r3, [pc, #28]	@ (8002960 <_sbrk+0x64>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <_sbrk+0x64>)
 800294c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20080000 	.word	0x20080000
 800295c:	00000400 	.word	0x00000400
 8002960:	200007b4 	.word	0x200007b4
 8002964:	20000908 	.word	0x20000908

08002968 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <SystemInit+0x28>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	4a07      	ldr	r2, [pc, #28]	@ (8002990 <SystemInit+0x28>)
 8002974:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002978:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <SystemInit+0x28>)
 800297e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002982:	609a      	str	r2, [r3, #8]
#endif
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002998:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800299a:	e003      	b.n	80029a4 <LoopCopyDataInit>

0800299c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800299e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029a2:	3104      	adds	r1, #4

080029a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029a4:	480b      	ldr	r0, [pc, #44]	@ (80029d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029a6:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029ac:	d3f6      	bcc.n	800299c <CopyDataInit>
  ldr  r2, =_sbss
 80029ae:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029b0:	e002      	b.n	80029b8 <LoopFillZerobss>

080029b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029b4:	f842 3b04 	str.w	r3, [r2], #4

080029b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029bc:	d3f9      	bcc.n	80029b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029be:	f7ff ffd3 	bl	8002968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c2:	f005 fb53 	bl	800806c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029c6:	f7fd fe65 	bl	8000694 <main>
  bx  lr    
 80029ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029cc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80029d0:	08008be0 	.word	0x08008be0
  ldr  r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029d8:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80029dc:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80029e0:	20000908 	.word	0x20000908

080029e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC_IRQHandler>

080029e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ea:	2003      	movs	r0, #3
 80029ec:	f000 fc04 	bl	80031f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f000 f805 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f6:	f7ff f985 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_InitTick+0x54>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_InitTick+0x58>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fc2d 	bl	800327e <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00e      	b.n	8002a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d80a      	bhi.n	8002a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f000 fbe7 	bl	800320e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4a06      	ldr	r2, [pc, #24]	@ (8002a5c <HAL_InitTick+0x5c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	@ (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008
 8002a84:	200007b8 	.word	0x200007b8

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200007b8 	.word	0x200007b8

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_Delay+0x44>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e031      	b.n	8002b62 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff f920 	bl	8001d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d116      	bne.n	8002b54 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <HAL_ADC_Init+0x84>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f970 	bl	8002e1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b52:	e001      	b.n	8002b58 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	ffffeefd 	.word	0xffffeefd

08002b70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1c>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e136      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x28a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d93a      	bls.n	8002c12 <HAL_ADC_ConfigChannel+0xa2>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ba4:	d035      	beq.n	8002c12 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68d9      	ldr	r1, [r3, #12]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	400a      	ands	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a8d      	ldr	r2, [pc, #564]	@ (8002e08 <HAL_ADC_ConfigChannel+0x298>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10a      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	061a      	lsls	r2, r3, #24
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bea:	e035      	b.n	8002c58 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68d9      	ldr	r1, [r3, #12]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4403      	add	r3, r0
 8002c04:	3b1e      	subs	r3, #30
 8002c06:	409a      	lsls	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c10:	e022      	b.n	8002c58 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6919      	ldr	r1, [r3, #16]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	2207      	movs	r2, #7
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	400a      	ands	r2, r1
 8002c34:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6919      	ldr	r1, [r3, #16]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4403      	add	r3, r0
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d824      	bhi.n	8002caa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	3b05      	subs	r3, #5
 8002c72:	221f      	movs	r2, #31
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	400a      	ands	r2, r1
 8002c80:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b05      	subs	r3, #5
 8002c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ca8:	e04c      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d824      	bhi.n	8002cfc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b23      	subs	r3, #35	@ 0x23
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b23      	subs	r3, #35	@ 0x23
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cfa:	e023      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b41      	subs	r3, #65	@ 0x41
 8002d0e:	221f      	movs	r2, #31
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	3b41      	subs	r3, #65	@ 0x41
 8002d38:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a30      	ldr	r2, [pc, #192]	@ (8002e0c <HAL_ADC_ConfigChannel+0x29c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d10a      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1f4>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d56:	d105      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d58:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d5e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002d62:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a28      	ldr	r2, [pc, #160]	@ (8002e0c <HAL_ADC_ConfigChannel+0x29c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10f      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x21e>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d10b      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d76:	4b26      	ldr	r3, [pc, #152]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d80:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d82:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a22      	ldr	r2, [pc, #136]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	@ (8002e0c <HAL_ADC_ConfigChannel+0x29c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d12b      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x280>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_ADC_ConfigChannel+0x298>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <HAL_ADC_ConfigChannel+0x23a>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b11      	cmp	r3, #17
 8002da8:	d122      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002db0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002db4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dc0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	@ (8002e08 <HAL_ADC_ConfigChannel+0x298>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d111      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_ADC_ConfigChannel+0x2a4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a11      	ldr	r2, [pc, #68]	@ (8002e18 <HAL_ADC_ConfigChannel+0x2a8>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9a      	lsrs	r2, r3, #18
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002de2:	e002      	b.n	8002dea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f9      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	10000012 	.word	0x10000012
 8002e0c:	40012000 	.word	0x40012000
 8002e10:	40012300 	.word	0x40012300
 8002e14:	20000000 	.word	0x20000000
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e24:	4b78      	ldr	r3, [pc, #480]	@ (8003008 <ADC_Init+0x1ec>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a77      	ldr	r2, [pc, #476]	@ (8003008 <ADC_Init+0x1ec>)
 8002e2a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002e2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e30:	4b75      	ldr	r3, [pc, #468]	@ (8003008 <ADC_Init+0x1ec>)
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4973      	ldr	r1, [pc, #460]	@ (8003008 <ADC_Init+0x1ec>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	4a58      	ldr	r2, [pc, #352]	@ (800300c <ADC_Init+0x1f0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ebe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e00f      	b.n	8002f16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0202 	bic.w	r2, r2, #2
 8002f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	005a      	lsls	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01b      	beq.n	8002f7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	035a      	lsls	r2, r3, #13
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e007      	b.n	8002f8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	051a      	lsls	r2, r3, #20
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fce:	025a      	lsls	r2, r3, #9
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	029a      	lsls	r2, r3, #10
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012300 	.word	0x40012300
 800300c:	0f000001 	.word	0x0f000001

08003010 <__NVIC_SetPriorityGrouping>:
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <__NVIC_SetPriorityGrouping+0x40>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 800303a:	4313      	orrs	r3, r2
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <__NVIC_SetPriorityGrouping+0x40>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00
 8003054:	05fa0000 	.word	0x05fa0000

08003058 <__NVIC_GetPriorityGrouping>:
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4907      	ldr	r1, [pc, #28]	@ (80030ac <__NVIC_EnableIRQ+0x38>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_DisableIRQ>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	db12      	blt.n	80030e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 021f 	and.w	r2, r3, #31
 80030c8:	490a      	ldr	r1, [pc, #40]	@ (80030f4 <__NVIC_DisableIRQ+0x44>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2001      	movs	r0, #1
 80030d2:	fa00 f202 	lsl.w	r2, r0, r2
 80030d6:	3320      	adds	r3, #32
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030dc:	f3bf 8f4f 	dsb	sy
}
 80030e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030e2:	f3bf 8f6f 	isb	sy
}
 80030e6:	bf00      	nop
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	@ (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	@ (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	@ 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	@ 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <SysTick_Config>:
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c4:	d301      	bcc.n	80031ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00f      	b.n	80031ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ca:	4a0a      	ldr	r2, [pc, #40]	@ (80031f4 <SysTick_Config+0x40>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d2:	210f      	movs	r1, #15
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f7ff ff8e 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <SysTick_Config+0x40>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e2:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <SysTick_Config+0x40>)
 80031e4:	2207      	movs	r2, #7
 80031e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	e000e010 	.word	0xe000e010

080031f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff05 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003220:	f7ff ff1a 	bl	8003058 <__NVIC_GetPriorityGrouping>
 8003224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f7ff ff8e 	bl	800314c <NVIC_EncodePriority>
 8003230:	4602      	mov	r2, r0
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff5d 	bl	80030f8 <__NVIC_SetPriority>
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff0d 	bl	8003074 <__NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff1d 	bl	80030b0 <__NVIC_DisableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff94 	bl	80031b4 <SysTick_Config>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	e175      	b.n	80035a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032b8:	2201      	movs	r2, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	f040 8164 	bne.w	800359e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d005      	beq.n	80032ee <HAL_GPIO_Init+0x56>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d130      	bne.n	8003350 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 0201 	and.w	r2, r3, #1
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b03      	cmp	r3, #3
 800335a:	d017      	beq.n	800338c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d123      	bne.n	80033e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	08da      	lsrs	r2, r3, #3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	220f      	movs	r2, #15
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	69b9      	ldr	r1, [r7, #24]
 80033dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0203 	and.w	r2, r3, #3
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80be 	beq.w	800359e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003422:	4b66      	ldr	r3, [pc, #408]	@ (80035bc <HAL_GPIO_Init+0x324>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	4a65      	ldr	r2, [pc, #404]	@ (80035bc <HAL_GPIO_Init+0x324>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800342c:	6453      	str	r3, [r2, #68]	@ 0x44
 800342e:	4b63      	ldr	r3, [pc, #396]	@ (80035bc <HAL_GPIO_Init+0x324>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800343a:	4a61      	ldr	r2, [pc, #388]	@ (80035c0 <HAL_GPIO_Init+0x328>)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3302      	adds	r3, #2
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a58      	ldr	r2, [pc, #352]	@ (80035c4 <HAL_GPIO_Init+0x32c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d037      	beq.n	80034d6 <HAL_GPIO_Init+0x23e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a57      	ldr	r2, [pc, #348]	@ (80035c8 <HAL_GPIO_Init+0x330>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d031      	beq.n	80034d2 <HAL_GPIO_Init+0x23a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a56      	ldr	r2, [pc, #344]	@ (80035cc <HAL_GPIO_Init+0x334>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02b      	beq.n	80034ce <HAL_GPIO_Init+0x236>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a55      	ldr	r2, [pc, #340]	@ (80035d0 <HAL_GPIO_Init+0x338>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x232>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a54      	ldr	r2, [pc, #336]	@ (80035d4 <HAL_GPIO_Init+0x33c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x22e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a53      	ldr	r2, [pc, #332]	@ (80035d8 <HAL_GPIO_Init+0x340>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x22a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a52      	ldr	r2, [pc, #328]	@ (80035dc <HAL_GPIO_Init+0x344>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x226>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a51      	ldr	r2, [pc, #324]	@ (80035e0 <HAL_GPIO_Init+0x348>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x222>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a50      	ldr	r2, [pc, #320]	@ (80035e4 <HAL_GPIO_Init+0x34c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x21e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x21a>
 80034ae:	2309      	movs	r3, #9
 80034b0:	e012      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034b2:	230a      	movs	r3, #10
 80034b4:	e010      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034b6:	2308      	movs	r3, #8
 80034b8:	e00e      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034ba:	2307      	movs	r3, #7
 80034bc:	e00c      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034be:	2306      	movs	r3, #6
 80034c0:	e00a      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034c2:	2305      	movs	r3, #5
 80034c4:	e008      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034c6:	2304      	movs	r3, #4
 80034c8:	e006      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034ca:	2303      	movs	r3, #3
 80034cc:	e004      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_GPIO_Init+0x240>
 80034d6:	2300      	movs	r3, #0
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	f002 0203 	and.w	r2, r2, #3
 80034de:	0092      	lsls	r2, r2, #2
 80034e0:	4093      	lsls	r3, r2
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034e8:	4935      	ldr	r1, [pc, #212]	@ (80035c0 <HAL_GPIO_Init+0x328>)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	3302      	adds	r3, #2
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ec <HAL_GPIO_Init+0x354>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800351a:	4a34      	ldr	r2, [pc, #208]	@ (80035ec <HAL_GPIO_Init+0x354>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003520:	4b32      	ldr	r3, [pc, #200]	@ (80035ec <HAL_GPIO_Init+0x354>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003544:	4a29      	ldr	r2, [pc, #164]	@ (80035ec <HAL_GPIO_Init+0x354>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800354a:	4b28      	ldr	r3, [pc, #160]	@ (80035ec <HAL_GPIO_Init+0x354>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800356e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_GPIO_Init+0x354>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <HAL_GPIO_Init+0x354>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003598:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <HAL_GPIO_Init+0x354>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3301      	adds	r3, #1
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	f67f ae86 	bls.w	80032b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3724      	adds	r7, #36	@ 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40013800 	.word	0x40013800
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40020400 	.word	0x40020400
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40020c00 	.word	0x40020c00
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40021400 	.word	0x40021400
 80035dc:	40021800 	.word	0x40021800
 80035e0:	40021c00 	.word	0x40021c00
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40022400 	.word	0x40022400
 80035ec:	40013c00 	.word	0x40013c00

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800360c:	e003      	b.n	8003616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800360e:	887b      	ldrh	r3, [r7, #2]
 8003610:	041a      	lsls	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	619a      	str	r2, [r3, #24]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003634:	887a      	ldrh	r2, [r7, #2]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	041a      	lsls	r2, r3, #16
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43d9      	mvns	r1, r3
 8003640:	887b      	ldrh	r3, [r7, #2]
 8003642:	400b      	ands	r3, r1
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	619a      	str	r2, [r3, #24]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e08b      	b.n	8003782 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fe fba4 	bl	8001dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	@ 0x24
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	e006      	b.n	80036e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d108      	bne.n	80036fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e007      	b.n	800370a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003708:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <HAL_I2C_Init+0x134>)
 8003716:	430b      	orrs	r3, r1
 8003718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69d9      	ldr	r1, [r3, #28]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	02008000 	.word	0x02008000

08003790 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	460b      	mov	r3, r1
 80037a4:	813b      	strh	r3, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	f040 80f9 	bne.w	80039aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_I2C_Mem_Write+0x34>
 80037be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0ed      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Mem_Write+0x4e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e0e6      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e6:	f7ff f94f 	bl	8002a88 <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2319      	movs	r3, #25
 80037f2:	2201      	movs	r2, #1
 80037f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f955 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d1      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2221      	movs	r2, #33	@ 0x21
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2240      	movs	r2, #64	@ 0x40
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003830:	88f8      	ldrh	r0, [r7, #6]
 8003832:	893a      	ldrh	r2, [r7, #8]
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4603      	mov	r3, r0
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f8b9 	bl	80039b8 <I2C_RequestMemoryWrite>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0a9      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2bff      	cmp	r3, #255	@ 0xff
 8003860:	d90e      	bls.n	8003880 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	22ff      	movs	r2, #255	@ 0xff
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386c:	b2da      	uxtb	r2, r3
 800386e:	8979      	ldrh	r1, [r7, #10]
 8003870:	2300      	movs	r3, #0
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fad9 	bl	8003e30 <I2C_TransferConfig>
 800387e:	e00f      	b.n	80038a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	b2da      	uxtb	r2, r3
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fac8 	bl	8003e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f958 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e07b      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d034      	beq.n	8003958 <HAL_I2C_Mem_Write+0x1c8>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d130      	bne.n	8003958 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fc:	2200      	movs	r2, #0
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f8d1 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e04d      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2bff      	cmp	r3, #255	@ 0xff
 8003918:	d90e      	bls.n	8003938 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	@ 0xff
 800391e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	b2da      	uxtb	r2, r3
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fa7d 	bl	8003e30 <I2C_TransferConfig>
 8003936:	e00f      	b.n	8003958 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	b2da      	uxtb	r2, r3
 8003948:	8979      	ldrh	r1, [r7, #10]
 800394a:	2300      	movs	r3, #0
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa6c 	bl	8003e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d19e      	bne.n	80038a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f93e 	bl	8003be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e01a      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2220      	movs	r2, #32
 800397c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b0a      	ldr	r3, [pc, #40]	@ (80039b4 <HAL_I2C_Mem_Write+0x224>)
 800398a:	400b      	ands	r3, r1
 800398c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	fe00e800 	.word	0xfe00e800

080039b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	4b20      	ldr	r3, [pc, #128]	@ (8003a5c <I2C_RequestMemoryWrite+0xa4>)
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa25 	bl	8003e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8b5 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e02c      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a0a:	e015      	b.n	8003a38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	69b9      	ldr	r1, [r7, #24]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f89b 	bl	8003b5a <I2C_WaitOnTXISFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e012      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2180      	movs	r1, #128	@ 0x80
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f830 	bl	8003aa8 <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	80002000 	.word	0x80002000

08003a60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d103      	bne.n	8003a7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d007      	beq.n	8003a9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	619a      	str	r2, [r3, #24]
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ab8:	e03b      	b.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f8d6 	bl	8003c70 <I2C_IsErrorOccurred>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e041      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d02d      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe ffd7 	bl	8002a88 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x44>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d122      	bne.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4013      	ands	r3, r2
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d113      	bne.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00f      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0b4      	beq.n	8003aba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b66:	e033      	b.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f87f 	bl	8003c70 <I2C_IsErrorOccurred>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e031      	b.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d025      	beq.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fe ff80 	bl	8002a88 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11a      	bne.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d013      	beq.n	8003bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e007      	b.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d1c4      	bne.n	8003b68 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf4:	e02f      	b.n	8003c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f838 	bl	8003c70 <I2C_IsErrorOccurred>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e02d      	b.n	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fe ff3d 	bl	8002a88 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11a      	bne.n	8003c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d013      	beq.n	8003c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f043 0220 	orr.w	r2, r3, #32
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e007      	b.n	8003c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d1c8      	bne.n	8003bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d068      	beq.n	8003d6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ca4:	e049      	b.n	8003d3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d045      	beq.n	8003d3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe feeb 	bl	8002a88 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_IsErrorOccurred+0x54>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d13a      	bne.n	8003d3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce6:	d121      	bne.n	8003d2c <I2C_IsErrorOccurred+0xbc>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cee:	d01d      	beq.n	8003d2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d01a      	beq.n	8003d2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d06:	f7fe febf 	bl	8002a88 <HAL_GetTick>
 8003d0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d0c:	e00e      	b.n	8003d2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d0e:	f7fe febb 	bl	8002a88 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b19      	cmp	r3, #25
 8003d1a:	d907      	bls.n	8003d2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	f043 0320 	orr.w	r3, r3, #32
 8003d22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d2a:	e006      	b.n	8003d3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d1e9      	bne.n	8003d0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d003      	beq.n	8003d50 <I2C_IsErrorOccurred+0xe0>
 8003d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0aa      	beq.n	8003ca6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01c      	beq.n	8003e1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fe3b 	bl	8003a60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <I2C_IsErrorOccurred+0x1bc>)
 8003df6:	400b      	ands	r3, r1
 8003df8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3728      	adds	r7, #40	@ 0x28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	fe00e800 	.word	0xfe00e800

08003e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	817b      	strh	r3, [r7, #10]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e48:	7a7b      	ldrb	r3, [r7, #9]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	0d5b      	lsrs	r3, r3, #21
 8003e6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e6e:	4b08      	ldr	r3, [pc, #32]	@ (8003e90 <I2C_TransferConfig+0x60>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	43db      	mvns	r3, r3
 8003e74:	ea02 0103 	and.w	r1, r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	03ff63ff 	.word	0x03ff63ff

08003e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d138      	bne.n	8003f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e032      	b.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	@ 0x24
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d139      	bne.n	8003fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e033      	b.n	8003fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2224      	movs	r2, #36	@ 0x24
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a04      	ldr	r2, [pc, #16]	@ (8003fe0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000

08003fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b23      	ldr	r3, [pc, #140]	@ (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	4a22      	ldr	r2, [pc, #136]	@ (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffa:	4b20      	ldr	r3, [pc, #128]	@ (800407c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004012:	f7fe fd39 	bl	8002a88 <HAL_GetTick>
 8004016:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004018:	e009      	b.n	800402e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800401a:	f7fe fd35 	bl	8002a88 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004028:	d901      	bls.n	800402e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e022      	b.n	8004074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800402e:	4b14      	ldr	r3, [pc, #80]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403a:	d1ee      	bne.n	800401a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800403c:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a0f      	ldr	r2, [pc, #60]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004048:	f7fe fd1e 	bl	8002a88 <HAL_GetTick>
 800404c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800404e:	e009      	b.n	8004064 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004050:	f7fe fd1a 	bl	8002a88 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800405e:	d901      	bls.n	8004064 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e007      	b.n	8004074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004064:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004070:	d1ee      	bne.n	8004050 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000

08004084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e29b      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8087 	beq.w	80041b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a8:	4b96      	ldr	r3, [pc, #600]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d00c      	beq.n	80040ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b4:	4b93      	ldr	r3, [pc, #588]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d112      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62>
 80040c0:	4b90      	ldr	r3, [pc, #576]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d06c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x130>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d168      	bne.n	80041b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e275      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x7a>
 80040f0:	4b84      	ldr	r3, [pc, #528]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a83      	ldr	r2, [pc, #524]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e02e      	b.n	800415c <HAL_RCC_OscConfig+0xd8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x9c>
 8004106:	4b7f      	ldr	r3, [pc, #508]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7e      	ldr	r2, [pc, #504]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800410c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b7c      	ldr	r3, [pc, #496]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7b      	ldr	r2, [pc, #492]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xd8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0xc0>
 800412a:	4b76      	ldr	r3, [pc, #472]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a75      	ldr	r2, [pc, #468]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b73      	ldr	r3, [pc, #460]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a72      	ldr	r2, [pc, #456]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xd8>
 8004144:	4b6f      	ldr	r3, [pc, #444]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6e      	ldr	r2, [pc, #440]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b6c      	ldr	r3, [pc, #432]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6b      	ldr	r2, [pc, #428]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fc90 	bl	8002a88 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800416c:	f7fe fc8c 	bl	8002a88 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	@ 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e229      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	4b61      	ldr	r3, [pc, #388]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xe8>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fe fc7c 	bl	8002a88 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fe fc78 	bl	8002a88 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e215      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	4b57      	ldr	r3, [pc, #348]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x110>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d069      	beq.n	8004296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c2:	4b50      	ldr	r3, [pc, #320]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d11c      	bne.n	8004214 <HAL_RCC_OscConfig+0x190>
 80041da:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	4b47      	ldr	r3, [pc, #284]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x17a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1e9      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fe:	4b41      	ldr	r3, [pc, #260]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	493d      	ldr	r1, [pc, #244]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	e040      	b.n	8004296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800421c:	4b39      	ldr	r3, [pc, #228]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a38      	ldr	r2, [pc, #224]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe fc2e 	bl	8002a88 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fe fc2a 	bl	8002a88 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1c7      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424e:	4b2d      	ldr	r3, [pc, #180]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4929      	ldr	r1, [pc, #164]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
 8004262:	e018      	b.n	8004296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004264:	4b27      	ldr	r3, [pc, #156]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a26      	ldr	r2, [pc, #152]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fe fc0a 	bl	8002a88 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004278:	f7fe fc06 	bl	8002a88 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1a3      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d038      	beq.n	8004314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d019      	beq.n	80042de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042aa:	4b16      	ldr	r3, [pc, #88]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ae:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe fbe7 	bl	8002a88 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042be:	f7fe fbe3 	bl	8002a88 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e180      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x23a>
 80042dc:	e01a      	b.n	8004314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e2:	4a08      	ldr	r2, [pc, #32]	@ (8004304 <HAL_RCC_OscConfig+0x280>)
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fe fbcd 	bl	8002a88 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fe fbc9 	bl	8002a88 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d903      	bls.n	8004308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e166      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
 8004304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	4b92      	ldr	r3, [pc, #584]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ee      	bne.n	80042f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a4 	beq.w	800446a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	4b8c      	ldr	r3, [pc, #560]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b89      	ldr	r3, [pc, #548]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	4a88      	ldr	r2, [pc, #544]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	@ 0x40
 800433a:	4b86      	ldr	r3, [pc, #536]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	4b83      	ldr	r3, [pc, #524]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d118      	bne.n	8004388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004356:	4b80      	ldr	r3, [pc, #512]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7f      	ldr	r2, [pc, #508]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 800435c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004362:	f7fe fb91 	bl	8002a88 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436a:	f7fe fb8d 	bl	8002a88 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b64      	cmp	r3, #100	@ 0x64
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e12a      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437c:	4b76      	ldr	r3, [pc, #472]	@ (8004558 <HAL_RCC_OscConfig+0x4d4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d106      	bne.n	800439e <HAL_RCC_OscConfig+0x31a>
 8004390:	4b70      	ldr	r3, [pc, #448]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004394:	4a6f      	ldr	r2, [pc, #444]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	@ 0x70
 800439c:	e02d      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x33c>
 80043a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b2:	4b68      	ldr	r3, [pc, #416]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	4a67      	ldr	r2, [pc, #412]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043b8:	f023 0304 	bic.w	r3, r3, #4
 80043bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043be:	e01c      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x35e>
 80043c8:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	4a61      	ldr	r2, [pc, #388]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	e00b      	b.n	80043fa <HAL_RCC_OscConfig+0x376>
 80043e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ee:	4b59      	ldr	r3, [pc, #356]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	4a58      	ldr	r2, [pc, #352]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d015      	beq.n	800442e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fe fb41 	bl	8002a88 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe fb3d 	bl	8002a88 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0d8      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b4c      	ldr	r3, [pc, #304]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCC_OscConfig+0x386>
 800442c:	e014      	b.n	8004458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fe fb2b 	bl	8002a88 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fe fb27 	bl	8002a88 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0c2      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	4b41      	ldr	r3, [pc, #260]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ee      	bne.n	8004436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d105      	bne.n	800446a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445e:	4b3d      	ldr	r3, [pc, #244]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80ae 	beq.w	80045d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004474:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d06d      	beq.n	800455c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d14b      	bne.n	8004520 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b32      	ldr	r3, [pc, #200]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a31      	ldr	r2, [pc, #196]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe faf8 	bl	8002a88 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe faf4 	bl	8002a88 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e091      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	4b29      	ldr	r3, [pc, #164]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	071b      	lsls	r3, r3, #28
 80044e6:	491b      	ldr	r1, [pc, #108]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe fac6 	bl	8002a88 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fe fac2 	bl	8002a88 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e05f      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x47c>
 800451e:	e057      	b.n	80045d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0b      	ldr	r2, [pc, #44]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe faac 	bl	8002a88 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe faa8 	bl	8002a88 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e045      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <HAL_RCC_OscConfig+0x4d0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x4b0>
 8004552:	e03d      	b.n	80045d0 <HAL_RCC_OscConfig+0x54c>
 8004554:	40023800 	.word	0x40023800
 8004558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <HAL_RCC_OscConfig+0x558>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d030      	beq.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d129      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d122      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004592:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004594:	4293      	cmp	r3, r2
 8004596:	d119      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	3b01      	subs	r3, #1
 80045a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d10f      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d107      	bne.n	80045cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800

080045e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0d0      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f8:	4b6a      	ldr	r3, [pc, #424]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d910      	bls.n	8004628 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b67      	ldr	r3, [pc, #412]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 020f 	bic.w	r2, r3, #15
 800460e:	4965      	ldr	r1, [pc, #404]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b63      	ldr	r3, [pc, #396]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0b8      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004640:	4b59      	ldr	r3, [pc, #356]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a58      	ldr	r2, [pc, #352]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800464a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004658:	4b53      	ldr	r3, [pc, #332]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a52      	ldr	r2, [pc, #328]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800465e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004662:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004664:	4b50      	ldr	r3, [pc, #320]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	494d      	ldr	r1, [pc, #308]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d040      	beq.n	8004704 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d115      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07f      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b41      	ldr	r3, [pc, #260]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e073      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	4b3d      	ldr	r3, [pc, #244]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06b      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b39      	ldr	r3, [pc, #228]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4936      	ldr	r1, [pc, #216]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fe f9d8 	bl	8002a88 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fe f9d4 	bl	8002a88 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e053      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b2d      	ldr	r3, [pc, #180]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004704:	4b27      	ldr	r3, [pc, #156]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d210      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b24      	ldr	r3, [pc, #144]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 020f 	bic.w	r2, r3, #15
 800471a:	4922      	ldr	r1, [pc, #136]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b20      	ldr	r3, [pc, #128]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e032      	b.n	800479a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004740:	4b19      	ldr	r3, [pc, #100]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4916      	ldr	r1, [pc, #88]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800475e:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	490e      	ldr	r1, [pc, #56]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004772:	f000 f821 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8004776:	4602      	mov	r2, r0
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	490a      	ldr	r1, [pc, #40]	@ (80047ac <HAL_RCC_ClockConfig+0x1cc>)
 8004784:	5ccb      	ldrb	r3, [r1, r3]
 8004786:	fa22 f303 	lsr.w	r3, r2, r3
 800478a:	4a09      	ldr	r2, [pc, #36]	@ (80047b0 <HAL_RCC_ClockConfig+0x1d0>)
 800478c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe f934 	bl	8002a00 <HAL_InitTick>

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023c00 	.word	0x40023c00
 80047a8:	40023800 	.word	0x40023800
 80047ac:	08008b84 	.word	0x08008b84
 80047b0:	20000000 	.word	0x20000000
 80047b4:	20000004 	.word	0x20000004

080047b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047bc:	b094      	sub	sp, #80	@ 0x50
 80047be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c4:	2300      	movs	r3, #0
 80047c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c8:	2300      	movs	r3, #0
 80047ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d0:	4b79      	ldr	r3, [pc, #484]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d00d      	beq.n	80047f8 <HAL_RCC_GetSysClockFreq+0x40>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	f200 80e1 	bhi.w	80049a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x34>
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ea:	e0db      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b73      	ldr	r3, [pc, #460]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f0:	e0db      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047f2:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80047f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047f6:	e0d8      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f8:	4b6f      	ldr	r3, [pc, #444]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004800:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004802:	4b6d      	ldr	r3, [pc, #436]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d063      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480e:	4b6a      	ldr	r3, [pc, #424]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004818:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	633b      	str	r3, [r7, #48]	@ 0x30
 8004822:	2300      	movs	r3, #0
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34
 8004826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800482a:	4622      	mov	r2, r4
 800482c:	462b      	mov	r3, r5
 800482e:	f04f 0000 	mov.w	r0, #0
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	0159      	lsls	r1, r3, #5
 8004838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483c:	0150      	lsls	r0, r2, #5
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4621      	mov	r1, r4
 8004844:	1a51      	subs	r1, r2, r1
 8004846:	6139      	str	r1, [r7, #16]
 8004848:	4629      	mov	r1, r5
 800484a:	eb63 0301 	sbc.w	r3, r3, r1
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800485c:	4659      	mov	r1, fp
 800485e:	018b      	lsls	r3, r1, #6
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004866:	4651      	mov	r1, sl
 8004868:	018a      	lsls	r2, r1, #6
 800486a:	4651      	mov	r1, sl
 800486c:	ebb2 0801 	subs.w	r8, r2, r1
 8004870:	4659      	mov	r1, fp
 8004872:	eb63 0901 	sbc.w	r9, r3, r1
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800488a:	4690      	mov	r8, r2
 800488c:	4699      	mov	r9, r3
 800488e:	4623      	mov	r3, r4
 8004890:	eb18 0303 	adds.w	r3, r8, r3
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	462b      	mov	r3, r5
 8004898:	eb49 0303 	adc.w	r3, r9, r3
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048aa:	4629      	mov	r1, r5
 80048ac:	024b      	lsls	r3, r1, #9
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048b4:	4621      	mov	r1, r4
 80048b6:	024a      	lsls	r2, r1, #9
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048be:	2200      	movs	r2, #0
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048c8:	f7fb fd0a 	bl	80002e0 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	e058      	b.n	8004988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	4b38      	ldr	r3, [pc, #224]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	2200      	movs	r2, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	4611      	mov	r1, r2
 80048e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	2300      	movs	r3, #0
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	0159      	lsls	r1, r3, #5
 80048fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004902:	0150      	lsls	r0, r2, #5
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4641      	mov	r1, r8
 800490a:	ebb2 0a01 	subs.w	sl, r2, r1
 800490e:	4649      	mov	r1, r9
 8004910:	eb63 0b01 	sbc.w	fp, r3, r1
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004928:	ebb2 040a 	subs.w	r4, r2, sl
 800492c:	eb63 050b 	sbc.w	r5, r3, fp
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	00eb      	lsls	r3, r5, #3
 800493a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800493e:	00e2      	lsls	r2, r4, #3
 8004940:	4614      	mov	r4, r2
 8004942:	461d      	mov	r5, r3
 8004944:	4643      	mov	r3, r8
 8004946:	18e3      	adds	r3, r4, r3
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	464b      	mov	r3, r9
 800494c:	eb45 0303 	adc.w	r3, r5, r3
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800495e:	4629      	mov	r1, r5
 8004960:	028b      	lsls	r3, r1, #10
 8004962:	4621      	mov	r1, r4
 8004964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004968:	4621      	mov	r1, r4
 800496a:	028a      	lsls	r2, r1, #10
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004972:	2200      	movs	r2, #0
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	61fa      	str	r2, [r7, #28]
 8004978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800497c:	f7fb fcb0 	bl	80002e0 <__aeabi_uldivmod>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4613      	mov	r3, r2
 8004986:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004988:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800499a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a2:	e002      	b.n	80049aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCC_GetSysClockFreq+0x204>)
 80049a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3750      	adds	r7, #80	@ 0x50
 80049b0:	46bd      	mov	sp, r7
 80049b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	00f42400 	.word	0x00f42400
 80049c0:	007a1200 	.word	0x007a1200

080049c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c8:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ca:	681b      	ldr	r3, [r3, #0]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000000 	.word	0x20000000

080049dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049e0:	f7ff fff0 	bl	80049c4 <HAL_RCC_GetHCLKFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	0a9b      	lsrs	r3, r3, #10
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4903      	ldr	r1, [pc, #12]	@ (8004a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	08008b94 	.word	0x08008b94

08004a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a08:	f7ff ffdc 	bl	80049c4 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	0b5b      	lsrs	r3, r3, #13
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4903      	ldr	r1, [pc, #12]	@ (8004a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40023800 	.word	0x40023800
 8004a28:	08008b94 	.word	0x08008b94

08004a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d012      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a54:	4b69      	ldr	r3, [pc, #420]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a68      	ldr	r2, [pc, #416]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a5e:	6093      	str	r3, [r2, #8]
 8004a60:	4b66      	ldr	r3, [pc, #408]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a68:	4964      	ldr	r1, [pc, #400]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d017      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a86:	4b5d      	ldr	r3, [pc, #372]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	4959      	ldr	r1, [pc, #356]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d017      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ac8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	494a      	ldr	r1, [pc, #296]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 808b 	beq.w	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b10:	4b3a      	ldr	r3, [pc, #232]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	4a39      	ldr	r2, [pc, #228]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b1c:	4b37      	ldr	r3, [pc, #220]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b28:	4b35      	ldr	r3, [pc, #212]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a34      	ldr	r2, [pc, #208]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b34:	f7fd ffa8 	bl	8002a88 <HAL_GetTick>
 8004b38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3c:	f7fd ffa4 	bl	8002a88 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	@ 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e38f      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b5a:	4b28      	ldr	r3, [pc, #160]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d035      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d02e      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b78:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b82:	4b1e      	ldr	r3, [pc, #120]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	4a1d      	ldr	r2, [pc, #116]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a1a      	ldr	r2, [pc, #104]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b9a:	4a18      	ldr	r2, [pc, #96]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ba0:	4b16      	ldr	r3, [pc, #88]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d114      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fd ff6c 	bl	8002a88 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fd ff68 	bl	8002a88 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e351      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004be2:	d111      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bf0:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bf2:	400b      	ands	r3, r1
 8004bf4:	4901      	ldr	r1, [pc, #4]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40007000 	.word	0x40007000
 8004c04:	0ffffcff 	.word	0x0ffffcff
 8004c08:	4bac      	ldr	r3, [pc, #688]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4aab      	ldr	r2, [pc, #684]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4ba9      	ldr	r3, [pc, #676]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	49a6      	ldr	r1, [pc, #664]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c32:	4ba2      	ldr	r3, [pc, #648]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c38:	4aa0      	ldr	r2, [pc, #640]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c42:	4b9e      	ldr	r3, [pc, #632]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c44:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c4c:	499b      	ldr	r1, [pc, #620]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c60:	4b96      	ldr	r3, [pc, #600]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c6e:	4993      	ldr	r1, [pc, #588]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c82:	4b8e      	ldr	r3, [pc, #568]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c90:	498a      	ldr	r1, [pc, #552]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ca4:	4b85      	ldr	r3, [pc, #532]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004caa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb2:	4982      	ldr	r1, [pc, #520]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cc6:	4b7d      	ldr	r3, [pc, #500]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ccc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd4:	4979      	ldr	r1, [pc, #484]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce8:	4b74      	ldr	r3, [pc, #464]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	4971      	ldr	r1, [pc, #452]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	f023 020c 	bic.w	r2, r3, #12
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d18:	4968      	ldr	r1, [pc, #416]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d2c:	4b63      	ldr	r3, [pc, #396]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d32:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3a:	4960      	ldr	r1, [pc, #384]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d54:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	4957      	ldr	r1, [pc, #348]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d70:	4b52      	ldr	r3, [pc, #328]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7e:	494f      	ldr	r1, [pc, #316]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d92:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	4946      	ldr	r1, [pc, #280]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004db4:	4b41      	ldr	r3, [pc, #260]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	493e      	ldr	r1, [pc, #248]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dd6:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ddc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	4935      	ldr	r1, [pc, #212]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004df8:	4b30      	ldr	r3, [pc, #192]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e06:	492d      	ldr	r1, [pc, #180]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d011      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e1a:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e20:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e28:	4924      	ldr	r1, [pc, #144]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e38:	d101      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5a:	4b18      	ldr	r3, [pc, #96]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e60:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e68:	4914      	ldr	r1, [pc, #80]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e82:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e8c:	490b      	ldr	r1, [pc, #44]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ea0:	4b06      	ldr	r3, [pc, #24]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb0:	4902      	ldr	r1, [pc, #8]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004eba:	bf00      	nop
 8004ebc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	4986      	ldr	r1, [pc, #536]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ef0:	4b81      	ldr	r3, [pc, #516]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f00:	497d      	ldr	r1, [pc, #500]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d006      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80d6 	beq.w	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f1c:	4b76      	ldr	r3, [pc, #472]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a75      	ldr	r2, [pc, #468]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f28:	f7fd fdae 	bl	8002a88 <HAL_GetTick>
 8004f2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f30:	f7fd fdaa 	bl	8002a88 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e195      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f42:	4b6d      	ldr	r3, [pc, #436]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d021      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d11d      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f62:	4b65      	ldr	r3, [pc, #404]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f70:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f76:	0e1b      	lsrs	r3, r3, #24
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	4958      	ldr	r1, [pc, #352]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d004      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d02e      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc8:	d129      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fca:	4b4b      	ldr	r3, [pc, #300]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fd8:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fde:	0f1b      	lsrs	r3, r3, #28
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	019a      	lsls	r2, r3, #6
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	061b      	lsls	r3, r3, #24
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	493e      	ldr	r1, [pc, #248]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005006:	4b3c      	ldr	r3, [pc, #240]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800500c:	f023 021f 	bic.w	r2, r3, #31
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	3b01      	subs	r3, #1
 8005016:	4938      	ldr	r1, [pc, #224]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01d      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800502a:	4b33      	ldr	r3, [pc, #204]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005030:	0e1b      	lsrs	r3, r3, #24
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005038:	4b2f      	ldr	r3, [pc, #188]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503e:	0f1b      	lsrs	r3, r3, #28
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	019a      	lsls	r2, r3, #6
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	431a      	orrs	r2, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	061b      	lsls	r3, r3, #24
 8005058:	431a      	orrs	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	4926      	ldr	r1, [pc, #152]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	019a      	lsls	r2, r3, #6
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	071b      	lsls	r3, r3, #28
 800508e:	491a      	ldr	r1, [pc, #104]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005096:	4b18      	ldr	r3, [pc, #96]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a17      	ldr	r2, [pc, #92]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800509c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fd fcf1 	bl	8002a88 <HAL_GetTick>
 80050a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050aa:	f7fd fced 	bl	8002a88 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b64      	cmp	r3, #100	@ 0x64
 80050b6:	d901      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0d8      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050bc:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	f040 80ce 	bne.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050d0:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a08      	ldr	r2, [pc, #32]	@ (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fd fcd4 	bl	8002a88 <HAL_GetTick>
 80050e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050e2:	e00b      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050e4:	f7fd fcd0 	bl	8002a88 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	@ 0x64
 80050f0:	d904      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0bb      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005108:	d0ec      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005126:	2b00      	cmp	r3, #0
 8005128:	d02e      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d12a      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005132:	4b51      	ldr	r3, [pc, #324]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005140:	4b4d      	ldr	r3, [pc, #308]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005146:	0f1b      	lsrs	r3, r3, #28
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	019a      	lsls	r2, r3, #6
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	071b      	lsls	r3, r3, #28
 8005166:	4944      	ldr	r1, [pc, #272]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800516e:	4b42      	ldr	r3, [pc, #264]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005174:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	3b01      	subs	r3, #1
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	493d      	ldr	r1, [pc, #244]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d022      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519c:	d11d      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800519e:	4b36      	ldr	r3, [pc, #216]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a4:	0e1b      	lsrs	r3, r3, #24
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051ac:	4b32      	ldr	r3, [pc, #200]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b2:	0f1b      	lsrs	r3, r3, #28
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	019a      	lsls	r2, r3, #6
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	431a      	orrs	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	071b      	lsls	r3, r3, #28
 80051d2:	4929      	ldr	r1, [pc, #164]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d028      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051e6:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	0e1b      	lsrs	r3, r3, #24
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051f4:	4b20      	ldr	r3, [pc, #128]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	0c1b      	lsrs	r3, r3, #16
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	019a      	lsls	r2, r3, #6
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	431a      	orrs	r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	071b      	lsls	r3, r3, #28
 800521a:	4917      	ldr	r1, [pc, #92]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005222:	4b15      	ldr	r3, [pc, #84]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005228:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	4911      	ldr	r1, [pc, #68]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005238:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a0e      	ldr	r2, [pc, #56]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005244:	f7fd fc20 	bl	8002a88 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800524a:	e008      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800524c:	f7fd fc1c 	bl	8002a88 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	@ 0x64
 8005258:	d901      	bls.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e007      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800525e:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800526a:	d1ef      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800

0800527c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e09d      	b.n	80053ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800529e:	d009      	beq.n	80052b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	61da      	str	r2, [r3, #28]
 80052a6:	e005      	b.n	80052b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc fe24 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052f4:	d902      	bls.n	80052fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e002      	b.n	8005302 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005300:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800530a:	d007      	beq.n	800531c <HAL_SPI_Init+0xa0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005314:	d002      	beq.n	800531c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535e:	ea42 0103 	orr.w	r1, r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 0204 	and.w	r2, r3, #4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005398:	ea42 0103 	orr.w	r1, r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e049      	b.n	8005478 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fc fe0f 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f001 f819 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e054      	b.n	8005542 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a26      	ldr	r2, [pc, #152]	@ (8005550 <HAL_TIM_Base_Start_IT+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d022      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	@ (8005554 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	@ (8005558 <HAL_TIM_Base_Start_IT+0xd8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <HAL_TIM_Base_Start_IT+0xdc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005560 <HAL_TIM_Base_Start_IT+0xe0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <HAL_TIM_Base_Start_IT+0xe4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005568 <HAL_TIM_Base_Start_IT+0xe8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d115      	bne.n	800552c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	4b19      	ldr	r3, [pc, #100]	@ (800556c <HAL_TIM_Base_Start_IT+0xec>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d015      	beq.n	800553e <HAL_TIM_Base_Start_IT+0xbe>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d011      	beq.n	800553e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552a:	e008      	b.n	800553e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e000      	b.n	8005540 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40010400 	.word	0x40010400
 8005564:	40014000 	.word	0x40014000
 8005568:	40001800 	.word	0x40001800
 800556c:	00010007 	.word	0x00010007

08005570 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e049      	b.n	8005616 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f841 	bl	800561e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f000 ff4a 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e049      	b.n	80056d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7fc fdef 	bl	800223c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f000 fee9 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x24>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e03c      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d109      	bne.n	800571e <HAL_TIM_PWM_Start+0x3e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e02f      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d109      	bne.n	8005738 <HAL_TIM_PWM_Start+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e022      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d109      	bne.n	8005752 <HAL_TIM_PWM_Start+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	e015      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d109      	bne.n	800576c <HAL_TIM_PWM_Start+0x8c>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	bf14      	ite	ne
 8005764:	2301      	movne	r3, #1
 8005766:	2300      	moveq	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	e008      	b.n	800577e <HAL_TIM_PWM_Start+0x9e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e092      	b.n	80058ac <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xb6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005794:	e023      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b04      	cmp	r3, #4
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xc6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057a4:	e01b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057b4:	e013      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xe6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c4:	e00b      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xf6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d4:	e003      	b.n	80057de <HAL_TIM_PWM_Start+0xfe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 fafc 	bl	8006de4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a30      	ldr	r2, [pc, #192]	@ (80058b4 <HAL_TIM_PWM_Start+0x1d4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIM_PWM_Start+0x120>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2f      	ldr	r2, [pc, #188]	@ (80058b8 <HAL_TIM_PWM_Start+0x1d8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_PWM_Start+0x124>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_TIM_PWM_Start+0x126>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <HAL_TIM_PWM_Start+0x1d4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582c:	d01d      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a22      	ldr	r2, [pc, #136]	@ (80058bc <HAL_TIM_PWM_Start+0x1dc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a20      	ldr	r2, [pc, #128]	@ (80058c0 <HAL_TIM_PWM_Start+0x1e0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1f      	ldr	r2, [pc, #124]	@ (80058c4 <HAL_TIM_PWM_Start+0x1e4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a19      	ldr	r2, [pc, #100]	@ (80058b8 <HAL_TIM_PWM_Start+0x1d8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1b      	ldr	r2, [pc, #108]	@ (80058c8 <HAL_TIM_PWM_Start+0x1e8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIM_PWM_Start+0x18a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a19      	ldr	r2, [pc, #100]	@ (80058cc <HAL_TIM_PWM_Start+0x1ec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d115      	bne.n	8005896 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	4b17      	ldr	r3, [pc, #92]	@ (80058d0 <HAL_TIM_PWM_Start+0x1f0>)
 8005872:	4013      	ands	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d015      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1c8>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005882:	d011      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005894:	e008      	b.n	80058a8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0201 	orr.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e000      	b.n	80058aa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40010400 	.word	0x40010400
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40001800 	.word	0x40001800
 80058d0:	00010007 	.word	0x00010007

080058d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e049      	b.n	800597a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f841 	bl	8005982 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3304      	adds	r3, #4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f000 fd98 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e08f      	b.n	8005acc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fc fbc5 	bl	8002150 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6899      	ldr	r1, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <HAL_TIM_Encoder_Init+0x13c>)
 80059da:	400b      	ands	r3, r1
 80059dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 fd2d 	bl	8006448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4b31      	ldr	r3, [pc, #196]	@ (8005ad8 <HAL_TIM_Encoder_Init+0x140>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	4313      	orrs	r3, r2
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8005adc <HAL_TIM_Encoder_Init+0x144>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae0 <HAL_TIM_Encoder_Init+0x148>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	011a      	lsls	r2, r3, #4
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	031b      	lsls	r3, r3, #12
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	fffebff8 	.word	0xfffebff8
 8005ad8:	fffffcfc 	.word	0xfffffcfc
 8005adc:	fffff3f3 	.word	0xfffff3f3
 8005ae0:	ffff0f0f 	.word	0xffff0f0f

08005ae4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005af4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005afc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d110      	bne.n	8005b36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d102      	bne.n	8005b20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b1a:	7b7b      	ldrb	r3, [r7, #13]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e069      	b.n	8005bf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b34:	e031      	b.n	8005b9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d110      	bne.n	8005b5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d102      	bne.n	8005b48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b42:	7b3b      	ldrb	r3, [r7, #12]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d001      	beq.n	8005b4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e055      	b.n	8005bf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b5c:	e01d      	b.n	8005b9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d108      	bne.n	8005b76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	7b7b      	ldrb	r3, [r7, #13]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d102      	bne.n	8005b76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b70:	7b3b      	ldrb	r3, [r7, #12]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e03e      	b.n	8005bf8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_TIM_Encoder_Start+0xc4>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d008      	beq.n	8005bb8 <HAL_TIM_Encoder_Start+0xd4>
 8005ba6:	e00f      	b.n	8005bc8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2201      	movs	r2, #1
 8005bae:	2100      	movs	r1, #0
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 f917 	bl	8006de4 <TIM_CCxChannelCmd>
      break;
 8005bb6:	e016      	b.n	8005be6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f90f 	bl	8006de4 <TIM_CCxChannelCmd>
      break;
 8005bc6:	e00e      	b.n	8005be6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f907 	bl	8006de4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	2104      	movs	r1, #4
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f900 	bl	8006de4 <TIM_CCxChannelCmd>
      break;
 8005be4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d020      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01b      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0202 	mvn.w	r2, #2
 8005c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fbde 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fbd0 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fbe1 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d020      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01b      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0204 	mvn.w	r2, #4
 8005c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fbb8 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fbaa 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fbbb 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d020      	beq.n	8005cfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0208 	mvn.w	r2, #8
 8005ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fb92 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fb84 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb95 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d020      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01b      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0210 	mvn.w	r2, #16
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fb6c 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fb5e 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb6f 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0201 	mvn.w	r2, #1
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fa fc80 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00c      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 f961 	bl	800705c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00c      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 f959 	bl	8007070 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00c      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb29 	bl	8006434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00c      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0220 	mvn.w	r2, #32
 8005dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f921 	bl	8007048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e066      	b.n	8005efc <HAL_TIM_OC_ConfigChannel+0xec>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b14      	cmp	r3, #20
 8005e3a:	d857      	bhi.n	8005eec <HAL_TIM_OC_ConfigChannel+0xdc>
 8005e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005eed 	.word	0x08005eed
 8005e4c:	08005eed 	.word	0x08005eed
 8005e50:	08005eed 	.word	0x08005eed
 8005e54:	08005ea7 	.word	0x08005ea7
 8005e58:	08005eed 	.word	0x08005eed
 8005e5c:	08005eed 	.word	0x08005eed
 8005e60:	08005eed 	.word	0x08005eed
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	08005eed 	.word	0x08005eed
 8005e6c:	08005eed 	.word	0x08005eed
 8005e70:	08005eed 	.word	0x08005eed
 8005e74:	08005ec3 	.word	0x08005ec3
 8005e78:	08005eed 	.word	0x08005eed
 8005e7c:	08005eed 	.word	0x08005eed
 8005e80:	08005eed 	.word	0x08005eed
 8005e84:	08005ed1 	.word	0x08005ed1
 8005e88:	08005eed 	.word	0x08005eed
 8005e8c:	08005eed 	.word	0x08005eed
 8005e90:	08005eed 	.word	0x08005eed
 8005e94:	08005edf 	.word	0x08005edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fb7e 	bl	80065a0 <TIM_OC1_SetConfig>
      break;
 8005ea4:	e025      	b.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fbe9 	bl	8006684 <TIM_OC2_SetConfig>
      break;
 8005eb2:	e01e      	b.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fc5a 	bl	8006774 <TIM_OC3_SetConfig>
      break;
 8005ec0:	e017      	b.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 fcc9 	bl	8006860 <TIM_OC4_SetConfig>
      break;
 8005ece:	e010      	b.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fd1a 	bl	8006910 <TIM_OC5_SetConfig>
      break;
 8005edc:	e009      	b.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fd65 	bl	80069b4 <TIM_OC6_SetConfig>
      break;
 8005eea:	e002      	b.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e088      	b.n	8006034 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f40:	f000 fd8c 	bl	8006a5c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 020c 	bic.w	r2, r2, #12
 8005f52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6999      	ldr	r1, [r3, #24]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	619a      	str	r2, [r3, #24]
 8005f66:	e060      	b.n	800602a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d11c      	bne.n	8005fa8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005f7e:	f000 fe10 	bl	8006ba2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6999      	ldr	r1, [r3, #24]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	021a      	lsls	r2, r3, #8
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	619a      	str	r2, [r3, #24]
 8005fa6:	e040      	b.n	800602a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d11b      	bne.n	8005fe6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005fbe:	f000 fe5d 	bl	8006c7c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 020c 	bic.w	r2, r2, #12
 8005fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	61da      	str	r2, [r3, #28]
 8005fe4:	e021      	b.n	800602a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b0c      	cmp	r3, #12
 8005fea:	d11c      	bne.n	8006026 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005ffc:	f000 fe7a 	bl	8006cf4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69da      	ldr	r2, [r3, #28]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800600e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69d9      	ldr	r1, [r3, #28]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	021a      	lsls	r2, r3, #8
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	61da      	str	r2, [r3, #28]
 8006024:	e001      	b.n	800602a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006056:	2302      	movs	r3, #2
 8006058:	e0ff      	b.n	800625a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b14      	cmp	r3, #20
 8006066:	f200 80f0 	bhi.w	800624a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800606a:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060c5 	.word	0x080060c5
 8006074:	0800624b 	.word	0x0800624b
 8006078:	0800624b 	.word	0x0800624b
 800607c:	0800624b 	.word	0x0800624b
 8006080:	08006105 	.word	0x08006105
 8006084:	0800624b 	.word	0x0800624b
 8006088:	0800624b 	.word	0x0800624b
 800608c:	0800624b 	.word	0x0800624b
 8006090:	08006147 	.word	0x08006147
 8006094:	0800624b 	.word	0x0800624b
 8006098:	0800624b 	.word	0x0800624b
 800609c:	0800624b 	.word	0x0800624b
 80060a0:	08006187 	.word	0x08006187
 80060a4:	0800624b 	.word	0x0800624b
 80060a8:	0800624b 	.word	0x0800624b
 80060ac:	0800624b 	.word	0x0800624b
 80060b0:	080061c9 	.word	0x080061c9
 80060b4:	0800624b 	.word	0x0800624b
 80060b8:	0800624b 	.word	0x0800624b
 80060bc:	0800624b 	.word	0x0800624b
 80060c0:	08006209 	.word	0x08006209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fa68 	bl	80065a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0208 	orr.w	r2, r2, #8
 80060de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0204 	bic.w	r2, r2, #4
 80060ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	619a      	str	r2, [r3, #24]
      break;
 8006102:	e0a5      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 faba 	bl	8006684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800611e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6999      	ldr	r1, [r3, #24]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	619a      	str	r2, [r3, #24]
      break;
 8006144:	e084      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fb11 	bl	8006774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0208 	orr.w	r2, r2, #8
 8006160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0204 	bic.w	r2, r2, #4
 8006170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	61da      	str	r2, [r3, #28]
      break;
 8006184:	e064      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	4618      	mov	r0, r3
 800618e:	f000 fb67 	bl	8006860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69d9      	ldr	r1, [r3, #28]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	021a      	lsls	r2, r3, #8
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	61da      	str	r2, [r3, #28]
      break;
 80061c6:	e043      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fb9e 	bl	8006910 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0208 	orr.w	r2, r2, #8
 80061e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0204 	bic.w	r2, r2, #4
 80061f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006206:	e023      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fbd0 	bl	80069b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006222:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006248:	e002      	b.n	8006250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
      break;
 800624e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIM_ConfigClockSource+0x1c>
 800627c:	2302      	movs	r3, #2
 800627e:	e0b4      	b.n	80063ea <HAL_TIM_ConfigClockSource+0x186>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	4b56      	ldr	r3, [pc, #344]	@ (80063f4 <HAL_TIM_ConfigClockSource+0x190>)
 800629c:	4013      	ands	r3, r2
 800629e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062b8:	d03e      	beq.n	8006338 <HAL_TIM_ConfigClockSource+0xd4>
 80062ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062be:	f200 8087 	bhi.w	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c6:	f000 8086 	beq.w	80063d6 <HAL_TIM_ConfigClockSource+0x172>
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ce:	d87f      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b70      	cmp	r3, #112	@ 0x70
 80062d2:	d01a      	beq.n	800630a <HAL_TIM_ConfigClockSource+0xa6>
 80062d4:	2b70      	cmp	r3, #112	@ 0x70
 80062d6:	d87b      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b60      	cmp	r3, #96	@ 0x60
 80062da:	d050      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x11a>
 80062dc:	2b60      	cmp	r3, #96	@ 0x60
 80062de:	d877      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e0:	2b50      	cmp	r3, #80	@ 0x50
 80062e2:	d03c      	beq.n	800635e <HAL_TIM_ConfigClockSource+0xfa>
 80062e4:	2b50      	cmp	r3, #80	@ 0x50
 80062e6:	d873      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d058      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x13a>
 80062ec:	2b40      	cmp	r3, #64	@ 0x40
 80062ee:	d86f      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f0:	2b30      	cmp	r3, #48	@ 0x30
 80062f2:	d064      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 80062f4:	2b30      	cmp	r3, #48	@ 0x30
 80062f6:	d86b      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d060      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d867      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d05c      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 8006304:	2b10      	cmp	r3, #16
 8006306:	d05a      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	e062      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	f000 fd43 	bl	8006da4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800632c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	609a      	str	r2, [r3, #8]
      break;
 8006336:	e04f      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	f000 fd2c 	bl	8006da4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800635a:	609a      	str	r2, [r3, #8]
      break;
 800635c:	e03c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fbea 	bl	8006b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2150      	movs	r1, #80	@ 0x50
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fcf9 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 800637c:	e02c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fc46 	bl	8006c1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2160      	movs	r1, #96	@ 0x60
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fce9 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 800639c:	e01c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 fbca 	bl	8006b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2140      	movs	r1, #64	@ 0x40
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fcd9 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 80063bc:	e00c      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4619      	mov	r1, r3
 80063c8:	4610      	mov	r0, r2
 80063ca:	f000 fcd0 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 80063ce:	e003      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
      break;
 80063d4:	e000      	b.n	80063d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	fffeff88 	.word	0xfffeff88

080063f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a46      	ldr	r2, [pc, #280]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a43      	ldr	r2, [pc, #268]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a42      	ldr	r2, [pc, #264]	@ (800657c <TIM_Base_SetConfig+0x134>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a41      	ldr	r2, [pc, #260]	@ (8006580 <TIM_Base_SetConfig+0x138>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a40      	ldr	r2, [pc, #256]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a35      	ldr	r2, [pc, #212]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d02b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a8:	d027      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a32      	ldr	r2, [pc, #200]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d023      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a31      	ldr	r2, [pc, #196]	@ (800657c <TIM_Base_SetConfig+0x134>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01f      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a30      	ldr	r2, [pc, #192]	@ (8006580 <TIM_Base_SetConfig+0x138>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d017      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006588 <TIM_Base_SetConfig+0x140>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2d      	ldr	r2, [pc, #180]	@ (800658c <TIM_Base_SetConfig+0x144>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006590 <TIM_Base_SetConfig+0x148>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006594 <TIM_Base_SetConfig+0x14c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006598 <TIM_Base_SetConfig+0x150>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a29      	ldr	r2, [pc, #164]	@ (800659c <TIM_Base_SetConfig+0x154>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d108      	bne.n	800650c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a10      	ldr	r2, [pc, #64]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_Base_SetConfig+0xf8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a12      	ldr	r2, [pc, #72]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d103      	bne.n	8006548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d105      	bne.n	8006566 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f023 0201 	bic.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	611a      	str	r2, [r3, #16]
  }
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40010400 	.word	0x40010400
 8006588:	40014000 	.word	0x40014000
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800
 8006594:	40001800 	.word	0x40001800
 8006598:	40001c00 	.word	0x40001c00
 800659c:	40002000 	.word	0x40002000

080065a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	f023 0201 	bic.w	r2, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006678 <TIM_OC1_SetConfig+0xd8>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f023 0302 	bic.w	r3, r3, #2
 80065e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a21      	ldr	r2, [pc, #132]	@ (800667c <TIM_OC1_SetConfig+0xdc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_OC1_SetConfig+0x64>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a20      	ldr	r2, [pc, #128]	@ (8006680 <TIM_OC1_SetConfig+0xe0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d10c      	bne.n	800661e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0308 	bic.w	r3, r3, #8
 800660a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a16      	ldr	r2, [pc, #88]	@ (800667c <TIM_OC1_SetConfig+0xdc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC1_SetConfig+0x8e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <TIM_OC1_SetConfig+0xe0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d111      	bne.n	8006652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	621a      	str	r2, [r3, #32]
}
 800666c:	bf00      	nop
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	fffeff8f 	.word	0xfffeff8f
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4b2e      	ldr	r3, [pc, #184]	@ (8006768 <TIM_OC2_SetConfig+0xe4>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0320 	bic.w	r3, r3, #32
 80066ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a23      	ldr	r2, [pc, #140]	@ (800676c <TIM_OC2_SetConfig+0xe8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC2_SetConfig+0x68>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a22      	ldr	r2, [pc, #136]	@ (8006770 <TIM_OC2_SetConfig+0xec>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10d      	bne.n	8006708 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006706:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a18      	ldr	r2, [pc, #96]	@ (800676c <TIM_OC2_SetConfig+0xe8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC2_SetConfig+0x94>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <TIM_OC2_SetConfig+0xec>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d113      	bne.n	8006740 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800671e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	621a      	str	r2, [r3, #32]
}
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	feff8fff 	.word	0xfeff8fff
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400

08006774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4b2d      	ldr	r3, [pc, #180]	@ (8006854 <TIM_OC3_SetConfig+0xe0>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a22      	ldr	r2, [pc, #136]	@ (8006858 <TIM_OC3_SetConfig+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC3_SetConfig+0x66>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a21      	ldr	r2, [pc, #132]	@ (800685c <TIM_OC3_SetConfig+0xe8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10d      	bne.n	80067f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a17      	ldr	r2, [pc, #92]	@ (8006858 <TIM_OC3_SetConfig+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC3_SetConfig+0x92>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <TIM_OC3_SetConfig+0xe8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d113      	bne.n	800682e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	fffeff8f 	.word	0xfffeff8f
 8006858:	40010000 	.word	0x40010000
 800685c:	40010400 	.word	0x40010400

08006860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4b1e      	ldr	r3, [pc, #120]	@ (8006904 <TIM_OC4_SetConfig+0xa4>)
 800688c:	4013      	ands	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a13      	ldr	r2, [pc, #76]	@ (8006908 <TIM_OC4_SetConfig+0xa8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC4_SetConfig+0x68>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a12      	ldr	r2, [pc, #72]	@ (800690c <TIM_OC4_SetConfig+0xac>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d109      	bne.n	80068dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	019b      	lsls	r3, r3, #6
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	621a      	str	r2, [r3, #32]
}
 80068f6:	bf00      	nop
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	feff8fff 	.word	0xfeff8fff
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400

08006910 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4b1b      	ldr	r3, [pc, #108]	@ (80069a8 <TIM_OC5_SetConfig+0x98>)
 800693c:	4013      	ands	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006950:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	041b      	lsls	r3, r3, #16
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a12      	ldr	r2, [pc, #72]	@ (80069ac <TIM_OC5_SetConfig+0x9c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC5_SetConfig+0x5e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a11      	ldr	r2, [pc, #68]	@ (80069b0 <TIM_OC5_SetConfig+0xa0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d109      	bne.n	8006982 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	621a      	str	r2, [r3, #32]
}
 800699c:	bf00      	nop
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	fffeff8f 	.word	0xfffeff8f
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40010400 	.word	0x40010400

080069b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4b1c      	ldr	r3, [pc, #112]	@ (8006a50 <TIM_OC6_SetConfig+0x9c>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a13      	ldr	r2, [pc, #76]	@ (8006a54 <TIM_OC6_SetConfig+0xa0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC6_SetConfig+0x60>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a12      	ldr	r2, [pc, #72]	@ (8006a58 <TIM_OC6_SetConfig+0xa4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	029b      	lsls	r3, r3, #10
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	feff8fff 	.word	0xfeff8fff
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40010400 	.word	0x40010400

08006a5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	f023 0201 	bic.w	r2, r3, #1
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a28      	ldr	r2, [pc, #160]	@ (8006b28 <TIM_TI1_SetConfig+0xcc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01b      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a90:	d017      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a25      	ldr	r2, [pc, #148]	@ (8006b2c <TIM_TI1_SetConfig+0xd0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a24      	ldr	r2, [pc, #144]	@ (8006b30 <TIM_TI1_SetConfig+0xd4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00f      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a23      	ldr	r2, [pc, #140]	@ (8006b34 <TIM_TI1_SetConfig+0xd8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00b      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a22      	ldr	r2, [pc, #136]	@ (8006b38 <TIM_TI1_SetConfig+0xdc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d007      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4a21      	ldr	r2, [pc, #132]	@ (8006b3c <TIM_TI1_SetConfig+0xe0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d003      	beq.n	8006ac2 <TIM_TI1_SetConfig+0x66>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a20      	ldr	r2, [pc, #128]	@ (8006b40 <TIM_TI1_SetConfig+0xe4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d101      	bne.n	8006ac6 <TIM_TI1_SetConfig+0x6a>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <TIM_TI1_SetConfig+0x6c>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e003      	b.n	8006ae6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f023 030a 	bic.w	r3, r3, #10
 8006b00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f003 030a 	and.w	r3, r3, #10
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	621a      	str	r2, [r3, #32]
}
 8006b1a:	bf00      	nop
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40001800 	.word	0x40001800

08006b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
 8006bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f023 0210 	bic.w	r2, r3, #16
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006be0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	031b      	lsls	r3, r3, #12
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	031b      	lsls	r3, r3, #12
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	621a      	str	r2, [r3, #32]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f023 0303 	bic.w	r3, r3, #3
 8006ca8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	621a      	str	r2, [r3, #32]
}
 8006ce8:	bf00      	nop
 8006cea:	371c      	adds	r7, #28
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	031b      	lsls	r3, r3, #12
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	031b      	lsls	r3, r3, #12
 8006d4c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f043 0307 	orr.w	r3, r3, #7
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	609a      	str	r2, [r3, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 031f 	and.w	r3, r3, #31
 8006df6:	2201      	movs	r2, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1a      	ldr	r2, [r3, #32]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	43db      	mvns	r3, r3
 8006e06:	401a      	ands	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1a      	ldr	r2, [r3, #32]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 031f 	and.w	r3, r3, #31
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e06d      	b.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a30      	ldr	r2, [pc, #192]	@ (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2f      	ldr	r2, [pc, #188]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d108      	bne.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a20      	ldr	r2, [pc, #128]	@ (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d022      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eba:	d01d      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d018      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1c      	ldr	r2, [pc, #112]	@ (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8006f40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00e      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a15      	ldr	r2, [pc, #84]	@ (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d009      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a16      	ldr	r2, [pc, #88]	@ (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	@ (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10c      	bne.n	8006f12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40001800 	.word	0x40001800

08006f4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d101      	bne.n	8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f64:	2302      	movs	r3, #2
 8006f66:	e065      	b.n	8007034 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a16      	ldr	r2, [pc, #88]	@ (8007040 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a14      	ldr	r2, [pc, #80]	@ (8007044 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d115      	bne.n	8007022 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	051b      	lsls	r3, r3, #20
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	40010000 	.word	0x40010000
 8007044:	40010400 	.word	0x40010400

08007048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e040      	b.n	8007118 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fb f9b4 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2224      	movs	r2, #36	@ 0x24
 80070b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fb54 	bl	8007778 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8ed 	bl	80072b0 <UART_SetConfig>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e01b      	b.n	8007118 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fbd3 	bl	80078bc <UART_CheckIdleState>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	@ 0x28
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	4613      	mov	r3, r2
 800712e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007136:	2b20      	cmp	r3, #32
 8007138:	f040 80b5 	bne.w	80072a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <HAL_UART_Receive+0x28>
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0ad      	b.n	80072a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2222      	movs	r2, #34	@ 0x22
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007162:	f7fb fc91 	bl	8002a88 <HAL_GetTick>
 8007166:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007180:	d10e      	bne.n	80071a0 <HAL_UART_Receive+0x80>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <HAL_UART_Receive+0x76>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007190:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007194:	e02d      	b.n	80071f2 <HAL_UART_Receive+0xd2>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	@ 0xff
 800719a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800719e:	e028      	b.n	80071f2 <HAL_UART_Receive+0xd2>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10d      	bne.n	80071c4 <HAL_UART_Receive+0xa4>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <HAL_UART_Receive+0x9a>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	22ff      	movs	r2, #255	@ 0xff
 80071b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071b8:	e01b      	b.n	80071f2 <HAL_UART_Receive+0xd2>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	227f      	movs	r2, #127	@ 0x7f
 80071be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071c2:	e016      	b.n	80071f2 <HAL_UART_Receive+0xd2>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071cc:	d10d      	bne.n	80071ea <HAL_UART_Receive+0xca>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <HAL_UART_Receive+0xc0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	227f      	movs	r2, #127	@ 0x7f
 80071da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071de:	e008      	b.n	80071f2 <HAL_UART_Receive+0xd2>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	223f      	movs	r2, #63	@ 0x3f
 80071e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071e8:	e003      	b.n	80071f2 <HAL_UART_Receive+0xd2>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007202:	d108      	bne.n	8007216 <HAL_UART_Receive+0xf6>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d104      	bne.n	8007216 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e003      	b.n	800721e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800721e:	e036      	b.n	800728e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2200      	movs	r2, #0
 8007228:	2120      	movs	r1, #32
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fbee 	bl	8007a0c <UART_WaitOnFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e032      	b.n	80072a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10c      	bne.n	8007262 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	b29a      	uxth	r2, r3
 8007250:	8a7b      	ldrh	r3, [r7, #18]
 8007252:	4013      	ands	r3, r2
 8007254:	b29a      	uxth	r2, r3
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	3302      	adds	r3, #2
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e00c      	b.n	800727c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	b2da      	uxtb	r2, r3
 800726a:	8a7b      	ldrh	r3, [r7, #18]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	4013      	ands	r3, r2
 8007270:	b2da      	uxtb	r2, r3
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3301      	adds	r3, #1
 800727a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1c2      	bne.n	8007220 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	e000      	b.n	80072a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
  }
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3720      	adds	r7, #32
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4ba6      	ldr	r3, [pc, #664]	@ (8007574 <UART_SetConfig+0x2c4>)
 80072dc:	4013      	ands	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	6979      	ldr	r1, [r7, #20]
 80072e4:	430b      	orrs	r3, r1
 80072e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	430a      	orrs	r2, r1
 8007320:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a94      	ldr	r2, [pc, #592]	@ (8007578 <UART_SetConfig+0x2c8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d120      	bne.n	800736e <UART_SetConfig+0xbe>
 800732c:	4b93      	ldr	r3, [pc, #588]	@ (800757c <UART_SetConfig+0x2cc>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	2b03      	cmp	r3, #3
 8007338:	d816      	bhi.n	8007368 <UART_SetConfig+0xb8>
 800733a:	a201      	add	r2, pc, #4	@ (adr r2, 8007340 <UART_SetConfig+0x90>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007351 	.word	0x08007351
 8007344:	0800735d 	.word	0x0800735d
 8007348:	08007357 	.word	0x08007357
 800734c:	08007363 	.word	0x08007363
 8007350:	2301      	movs	r3, #1
 8007352:	77fb      	strb	r3, [r7, #31]
 8007354:	e150      	b.n	80075f8 <UART_SetConfig+0x348>
 8007356:	2302      	movs	r3, #2
 8007358:	77fb      	strb	r3, [r7, #31]
 800735a:	e14d      	b.n	80075f8 <UART_SetConfig+0x348>
 800735c:	2304      	movs	r3, #4
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e14a      	b.n	80075f8 <UART_SetConfig+0x348>
 8007362:	2308      	movs	r3, #8
 8007364:	77fb      	strb	r3, [r7, #31]
 8007366:	e147      	b.n	80075f8 <UART_SetConfig+0x348>
 8007368:	2310      	movs	r3, #16
 800736a:	77fb      	strb	r3, [r7, #31]
 800736c:	e144      	b.n	80075f8 <UART_SetConfig+0x348>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a83      	ldr	r2, [pc, #524]	@ (8007580 <UART_SetConfig+0x2d0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d132      	bne.n	80073de <UART_SetConfig+0x12e>
 8007378:	4b80      	ldr	r3, [pc, #512]	@ (800757c <UART_SetConfig+0x2cc>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737e:	f003 030c 	and.w	r3, r3, #12
 8007382:	2b0c      	cmp	r3, #12
 8007384:	d828      	bhi.n	80073d8 <UART_SetConfig+0x128>
 8007386:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <UART_SetConfig+0xdc>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073c1 	.word	0x080073c1
 8007390:	080073d9 	.word	0x080073d9
 8007394:	080073d9 	.word	0x080073d9
 8007398:	080073d9 	.word	0x080073d9
 800739c:	080073cd 	.word	0x080073cd
 80073a0:	080073d9 	.word	0x080073d9
 80073a4:	080073d9 	.word	0x080073d9
 80073a8:	080073d9 	.word	0x080073d9
 80073ac:	080073c7 	.word	0x080073c7
 80073b0:	080073d9 	.word	0x080073d9
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	080073d3 	.word	0x080073d3
 80073c0:	2300      	movs	r3, #0
 80073c2:	77fb      	strb	r3, [r7, #31]
 80073c4:	e118      	b.n	80075f8 <UART_SetConfig+0x348>
 80073c6:	2302      	movs	r3, #2
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	e115      	b.n	80075f8 <UART_SetConfig+0x348>
 80073cc:	2304      	movs	r3, #4
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e112      	b.n	80075f8 <UART_SetConfig+0x348>
 80073d2:	2308      	movs	r3, #8
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e10f      	b.n	80075f8 <UART_SetConfig+0x348>
 80073d8:	2310      	movs	r3, #16
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e10c      	b.n	80075f8 <UART_SetConfig+0x348>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a68      	ldr	r2, [pc, #416]	@ (8007584 <UART_SetConfig+0x2d4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d120      	bne.n	800742a <UART_SetConfig+0x17a>
 80073e8:	4b64      	ldr	r3, [pc, #400]	@ (800757c <UART_SetConfig+0x2cc>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073f2:	2b30      	cmp	r3, #48	@ 0x30
 80073f4:	d013      	beq.n	800741e <UART_SetConfig+0x16e>
 80073f6:	2b30      	cmp	r3, #48	@ 0x30
 80073f8:	d814      	bhi.n	8007424 <UART_SetConfig+0x174>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d009      	beq.n	8007412 <UART_SetConfig+0x162>
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d810      	bhi.n	8007424 <UART_SetConfig+0x174>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <UART_SetConfig+0x15c>
 8007406:	2b10      	cmp	r3, #16
 8007408:	d006      	beq.n	8007418 <UART_SetConfig+0x168>
 800740a:	e00b      	b.n	8007424 <UART_SetConfig+0x174>
 800740c:	2300      	movs	r3, #0
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e0f2      	b.n	80075f8 <UART_SetConfig+0x348>
 8007412:	2302      	movs	r3, #2
 8007414:	77fb      	strb	r3, [r7, #31]
 8007416:	e0ef      	b.n	80075f8 <UART_SetConfig+0x348>
 8007418:	2304      	movs	r3, #4
 800741a:	77fb      	strb	r3, [r7, #31]
 800741c:	e0ec      	b.n	80075f8 <UART_SetConfig+0x348>
 800741e:	2308      	movs	r3, #8
 8007420:	77fb      	strb	r3, [r7, #31]
 8007422:	e0e9      	b.n	80075f8 <UART_SetConfig+0x348>
 8007424:	2310      	movs	r3, #16
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e0e6      	b.n	80075f8 <UART_SetConfig+0x348>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a56      	ldr	r2, [pc, #344]	@ (8007588 <UART_SetConfig+0x2d8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d120      	bne.n	8007476 <UART_SetConfig+0x1c6>
 8007434:	4b51      	ldr	r3, [pc, #324]	@ (800757c <UART_SetConfig+0x2cc>)
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800743e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007440:	d013      	beq.n	800746a <UART_SetConfig+0x1ba>
 8007442:	2bc0      	cmp	r3, #192	@ 0xc0
 8007444:	d814      	bhi.n	8007470 <UART_SetConfig+0x1c0>
 8007446:	2b80      	cmp	r3, #128	@ 0x80
 8007448:	d009      	beq.n	800745e <UART_SetConfig+0x1ae>
 800744a:	2b80      	cmp	r3, #128	@ 0x80
 800744c:	d810      	bhi.n	8007470 <UART_SetConfig+0x1c0>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <UART_SetConfig+0x1a8>
 8007452:	2b40      	cmp	r3, #64	@ 0x40
 8007454:	d006      	beq.n	8007464 <UART_SetConfig+0x1b4>
 8007456:	e00b      	b.n	8007470 <UART_SetConfig+0x1c0>
 8007458:	2300      	movs	r3, #0
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e0cc      	b.n	80075f8 <UART_SetConfig+0x348>
 800745e:	2302      	movs	r3, #2
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e0c9      	b.n	80075f8 <UART_SetConfig+0x348>
 8007464:	2304      	movs	r3, #4
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e0c6      	b.n	80075f8 <UART_SetConfig+0x348>
 800746a:	2308      	movs	r3, #8
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e0c3      	b.n	80075f8 <UART_SetConfig+0x348>
 8007470:	2310      	movs	r3, #16
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e0c0      	b.n	80075f8 <UART_SetConfig+0x348>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a44      	ldr	r2, [pc, #272]	@ (800758c <UART_SetConfig+0x2dc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d125      	bne.n	80074cc <UART_SetConfig+0x21c>
 8007480:	4b3e      	ldr	r3, [pc, #248]	@ (800757c <UART_SetConfig+0x2cc>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800748a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800748e:	d017      	beq.n	80074c0 <UART_SetConfig+0x210>
 8007490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007494:	d817      	bhi.n	80074c6 <UART_SetConfig+0x216>
 8007496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800749a:	d00b      	beq.n	80074b4 <UART_SetConfig+0x204>
 800749c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074a0:	d811      	bhi.n	80074c6 <UART_SetConfig+0x216>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <UART_SetConfig+0x1fe>
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074aa:	d006      	beq.n	80074ba <UART_SetConfig+0x20a>
 80074ac:	e00b      	b.n	80074c6 <UART_SetConfig+0x216>
 80074ae:	2300      	movs	r3, #0
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e0a1      	b.n	80075f8 <UART_SetConfig+0x348>
 80074b4:	2302      	movs	r3, #2
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e09e      	b.n	80075f8 <UART_SetConfig+0x348>
 80074ba:	2304      	movs	r3, #4
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e09b      	b.n	80075f8 <UART_SetConfig+0x348>
 80074c0:	2308      	movs	r3, #8
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	e098      	b.n	80075f8 <UART_SetConfig+0x348>
 80074c6:	2310      	movs	r3, #16
 80074c8:	77fb      	strb	r3, [r7, #31]
 80074ca:	e095      	b.n	80075f8 <UART_SetConfig+0x348>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007590 <UART_SetConfig+0x2e0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d125      	bne.n	8007522 <UART_SetConfig+0x272>
 80074d6:	4b29      	ldr	r3, [pc, #164]	@ (800757c <UART_SetConfig+0x2cc>)
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074e4:	d017      	beq.n	8007516 <UART_SetConfig+0x266>
 80074e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074ea:	d817      	bhi.n	800751c <UART_SetConfig+0x26c>
 80074ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f0:	d00b      	beq.n	800750a <UART_SetConfig+0x25a>
 80074f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074f6:	d811      	bhi.n	800751c <UART_SetConfig+0x26c>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <UART_SetConfig+0x254>
 80074fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007500:	d006      	beq.n	8007510 <UART_SetConfig+0x260>
 8007502:	e00b      	b.n	800751c <UART_SetConfig+0x26c>
 8007504:	2301      	movs	r3, #1
 8007506:	77fb      	strb	r3, [r7, #31]
 8007508:	e076      	b.n	80075f8 <UART_SetConfig+0x348>
 800750a:	2302      	movs	r3, #2
 800750c:	77fb      	strb	r3, [r7, #31]
 800750e:	e073      	b.n	80075f8 <UART_SetConfig+0x348>
 8007510:	2304      	movs	r3, #4
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e070      	b.n	80075f8 <UART_SetConfig+0x348>
 8007516:	2308      	movs	r3, #8
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e06d      	b.n	80075f8 <UART_SetConfig+0x348>
 800751c:	2310      	movs	r3, #16
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e06a      	b.n	80075f8 <UART_SetConfig+0x348>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1b      	ldr	r2, [pc, #108]	@ (8007594 <UART_SetConfig+0x2e4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d138      	bne.n	800759e <UART_SetConfig+0x2ee>
 800752c:	4b13      	ldr	r3, [pc, #76]	@ (800757c <UART_SetConfig+0x2cc>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007532:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007536:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800753a:	d017      	beq.n	800756c <UART_SetConfig+0x2bc>
 800753c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007540:	d82a      	bhi.n	8007598 <UART_SetConfig+0x2e8>
 8007542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007546:	d00b      	beq.n	8007560 <UART_SetConfig+0x2b0>
 8007548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800754c:	d824      	bhi.n	8007598 <UART_SetConfig+0x2e8>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <UART_SetConfig+0x2aa>
 8007552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007556:	d006      	beq.n	8007566 <UART_SetConfig+0x2b6>
 8007558:	e01e      	b.n	8007598 <UART_SetConfig+0x2e8>
 800755a:	2300      	movs	r3, #0
 800755c:	77fb      	strb	r3, [r7, #31]
 800755e:	e04b      	b.n	80075f8 <UART_SetConfig+0x348>
 8007560:	2302      	movs	r3, #2
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e048      	b.n	80075f8 <UART_SetConfig+0x348>
 8007566:	2304      	movs	r3, #4
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	e045      	b.n	80075f8 <UART_SetConfig+0x348>
 800756c:	2308      	movs	r3, #8
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e042      	b.n	80075f8 <UART_SetConfig+0x348>
 8007572:	bf00      	nop
 8007574:	efff69f3 	.word	0xefff69f3
 8007578:	40011000 	.word	0x40011000
 800757c:	40023800 	.word	0x40023800
 8007580:	40004400 	.word	0x40004400
 8007584:	40004800 	.word	0x40004800
 8007588:	40004c00 	.word	0x40004c00
 800758c:	40005000 	.word	0x40005000
 8007590:	40011400 	.word	0x40011400
 8007594:	40007800 	.word	0x40007800
 8007598:	2310      	movs	r3, #16
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e02c      	b.n	80075f8 <UART_SetConfig+0x348>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a72      	ldr	r2, [pc, #456]	@ (800776c <UART_SetConfig+0x4bc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d125      	bne.n	80075f4 <UART_SetConfig+0x344>
 80075a8:	4b71      	ldr	r3, [pc, #452]	@ (8007770 <UART_SetConfig+0x4c0>)
 80075aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80075b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80075b6:	d017      	beq.n	80075e8 <UART_SetConfig+0x338>
 80075b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80075bc:	d817      	bhi.n	80075ee <UART_SetConfig+0x33e>
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c2:	d00b      	beq.n	80075dc <UART_SetConfig+0x32c>
 80075c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c8:	d811      	bhi.n	80075ee <UART_SetConfig+0x33e>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <UART_SetConfig+0x326>
 80075ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075d2:	d006      	beq.n	80075e2 <UART_SetConfig+0x332>
 80075d4:	e00b      	b.n	80075ee <UART_SetConfig+0x33e>
 80075d6:	2300      	movs	r3, #0
 80075d8:	77fb      	strb	r3, [r7, #31]
 80075da:	e00d      	b.n	80075f8 <UART_SetConfig+0x348>
 80075dc:	2302      	movs	r3, #2
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e00a      	b.n	80075f8 <UART_SetConfig+0x348>
 80075e2:	2304      	movs	r3, #4
 80075e4:	77fb      	strb	r3, [r7, #31]
 80075e6:	e007      	b.n	80075f8 <UART_SetConfig+0x348>
 80075e8:	2308      	movs	r3, #8
 80075ea:	77fb      	strb	r3, [r7, #31]
 80075ec:	e004      	b.n	80075f8 <UART_SetConfig+0x348>
 80075ee:	2310      	movs	r3, #16
 80075f0:	77fb      	strb	r3, [r7, #31]
 80075f2:	e001      	b.n	80075f8 <UART_SetConfig+0x348>
 80075f4:	2310      	movs	r3, #16
 80075f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007600:	d15b      	bne.n	80076ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007602:	7ffb      	ldrb	r3, [r7, #31]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d828      	bhi.n	800765a <UART_SetConfig+0x3aa>
 8007608:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <UART_SetConfig+0x360>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	08007635 	.word	0x08007635
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007645 	.word	0x08007645
 800761c:	0800765b 	.word	0x0800765b
 8007620:	0800764b 	.word	0x0800764b
 8007624:	0800765b 	.word	0x0800765b
 8007628:	0800765b 	.word	0x0800765b
 800762c:	0800765b 	.word	0x0800765b
 8007630:	08007653 	.word	0x08007653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007634:	f7fd f9d2 	bl	80049dc <HAL_RCC_GetPCLK1Freq>
 8007638:	61b8      	str	r0, [r7, #24]
        break;
 800763a:	e013      	b.n	8007664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fd f9e2 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 8007640:	61b8      	str	r0, [r7, #24]
        break;
 8007642:	e00f      	b.n	8007664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007644:	4b4b      	ldr	r3, [pc, #300]	@ (8007774 <UART_SetConfig+0x4c4>)
 8007646:	61bb      	str	r3, [r7, #24]
        break;
 8007648:	e00c      	b.n	8007664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764a:	f7fd f8b5 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 800764e:	61b8      	str	r0, [r7, #24]
        break;
 8007650:	e008      	b.n	8007664 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007656:	61bb      	str	r3, [r7, #24]
        break;
 8007658:	e004      	b.n	8007664 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	77bb      	strb	r3, [r7, #30]
        break;
 8007662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d074      	beq.n	8007754 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	005a      	lsls	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	fbb2 f3f3 	udiv	r3, r2, r3
 800767e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b0f      	cmp	r3, #15
 8007684:	d916      	bls.n	80076b4 <UART_SetConfig+0x404>
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800768c:	d212      	bcs.n	80076b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	b29b      	uxth	r3, r3
 8007692:	f023 030f 	bic.w	r3, r3, #15
 8007696:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	b29b      	uxth	r3, r3
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	89fa      	ldrh	r2, [r7, #14]
 80076b0:	60da      	str	r2, [r3, #12]
 80076b2:	e04f      	b.n	8007754 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	77bb      	strb	r3, [r7, #30]
 80076b8:	e04c      	b.n	8007754 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ba:	7ffb      	ldrb	r3, [r7, #31]
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d828      	bhi.n	8007712 <UART_SetConfig+0x462>
 80076c0:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <UART_SetConfig+0x418>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076f5 	.word	0x080076f5
 80076d0:	080076fd 	.word	0x080076fd
 80076d4:	08007713 	.word	0x08007713
 80076d8:	08007703 	.word	0x08007703
 80076dc:	08007713 	.word	0x08007713
 80076e0:	08007713 	.word	0x08007713
 80076e4:	08007713 	.word	0x08007713
 80076e8:	0800770b 	.word	0x0800770b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ec:	f7fd f976 	bl	80049dc <HAL_RCC_GetPCLK1Freq>
 80076f0:	61b8      	str	r0, [r7, #24]
        break;
 80076f2:	e013      	b.n	800771c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f4:	f7fd f986 	bl	8004a04 <HAL_RCC_GetPCLK2Freq>
 80076f8:	61b8      	str	r0, [r7, #24]
        break;
 80076fa:	e00f      	b.n	800771c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007774 <UART_SetConfig+0x4c4>)
 80076fe:	61bb      	str	r3, [r7, #24]
        break;
 8007700:	e00c      	b.n	800771c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007702:	f7fd f859 	bl	80047b8 <HAL_RCC_GetSysClockFreq>
 8007706:	61b8      	str	r0, [r7, #24]
        break;
 8007708:	e008      	b.n	800771c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800770e:	61bb      	str	r3, [r7, #24]
        break;
 8007710:	e004      	b.n	800771c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	77bb      	strb	r3, [r7, #30]
        break;
 800771a:	bf00      	nop
    }

    if (pclk != 0U)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	085a      	lsrs	r2, r3, #1
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	441a      	add	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b0f      	cmp	r3, #15
 800773a:	d909      	bls.n	8007750 <UART_SetConfig+0x4a0>
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007742:	d205      	bcs.n	8007750 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60da      	str	r2, [r3, #12]
 800774e:	e001      	b.n	8007754 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007760:	7fbb      	ldrb	r3, [r7, #30]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40007c00 	.word	0x40007c00
 8007770:	40023800 	.word	0x40023800
 8007774:	00f42400 	.word	0x00f42400

08007778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00a      	beq.n	80077e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00a      	beq.n	8007808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01a      	beq.n	800788e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007876:	d10a      	bne.n	800788e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
  }
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b098      	sub	sp, #96	@ 0x60
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078cc:	f7fb f8dc 	bl	8002a88 <HAL_GetTick>
 80078d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d12e      	bne.n	800793e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e8:	2200      	movs	r2, #0
 80078ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f88c 	bl	8007a0c <UART_WaitOnFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d021      	beq.n	800793e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800790e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007918:	647b      	str	r3, [r7, #68]	@ 0x44
 800791a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800791e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e062      	b.n	8007a04 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b04      	cmp	r3, #4
 800794a:	d149      	bne.n	80079e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800794c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007954:	2200      	movs	r2, #0
 8007956:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f856 	bl	8007a0c <UART_WaitOnFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d03c      	beq.n	80079e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	623b      	str	r3, [r7, #32]
   return(result);
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800797a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007984:	633b      	str	r3, [r7, #48]	@ 0x30
 8007986:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800798a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079b8:	61fa      	str	r2, [r7, #28]
 80079ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	617b      	str	r3, [r7, #20]
   return(result);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e5      	bne.n	8007998 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e011      	b.n	8007a04 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3758      	adds	r7, #88	@ 0x58
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a1c:	e04f      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d04b      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a26:	f7fb f82f 	bl	8002a88 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d302      	bcc.n	8007a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e04e      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d037      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b80      	cmp	r3, #128	@ 0x80
 8007a52:	d034      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d031      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d110      	bne.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2208      	movs	r2, #8
 8007a6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f838 	bl	8007ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2208      	movs	r2, #8
 8007a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e029      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a98:	d111      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f81e 	bl	8007ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e00f      	b.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	bf0c      	ite	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	2300      	movne	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d0a0      	beq.n	8007a1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b095      	sub	sp, #84	@ 0x54
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f023 0301 	bic.w	r3, r3, #1
 8007b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d118      	bne.n	8007b8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f023 0310 	bic.w	r3, r3, #16
 8007b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7e:	6979      	ldr	r1, [r7, #20]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	613b      	str	r3, [r7, #16]
   return(result);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e6      	bne.n	8007b5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ba2:	bf00      	nop
 8007ba4:	3754      	adds	r7, #84	@ 0x54
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
	...

08007bb0 <std>:
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bbe:	6083      	str	r3, [r0, #8]
 8007bc0:	8181      	strh	r1, [r0, #12]
 8007bc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bc4:	81c2      	strh	r2, [r0, #14]
 8007bc6:	6183      	str	r3, [r0, #24]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	2208      	movs	r2, #8
 8007bcc:	305c      	adds	r0, #92	@ 0x5c
 8007bce:	f000 f9f9 	bl	8007fc4 <memset>
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <std+0x58>)
 8007bd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <std+0x5c>)
 8007bd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <std+0x60>)
 8007bdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <std+0x64>)
 8007be0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007be2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c18 <std+0x68>)
 8007be4:	6224      	str	r4, [r4, #32]
 8007be6:	429c      	cmp	r4, r3
 8007be8:	d006      	beq.n	8007bf8 <std+0x48>
 8007bea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bee:	4294      	cmp	r4, r2
 8007bf0:	d002      	beq.n	8007bf8 <std+0x48>
 8007bf2:	33d0      	adds	r3, #208	@ 0xd0
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	d105      	bne.n	8007c04 <std+0x54>
 8007bf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c00:	f000 ba58 	b.w	80080b4 <__retarget_lock_init_recursive>
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	bf00      	nop
 8007c08:	08007e15 	.word	0x08007e15
 8007c0c:	08007e37 	.word	0x08007e37
 8007c10:	08007e6f 	.word	0x08007e6f
 8007c14:	08007e93 	.word	0x08007e93
 8007c18:	200007bc 	.word	0x200007bc

08007c1c <stdio_exit_handler>:
 8007c1c:	4a02      	ldr	r2, [pc, #8]	@ (8007c28 <stdio_exit_handler+0xc>)
 8007c1e:	4903      	ldr	r1, [pc, #12]	@ (8007c2c <stdio_exit_handler+0x10>)
 8007c20:	4803      	ldr	r0, [pc, #12]	@ (8007c30 <stdio_exit_handler+0x14>)
 8007c22:	f000 b869 	b.w	8007cf8 <_fwalk_sglue>
 8007c26:	bf00      	nop
 8007c28:	2000000c 	.word	0x2000000c
 8007c2c:	08008971 	.word	0x08008971
 8007c30:	2000001c 	.word	0x2000001c

08007c34 <cleanup_stdio>:
 8007c34:	6841      	ldr	r1, [r0, #4]
 8007c36:	4b0c      	ldr	r3, [pc, #48]	@ (8007c68 <cleanup_stdio+0x34>)
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	d001      	beq.n	8007c44 <cleanup_stdio+0x10>
 8007c40:	f000 fe96 	bl	8008970 <_fflush_r>
 8007c44:	68a1      	ldr	r1, [r4, #8]
 8007c46:	4b09      	ldr	r3, [pc, #36]	@ (8007c6c <cleanup_stdio+0x38>)
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	d002      	beq.n	8007c52 <cleanup_stdio+0x1e>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fe8f 	bl	8008970 <_fflush_r>
 8007c52:	68e1      	ldr	r1, [r4, #12]
 8007c54:	4b06      	ldr	r3, [pc, #24]	@ (8007c70 <cleanup_stdio+0x3c>)
 8007c56:	4299      	cmp	r1, r3
 8007c58:	d004      	beq.n	8007c64 <cleanup_stdio+0x30>
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	f000 be86 	b.w	8008970 <_fflush_r>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	bf00      	nop
 8007c68:	200007bc 	.word	0x200007bc
 8007c6c:	20000824 	.word	0x20000824
 8007c70:	2000088c 	.word	0x2000088c

08007c74 <global_stdio_init.part.0>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca4 <global_stdio_init.part.0+0x30>)
 8007c78:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca8 <global_stdio_init.part.0+0x34>)
 8007c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007cac <global_stdio_init.part.0+0x38>)
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	4620      	mov	r0, r4
 8007c80:	2200      	movs	r2, #0
 8007c82:	2104      	movs	r1, #4
 8007c84:	f7ff ff94 	bl	8007bb0 <std>
 8007c88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	2109      	movs	r1, #9
 8007c90:	f7ff ff8e 	bl	8007bb0 <std>
 8007c94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c98:	2202      	movs	r2, #2
 8007c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9e:	2112      	movs	r1, #18
 8007ca0:	f7ff bf86 	b.w	8007bb0 <std>
 8007ca4:	200008f4 	.word	0x200008f4
 8007ca8:	200007bc 	.word	0x200007bc
 8007cac:	08007c1d 	.word	0x08007c1d

08007cb0 <__sfp_lock_acquire>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	@ (8007cb8 <__sfp_lock_acquire+0x8>)
 8007cb2:	f000 ba00 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	200008fd 	.word	0x200008fd

08007cbc <__sfp_lock_release>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	@ (8007cc4 <__sfp_lock_release+0x8>)
 8007cbe:	f000 b9fb 	b.w	80080b8 <__retarget_lock_release_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200008fd 	.word	0x200008fd

08007cc8 <__sinit>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	4604      	mov	r4, r0
 8007ccc:	f7ff fff0 	bl	8007cb0 <__sfp_lock_acquire>
 8007cd0:	6a23      	ldr	r3, [r4, #32]
 8007cd2:	b11b      	cbz	r3, 8007cdc <__sinit+0x14>
 8007cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd8:	f7ff bff0 	b.w	8007cbc <__sfp_lock_release>
 8007cdc:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <__sinit+0x28>)
 8007cde:	6223      	str	r3, [r4, #32]
 8007ce0:	4b04      	ldr	r3, [pc, #16]	@ (8007cf4 <__sinit+0x2c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f5      	bne.n	8007cd4 <__sinit+0xc>
 8007ce8:	f7ff ffc4 	bl	8007c74 <global_stdio_init.part.0>
 8007cec:	e7f2      	b.n	8007cd4 <__sinit+0xc>
 8007cee:	bf00      	nop
 8007cf0:	08007c35 	.word	0x08007c35
 8007cf4:	200008f4 	.word	0x200008f4

08007cf8 <_fwalk_sglue>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	4688      	mov	r8, r1
 8007d00:	4614      	mov	r4, r2
 8007d02:	2600      	movs	r6, #0
 8007d04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d08:	f1b9 0901 	subs.w	r9, r9, #1
 8007d0c:	d505      	bpl.n	8007d1a <_fwalk_sglue+0x22>
 8007d0e:	6824      	ldr	r4, [r4, #0]
 8007d10:	2c00      	cmp	r4, #0
 8007d12:	d1f7      	bne.n	8007d04 <_fwalk_sglue+0xc>
 8007d14:	4630      	mov	r0, r6
 8007d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	89ab      	ldrh	r3, [r5, #12]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d907      	bls.n	8007d30 <_fwalk_sglue+0x38>
 8007d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d24:	3301      	adds	r3, #1
 8007d26:	d003      	beq.n	8007d30 <_fwalk_sglue+0x38>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	47c0      	blx	r8
 8007d2e:	4306      	orrs	r6, r0
 8007d30:	3568      	adds	r5, #104	@ 0x68
 8007d32:	e7e9      	b.n	8007d08 <_fwalk_sglue+0x10>

08007d34 <iprintf>:
 8007d34:	b40f      	push	{r0, r1, r2, r3}
 8007d36:	b507      	push	{r0, r1, r2, lr}
 8007d38:	4906      	ldr	r1, [pc, #24]	@ (8007d54 <iprintf+0x20>)
 8007d3a:	ab04      	add	r3, sp, #16
 8007d3c:	6808      	ldr	r0, [r1, #0]
 8007d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d42:	6881      	ldr	r1, [r0, #8]
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	f000 fae9 	bl	800831c <_vfiprintf_r>
 8007d4a:	b003      	add	sp, #12
 8007d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d50:	b004      	add	sp, #16
 8007d52:	4770      	bx	lr
 8007d54:	20000018 	.word	0x20000018

08007d58 <_puts_r>:
 8007d58:	6a03      	ldr	r3, [r0, #32]
 8007d5a:	b570      	push	{r4, r5, r6, lr}
 8007d5c:	6884      	ldr	r4, [r0, #8]
 8007d5e:	4605      	mov	r5, r0
 8007d60:	460e      	mov	r6, r1
 8007d62:	b90b      	cbnz	r3, 8007d68 <_puts_r+0x10>
 8007d64:	f7ff ffb0 	bl	8007cc8 <__sinit>
 8007d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d6a:	07db      	lsls	r3, r3, #31
 8007d6c:	d405      	bmi.n	8007d7a <_puts_r+0x22>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	0598      	lsls	r0, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_puts_r+0x22>
 8007d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d76:	f000 f99e 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	0719      	lsls	r1, r3, #28
 8007d7e:	d502      	bpl.n	8007d86 <_puts_r+0x2e>
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d135      	bne.n	8007df2 <_puts_r+0x9a>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f000 f8c5 	bl	8007f18 <__swsetup_r>
 8007d8e:	b380      	cbz	r0, 8007df2 <_puts_r+0x9a>
 8007d90:	f04f 35ff 	mov.w	r5, #4294967295
 8007d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d96:	07da      	lsls	r2, r3, #31
 8007d98:	d405      	bmi.n	8007da6 <_puts_r+0x4e>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	059b      	lsls	r3, r3, #22
 8007d9e:	d402      	bmi.n	8007da6 <_puts_r+0x4e>
 8007da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007da2:	f000 f989 	bl	80080b8 <__retarget_lock_release_recursive>
 8007da6:	4628      	mov	r0, r5
 8007da8:	bd70      	pop	{r4, r5, r6, pc}
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	da04      	bge.n	8007db8 <_puts_r+0x60>
 8007dae:	69a2      	ldr	r2, [r4, #24]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	dc17      	bgt.n	8007de4 <_puts_r+0x8c>
 8007db4:	290a      	cmp	r1, #10
 8007db6:	d015      	beq.n	8007de4 <_puts_r+0x8c>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	7019      	strb	r1, [r3, #0]
 8007dc0:	68a3      	ldr	r3, [r4, #8]
 8007dc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	60a3      	str	r3, [r4, #8]
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d1ed      	bne.n	8007daa <_puts_r+0x52>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da11      	bge.n	8007df6 <_puts_r+0x9e>
 8007dd2:	4622      	mov	r2, r4
 8007dd4:	210a      	movs	r1, #10
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f85f 	bl	8007e9a <__swbuf_r>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d0d7      	beq.n	8007d90 <_puts_r+0x38>
 8007de0:	250a      	movs	r5, #10
 8007de2:	e7d7      	b.n	8007d94 <_puts_r+0x3c>
 8007de4:	4622      	mov	r2, r4
 8007de6:	4628      	mov	r0, r5
 8007de8:	f000 f857 	bl	8007e9a <__swbuf_r>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d1e7      	bne.n	8007dc0 <_puts_r+0x68>
 8007df0:	e7ce      	b.n	8007d90 <_puts_r+0x38>
 8007df2:	3e01      	subs	r6, #1
 8007df4:	e7e4      	b.n	8007dc0 <_puts_r+0x68>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	6022      	str	r2, [r4, #0]
 8007dfc:	220a      	movs	r2, #10
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	e7ee      	b.n	8007de0 <_puts_r+0x88>
	...

08007e04 <puts>:
 8007e04:	4b02      	ldr	r3, [pc, #8]	@ (8007e10 <puts+0xc>)
 8007e06:	4601      	mov	r1, r0
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	f7ff bfa5 	b.w	8007d58 <_puts_r>
 8007e0e:	bf00      	nop
 8007e10:	20000018 	.word	0x20000018

08007e14 <__sread>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f000 f8fc 	bl	8008018 <_read_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	bfab      	itete	ge
 8007e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e26:	89a3      	ldrhlt	r3, [r4, #12]
 8007e28:	181b      	addge	r3, r3, r0
 8007e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e2e:	bfac      	ite	ge
 8007e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e32:	81a3      	strhlt	r3, [r4, #12]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__swrite>:
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	05db      	lsls	r3, r3, #23
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	4616      	mov	r6, r2
 8007e46:	d505      	bpl.n	8007e54 <__swrite+0x1e>
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f000 f8d0 	bl	8007ff4 <_lseek_r>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	4632      	mov	r2, r6
 8007e62:	463b      	mov	r3, r7
 8007e64:	4628      	mov	r0, r5
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f000 b8e7 	b.w	800803c <_write_r>

08007e6e <__sseek>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 f8bd 	bl	8007ff4 <_lseek_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	bf15      	itete	ne
 8007e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e8a:	81a3      	strheq	r3, [r4, #12]
 8007e8c:	bf18      	it	ne
 8007e8e:	81a3      	strhne	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__sclose>:
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 b89d 	b.w	8007fd4 <_close_r>

08007e9a <__swbuf_r>:
 8007e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	b118      	cbz	r0, 8007eac <__swbuf_r+0x12>
 8007ea4:	6a03      	ldr	r3, [r0, #32]
 8007ea6:	b90b      	cbnz	r3, 8007eac <__swbuf_r+0x12>
 8007ea8:	f7ff ff0e 	bl	8007cc8 <__sinit>
 8007eac:	69a3      	ldr	r3, [r4, #24]
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	071a      	lsls	r2, r3, #28
 8007eb4:	d501      	bpl.n	8007eba <__swbuf_r+0x20>
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	b943      	cbnz	r3, 8007ecc <__swbuf_r+0x32>
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f82b 	bl	8007f18 <__swsetup_r>
 8007ec2:	b118      	cbz	r0, 8007ecc <__swbuf_r+0x32>
 8007ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec8:	4638      	mov	r0, r7
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	6922      	ldr	r2, [r4, #16]
 8007ed0:	1a98      	subs	r0, r3, r2
 8007ed2:	6963      	ldr	r3, [r4, #20]
 8007ed4:	b2f6      	uxtb	r6, r6
 8007ed6:	4283      	cmp	r3, r0
 8007ed8:	4637      	mov	r7, r6
 8007eda:	dc05      	bgt.n	8007ee8 <__swbuf_r+0x4e>
 8007edc:	4621      	mov	r1, r4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 fd46 	bl	8008970 <_fflush_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d1ed      	bne.n	8007ec4 <__swbuf_r+0x2a>
 8007ee8:	68a3      	ldr	r3, [r4, #8]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	60a3      	str	r3, [r4, #8]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	6022      	str	r2, [r4, #0]
 8007ef4:	701e      	strb	r6, [r3, #0]
 8007ef6:	6962      	ldr	r2, [r4, #20]
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d004      	beq.n	8007f08 <__swbuf_r+0x6e>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	07db      	lsls	r3, r3, #31
 8007f02:	d5e1      	bpl.n	8007ec8 <__swbuf_r+0x2e>
 8007f04:	2e0a      	cmp	r6, #10
 8007f06:	d1df      	bne.n	8007ec8 <__swbuf_r+0x2e>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 fd30 	bl	8008970 <_fflush_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0d9      	beq.n	8007ec8 <__swbuf_r+0x2e>
 8007f14:	e7d6      	b.n	8007ec4 <__swbuf_r+0x2a>
	...

08007f18 <__swsetup_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4b29      	ldr	r3, [pc, #164]	@ (8007fc0 <__swsetup_r+0xa8>)
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	460c      	mov	r4, r1
 8007f22:	b118      	cbz	r0, 8007f2c <__swsetup_r+0x14>
 8007f24:	6a03      	ldr	r3, [r0, #32]
 8007f26:	b90b      	cbnz	r3, 8007f2c <__swsetup_r+0x14>
 8007f28:	f7ff fece 	bl	8007cc8 <__sinit>
 8007f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f30:	0719      	lsls	r1, r3, #28
 8007f32:	d422      	bmi.n	8007f7a <__swsetup_r+0x62>
 8007f34:	06da      	lsls	r2, r3, #27
 8007f36:	d407      	bmi.n	8007f48 <__swsetup_r+0x30>
 8007f38:	2209      	movs	r2, #9
 8007f3a:	602a      	str	r2, [r5, #0]
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295
 8007f46:	e033      	b.n	8007fb0 <__swsetup_r+0x98>
 8007f48:	0758      	lsls	r0, r3, #29
 8007f4a:	d512      	bpl.n	8007f72 <__swsetup_r+0x5a>
 8007f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f4e:	b141      	cbz	r1, 8007f62 <__swsetup_r+0x4a>
 8007f50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f54:	4299      	cmp	r1, r3
 8007f56:	d002      	beq.n	8007f5e <__swsetup_r+0x46>
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f8bd 	bl	80080d8 <_free_r>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6063      	str	r3, [r4, #4]
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f043 0308 	orr.w	r3, r3, #8
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	b94b      	cbnz	r3, 8007f92 <__swsetup_r+0x7a>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f88:	d003      	beq.n	8007f92 <__swsetup_r+0x7a>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f000 fd3d 	bl	8008a0c <__smakebuf_r>
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	f013 0201 	ands.w	r2, r3, #1
 8007f9a:	d00a      	beq.n	8007fb2 <__swsetup_r+0x9a>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	60a2      	str	r2, [r4, #8]
 8007fa0:	6962      	ldr	r2, [r4, #20]
 8007fa2:	4252      	negs	r2, r2
 8007fa4:	61a2      	str	r2, [r4, #24]
 8007fa6:	6922      	ldr	r2, [r4, #16]
 8007fa8:	b942      	cbnz	r2, 8007fbc <__swsetup_r+0xa4>
 8007faa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fae:	d1c5      	bne.n	8007f3c <__swsetup_r+0x24>
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
 8007fb2:	0799      	lsls	r1, r3, #30
 8007fb4:	bf58      	it	pl
 8007fb6:	6962      	ldrpl	r2, [r4, #20]
 8007fb8:	60a2      	str	r2, [r4, #8]
 8007fba:	e7f4      	b.n	8007fa6 <__swsetup_r+0x8e>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e7f7      	b.n	8007fb0 <__swsetup_r+0x98>
 8007fc0:	20000018 	.word	0x20000018

08007fc4 <memset>:
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <_close_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d06      	ldr	r5, [pc, #24]	@ (8007ff0 <_close_r+0x1c>)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	f7fa fc57 	bl	8002892 <_close>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_close_r+0x1a>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_close_r+0x1a>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	200008f8 	.word	0x200008f8

08007ff4 <_lseek_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	@ (8008014 <_lseek_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7fa fc6c 	bl	80028e0 <_lseek>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_lseek_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_lseek_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	200008f8 	.word	0x200008f8

08008018 <_read_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	@ (8008038 <_read_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7fa fbfa 	bl	8002820 <_read>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_read_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_read_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	200008f8 	.word	0x200008f8

0800803c <_write_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d07      	ldr	r5, [pc, #28]	@ (800805c <_write_r+0x20>)
 8008040:	4604      	mov	r4, r0
 8008042:	4608      	mov	r0, r1
 8008044:	4611      	mov	r1, r2
 8008046:	2200      	movs	r2, #0
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f7fa fc05 	bl	800285a <_write>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_write_r+0x1e>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_write_r+0x1e>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	200008f8 	.word	0x200008f8

08008060 <__errno>:
 8008060:	4b01      	ldr	r3, [pc, #4]	@ (8008068 <__errno+0x8>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000018 	.word	0x20000018

0800806c <__libc_init_array>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4d0d      	ldr	r5, [pc, #52]	@ (80080a4 <__libc_init_array+0x38>)
 8008070:	4c0d      	ldr	r4, [pc, #52]	@ (80080a8 <__libc_init_array+0x3c>)
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	2600      	movs	r6, #0
 8008078:	42a6      	cmp	r6, r4
 800807a:	d109      	bne.n	8008090 <__libc_init_array+0x24>
 800807c:	4d0b      	ldr	r5, [pc, #44]	@ (80080ac <__libc_init_array+0x40>)
 800807e:	4c0c      	ldr	r4, [pc, #48]	@ (80080b0 <__libc_init_array+0x44>)
 8008080:	f000 fd32 	bl	8008ae8 <_init>
 8008084:	1b64      	subs	r4, r4, r5
 8008086:	10a4      	asrs	r4, r4, #2
 8008088:	2600      	movs	r6, #0
 800808a:	42a6      	cmp	r6, r4
 800808c:	d105      	bne.n	800809a <__libc_init_array+0x2e>
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	f855 3b04 	ldr.w	r3, [r5], #4
 8008094:	4798      	blx	r3
 8008096:	3601      	adds	r6, #1
 8008098:	e7ee      	b.n	8008078 <__libc_init_array+0xc>
 800809a:	f855 3b04 	ldr.w	r3, [r5], #4
 800809e:	4798      	blx	r3
 80080a0:	3601      	adds	r6, #1
 80080a2:	e7f2      	b.n	800808a <__libc_init_array+0x1e>
 80080a4:	08008bd8 	.word	0x08008bd8
 80080a8:	08008bd8 	.word	0x08008bd8
 80080ac:	08008bd8 	.word	0x08008bd8
 80080b0:	08008bdc 	.word	0x08008bdc

080080b4 <__retarget_lock_init_recursive>:
 80080b4:	4770      	bx	lr

080080b6 <__retarget_lock_acquire_recursive>:
 80080b6:	4770      	bx	lr

080080b8 <__retarget_lock_release_recursive>:
 80080b8:	4770      	bx	lr

080080ba <memcpy>:
 80080ba:	440a      	add	r2, r1
 80080bc:	4291      	cmp	r1, r2
 80080be:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c2:	d100      	bne.n	80080c6 <memcpy+0xc>
 80080c4:	4770      	bx	lr
 80080c6:	b510      	push	{r4, lr}
 80080c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d0:	4291      	cmp	r1, r2
 80080d2:	d1f9      	bne.n	80080c8 <memcpy+0xe>
 80080d4:	bd10      	pop	{r4, pc}
	...

080080d8 <_free_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4605      	mov	r5, r0
 80080dc:	2900      	cmp	r1, #0
 80080de:	d041      	beq.n	8008164 <_free_r+0x8c>
 80080e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e4:	1f0c      	subs	r4, r1, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bfb8      	it	lt
 80080ea:	18e4      	addlt	r4, r4, r3
 80080ec:	f000 f8e0 	bl	80082b0 <__malloc_lock>
 80080f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008168 <_free_r+0x90>)
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	b933      	cbnz	r3, 8008104 <_free_r+0x2c>
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	6014      	str	r4, [r2, #0]
 80080fa:	4628      	mov	r0, r5
 80080fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008100:	f000 b8dc 	b.w	80082bc <__malloc_unlock>
 8008104:	42a3      	cmp	r3, r4
 8008106:	d908      	bls.n	800811a <_free_r+0x42>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	1821      	adds	r1, r4, r0
 800810c:	428b      	cmp	r3, r1
 800810e:	bf01      	itttt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	1809      	addeq	r1, r1, r0
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	e7ed      	b.n	80080f6 <_free_r+0x1e>
 800811a:	461a      	mov	r2, r3
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b10b      	cbz	r3, 8008124 <_free_r+0x4c>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d9fa      	bls.n	800811a <_free_r+0x42>
 8008124:	6811      	ldr	r1, [r2, #0]
 8008126:	1850      	adds	r0, r2, r1
 8008128:	42a0      	cmp	r0, r4
 800812a:	d10b      	bne.n	8008144 <_free_r+0x6c>
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	4401      	add	r1, r0
 8008130:	1850      	adds	r0, r2, r1
 8008132:	4283      	cmp	r3, r0
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	d1e0      	bne.n	80080fa <_free_r+0x22>
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	4408      	add	r0, r1
 8008140:	6010      	str	r0, [r2, #0]
 8008142:	e7da      	b.n	80080fa <_free_r+0x22>
 8008144:	d902      	bls.n	800814c <_free_r+0x74>
 8008146:	230c      	movs	r3, #12
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	e7d6      	b.n	80080fa <_free_r+0x22>
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	1821      	adds	r1, r4, r0
 8008150:	428b      	cmp	r3, r1
 8008152:	bf04      	itt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	bf04      	itt	eq
 800815c:	1809      	addeq	r1, r1, r0
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	6054      	str	r4, [r2, #4]
 8008162:	e7ca      	b.n	80080fa <_free_r+0x22>
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	20000904 	.word	0x20000904

0800816c <sbrk_aligned>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4e0f      	ldr	r6, [pc, #60]	@ (80081ac <sbrk_aligned+0x40>)
 8008170:	460c      	mov	r4, r1
 8008172:	6831      	ldr	r1, [r6, #0]
 8008174:	4605      	mov	r5, r0
 8008176:	b911      	cbnz	r1, 800817e <sbrk_aligned+0x12>
 8008178:	f000 fca6 	bl	8008ac8 <_sbrk_r>
 800817c:	6030      	str	r0, [r6, #0]
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 fca1 	bl	8008ac8 <_sbrk_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d103      	bne.n	8008192 <sbrk_aligned+0x26>
 800818a:	f04f 34ff 	mov.w	r4, #4294967295
 800818e:	4620      	mov	r0, r4
 8008190:	bd70      	pop	{r4, r5, r6, pc}
 8008192:	1cc4      	adds	r4, r0, #3
 8008194:	f024 0403 	bic.w	r4, r4, #3
 8008198:	42a0      	cmp	r0, r4
 800819a:	d0f8      	beq.n	800818e <sbrk_aligned+0x22>
 800819c:	1a21      	subs	r1, r4, r0
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fc92 	bl	8008ac8 <_sbrk_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d1f2      	bne.n	800818e <sbrk_aligned+0x22>
 80081a8:	e7ef      	b.n	800818a <sbrk_aligned+0x1e>
 80081aa:	bf00      	nop
 80081ac:	20000900 	.word	0x20000900

080081b0 <_malloc_r>:
 80081b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b4:	1ccd      	adds	r5, r1, #3
 80081b6:	f025 0503 	bic.w	r5, r5, #3
 80081ba:	3508      	adds	r5, #8
 80081bc:	2d0c      	cmp	r5, #12
 80081be:	bf38      	it	cc
 80081c0:	250c      	movcc	r5, #12
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	4606      	mov	r6, r0
 80081c6:	db01      	blt.n	80081cc <_malloc_r+0x1c>
 80081c8:	42a9      	cmp	r1, r5
 80081ca:	d904      	bls.n	80081d6 <_malloc_r+0x26>
 80081cc:	230c      	movs	r3, #12
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082ac <_malloc_r+0xfc>
 80081da:	f000 f869 	bl	80082b0 <__malloc_lock>
 80081de:	f8d8 3000 	ldr.w	r3, [r8]
 80081e2:	461c      	mov	r4, r3
 80081e4:	bb44      	cbnz	r4, 8008238 <_malloc_r+0x88>
 80081e6:	4629      	mov	r1, r5
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff ffbf 	bl	800816c <sbrk_aligned>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	4604      	mov	r4, r0
 80081f2:	d158      	bne.n	80082a6 <_malloc_r+0xf6>
 80081f4:	f8d8 4000 	ldr.w	r4, [r8]
 80081f8:	4627      	mov	r7, r4
 80081fa:	2f00      	cmp	r7, #0
 80081fc:	d143      	bne.n	8008286 <_malloc_r+0xd6>
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d04b      	beq.n	800829a <_malloc_r+0xea>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	4639      	mov	r1, r7
 8008206:	4630      	mov	r0, r6
 8008208:	eb04 0903 	add.w	r9, r4, r3
 800820c:	f000 fc5c 	bl	8008ac8 <_sbrk_r>
 8008210:	4581      	cmp	r9, r0
 8008212:	d142      	bne.n	800829a <_malloc_r+0xea>
 8008214:	6821      	ldr	r1, [r4, #0]
 8008216:	1a6d      	subs	r5, r5, r1
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff ffa6 	bl	800816c <sbrk_aligned>
 8008220:	3001      	adds	r0, #1
 8008222:	d03a      	beq.n	800829a <_malloc_r+0xea>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	442b      	add	r3, r5
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	f8d8 3000 	ldr.w	r3, [r8]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	bb62      	cbnz	r2, 800828c <_malloc_r+0xdc>
 8008232:	f8c8 7000 	str.w	r7, [r8]
 8008236:	e00f      	b.n	8008258 <_malloc_r+0xa8>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	1b52      	subs	r2, r2, r5
 800823c:	d420      	bmi.n	8008280 <_malloc_r+0xd0>
 800823e:	2a0b      	cmp	r2, #11
 8008240:	d917      	bls.n	8008272 <_malloc_r+0xc2>
 8008242:	1961      	adds	r1, r4, r5
 8008244:	42a3      	cmp	r3, r4
 8008246:	6025      	str	r5, [r4, #0]
 8008248:	bf18      	it	ne
 800824a:	6059      	strne	r1, [r3, #4]
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	bf08      	it	eq
 8008250:	f8c8 1000 	streq.w	r1, [r8]
 8008254:	5162      	str	r2, [r4, r5]
 8008256:	604b      	str	r3, [r1, #4]
 8008258:	4630      	mov	r0, r6
 800825a:	f000 f82f 	bl	80082bc <__malloc_unlock>
 800825e:	f104 000b 	add.w	r0, r4, #11
 8008262:	1d23      	adds	r3, r4, #4
 8008264:	f020 0007 	bic.w	r0, r0, #7
 8008268:	1ac2      	subs	r2, r0, r3
 800826a:	bf1c      	itt	ne
 800826c:	1a1b      	subne	r3, r3, r0
 800826e:	50a3      	strne	r3, [r4, r2]
 8008270:	e7af      	b.n	80081d2 <_malloc_r+0x22>
 8008272:	6862      	ldr	r2, [r4, #4]
 8008274:	42a3      	cmp	r3, r4
 8008276:	bf0c      	ite	eq
 8008278:	f8c8 2000 	streq.w	r2, [r8]
 800827c:	605a      	strne	r2, [r3, #4]
 800827e:	e7eb      	b.n	8008258 <_malloc_r+0xa8>
 8008280:	4623      	mov	r3, r4
 8008282:	6864      	ldr	r4, [r4, #4]
 8008284:	e7ae      	b.n	80081e4 <_malloc_r+0x34>
 8008286:	463c      	mov	r4, r7
 8008288:	687f      	ldr	r7, [r7, #4]
 800828a:	e7b6      	b.n	80081fa <_malloc_r+0x4a>
 800828c:	461a      	mov	r2, r3
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	42a3      	cmp	r3, r4
 8008292:	d1fb      	bne.n	800828c <_malloc_r+0xdc>
 8008294:	2300      	movs	r3, #0
 8008296:	6053      	str	r3, [r2, #4]
 8008298:	e7de      	b.n	8008258 <_malloc_r+0xa8>
 800829a:	230c      	movs	r3, #12
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 f80c 	bl	80082bc <__malloc_unlock>
 80082a4:	e794      	b.n	80081d0 <_malloc_r+0x20>
 80082a6:	6005      	str	r5, [r0, #0]
 80082a8:	e7d6      	b.n	8008258 <_malloc_r+0xa8>
 80082aa:	bf00      	nop
 80082ac:	20000904 	.word	0x20000904

080082b0 <__malloc_lock>:
 80082b0:	4801      	ldr	r0, [pc, #4]	@ (80082b8 <__malloc_lock+0x8>)
 80082b2:	f7ff bf00 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 80082b6:	bf00      	nop
 80082b8:	200008fc 	.word	0x200008fc

080082bc <__malloc_unlock>:
 80082bc:	4801      	ldr	r0, [pc, #4]	@ (80082c4 <__malloc_unlock+0x8>)
 80082be:	f7ff befb 	b.w	80080b8 <__retarget_lock_release_recursive>
 80082c2:	bf00      	nop
 80082c4:	200008fc 	.word	0x200008fc

080082c8 <__sfputc_r>:
 80082c8:	6893      	ldr	r3, [r2, #8]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	b410      	push	{r4}
 80082d0:	6093      	str	r3, [r2, #8]
 80082d2:	da08      	bge.n	80082e6 <__sfputc_r+0x1e>
 80082d4:	6994      	ldr	r4, [r2, #24]
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	db01      	blt.n	80082de <__sfputc_r+0x16>
 80082da:	290a      	cmp	r1, #10
 80082dc:	d103      	bne.n	80082e6 <__sfputc_r+0x1e>
 80082de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e2:	f7ff bdda 	b.w	8007e9a <__swbuf_r>
 80082e6:	6813      	ldr	r3, [r2, #0]
 80082e8:	1c58      	adds	r0, r3, #1
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	7019      	strb	r1, [r3, #0]
 80082ee:	4608      	mov	r0, r1
 80082f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <__sfputs_r>:
 80082f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f8:	4606      	mov	r6, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	18d5      	adds	r5, r2, r3
 8008300:	42ac      	cmp	r4, r5
 8008302:	d101      	bne.n	8008308 <__sfputs_r+0x12>
 8008304:	2000      	movs	r0, #0
 8008306:	e007      	b.n	8008318 <__sfputs_r+0x22>
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	463a      	mov	r2, r7
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff ffda 	bl	80082c8 <__sfputc_r>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	d1f3      	bne.n	8008300 <__sfputs_r+0xa>
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800831c <_vfiprintf_r>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	460d      	mov	r5, r1
 8008322:	b09d      	sub	sp, #116	@ 0x74
 8008324:	4614      	mov	r4, r2
 8008326:	4698      	mov	r8, r3
 8008328:	4606      	mov	r6, r0
 800832a:	b118      	cbz	r0, 8008334 <_vfiprintf_r+0x18>
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b90b      	cbnz	r3, 8008334 <_vfiprintf_r+0x18>
 8008330:	f7ff fcca 	bl	8007cc8 <__sinit>
 8008334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008336:	07d9      	lsls	r1, r3, #31
 8008338:	d405      	bmi.n	8008346 <_vfiprintf_r+0x2a>
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	059a      	lsls	r2, r3, #22
 800833e:	d402      	bmi.n	8008346 <_vfiprintf_r+0x2a>
 8008340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008342:	f7ff feb8 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	071b      	lsls	r3, r3, #28
 800834a:	d501      	bpl.n	8008350 <_vfiprintf_r+0x34>
 800834c:	692b      	ldr	r3, [r5, #16]
 800834e:	b99b      	cbnz	r3, 8008378 <_vfiprintf_r+0x5c>
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff fde0 	bl	8007f18 <__swsetup_r>
 8008358:	b170      	cbz	r0, 8008378 <_vfiprintf_r+0x5c>
 800835a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800835c:	07dc      	lsls	r4, r3, #31
 800835e:	d504      	bpl.n	800836a <_vfiprintf_r+0x4e>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	b01d      	add	sp, #116	@ 0x74
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	0598      	lsls	r0, r3, #22
 800836e:	d4f7      	bmi.n	8008360 <_vfiprintf_r+0x44>
 8008370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008372:	f7ff fea1 	bl	80080b8 <__retarget_lock_release_recursive>
 8008376:	e7f3      	b.n	8008360 <_vfiprintf_r+0x44>
 8008378:	2300      	movs	r3, #0
 800837a:	9309      	str	r3, [sp, #36]	@ 0x24
 800837c:	2320      	movs	r3, #32
 800837e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008382:	f8cd 800c 	str.w	r8, [sp, #12]
 8008386:	2330      	movs	r3, #48	@ 0x30
 8008388:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008538 <_vfiprintf_r+0x21c>
 800838c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008390:	f04f 0901 	mov.w	r9, #1
 8008394:	4623      	mov	r3, r4
 8008396:	469a      	mov	sl, r3
 8008398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839c:	b10a      	cbz	r2, 80083a2 <_vfiprintf_r+0x86>
 800839e:	2a25      	cmp	r2, #37	@ 0x25
 80083a0:	d1f9      	bne.n	8008396 <_vfiprintf_r+0x7a>
 80083a2:	ebba 0b04 	subs.w	fp, sl, r4
 80083a6:	d00b      	beq.n	80083c0 <_vfiprintf_r+0xa4>
 80083a8:	465b      	mov	r3, fp
 80083aa:	4622      	mov	r2, r4
 80083ac:	4629      	mov	r1, r5
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff ffa1 	bl	80082f6 <__sfputs_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	f000 80a7 	beq.w	8008508 <_vfiprintf_r+0x1ec>
 80083ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083bc:	445a      	add	r2, fp
 80083be:	9209      	str	r2, [sp, #36]	@ 0x24
 80083c0:	f89a 3000 	ldrb.w	r3, [sl]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 809f 	beq.w	8008508 <_vfiprintf_r+0x1ec>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f04f 32ff 	mov.w	r2, #4294967295
 80083d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d4:	f10a 0a01 	add.w	sl, sl, #1
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	9307      	str	r3, [sp, #28]
 80083dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e2:	4654      	mov	r4, sl
 80083e4:	2205      	movs	r2, #5
 80083e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ea:	4853      	ldr	r0, [pc, #332]	@ (8008538 <_vfiprintf_r+0x21c>)
 80083ec:	f7f7 ff28 	bl	8000240 <memchr>
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	b9d8      	cbnz	r0, 800842c <_vfiprintf_r+0x110>
 80083f4:	06d1      	lsls	r1, r2, #27
 80083f6:	bf44      	itt	mi
 80083f8:	2320      	movmi	r3, #32
 80083fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083fe:	0713      	lsls	r3, r2, #28
 8008400:	bf44      	itt	mi
 8008402:	232b      	movmi	r3, #43	@ 0x2b
 8008404:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008408:	f89a 3000 	ldrb.w	r3, [sl]
 800840c:	2b2a      	cmp	r3, #42	@ 0x2a
 800840e:	d015      	beq.n	800843c <_vfiprintf_r+0x120>
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	4654      	mov	r4, sl
 8008414:	2000      	movs	r0, #0
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	4621      	mov	r1, r4
 800841c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008420:	3b30      	subs	r3, #48	@ 0x30
 8008422:	2b09      	cmp	r3, #9
 8008424:	d94b      	bls.n	80084be <_vfiprintf_r+0x1a2>
 8008426:	b1b0      	cbz	r0, 8008456 <_vfiprintf_r+0x13a>
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	e014      	b.n	8008456 <_vfiprintf_r+0x13a>
 800842c:	eba0 0308 	sub.w	r3, r0, r8
 8008430:	fa09 f303 	lsl.w	r3, r9, r3
 8008434:	4313      	orrs	r3, r2
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	46a2      	mov	sl, r4
 800843a:	e7d2      	b.n	80083e2 <_vfiprintf_r+0xc6>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1d19      	adds	r1, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	9103      	str	r1, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfbb      	ittet	lt
 8008448:	425b      	neglt	r3, r3
 800844a:	f042 0202 	orrlt.w	r2, r2, #2
 800844e:	9307      	strge	r3, [sp, #28]
 8008450:	9307      	strlt	r3, [sp, #28]
 8008452:	bfb8      	it	lt
 8008454:	9204      	strlt	r2, [sp, #16]
 8008456:	7823      	ldrb	r3, [r4, #0]
 8008458:	2b2e      	cmp	r3, #46	@ 0x2e
 800845a:	d10a      	bne.n	8008472 <_vfiprintf_r+0x156>
 800845c:	7863      	ldrb	r3, [r4, #1]
 800845e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008460:	d132      	bne.n	80084c8 <_vfiprintf_r+0x1ac>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9203      	str	r2, [sp, #12]
 800846a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800846e:	3402      	adds	r4, #2
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008548 <_vfiprintf_r+0x22c>
 8008476:	7821      	ldrb	r1, [r4, #0]
 8008478:	2203      	movs	r2, #3
 800847a:	4650      	mov	r0, sl
 800847c:	f7f7 fee0 	bl	8000240 <memchr>
 8008480:	b138      	cbz	r0, 8008492 <_vfiprintf_r+0x176>
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	eba0 000a 	sub.w	r0, r0, sl
 8008488:	2240      	movs	r2, #64	@ 0x40
 800848a:	4082      	lsls	r2, r0
 800848c:	4313      	orrs	r3, r2
 800848e:	3401      	adds	r4, #1
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008496:	4829      	ldr	r0, [pc, #164]	@ (800853c <_vfiprintf_r+0x220>)
 8008498:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800849c:	2206      	movs	r2, #6
 800849e:	f7f7 fecf 	bl	8000240 <memchr>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d03f      	beq.n	8008526 <_vfiprintf_r+0x20a>
 80084a6:	4b26      	ldr	r3, [pc, #152]	@ (8008540 <_vfiprintf_r+0x224>)
 80084a8:	bb1b      	cbnz	r3, 80084f2 <_vfiprintf_r+0x1d6>
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	3307      	adds	r3, #7
 80084ae:	f023 0307 	bic.w	r3, r3, #7
 80084b2:	3308      	adds	r3, #8
 80084b4:	9303      	str	r3, [sp, #12]
 80084b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b8:	443b      	add	r3, r7
 80084ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80084bc:	e76a      	b.n	8008394 <_vfiprintf_r+0x78>
 80084be:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c2:	460c      	mov	r4, r1
 80084c4:	2001      	movs	r0, #1
 80084c6:	e7a8      	b.n	800841a <_vfiprintf_r+0xfe>
 80084c8:	2300      	movs	r3, #0
 80084ca:	3401      	adds	r4, #1
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	4619      	mov	r1, r3
 80084d0:	f04f 0c0a 	mov.w	ip, #10
 80084d4:	4620      	mov	r0, r4
 80084d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084da:	3a30      	subs	r2, #48	@ 0x30
 80084dc:	2a09      	cmp	r2, #9
 80084de:	d903      	bls.n	80084e8 <_vfiprintf_r+0x1cc>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0c6      	beq.n	8008472 <_vfiprintf_r+0x156>
 80084e4:	9105      	str	r1, [sp, #20]
 80084e6:	e7c4      	b.n	8008472 <_vfiprintf_r+0x156>
 80084e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ec:	4604      	mov	r4, r0
 80084ee:	2301      	movs	r3, #1
 80084f0:	e7f0      	b.n	80084d4 <_vfiprintf_r+0x1b8>
 80084f2:	ab03      	add	r3, sp, #12
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	462a      	mov	r2, r5
 80084f8:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <_vfiprintf_r+0x228>)
 80084fa:	a904      	add	r1, sp, #16
 80084fc:	4630      	mov	r0, r6
 80084fe:	f3af 8000 	nop.w
 8008502:	4607      	mov	r7, r0
 8008504:	1c78      	adds	r0, r7, #1
 8008506:	d1d6      	bne.n	80084b6 <_vfiprintf_r+0x19a>
 8008508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800850a:	07d9      	lsls	r1, r3, #31
 800850c:	d405      	bmi.n	800851a <_vfiprintf_r+0x1fe>
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	059a      	lsls	r2, r3, #22
 8008512:	d402      	bmi.n	800851a <_vfiprintf_r+0x1fe>
 8008514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008516:	f7ff fdcf 	bl	80080b8 <__retarget_lock_release_recursive>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	065b      	lsls	r3, r3, #25
 800851e:	f53f af1f 	bmi.w	8008360 <_vfiprintf_r+0x44>
 8008522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008524:	e71e      	b.n	8008364 <_vfiprintf_r+0x48>
 8008526:	ab03      	add	r3, sp, #12
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	462a      	mov	r2, r5
 800852c:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <_vfiprintf_r+0x228>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	4630      	mov	r0, r6
 8008532:	f000 f879 	bl	8008628 <_printf_i>
 8008536:	e7e4      	b.n	8008502 <_vfiprintf_r+0x1e6>
 8008538:	08008b9c 	.word	0x08008b9c
 800853c:	08008ba6 	.word	0x08008ba6
 8008540:	00000000 	.word	0x00000000
 8008544:	080082f7 	.word	0x080082f7
 8008548:	08008ba2 	.word	0x08008ba2

0800854c <_printf_common>:
 800854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	4616      	mov	r6, r2
 8008552:	4698      	mov	r8, r3
 8008554:	688a      	ldr	r2, [r1, #8]
 8008556:	690b      	ldr	r3, [r1, #16]
 8008558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800855c:	4293      	cmp	r3, r2
 800855e:	bfb8      	it	lt
 8008560:	4613      	movlt	r3, r2
 8008562:	6033      	str	r3, [r6, #0]
 8008564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008568:	4607      	mov	r7, r0
 800856a:	460c      	mov	r4, r1
 800856c:	b10a      	cbz	r2, 8008572 <_printf_common+0x26>
 800856e:	3301      	adds	r3, #1
 8008570:	6033      	str	r3, [r6, #0]
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	0699      	lsls	r1, r3, #26
 8008576:	bf42      	ittt	mi
 8008578:	6833      	ldrmi	r3, [r6, #0]
 800857a:	3302      	addmi	r3, #2
 800857c:	6033      	strmi	r3, [r6, #0]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	f015 0506 	ands.w	r5, r5, #6
 8008584:	d106      	bne.n	8008594 <_printf_common+0x48>
 8008586:	f104 0a19 	add.w	sl, r4, #25
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	6832      	ldr	r2, [r6, #0]
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	42ab      	cmp	r3, r5
 8008592:	dc26      	bgt.n	80085e2 <_printf_common+0x96>
 8008594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	3b00      	subs	r3, #0
 800859c:	bf18      	it	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	0692      	lsls	r2, r2, #26
 80085a2:	d42b      	bmi.n	80085fc <_printf_common+0xb0>
 80085a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085a8:	4641      	mov	r1, r8
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c8      	blx	r9
 80085ae:	3001      	adds	r0, #1
 80085b0:	d01e      	beq.n	80085f0 <_printf_common+0xa4>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	f003 0306 	and.w	r3, r3, #6
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	bf02      	ittt	eq
 80085be:	68e5      	ldreq	r5, [r4, #12]
 80085c0:	6833      	ldreq	r3, [r6, #0]
 80085c2:	1aed      	subeq	r5, r5, r3
 80085c4:	68a3      	ldr	r3, [r4, #8]
 80085c6:	bf0c      	ite	eq
 80085c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085cc:	2500      	movne	r5, #0
 80085ce:	4293      	cmp	r3, r2
 80085d0:	bfc4      	itt	gt
 80085d2:	1a9b      	subgt	r3, r3, r2
 80085d4:	18ed      	addgt	r5, r5, r3
 80085d6:	2600      	movs	r6, #0
 80085d8:	341a      	adds	r4, #26
 80085da:	42b5      	cmp	r5, r6
 80085dc:	d11a      	bne.n	8008614 <_printf_common+0xc8>
 80085de:	2000      	movs	r0, #0
 80085e0:	e008      	b.n	80085f4 <_printf_common+0xa8>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4652      	mov	r2, sl
 80085e6:	4641      	mov	r1, r8
 80085e8:	4638      	mov	r0, r7
 80085ea:	47c8      	blx	r9
 80085ec:	3001      	adds	r0, #1
 80085ee:	d103      	bne.n	80085f8 <_printf_common+0xac>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f8:	3501      	adds	r5, #1
 80085fa:	e7c6      	b.n	800858a <_printf_common+0x3e>
 80085fc:	18e1      	adds	r1, r4, r3
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	2030      	movs	r0, #48	@ 0x30
 8008602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008606:	4422      	add	r2, r4
 8008608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800860c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008610:	3302      	adds	r3, #2
 8008612:	e7c7      	b.n	80085a4 <_printf_common+0x58>
 8008614:	2301      	movs	r3, #1
 8008616:	4622      	mov	r2, r4
 8008618:	4641      	mov	r1, r8
 800861a:	4638      	mov	r0, r7
 800861c:	47c8      	blx	r9
 800861e:	3001      	adds	r0, #1
 8008620:	d0e6      	beq.n	80085f0 <_printf_common+0xa4>
 8008622:	3601      	adds	r6, #1
 8008624:	e7d9      	b.n	80085da <_printf_common+0x8e>
	...

08008628 <_printf_i>:
 8008628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800862c:	7e0f      	ldrb	r7, [r1, #24]
 800862e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008630:	2f78      	cmp	r7, #120	@ 0x78
 8008632:	4691      	mov	r9, r2
 8008634:	4680      	mov	r8, r0
 8008636:	460c      	mov	r4, r1
 8008638:	469a      	mov	sl, r3
 800863a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800863e:	d807      	bhi.n	8008650 <_printf_i+0x28>
 8008640:	2f62      	cmp	r7, #98	@ 0x62
 8008642:	d80a      	bhi.n	800865a <_printf_i+0x32>
 8008644:	2f00      	cmp	r7, #0
 8008646:	f000 80d2 	beq.w	80087ee <_printf_i+0x1c6>
 800864a:	2f58      	cmp	r7, #88	@ 0x58
 800864c:	f000 80b9 	beq.w	80087c2 <_printf_i+0x19a>
 8008650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008658:	e03a      	b.n	80086d0 <_printf_i+0xa8>
 800865a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800865e:	2b15      	cmp	r3, #21
 8008660:	d8f6      	bhi.n	8008650 <_printf_i+0x28>
 8008662:	a101      	add	r1, pc, #4	@ (adr r1, 8008668 <_printf_i+0x40>)
 8008664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008668:	080086c1 	.word	0x080086c1
 800866c:	080086d5 	.word	0x080086d5
 8008670:	08008651 	.word	0x08008651
 8008674:	08008651 	.word	0x08008651
 8008678:	08008651 	.word	0x08008651
 800867c:	08008651 	.word	0x08008651
 8008680:	080086d5 	.word	0x080086d5
 8008684:	08008651 	.word	0x08008651
 8008688:	08008651 	.word	0x08008651
 800868c:	08008651 	.word	0x08008651
 8008690:	08008651 	.word	0x08008651
 8008694:	080087d5 	.word	0x080087d5
 8008698:	080086ff 	.word	0x080086ff
 800869c:	0800878f 	.word	0x0800878f
 80086a0:	08008651 	.word	0x08008651
 80086a4:	08008651 	.word	0x08008651
 80086a8:	080087f7 	.word	0x080087f7
 80086ac:	08008651 	.word	0x08008651
 80086b0:	080086ff 	.word	0x080086ff
 80086b4:	08008651 	.word	0x08008651
 80086b8:	08008651 	.word	0x08008651
 80086bc:	08008797 	.word	0x08008797
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6032      	str	r2, [r6, #0]
 80086c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086d0:	2301      	movs	r3, #1
 80086d2:	e09d      	b.n	8008810 <_printf_i+0x1e8>
 80086d4:	6833      	ldr	r3, [r6, #0]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	0606      	lsls	r6, r0, #24
 80086de:	d501      	bpl.n	80086e4 <_printf_i+0xbc>
 80086e0:	681d      	ldr	r5, [r3, #0]
 80086e2:	e003      	b.n	80086ec <_printf_i+0xc4>
 80086e4:	0645      	lsls	r5, r0, #25
 80086e6:	d5fb      	bpl.n	80086e0 <_printf_i+0xb8>
 80086e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	da03      	bge.n	80086f8 <_printf_i+0xd0>
 80086f0:	232d      	movs	r3, #45	@ 0x2d
 80086f2:	426d      	negs	r5, r5
 80086f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086f8:	4859      	ldr	r0, [pc, #356]	@ (8008860 <_printf_i+0x238>)
 80086fa:	230a      	movs	r3, #10
 80086fc:	e011      	b.n	8008722 <_printf_i+0xfa>
 80086fe:	6821      	ldr	r1, [r4, #0]
 8008700:	6833      	ldr	r3, [r6, #0]
 8008702:	0608      	lsls	r0, r1, #24
 8008704:	f853 5b04 	ldr.w	r5, [r3], #4
 8008708:	d402      	bmi.n	8008710 <_printf_i+0xe8>
 800870a:	0649      	lsls	r1, r1, #25
 800870c:	bf48      	it	mi
 800870e:	b2ad      	uxthmi	r5, r5
 8008710:	2f6f      	cmp	r7, #111	@ 0x6f
 8008712:	4853      	ldr	r0, [pc, #332]	@ (8008860 <_printf_i+0x238>)
 8008714:	6033      	str	r3, [r6, #0]
 8008716:	bf14      	ite	ne
 8008718:	230a      	movne	r3, #10
 800871a:	2308      	moveq	r3, #8
 800871c:	2100      	movs	r1, #0
 800871e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008722:	6866      	ldr	r6, [r4, #4]
 8008724:	60a6      	str	r6, [r4, #8]
 8008726:	2e00      	cmp	r6, #0
 8008728:	bfa2      	ittt	ge
 800872a:	6821      	ldrge	r1, [r4, #0]
 800872c:	f021 0104 	bicge.w	r1, r1, #4
 8008730:	6021      	strge	r1, [r4, #0]
 8008732:	b90d      	cbnz	r5, 8008738 <_printf_i+0x110>
 8008734:	2e00      	cmp	r6, #0
 8008736:	d04b      	beq.n	80087d0 <_printf_i+0x1a8>
 8008738:	4616      	mov	r6, r2
 800873a:	fbb5 f1f3 	udiv	r1, r5, r3
 800873e:	fb03 5711 	mls	r7, r3, r1, r5
 8008742:	5dc7      	ldrb	r7, [r0, r7]
 8008744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008748:	462f      	mov	r7, r5
 800874a:	42bb      	cmp	r3, r7
 800874c:	460d      	mov	r5, r1
 800874e:	d9f4      	bls.n	800873a <_printf_i+0x112>
 8008750:	2b08      	cmp	r3, #8
 8008752:	d10b      	bne.n	800876c <_printf_i+0x144>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07df      	lsls	r7, r3, #31
 8008758:	d508      	bpl.n	800876c <_printf_i+0x144>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	6861      	ldr	r1, [r4, #4]
 800875e:	4299      	cmp	r1, r3
 8008760:	bfde      	ittt	le
 8008762:	2330      	movle	r3, #48	@ 0x30
 8008764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800876c:	1b92      	subs	r2, r2, r6
 800876e:	6122      	str	r2, [r4, #16]
 8008770:	f8cd a000 	str.w	sl, [sp]
 8008774:	464b      	mov	r3, r9
 8008776:	aa03      	add	r2, sp, #12
 8008778:	4621      	mov	r1, r4
 800877a:	4640      	mov	r0, r8
 800877c:	f7ff fee6 	bl	800854c <_printf_common>
 8008780:	3001      	adds	r0, #1
 8008782:	d14a      	bne.n	800881a <_printf_i+0x1f2>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b004      	add	sp, #16
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f043 0320 	orr.w	r3, r3, #32
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	4833      	ldr	r0, [pc, #204]	@ (8008864 <_printf_i+0x23c>)
 8008798:	2778      	movs	r7, #120	@ 0x78
 800879a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	6831      	ldr	r1, [r6, #0]
 80087a2:	061f      	lsls	r7, r3, #24
 80087a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80087a8:	d402      	bmi.n	80087b0 <_printf_i+0x188>
 80087aa:	065f      	lsls	r7, r3, #25
 80087ac:	bf48      	it	mi
 80087ae:	b2ad      	uxthmi	r5, r5
 80087b0:	6031      	str	r1, [r6, #0]
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	bf44      	itt	mi
 80087b6:	f043 0320 	orrmi.w	r3, r3, #32
 80087ba:	6023      	strmi	r3, [r4, #0]
 80087bc:	b11d      	cbz	r5, 80087c6 <_printf_i+0x19e>
 80087be:	2310      	movs	r3, #16
 80087c0:	e7ac      	b.n	800871c <_printf_i+0xf4>
 80087c2:	4827      	ldr	r0, [pc, #156]	@ (8008860 <_printf_i+0x238>)
 80087c4:	e7e9      	b.n	800879a <_printf_i+0x172>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	f023 0320 	bic.w	r3, r3, #32
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	e7f6      	b.n	80087be <_printf_i+0x196>
 80087d0:	4616      	mov	r6, r2
 80087d2:	e7bd      	b.n	8008750 <_printf_i+0x128>
 80087d4:	6833      	ldr	r3, [r6, #0]
 80087d6:	6825      	ldr	r5, [r4, #0]
 80087d8:	6961      	ldr	r1, [r4, #20]
 80087da:	1d18      	adds	r0, r3, #4
 80087dc:	6030      	str	r0, [r6, #0]
 80087de:	062e      	lsls	r6, r5, #24
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	d501      	bpl.n	80087e8 <_printf_i+0x1c0>
 80087e4:	6019      	str	r1, [r3, #0]
 80087e6:	e002      	b.n	80087ee <_printf_i+0x1c6>
 80087e8:	0668      	lsls	r0, r5, #25
 80087ea:	d5fb      	bpl.n	80087e4 <_printf_i+0x1bc>
 80087ec:	8019      	strh	r1, [r3, #0]
 80087ee:	2300      	movs	r3, #0
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	4616      	mov	r6, r2
 80087f4:	e7bc      	b.n	8008770 <_printf_i+0x148>
 80087f6:	6833      	ldr	r3, [r6, #0]
 80087f8:	1d1a      	adds	r2, r3, #4
 80087fa:	6032      	str	r2, [r6, #0]
 80087fc:	681e      	ldr	r6, [r3, #0]
 80087fe:	6862      	ldr	r2, [r4, #4]
 8008800:	2100      	movs	r1, #0
 8008802:	4630      	mov	r0, r6
 8008804:	f7f7 fd1c 	bl	8000240 <memchr>
 8008808:	b108      	cbz	r0, 800880e <_printf_i+0x1e6>
 800880a:	1b80      	subs	r0, r0, r6
 800880c:	6060      	str	r0, [r4, #4]
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	2300      	movs	r3, #0
 8008814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008818:	e7aa      	b.n	8008770 <_printf_i+0x148>
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	4632      	mov	r2, r6
 800881e:	4649      	mov	r1, r9
 8008820:	4640      	mov	r0, r8
 8008822:	47d0      	blx	sl
 8008824:	3001      	adds	r0, #1
 8008826:	d0ad      	beq.n	8008784 <_printf_i+0x15c>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	079b      	lsls	r3, r3, #30
 800882c:	d413      	bmi.n	8008856 <_printf_i+0x22e>
 800882e:	68e0      	ldr	r0, [r4, #12]
 8008830:	9b03      	ldr	r3, [sp, #12]
 8008832:	4298      	cmp	r0, r3
 8008834:	bfb8      	it	lt
 8008836:	4618      	movlt	r0, r3
 8008838:	e7a6      	b.n	8008788 <_printf_i+0x160>
 800883a:	2301      	movs	r3, #1
 800883c:	4632      	mov	r2, r6
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d09d      	beq.n	8008784 <_printf_i+0x15c>
 8008848:	3501      	adds	r5, #1
 800884a:	68e3      	ldr	r3, [r4, #12]
 800884c:	9903      	ldr	r1, [sp, #12]
 800884e:	1a5b      	subs	r3, r3, r1
 8008850:	42ab      	cmp	r3, r5
 8008852:	dcf2      	bgt.n	800883a <_printf_i+0x212>
 8008854:	e7eb      	b.n	800882e <_printf_i+0x206>
 8008856:	2500      	movs	r5, #0
 8008858:	f104 0619 	add.w	r6, r4, #25
 800885c:	e7f5      	b.n	800884a <_printf_i+0x222>
 800885e:	bf00      	nop
 8008860:	08008bad 	.word	0x08008bad
 8008864:	08008bbe 	.word	0x08008bbe

08008868 <__sflush_r>:
 8008868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008870:	0716      	lsls	r6, r2, #28
 8008872:	4605      	mov	r5, r0
 8008874:	460c      	mov	r4, r1
 8008876:	d454      	bmi.n	8008922 <__sflush_r+0xba>
 8008878:	684b      	ldr	r3, [r1, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dc02      	bgt.n	8008884 <__sflush_r+0x1c>
 800887e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	dd48      	ble.n	8008916 <__sflush_r+0xae>
 8008884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008886:	2e00      	cmp	r6, #0
 8008888:	d045      	beq.n	8008916 <__sflush_r+0xae>
 800888a:	2300      	movs	r3, #0
 800888c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008890:	682f      	ldr	r7, [r5, #0]
 8008892:	6a21      	ldr	r1, [r4, #32]
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	d030      	beq.n	80088fa <__sflush_r+0x92>
 8008898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	0759      	lsls	r1, r3, #29
 800889e:	d505      	bpl.n	80088ac <__sflush_r+0x44>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	1ad2      	subs	r2, r2, r3
 80088a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088a6:	b10b      	cbz	r3, 80088ac <__sflush_r+0x44>
 80088a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088b0:	6a21      	ldr	r1, [r4, #32]
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b0      	blx	r6
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	d106      	bne.n	80088ca <__sflush_r+0x62>
 80088bc:	6829      	ldr	r1, [r5, #0]
 80088be:	291d      	cmp	r1, #29
 80088c0:	d82b      	bhi.n	800891a <__sflush_r+0xb2>
 80088c2:	4a2a      	ldr	r2, [pc, #168]	@ (800896c <__sflush_r+0x104>)
 80088c4:	410a      	asrs	r2, r1
 80088c6:	07d6      	lsls	r6, r2, #31
 80088c8:	d427      	bmi.n	800891a <__sflush_r+0xb2>
 80088ca:	2200      	movs	r2, #0
 80088cc:	6062      	str	r2, [r4, #4]
 80088ce:	04d9      	lsls	r1, r3, #19
 80088d0:	6922      	ldr	r2, [r4, #16]
 80088d2:	6022      	str	r2, [r4, #0]
 80088d4:	d504      	bpl.n	80088e0 <__sflush_r+0x78>
 80088d6:	1c42      	adds	r2, r0, #1
 80088d8:	d101      	bne.n	80088de <__sflush_r+0x76>
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	b903      	cbnz	r3, 80088e0 <__sflush_r+0x78>
 80088de:	6560      	str	r0, [r4, #84]	@ 0x54
 80088e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088e2:	602f      	str	r7, [r5, #0]
 80088e4:	b1b9      	cbz	r1, 8008916 <__sflush_r+0xae>
 80088e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d002      	beq.n	80088f4 <__sflush_r+0x8c>
 80088ee:	4628      	mov	r0, r5
 80088f0:	f7ff fbf2 	bl	80080d8 <_free_r>
 80088f4:	2300      	movs	r3, #0
 80088f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80088f8:	e00d      	b.n	8008916 <__sflush_r+0xae>
 80088fa:	2301      	movs	r3, #1
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b0      	blx	r6
 8008900:	4602      	mov	r2, r0
 8008902:	1c50      	adds	r0, r2, #1
 8008904:	d1c9      	bne.n	800889a <__sflush_r+0x32>
 8008906:	682b      	ldr	r3, [r5, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0c6      	beq.n	800889a <__sflush_r+0x32>
 800890c:	2b1d      	cmp	r3, #29
 800890e:	d001      	beq.n	8008914 <__sflush_r+0xac>
 8008910:	2b16      	cmp	r3, #22
 8008912:	d11e      	bne.n	8008952 <__sflush_r+0xea>
 8008914:	602f      	str	r7, [r5, #0]
 8008916:	2000      	movs	r0, #0
 8008918:	e022      	b.n	8008960 <__sflush_r+0xf8>
 800891a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891e:	b21b      	sxth	r3, r3
 8008920:	e01b      	b.n	800895a <__sflush_r+0xf2>
 8008922:	690f      	ldr	r7, [r1, #16]
 8008924:	2f00      	cmp	r7, #0
 8008926:	d0f6      	beq.n	8008916 <__sflush_r+0xae>
 8008928:	0793      	lsls	r3, r2, #30
 800892a:	680e      	ldr	r6, [r1, #0]
 800892c:	bf08      	it	eq
 800892e:	694b      	ldreq	r3, [r1, #20]
 8008930:	600f      	str	r7, [r1, #0]
 8008932:	bf18      	it	ne
 8008934:	2300      	movne	r3, #0
 8008936:	eba6 0807 	sub.w	r8, r6, r7
 800893a:	608b      	str	r3, [r1, #8]
 800893c:	f1b8 0f00 	cmp.w	r8, #0
 8008940:	dde9      	ble.n	8008916 <__sflush_r+0xae>
 8008942:	6a21      	ldr	r1, [r4, #32]
 8008944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008946:	4643      	mov	r3, r8
 8008948:	463a      	mov	r2, r7
 800894a:	4628      	mov	r0, r5
 800894c:	47b0      	blx	r6
 800894e:	2800      	cmp	r0, #0
 8008950:	dc08      	bgt.n	8008964 <__sflush_r+0xfc>
 8008952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008964:	4407      	add	r7, r0
 8008966:	eba8 0800 	sub.w	r8, r8, r0
 800896a:	e7e7      	b.n	800893c <__sflush_r+0xd4>
 800896c:	dfbffffe 	.word	0xdfbffffe

08008970 <_fflush_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b913      	cbnz	r3, 8008980 <_fflush_r+0x10>
 800897a:	2500      	movs	r5, #0
 800897c:	4628      	mov	r0, r5
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	b118      	cbz	r0, 800898a <_fflush_r+0x1a>
 8008982:	6a03      	ldr	r3, [r0, #32]
 8008984:	b90b      	cbnz	r3, 800898a <_fflush_r+0x1a>
 8008986:	f7ff f99f 	bl	8007cc8 <__sinit>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f3      	beq.n	800897a <_fflush_r+0xa>
 8008992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008994:	07d0      	lsls	r0, r2, #31
 8008996:	d404      	bmi.n	80089a2 <_fflush_r+0x32>
 8008998:	0599      	lsls	r1, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_fflush_r+0x32>
 800899c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800899e:	f7ff fb8a 	bl	80080b6 <__retarget_lock_acquire_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	4621      	mov	r1, r4
 80089a6:	f7ff ff5f 	bl	8008868 <__sflush_r>
 80089aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089ac:	07da      	lsls	r2, r3, #31
 80089ae:	4605      	mov	r5, r0
 80089b0:	d4e4      	bmi.n	800897c <_fflush_r+0xc>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	059b      	lsls	r3, r3, #22
 80089b6:	d4e1      	bmi.n	800897c <_fflush_r+0xc>
 80089b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ba:	f7ff fb7d 	bl	80080b8 <__retarget_lock_release_recursive>
 80089be:	e7dd      	b.n	800897c <_fflush_r+0xc>

080089c0 <__swhatbuf_r>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c8:	2900      	cmp	r1, #0
 80089ca:	b096      	sub	sp, #88	@ 0x58
 80089cc:	4615      	mov	r5, r2
 80089ce:	461e      	mov	r6, r3
 80089d0:	da0d      	bge.n	80089ee <__swhatbuf_r+0x2e>
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089d8:	f04f 0100 	mov.w	r1, #0
 80089dc:	bf14      	ite	ne
 80089de:	2340      	movne	r3, #64	@ 0x40
 80089e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089e4:	2000      	movs	r0, #0
 80089e6:	6031      	str	r1, [r6, #0]
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	b016      	add	sp, #88	@ 0x58
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	466a      	mov	r2, sp
 80089f0:	f000 f848 	bl	8008a84 <_fstat_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	dbec      	blt.n	80089d2 <__swhatbuf_r+0x12>
 80089f8:	9901      	ldr	r1, [sp, #4]
 80089fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a02:	4259      	negs	r1, r3
 8008a04:	4159      	adcs	r1, r3
 8008a06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a0a:	e7eb      	b.n	80089e4 <__swhatbuf_r+0x24>

08008a0c <__smakebuf_r>:
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a10:	079d      	lsls	r5, r3, #30
 8008a12:	4606      	mov	r6, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	d507      	bpl.n	8008a28 <__smakebuf_r+0x1c>
 8008a18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	2301      	movs	r3, #1
 8008a22:	6163      	str	r3, [r4, #20]
 8008a24:	b003      	add	sp, #12
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a28:	ab01      	add	r3, sp, #4
 8008a2a:	466a      	mov	r2, sp
 8008a2c:	f7ff ffc8 	bl	80089c0 <__swhatbuf_r>
 8008a30:	9f00      	ldr	r7, [sp, #0]
 8008a32:	4605      	mov	r5, r0
 8008a34:	4639      	mov	r1, r7
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff fbba 	bl	80081b0 <_malloc_r>
 8008a3c:	b948      	cbnz	r0, 8008a52 <__smakebuf_r+0x46>
 8008a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a42:	059a      	lsls	r2, r3, #22
 8008a44:	d4ee      	bmi.n	8008a24 <__smakebuf_r+0x18>
 8008a46:	f023 0303 	bic.w	r3, r3, #3
 8008a4a:	f043 0302 	orr.w	r3, r3, #2
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	e7e2      	b.n	8008a18 <__smakebuf_r+0xc>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	6020      	str	r0, [r4, #0]
 8008a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a62:	b15b      	cbz	r3, 8008a7c <__smakebuf_r+0x70>
 8008a64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f81d 	bl	8008aa8 <_isatty_r>
 8008a6e:	b128      	cbz	r0, 8008a7c <__smakebuf_r+0x70>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	431d      	orrs	r5, r3
 8008a80:	81a5      	strh	r5, [r4, #12]
 8008a82:	e7cf      	b.n	8008a24 <__smakebuf_r+0x18>

08008a84 <_fstat_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	@ (8008aa4 <_fstat_r+0x20>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	602b      	str	r3, [r5, #0]
 8008a92:	f7f9 ff0a 	bl	80028aa <_fstat>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d102      	bne.n	8008aa0 <_fstat_r+0x1c>
 8008a9a:	682b      	ldr	r3, [r5, #0]
 8008a9c:	b103      	cbz	r3, 8008aa0 <_fstat_r+0x1c>
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200008f8 	.word	0x200008f8

08008aa8 <_isatty_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d06      	ldr	r5, [pc, #24]	@ (8008ac4 <_isatty_r+0x1c>)
 8008aac:	2300      	movs	r3, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4608      	mov	r0, r1
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7f9 ff09 	bl	80028ca <_isatty>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_isatty_r+0x1a>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_isatty_r+0x1a>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	200008f8 	.word	0x200008f8

08008ac8 <_sbrk_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d06      	ldr	r5, [pc, #24]	@ (8008ae4 <_sbrk_r+0x1c>)
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	f7f9 ff12 	bl	80028fc <_sbrk>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_sbrk_r+0x1a>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_sbrk_r+0x1a>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	200008f8 	.word	0x200008f8

08008ae8 <_init>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr

08008af4 <_fini>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	bf00      	nop
 8008af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afa:	bc08      	pop	{r3}
 8008afc:	469e      	mov	lr, r3
 8008afe:	4770      	bx	lr
