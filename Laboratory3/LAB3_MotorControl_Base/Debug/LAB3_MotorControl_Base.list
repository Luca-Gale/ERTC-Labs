
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b08c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b290  0800b290  0000c290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e4  0800b6e4  0000d1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e4  0800b6e4  0000c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6ec  0800b6ec  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6ec  0800b6ec  0000c6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6f0  0800b6f0  0000c6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b6f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  200001f4  0800b8e8  0000d1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  0800b8e8  0000dac8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018809  00000000  00000000  0000d222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003067  00000000  00000000  00025a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00028a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001091  00000000  00000000  00029fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a128  00000000  00000000  0002b049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b280  00000000  00000000  00055171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107fa9  00000000  00000000  000703f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017839a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d8  00000000  00000000  001783e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0017edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b274 	.word	0x0800b274

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800b274 	.word	0x0800b274

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b9c0 	b.w	80009f0 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f83e 	bl	80006f8 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__aeabi_d2lz>:
 8000688:	b508      	push	{r3, lr}
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	ec43 2b17 	vmov	d7, r2, r3
 8000692:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d403      	bmi.n	80006a4 <__aeabi_d2lz+0x1c>
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006a0:	f000 b80a 	b.w	80006b8 <__aeabi_d2ulz>
 80006a4:	eeb1 7b47 	vneg.f64	d7, d7
 80006a8:	ec51 0b17 	vmov	r0, r1, d7
 80006ac:	f000 f804 	bl	80006b8 <__aeabi_d2ulz>
 80006b0:	4240      	negs	r0, r0
 80006b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <__aeabi_d2ulz>:
 80006b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006e8 <__aeabi_d2ulz+0x30>
 80006bc:	ec41 0b17 	vmov	d7, r0, r1
 80006c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80006f0 <__aeabi_d2ulz+0x38>
 80006c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006d8:	ee16 1a10 	vmov	r1, s12
 80006dc:	ee17 0a90 	vmov	r0, s15
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	00000000 	.word	0x00000000
 80006ec:	3df00000 	.word	0x3df00000
 80006f0:	00000000 	.word	0x00000000
 80006f4:	41f00000 	.word	0x41f00000

080006f8 <__udivmoddi4>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	9d08      	ldr	r5, [sp, #32]
 80006fe:	468e      	mov	lr, r1
 8000700:	4604      	mov	r4, r0
 8000702:	4688      	mov	r8, r1
 8000704:	2b00      	cmp	r3, #0
 8000706:	d14a      	bne.n	800079e <__udivmoddi4+0xa6>
 8000708:	428a      	cmp	r2, r1
 800070a:	4617      	mov	r7, r2
 800070c:	d962      	bls.n	80007d4 <__udivmoddi4+0xdc>
 800070e:	fab2 f682 	clz	r6, r2
 8000712:	b14e      	cbz	r6, 8000728 <__udivmoddi4+0x30>
 8000714:	f1c6 0320 	rsb	r3, r6, #32
 8000718:	fa01 f806 	lsl.w	r8, r1, r6
 800071c:	fa20 f303 	lsr.w	r3, r0, r3
 8000720:	40b7      	lsls	r7, r6
 8000722:	ea43 0808 	orr.w	r8, r3, r8
 8000726:	40b4      	lsls	r4, r6
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	fa1f fc87 	uxth.w	ip, r7
 8000730:	fbb8 f1fe 	udiv	r1, r8, lr
 8000734:	0c23      	lsrs	r3, r4, #16
 8000736:	fb0e 8811 	mls	r8, lr, r1, r8
 800073a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800073e:	fb01 f20c 	mul.w	r2, r1, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0x62>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f101 30ff 	add.w	r0, r1, #4294967295
 800074c:	f080 80ea 	bcs.w	8000924 <__udivmoddi4+0x22c>
 8000750:	429a      	cmp	r2, r3
 8000752:	f240 80e7 	bls.w	8000924 <__udivmoddi4+0x22c>
 8000756:	3902      	subs	r1, #2
 8000758:	443b      	add	r3, r7
 800075a:	1a9a      	subs	r2, r3, r2
 800075c:	b2a3      	uxth	r3, r4
 800075e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000762:	fb0e 2210 	mls	r2, lr, r0, r2
 8000766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800076a:	fb00 fc0c 	mul.w	ip, r0, ip
 800076e:	459c      	cmp	ip, r3
 8000770:	d909      	bls.n	8000786 <__udivmoddi4+0x8e>
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	f100 32ff 	add.w	r2, r0, #4294967295
 8000778:	f080 80d6 	bcs.w	8000928 <__udivmoddi4+0x230>
 800077c:	459c      	cmp	ip, r3
 800077e:	f240 80d3 	bls.w	8000928 <__udivmoddi4+0x230>
 8000782:	443b      	add	r3, r7
 8000784:	3802      	subs	r0, #2
 8000786:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800078a:	eba3 030c 	sub.w	r3, r3, ip
 800078e:	2100      	movs	r1, #0
 8000790:	b11d      	cbz	r5, 800079a <__udivmoddi4+0xa2>
 8000792:	40f3      	lsrs	r3, r6
 8000794:	2200      	movs	r2, #0
 8000796:	e9c5 3200 	strd	r3, r2, [r5]
 800079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079e:	428b      	cmp	r3, r1
 80007a0:	d905      	bls.n	80007ae <__udivmoddi4+0xb6>
 80007a2:	b10d      	cbz	r5, 80007a8 <__udivmoddi4+0xb0>
 80007a4:	e9c5 0100 	strd	r0, r1, [r5]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4608      	mov	r0, r1
 80007ac:	e7f5      	b.n	800079a <__udivmoddi4+0xa2>
 80007ae:	fab3 f183 	clz	r1, r3
 80007b2:	2900      	cmp	r1, #0
 80007b4:	d146      	bne.n	8000844 <__udivmoddi4+0x14c>
 80007b6:	4573      	cmp	r3, lr
 80007b8:	d302      	bcc.n	80007c0 <__udivmoddi4+0xc8>
 80007ba:	4282      	cmp	r2, r0
 80007bc:	f200 8105 	bhi.w	80009ca <__udivmoddi4+0x2d2>
 80007c0:	1a84      	subs	r4, r0, r2
 80007c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	4690      	mov	r8, r2
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d0e5      	beq.n	800079a <__udivmoddi4+0xa2>
 80007ce:	e9c5 4800 	strd	r4, r8, [r5]
 80007d2:	e7e2      	b.n	800079a <__udivmoddi4+0xa2>
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f000 8090 	beq.w	80008fa <__udivmoddi4+0x202>
 80007da:	fab2 f682 	clz	r6, r2
 80007de:	2e00      	cmp	r6, #0
 80007e0:	f040 80a4 	bne.w	800092c <__udivmoddi4+0x234>
 80007e4:	1a8a      	subs	r2, r1, r2
 80007e6:	0c03      	lsrs	r3, r0, #16
 80007e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ec:	b280      	uxth	r0, r0
 80007ee:	b2bc      	uxth	r4, r7
 80007f0:	2101      	movs	r1, #1
 80007f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000802:	429a      	cmp	r2, r3
 8000804:	d907      	bls.n	8000816 <__udivmoddi4+0x11e>
 8000806:	18fb      	adds	r3, r7, r3
 8000808:	f10c 38ff 	add.w	r8, ip, #4294967295
 800080c:	d202      	bcs.n	8000814 <__udivmoddi4+0x11c>
 800080e:	429a      	cmp	r2, r3
 8000810:	f200 80e0 	bhi.w	80009d4 <__udivmoddi4+0x2dc>
 8000814:	46c4      	mov	ip, r8
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	fbb3 f2fe 	udiv	r2, r3, lr
 800081c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000820:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000824:	fb02 f404 	mul.w	r4, r2, r4
 8000828:	429c      	cmp	r4, r3
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x144>
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000832:	d202      	bcs.n	800083a <__udivmoddi4+0x142>
 8000834:	429c      	cmp	r4, r3
 8000836:	f200 80ca 	bhi.w	80009ce <__udivmoddi4+0x2d6>
 800083a:	4602      	mov	r2, r0
 800083c:	1b1b      	subs	r3, r3, r4
 800083e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000842:	e7a5      	b.n	8000790 <__udivmoddi4+0x98>
 8000844:	f1c1 0620 	rsb	r6, r1, #32
 8000848:	408b      	lsls	r3, r1
 800084a:	fa22 f706 	lsr.w	r7, r2, r6
 800084e:	431f      	orrs	r7, r3
 8000850:	fa0e f401 	lsl.w	r4, lr, r1
 8000854:	fa20 f306 	lsr.w	r3, r0, r6
 8000858:	fa2e fe06 	lsr.w	lr, lr, r6
 800085c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000860:	4323      	orrs	r3, r4
 8000862:	fa00 f801 	lsl.w	r8, r0, r1
 8000866:	fa1f fc87 	uxth.w	ip, r7
 800086a:	fbbe f0f9 	udiv	r0, lr, r9
 800086e:	0c1c      	lsrs	r4, r3, #16
 8000870:	fb09 ee10 	mls	lr, r9, r0, lr
 8000874:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000878:	fb00 fe0c 	mul.w	lr, r0, ip
 800087c:	45a6      	cmp	lr, r4
 800087e:	fa02 f201 	lsl.w	r2, r2, r1
 8000882:	d909      	bls.n	8000898 <__udivmoddi4+0x1a0>
 8000884:	193c      	adds	r4, r7, r4
 8000886:	f100 3aff 	add.w	sl, r0, #4294967295
 800088a:	f080 809c 	bcs.w	80009c6 <__udivmoddi4+0x2ce>
 800088e:	45a6      	cmp	lr, r4
 8000890:	f240 8099 	bls.w	80009c6 <__udivmoddi4+0x2ce>
 8000894:	3802      	subs	r0, #2
 8000896:	443c      	add	r4, r7
 8000898:	eba4 040e 	sub.w	r4, r4, lr
 800089c:	fa1f fe83 	uxth.w	lr, r3
 80008a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008a4:	fb09 4413 	mls	r4, r9, r3, r4
 80008a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80008b0:	45a4      	cmp	ip, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x1ce>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ba:	f080 8082 	bcs.w	80009c2 <__udivmoddi4+0x2ca>
 80008be:	45a4      	cmp	ip, r4
 80008c0:	d97f      	bls.n	80009c2 <__udivmoddi4+0x2ca>
 80008c2:	3b02      	subs	r3, #2
 80008c4:	443c      	add	r4, r7
 80008c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008ca:	eba4 040c 	sub.w	r4, r4, ip
 80008ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80008d2:	4564      	cmp	r4, ip
 80008d4:	4673      	mov	r3, lr
 80008d6:	46e1      	mov	r9, ip
 80008d8:	d362      	bcc.n	80009a0 <__udivmoddi4+0x2a8>
 80008da:	d05f      	beq.n	800099c <__udivmoddi4+0x2a4>
 80008dc:	b15d      	cbz	r5, 80008f6 <__udivmoddi4+0x1fe>
 80008de:	ebb8 0203 	subs.w	r2, r8, r3
 80008e2:	eb64 0409 	sbc.w	r4, r4, r9
 80008e6:	fa04 f606 	lsl.w	r6, r4, r6
 80008ea:	fa22 f301 	lsr.w	r3, r2, r1
 80008ee:	431e      	orrs	r6, r3
 80008f0:	40cc      	lsrs	r4, r1
 80008f2:	e9c5 6400 	strd	r6, r4, [r5]
 80008f6:	2100      	movs	r1, #0
 80008f8:	e74f      	b.n	800079a <__udivmoddi4+0xa2>
 80008fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80008fe:	0c01      	lsrs	r1, r0, #16
 8000900:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000904:	b280      	uxth	r0, r0
 8000906:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800090a:	463b      	mov	r3, r7
 800090c:	4638      	mov	r0, r7
 800090e:	463c      	mov	r4, r7
 8000910:	46b8      	mov	r8, r7
 8000912:	46be      	mov	lr, r7
 8000914:	2620      	movs	r6, #32
 8000916:	fbb1 f1f7 	udiv	r1, r1, r7
 800091a:	eba2 0208 	sub.w	r2, r2, r8
 800091e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000922:	e766      	b.n	80007f2 <__udivmoddi4+0xfa>
 8000924:	4601      	mov	r1, r0
 8000926:	e718      	b.n	800075a <__udivmoddi4+0x62>
 8000928:	4610      	mov	r0, r2
 800092a:	e72c      	b.n	8000786 <__udivmoddi4+0x8e>
 800092c:	f1c6 0220 	rsb	r2, r6, #32
 8000930:	fa2e f302 	lsr.w	r3, lr, r2
 8000934:	40b7      	lsls	r7, r6
 8000936:	40b1      	lsls	r1, r6
 8000938:	fa20 f202 	lsr.w	r2, r0, r2
 800093c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000940:	430a      	orrs	r2, r1
 8000942:	fbb3 f8fe 	udiv	r8, r3, lr
 8000946:	b2bc      	uxth	r4, r7
 8000948:	fb0e 3318 	mls	r3, lr, r8, r3
 800094c:	0c11      	lsrs	r1, r2, #16
 800094e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000952:	fb08 f904 	mul.w	r9, r8, r4
 8000956:	40b0      	lsls	r0, r6
 8000958:	4589      	cmp	r9, r1
 800095a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800095e:	b280      	uxth	r0, r0
 8000960:	d93e      	bls.n	80009e0 <__udivmoddi4+0x2e8>
 8000962:	1879      	adds	r1, r7, r1
 8000964:	f108 3cff 	add.w	ip, r8, #4294967295
 8000968:	d201      	bcs.n	800096e <__udivmoddi4+0x276>
 800096a:	4589      	cmp	r9, r1
 800096c:	d81f      	bhi.n	80009ae <__udivmoddi4+0x2b6>
 800096e:	eba1 0109 	sub.w	r1, r1, r9
 8000972:	fbb1 f9fe 	udiv	r9, r1, lr
 8000976:	fb09 f804 	mul.w	r8, r9, r4
 800097a:	fb0e 1119 	mls	r1, lr, r9, r1
 800097e:	b292      	uxth	r2, r2
 8000980:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000984:	4542      	cmp	r2, r8
 8000986:	d229      	bcs.n	80009dc <__udivmoddi4+0x2e4>
 8000988:	18ba      	adds	r2, r7, r2
 800098a:	f109 31ff 	add.w	r1, r9, #4294967295
 800098e:	d2c4      	bcs.n	800091a <__udivmoddi4+0x222>
 8000990:	4542      	cmp	r2, r8
 8000992:	d2c2      	bcs.n	800091a <__udivmoddi4+0x222>
 8000994:	f1a9 0102 	sub.w	r1, r9, #2
 8000998:	443a      	add	r2, r7
 800099a:	e7be      	b.n	800091a <__udivmoddi4+0x222>
 800099c:	45f0      	cmp	r8, lr
 800099e:	d29d      	bcs.n	80008dc <__udivmoddi4+0x1e4>
 80009a0:	ebbe 0302 	subs.w	r3, lr, r2
 80009a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009a8:	3801      	subs	r0, #1
 80009aa:	46e1      	mov	r9, ip
 80009ac:	e796      	b.n	80008dc <__udivmoddi4+0x1e4>
 80009ae:	eba7 0909 	sub.w	r9, r7, r9
 80009b2:	4449      	add	r1, r9
 80009b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009bc:	fb09 f804 	mul.w	r8, r9, r4
 80009c0:	e7db      	b.n	800097a <__udivmoddi4+0x282>
 80009c2:	4673      	mov	r3, lr
 80009c4:	e77f      	b.n	80008c6 <__udivmoddi4+0x1ce>
 80009c6:	4650      	mov	r0, sl
 80009c8:	e766      	b.n	8000898 <__udivmoddi4+0x1a0>
 80009ca:	4608      	mov	r0, r1
 80009cc:	e6fd      	b.n	80007ca <__udivmoddi4+0xd2>
 80009ce:	443b      	add	r3, r7
 80009d0:	3a02      	subs	r2, #2
 80009d2:	e733      	b.n	800083c <__udivmoddi4+0x144>
 80009d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009d8:	443b      	add	r3, r7
 80009da:	e71c      	b.n	8000816 <__udivmoddi4+0x11e>
 80009dc:	4649      	mov	r1, r9
 80009de:	e79c      	b.n	800091a <__udivmoddi4+0x222>
 80009e0:	eba1 0109 	sub.w	r1, r1, r9
 80009e4:	46c4      	mov	ip, r8
 80009e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ea:	fb09 f804 	mul.w	r8, r9, r4
 80009ee:	e7c4      	b.n	800097a <__udivmoddi4+0x282>

080009f0 <__aeabi_idiv0>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <ertc_dlog_update>:

	return 0;
}

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	1c59      	adds	r1, r3, #1
 8000a06:	2303      	movs	r3, #3
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f007 f8dd 	bl	8007bc8 <HAL_UART_Receive>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d111      	bne.n	8000a38 <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	785b      	ldrb	r3, [r3, #1]
 8000a18:	2b41      	cmp	r3, #65	@ 0x41
 8000a1a:	d002      	beq.n	8000a22 <ertc_dlog_update+0x2e>
 8000a1c:	2b42      	cmp	r3, #66	@ 0x42
 8000a1e:	d004      	beq.n	8000a2a <ertc_dlog_update+0x36>
 8000a20:	e007      	b.n	8000a32 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
				break;
 8000a28:	e006      	b.n	8000a38 <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
				break;
 8000a30:	e002      	b.n	8000a38 <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <get_keypad_key>:
	{'4', '5', '6', 'B'},
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'}
};

char get_keypad_key(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af04      	add	r7, sp, #16
	uint8_t col = 0xFF, row = 0xFF;
 8000a4a:	23ff      	movs	r3, #255	@ 0xff
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	23ff      	movs	r3, #255	@ 0xff
 8000a50:	71bb      	strb	r3, [r7, #6]

	// Read column and row register from SX1509
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &col, 1,
 8000a52:	2364      	movs	r3, #100	@ 0x64
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2227      	movs	r2, #39	@ 0x27
 8000a62:	217e      	movs	r1, #126	@ 0x7e
 8000a64:	4823      	ldr	r0, [pc, #140]	@ (8000af4 <get_keypad_key+0xb0>)
 8000a66:	f003 fb8d 	bl	8004184 <HAL_I2C_Mem_Read>
			100);
	HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &row, 1,
 8000a6a:	2364      	movs	r3, #100	@ 0x64
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	1dbb      	adds	r3, r7, #6
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	2228      	movs	r2, #40	@ 0x28
 8000a7a:	217e      	movs	r1, #126	@ 0x7e
 8000a7c:	481d      	ldr	r0, [pc, #116]	@ (8000af4 <get_keypad_key+0xb0>)
 8000a7e:	f003 fb81 	bl	8004184 <HAL_I2C_Mem_Read>
			100);

	// Nothing pressed (all bits HIGH)
	if (col == 0xFF || row == 0xFF)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2bff      	cmp	r3, #255	@ 0xff
 8000a86:	d002      	beq.n	8000a8e <get_keypad_key+0x4a>
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d101      	bne.n	8000a92 <get_keypad_key+0x4e>
		return '\0';
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e02c      	b.n	8000aec <get_keypad_key+0xa8>

	// Find the LOW bit (indicating which row and column were pressed)
	// Tried to do both row and column at the same time
	for (int r = 0; r < 4; r++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e025      	b.n	8000ae4 <get_keypad_key+0xa0>
		if (!(row & (1 << r))) {
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	fa42 f303 	asr.w	r3, r2, r3
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d119      	bne.n	8000ade <get_keypad_key+0x9a>
			for (int c = 0; c < 4; c++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	e013      	b.n	8000ad8 <get_keypad_key+0x94>
				if (!(col & (1 << c))) {
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	fa42 f303 	asr.w	r3, r2, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d107      	bne.n	8000ad2 <get_keypad_key+0x8e>
					return keypad_map[r][c];
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <get_keypad_key+0xb4>)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	441a      	add	r2, r3
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	e00c      	b.n	8000aec <get_keypad_key+0xa8>
			for (int c = 0; c < 4; c++) {
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	dde8      	ble.n	8000ab0 <get_keypad_key+0x6c>
	for (int r = 0; r < 4; r++) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	ddd6      	ble.n	8000a98 <get_keypad_key+0x54>
				}
			}
		}
	}

	return '\0';
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000258 	.word	0x20000258
 8000af8:	0800b2fc 	.word	0x0800b2fc

08000afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b24:	e000      	b.n	8000b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <handle_keypad_input>:

// Set reference speed with keypad
char input_buffer[6] = { 0 };  // To store up to 5 digits
int input_index = 0;

void handle_keypad_input(PI_Controller *controller) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	char key = get_keypad_key();
 8000b54:	f7ff ff76 	bl	8000a44 <get_keypad_key>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	75fb      	strb	r3, [r7, #23]
	// Print the pressed button - safety check
	if (key != '\0') {
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d004      	beq.n	8000b6c <handle_keypad_input+0x20>
		printf("Key pressed: %c\n", key);
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
 8000b64:	4619      	mov	r1, r3
 8000b66:	4833      	ldr	r0, [pc, #204]	@ (8000c34 <handle_keypad_input+0xe8>)
 8000b68:	f008 fbfa 	bl	8009360 <iprintf>
	}

	if (key >= '0' && key <= '9') {
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b70:	d914      	bls.n	8000b9c <handle_keypad_input+0x50>
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	2b39      	cmp	r3, #57	@ 0x39
 8000b76:	d811      	bhi.n	8000b9c <handle_keypad_input+0x50>
		if (input_index < sizeof(input_buffer) - 1) {
 8000b78:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <handle_keypad_input+0xec>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d855      	bhi.n	8000c2c <handle_keypad_input+0xe0>
			input_buffer[input_index++] = key;
 8000b80:	4b2d      	ldr	r3, [pc, #180]	@ (8000c38 <handle_keypad_input+0xec>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	492c      	ldr	r1, [pc, #176]	@ (8000c38 <handle_keypad_input+0xec>)
 8000b88:	600a      	str	r2, [r1, #0]
 8000b8a:	492c      	ldr	r1, [pc, #176]	@ (8000c3c <handle_keypad_input+0xf0>)
 8000b8c:	7dfa      	ldrb	r2, [r7, #23]
 8000b8e:	54ca      	strb	r2, [r1, r3]
			input_buffer[input_index] = '\0';
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <handle_keypad_input+0xec>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a29      	ldr	r2, [pc, #164]	@ (8000c3c <handle_keypad_input+0xf0>)
 8000b96:	2100      	movs	r1, #0
 8000b98:	54d1      	strb	r1, [r2, r3]
		if (input_index < sizeof(input_buffer) - 1) {
 8000b9a:	e047      	b.n	8000c2c <handle_keypad_input+0xe0>
		}
	} else if (key == '#') {
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
 8000b9e:	2b23      	cmp	r3, #35	@ 0x23
 8000ba0:	d137      	bne.n	8000c12 <handle_keypad_input+0xc6>
		if (input_index > 0) {
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <handle_keypad_input+0xec>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	dd2c      	ble.n	8000c04 <handle_keypad_input+0xb8>
			float new_ref = atof(input_buffer);  // ASCII to Float
 8000baa:	4824      	ldr	r0, [pc, #144]	@ (8000c3c <handle_keypad_input+0xf0>)
 8000bac:	f007 fd53 	bl	8008656 <atof>
 8000bb0:	ee07 0a90 	vmov	s15, r0
 8000bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb8:	edc7 7a04 	vstr	s15, [r7, #16]
			// TODO check speed bound on reference
			controller->ref = new_ref;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	60da      	str	r2, [r3, #12]

			// Workaround the impossibility to print float
			int sp_int = (int) (new_ref * 100);
 8000bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000c40 <handle_keypad_input+0xf4>
 8000bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bd2:	ee17 3a90 	vmov	r3, s15
 8000bd6:	60fb      	str	r3, [r7, #12]
			printf("Reference speed = %d.%02d\n RPM", sp_int / 100,
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <handle_keypad_input+0xf8>)
 8000bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000be0:	1152      	asrs	r2, r2, #5
 8000be2:	17db      	asrs	r3, r3, #31
 8000be4:	1ad0      	subs	r0, r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4a16      	ldr	r2, [pc, #88]	@ (8000c44 <handle_keypad_input+0xf8>)
 8000bea:	fb82 1203 	smull	r1, r2, r2, r3
 8000bee:	1151      	asrs	r1, r2, #5
 8000bf0:	17da      	asrs	r2, r3, #31
 8000bf2:	1a8a      	subs	r2, r1, r2
 8000bf4:	2164      	movs	r1, #100	@ 0x64
 8000bf6:	fb01 f202 	mul.w	r2, r1, r2
 8000bfa:	1a9a      	subs	r2, r3, r2
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <handle_keypad_input+0xfc>)
 8000c00:	f008 fbae 	bl	8009360 <iprintf>
					sp_int % 100);
		}
		input_index = 0;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <handle_keypad_input+0xec>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
		input_buffer[0] = '\0';
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <handle_keypad_input+0xf0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
	} else if (key == '*') {
		input_index = 0;
		input_buffer[0] = '\0';
		printf("Input cleared\n");
	}
}
 8000c10:	e00c      	b.n	8000c2c <handle_keypad_input+0xe0>
	} else if (key == '*') {
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c16:	d109      	bne.n	8000c2c <handle_keypad_input+0xe0>
		input_index = 0;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <handle_keypad_input+0xec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
		input_buffer[0] = '\0';
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <handle_keypad_input+0xf0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
		printf("Input cleared\n");
 8000c24:	4809      	ldr	r0, [pc, #36]	@ (8000c4c <handle_keypad_input+0x100>)
 8000c26:	f008 fc03 	bl	8009430 <puts>
}
 8000c2a:	e7ff      	b.n	8000c2c <handle_keypad_input+0xe0>
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	0800b290 	.word	0x0800b290
 8000c38:	20000968 	.word	0x20000968
 8000c3c:	20000960 	.word	0x20000960
 8000c40:	42c80000 	.word	0x42c80000
 8000c44:	51eb851f 	.word	0x51eb851f
 8000c48:	0800b2a4 	.word	0x0800b2a4
 8000c4c:	0800b2c4 	.word	0x0800b2c4

08000c50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d157      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0xc2>
		// Motor 1
		encoder_update(&motor1_encoder, &htim3, 3840);
 8000c62:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000c66:	492e      	ldr	r1, [pc, #184]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000c68:	482e      	ldr	r0, [pc, #184]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c6a:	f001 fa91 	bl	8002190 <encoder_update>
		float u1 = pi_control(&motor1_pi, motor1_encoder.speed_rpm);
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c74:	eeb0 0a67 	vmov.f32	s0, s15
 8000c78:	482b      	ldr	r0, [pc, #172]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000c7a:	f001 fae3 	bl	8002244 <pi_control>
 8000c7e:	ed87 0a05 	vstr	s0, [r7, #20]
		int32_t duty1 = (int32_t) (u1 * V2DUTY);
 8000c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c86:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000d2c <HAL_TIM_PeriodElapsedCallback+0xdc>
 8000c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c92:	ee17 3a90 	vmov	r3, s15
 8000c96:	613b      	str	r3, [r7, #16]
		set_motor_pwm(duty1, &htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8000c98:	2304      	movs	r3, #4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4924      	ldr	r1, [pc, #144]	@ (8000d30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c9e:	6938      	ldr	r0, [r7, #16]
 8000ca0:	f001 fb0e 	bl	80022c0 <set_motor_pwm>

		// Motor 2
		encoder_update(&motor2_encoder, &htim4, 3840);
 8000ca4:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000ca8:	4922      	ldr	r1, [pc, #136]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000caa:	4823      	ldr	r0, [pc, #140]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000cac:	f001 fa70 	bl	8002190 <encoder_update>
		float u2 = pi_control(&motor2_pi, motor2_encoder.speed_rpm);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000cb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cba:	4820      	ldr	r0, [pc, #128]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000cbc:	f001 fac2 	bl	8002244 <pi_control>
 8000cc0:	ed87 0a03 	vstr	s0, [r7, #12]
		int32_t duty2 = (int32_t) (u2 * V2DUTY);
 8000cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000d2c <HAL_TIM_PeriodElapsedCallback+0xdc>
 8000ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cd4:	ee17 3a90 	vmov	r3, s15
 8000cd8:	60bb      	str	r3, [r7, #8]
		set_motor_pwm(duty2, &htim8, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000cda:	230c      	movs	r3, #12
 8000cdc:	2208      	movs	r2, #8
 8000cde:	4914      	ldr	r1, [pc, #80]	@ (8000d30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ce0:	68b8      	ldr	r0, [r7, #8]
 8000ce2:	f001 faed 	bl	80022c0 <set_motor_pwm>

		data.mot1_ref = motor1_pi.ref;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000cec:	6013      	str	r3, [r2, #0]
		data.mot2_ref = motor2_pi.ref;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	4a13      	ldr	r2, [pc, #76]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000cf4:	6053      	str	r3, [r2, #4]
		data.mot1_speed_rpm = motor1_encoder.speed_rpm;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a11      	ldr	r2, [pc, #68]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000cfc:	6093      	str	r3, [r2, #8]
		data.mot2_speed_rpm = motor2_encoder.speed_rpm;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d04:	60d3      	str	r3, [r2, #12]
		data.u1 = u1;
 8000d06:	4a0e      	ldr	r2, [pc, #56]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	6113      	str	r3, [r2, #16]
		data.u1 = u2;
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6113      	str	r3, [r2, #16]
	}
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40001000 	.word	0x40001000
 8000d20:	200003fc 	.word	0x200003fc
 8000d24:	20000950 	.word	0x20000950
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	42055555 	.word	0x42055555
 8000d30:	2000052c 	.word	0x2000052c
 8000d34:	20000448 	.word	0x20000448
 8000d38:	20000958 	.word	0x20000958
 8000d3c:	20000010 	.word	0x20000010
 8000d40:	20000938 	.word	0x20000938

08000d44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af04      	add	r7, sp, #16
/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000d4a:	f002 fa32 	bl	80031b2 <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 8000d4e:	f000 fa69 	bl	8001224 <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 8000d52:	f001 f8c1 	bl	8001ed8 <MX_GPIO_Init>
MX_USART3_UART_Init();
 8000d56:	f001 f88f 	bl	8001e78 <MX_USART3_UART_Init>
MX_ADC1_Init();
 8000d5a:	f000 fad5 	bl	8001308 <MX_ADC1_Init>
MX_I2C1_Init();
 8000d5e:	f000 fb25 	bl	80013ac <MX_I2C1_Init>
MX_I2C2_Init();
 8000d62:	f000 fb63 	bl	800142c <MX_I2C2_Init>
MX_SPI1_Init();
 8000d66:	f000 fba1 	bl	80014ac <MX_SPI1_Init>
MX_TIM1_Init();
 8000d6a:	f000 fbdd 	bl	8001528 <MX_TIM1_Init>
MX_TIM2_Init();
 8000d6e:	f000 fcab 	bl	80016c8 <MX_TIM2_Init>
MX_TIM3_Init();
 8000d72:	f000 fd43 	bl	80017fc <MX_TIM3_Init>
MX_TIM4_Init();
 8000d76:	f000 fd97 	bl	80018a8 <MX_TIM4_Init>
MX_TIM5_Init();
 8000d7a:	f000 fdeb 	bl	8001954 <MX_TIM5_Init>
MX_TIM8_Init();
 8000d7e:	f000 fe99 	bl	8001ab4 <MX_TIM8_Init>
MX_UART4_Init();
 8000d82:	f000 ffb9 	bl	8001cf8 <MX_UART4_Init>
MX_UART5_Init();
 8000d86:	f000 ffe7 	bl	8001d58 <MX_UART5_Init>
MX_USART1_UART_Init();
 8000d8a:	f001 f815 	bl	8001db8 <MX_USART1_UART_Init>
MX_USART2_UART_Init();
 8000d8e:	f001 f843 	bl	8001e18 <MX_USART2_UART_Init>
MX_TIM9_Init();
 8000d92:	f000 ff61 	bl	8001c58 <MX_TIM9_Init>
MX_TIM6_Init();
 8000d96:	f000 fe55 	bl	8001a44 <MX_TIM6_Init>
/* USER CODE BEGIN 2 */

logger.uart_handle = huart3; // for serial
 8000d9a:	4bb9      	ldr	r3, [pc, #740]	@ (8001080 <main+0x33c>)
 8000d9c:	4ab9      	ldr	r2, [pc, #740]	@ (8001084 <main+0x340>)
 8000d9e:	3344      	adds	r3, #68	@ 0x44
 8000da0:	4611      	mov	r1, r2
 8000da2:	2288      	movs	r2, #136	@ 0x88
 8000da4:	4618      	mov	r0, r3
 8000da6:	f008 fcb0 	bl	800970a <memcpy>
//logger.uart_handle = huart2; // for wifi

/* Reset LCD */
HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin,
 8000daa:	2201      	movs	r2, #1
 8000dac:	2110      	movs	r1, #16
 8000dae:	48b6      	ldr	r0, [pc, #728]	@ (8001088 <main+0x344>)
 8000db0:	f003 f804 	bl	8003dbc <HAL_GPIO_WritePin>
		GPIO_PIN_SET);

HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000db4:	200a      	movs	r0, #10
 8000db6:	f002 fe3a 	bl	8003a2e <HAL_NVIC_DisableIRQ>

ITM_SendChar('h');
 8000dba:	2068      	movs	r0, #104	@ 0x68
 8000dbc:	f7ff fe9e 	bl	8000afc <ITM_SendChar>

/* Software reset */
data = 0x12;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data,
 8000dc4:	23c8      	movs	r3, #200	@ 0xc8
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	1dbb      	adds	r3, r7, #6
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	227d      	movs	r2, #125	@ 0x7d
 8000dd4:	217e      	movs	r1, #126	@ 0x7e
 8000dd6:	48ad      	ldr	r0, [pc, #692]	@ (800108c <main+0x348>)
 8000dd8:	f003 f8c0 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <main+0xac>
	printf("I2C communication error (%X).\n", status);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4619      	mov	r1, r3
 8000dea:	48a9      	ldr	r0, [pc, #676]	@ (8001090 <main+0x34c>)
 8000dec:	f008 fab8 	bl	8009360 <iprintf>

data = 0x34;
 8000df0:	2334      	movs	r3, #52	@ 0x34
 8000df2:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data,
 8000df4:	23c8      	movs	r3, #200	@ 0xc8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	1dbb      	adds	r3, r7, #6
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	227d      	movs	r2, #125	@ 0x7d
 8000e04:	217e      	movs	r1, #126	@ 0x7e
 8000e06:	48a1      	ldr	r0, [pc, #644]	@ (800108c <main+0x348>)
 8000e08:	f003 f8a8 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d004      	beq.n	8000e20 <main+0xdc>
	printf("I2C communication error (%X).\n", status);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	489d      	ldr	r0, [pc, #628]	@ (8001090 <main+0x34c>)
 8000e1c:	f008 faa0 	bl	8009360 <iprintf>

HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	@ 0x64
 8000e22:	f002 fa23 	bl	800326c <HAL_Delay>

/* Set KeyPad scanning engine */

/* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
data = 0x40;
 8000e26:	2340      	movs	r3, #64	@ 0x40
 8000e28:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data,
 8000e2a:	23c8      	movs	r3, #200	@ 0xc8
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	1dbb      	adds	r3, r7, #6
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2301      	movs	r3, #1
 8000e38:	221e      	movs	r2, #30
 8000e3a:	217e      	movs	r1, #126	@ 0x7e
 8000e3c:	4893      	ldr	r0, [pc, #588]	@ (800108c <main+0x348>)
 8000e3e:	f003 f88d 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d004      	beq.n	8000e56 <main+0x112>
	printf("I2C communication error (%X).\n", status);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	488f      	ldr	r0, [pc, #572]	@ (8001090 <main+0x34c>)
 8000e52:	f008 fa85 	bl	8009360 <iprintf>

/* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
data = 0xF0;
 8000e56:	23f0      	movs	r3, #240	@ 0xf0
 8000e58:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data,
 8000e5a:	23c8      	movs	r3, #200	@ 0xc8
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	1dbb      	adds	r3, r7, #6
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	220f      	movs	r2, #15
 8000e6a:	217e      	movs	r1, #126	@ 0x7e
 8000e6c:	4887      	ldr	r0, [pc, #540]	@ (800108c <main+0x348>)
 8000e6e:	f003 f875 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <main+0x142>
	printf("I2C communication error (%X).\n", status);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4883      	ldr	r0, [pc, #524]	@ (8001090 <main+0x34c>)
 8000e82:	f008 fa6d 	bl	8009360 <iprintf>

/* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
data = 0x0F;
 8000e86:	230f      	movs	r3, #15
 8000e88:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data,
 8000e8a:	23c8      	movs	r3, #200	@ 0xc8
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	1dbb      	adds	r3, r7, #6
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	220e      	movs	r2, #14
 8000e9a:	217e      	movs	r1, #126	@ 0x7e
 8000e9c:	487b      	ldr	r0, [pc, #492]	@ (800108c <main+0x348>)
 8000e9e:	f003 f85d 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <main+0x172>
	printf("I2C communication error (%X).\n", status);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4877      	ldr	r0, [pc, #476]	@ (8001090 <main+0x34c>)
 8000eb2:	f008 fa55 	bl	8009360 <iprintf>

/* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
data = 0x0F;
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1,
 8000eba:	23c8      	movs	r3, #200	@ 0xc8
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	1dbb      	adds	r3, r7, #6
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	220b      	movs	r2, #11
 8000eca:	217e      	movs	r1, #126	@ 0x7e
 8000ecc:	486f      	ldr	r0, [pc, #444]	@ (800108c <main+0x348>)
 8000ece:	f003 f845 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
		&data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <main+0x1a2>
	printf("I2C communication error (%X).\n", status);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	486b      	ldr	r0, [pc, #428]	@ (8001090 <main+0x34c>)
 8000ee2:	f008 fa3d 	bl	8009360 <iprintf>

/* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
data = 0x0F;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1,
 8000eea:	23c8      	movs	r3, #200	@ 0xc8
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	2206      	movs	r2, #6
 8000efa:	217e      	movs	r1, #126	@ 0x7e
 8000efc:	4863      	ldr	r0, [pc, #396]	@ (800108c <main+0x348>)
 8000efe:	f003 f82d 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
		&data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <main+0x1d2>
	printf("I2C communication error (%X).\n", status);
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	485f      	ldr	r0, [pc, #380]	@ (8001090 <main+0x34c>)
 8000f12:	f008 fa25 	bl	8009360 <iprintf>

/* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
data = 0x0F;
 8000f16:	230f      	movs	r3, #15
 8000f18:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1,
 8000f1a:	23c8      	movs	r3, #200	@ 0xc8
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	1dbb      	adds	r3, r7, #6
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	2223      	movs	r2, #35	@ 0x23
 8000f2a:	217e      	movs	r1, #126	@ 0x7e
 8000f2c:	4857      	ldr	r0, [pc, #348]	@ (800108c <main+0x348>)
 8000f2e:	f003 f815 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <main+0x202>
	printf("I2C communication error (%X).\n", status);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4853      	ldr	r0, [pc, #332]	@ (8001090 <main+0x34c>)
 8000f42:	f008 fa0d 	bl	8009360 <iprintf>

/* Set RegDebounceConfig to 0x05 (16ms debounce time) */
data = 0x05;
 8000f46:	2305      	movs	r3, #5
 8000f48:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1,
 8000f4a:	23c8      	movs	r3, #200	@ 0xc8
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	2222      	movs	r2, #34	@ 0x22
 8000f5a:	217e      	movs	r1, #126	@ 0x7e
 8000f5c:	484b      	ldr	r0, [pc, #300]	@ (800108c <main+0x348>)
 8000f5e:	f002 fffd 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <main+0x232>
	printf("I2C communication error (%X).\n", status);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4847      	ldr	r0, [pc, #284]	@ (8001090 <main+0x34c>)
 8000f72:	f008 f9f5 	bl	8009360 <iprintf>

/* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
data = 0x7D;
 8000f76:	237d      	movs	r3, #125	@ 0x7d
 8000f78:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1,
 8000f7a:	23c8      	movs	r3, #200	@ 0xc8
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	2225      	movs	r2, #37	@ 0x25
 8000f8a:	217e      	movs	r1, #126	@ 0x7e
 8000f8c:	483f      	ldr	r0, [pc, #252]	@ (800108c <main+0x348>)
 8000f8e:	f002 ffe5 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
		&data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <main+0x262>
	printf("I2C communication error (%X).\n", status);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	483b      	ldr	r0, [pc, #236]	@ (8001090 <main+0x34c>)
 8000fa2:	f008 f9dd 	bl	8009360 <iprintf>

/* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
data = 0x1B;
 8000fa6:	231b      	movs	r3, #27
 8000fa8:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1,
 8000faa:	23c8      	movs	r3, #200	@ 0xc8
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	1dbb      	adds	r3, r7, #6
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2226      	movs	r2, #38	@ 0x26
 8000fba:	217e      	movs	r1, #126	@ 0x7e
 8000fbc:	4833      	ldr	r0, [pc, #204]	@ (800108c <main+0x348>)
 8000fbe:	f002 ffcd 	bl	8003f5c <HAL_I2C_Mem_Write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
		&data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <main+0x292>
	printf("I2C communication error (%X).\n", status);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482f      	ldr	r0, [pc, #188]	@ (8001090 <main+0x34c>)
 8000fd2:	f008 f9c5 	bl	8009360 <iprintf>

/* Enable EXTI4_IRQ after SX1509 initialization */
HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	@ 0x64
 8000fd8:	f002 f948 	bl	800326c <HAL_Delay>
HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f002 fd18 	bl	8003a12 <HAL_NVIC_EnableIRQ>

/* Disable EXTI2_IRQ during SX1509 initialization */
HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000fe2:	2008      	movs	r0, #8
 8000fe4:	f002 fd23 	bl	8003a2e <HAL_NVIC_DisableIRQ>

/* Software reset */
data = 0x12;
 8000fe8:	2312      	movs	r3, #18
 8000fea:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data,
 8000fec:	23c8      	movs	r3, #200	@ 0xc8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1dbb      	adds	r3, r7, #6
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	227d      	movs	r2, #125	@ 0x7d
 8000ffc:	217c      	movs	r1, #124	@ 0x7c
 8000ffe:	4823      	ldr	r0, [pc, #140]	@ (800108c <main+0x348>)
 8001000:	f002 ffac 	bl	8003f5c <HAL_I2C_Mem_Write>
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <main+0x2d4>
	printf("I2C communication error (%X).\n", status);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4619      	mov	r1, r3
 8001012:	481f      	ldr	r0, [pc, #124]	@ (8001090 <main+0x34c>)
 8001014:	f008 f9a4 	bl	8009360 <iprintf>

data = 0x34;
 8001018:	2334      	movs	r3, #52	@ 0x34
 800101a:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data,
 800101c:	23c8      	movs	r3, #200	@ 0xc8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	227d      	movs	r2, #125	@ 0x7d
 800102c:	217c      	movs	r1, #124	@ 0x7c
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <main+0x348>)
 8001030:	f002 ff94 	bl	8003f5c <HAL_I2C_Mem_Write>
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d004      	beq.n	8001048 <main+0x304>
	printf("I2C communication error (%X).\n", status);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4619      	mov	r1, r3
 8001042:	4813      	ldr	r0, [pc, #76]	@ (8001090 <main+0x34c>)
 8001044:	f008 f98c 	bl	8009360 <iprintf>

HAL_Delay(100);
 8001048:	2064      	movs	r0, #100	@ 0x64
 800104a:	f002 f90f 	bl	800326c <HAL_Delay>

/* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
data = 0xFF; // 0 = out; 1 = in
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data,
 8001052:	23c8      	movs	r3, #200	@ 0xc8
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	1dbb      	adds	r3, r7, #6
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	220f      	movs	r2, #15
 8001062:	217c      	movs	r1, #124	@ 0x7c
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <main+0x348>)
 8001066:	f002 ff79 	bl	8003f5c <HAL_I2C_Mem_Write>
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00f      	beq.n	8001094 <main+0x350>
	printf("I2C communication error (%X).\n", status);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <main+0x34c>)
 800107a:	f008 f971 	bl	8009360 <iprintf>
 800107e:	e009      	b.n	8001094 <main+0x350>
 8001080:	2000086c 	.word	0x2000086c
 8001084:	200007e4 	.word	0x200007e4
 8001088:	40021000 	.word	0x40021000
 800108c:	20000258 	.word	0x20000258
 8001090:	0800b2d4 	.word	0x0800b2d4

/* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
data = 0xFF; // 0 = out; 1 = in
 8001094:	23ff      	movs	r3, #255	@ 0xff
 8001096:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data,
 8001098:	23c8      	movs	r3, #200	@ 0xc8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	1dbb      	adds	r3, r7, #6
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	220e      	movs	r2, #14
 80010a8:	217c      	movs	r1, #124	@ 0x7c
 80010aa:	4854      	ldr	r0, [pc, #336]	@ (80011fc <main+0x4b8>)
 80010ac:	f002 ff56 	bl	8003f5c <HAL_I2C_Mem_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
		1, I2C_TIMEOUT);
if (status != HAL_OK)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <main+0x380>
	printf("I2C communication error (%X).\n", status);
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4619      	mov	r1, r3
 80010be:	4850      	ldr	r0, [pc, #320]	@ (8001200 <main+0x4bc>)
 80010c0:	f008 f94e 	bl	8009360 <iprintf>

/* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
data = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1,
 80010c8:	23c8      	movs	r3, #200	@ 0xc8
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2213      	movs	r2, #19
 80010d8:	217c      	movs	r1, #124	@ 0x7c
 80010da:	4848      	ldr	r0, [pc, #288]	@ (80011fc <main+0x4b8>)
 80010dc:	f002 ff3e 	bl	8003f5c <HAL_I2C_Mem_Write>
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <main+0x3b0>
	printf("I2C communication error (%X).\n", status);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4844      	ldr	r0, [pc, #272]	@ (8001200 <main+0x4bc>)
 80010f0:	f008 f936 	bl	8009360 <iprintf>

/* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
data = 0xAA;
 80010f4:	23aa      	movs	r3, #170	@ 0xaa
 80010f6:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1,
 80010f8:	23c8      	movs	r3, #200	@ 0xc8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2216      	movs	r2, #22
 8001108:	217c      	movs	r1, #124	@ 0x7c
 800110a:	483c      	ldr	r0, [pc, #240]	@ (80011fc <main+0x4b8>)
 800110c:	f002 ff26 	bl	8003f5c <HAL_I2C_Mem_Write>
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
		&data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <main+0x3e0>
	printf("I2C communication error (%X).\n", status);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4619      	mov	r1, r3
 800111e:	4838      	ldr	r0, [pc, #224]	@ (8001200 <main+0x4bc>)
 8001120:	f008 f91e 	bl	8009360 <iprintf>

/* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
data = 0xAA;
 8001124:	23aa      	movs	r3, #170	@ 0xaa
 8001126:	71bb      	strb	r3, [r7, #6]
status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1,
 8001128:	23c8      	movs	r3, #200	@ 0xc8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	2217      	movs	r2, #23
 8001138:	217c      	movs	r1, #124	@ 0x7c
 800113a:	4830      	ldr	r0, [pc, #192]	@ (80011fc <main+0x4b8>)
 800113c:	f002 ff0e 	bl	8003f5c <HAL_I2C_Mem_Write>
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
		&data, 1, I2C_TIMEOUT);
if (status != HAL_OK)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <main+0x410>
	printf("I2C communication error (%X).\n", status);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4619      	mov	r1, r3
 800114e:	482c      	ldr	r0, [pc, #176]	@ (8001200 <main+0x4bc>)
 8001150:	f008 f906 	bl	8009360 <iprintf>

/* Enable EXTI2_IRQ after SX1509 initialization */
HAL_Delay(100);
 8001154:	2064      	movs	r0, #100	@ 0x64
 8001156:	f002 f889 	bl	800326c <HAL_Delay>
HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800115a:	2008      	movs	r0, #8
 800115c:	f002 fc59 	bl	8003a12 <HAL_NVIC_EnableIRQ>

printf("Ready\n");
 8001160:	4828      	ldr	r0, [pc, #160]	@ (8001204 <main+0x4c0>)
 8001162:	f008 f965 	bl	8009430 <puts>

HAL_Delay(1000);
 8001166:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116a:	f002 f87f 	bl	800326c <HAL_Delay>

/* Start encoders timers */
HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800116e:	213c      	movs	r1, #60	@ 0x3c
 8001170:	4825      	ldr	r0, [pc, #148]	@ (8001208 <main+0x4c4>)
 8001172:	f005 fa0b 	bl	800658c <HAL_TIM_Encoder_Start>
HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001176:	213c      	movs	r1, #60	@ 0x3c
 8001178:	4824      	ldr	r0, [pc, #144]	@ (800120c <main+0x4c8>)
 800117a:	f005 fa07 	bl	800658c <HAL_TIM_Encoder_Start>

/* Start servomotors PWM (avoid floating inputs to servomotors) */
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800117e:	2100      	movs	r1, #0
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <main+0x4cc>)
 8001182:	f005 f801 	bl	8006188 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001186:	2104      	movs	r1, #4
 8001188:	4821      	ldr	r0, [pc, #132]	@ (8001210 <main+0x4cc>)
 800118a:	f004 fffd 	bl	8006188 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800118e:	2108      	movs	r1, #8
 8001190:	481f      	ldr	r0, [pc, #124]	@ (8001210 <main+0x4cc>)
 8001192:	f004 fff9 	bl	8006188 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001196:	210c      	movs	r1, #12
 8001198:	481d      	ldr	r0, [pc, #116]	@ (8001210 <main+0x4cc>)
 800119a:	f004 fff5 	bl	8006188 <HAL_TIM_PWM_Start>

/* Start motor PWM */
__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <main+0x4d0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <main+0x4d0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	639a      	str	r2, [r3, #56]	@ 0x38
__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <main+0x4d0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <main+0x4d0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40

HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80011be:	2100      	movs	r1, #0
 80011c0:	4814      	ldr	r0, [pc, #80]	@ (8001214 <main+0x4d0>)
 80011c2:	f004 ffe1 	bl	8006188 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011c6:	2104      	movs	r1, #4
 80011c8:	4812      	ldr	r0, [pc, #72]	@ (8001214 <main+0x4d0>)
 80011ca:	f004 ffdd 	bl	8006188 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80011ce:	2108      	movs	r1, #8
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <main+0x4d0>)
 80011d2:	f004 ffd9 	bl	8006188 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80011d6:	210c      	movs	r1, #12
 80011d8:	480e      	ldr	r0, [pc, #56]	@ (8001214 <main+0x4d0>)
 80011da:	f004 ffd5 	bl	8006188 <HAL_TIM_PWM_Start>

/* Start speed ctrl ISR */
HAL_TIM_Base_Start_IT(&htim6);
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <main+0x4d4>)
 80011e0:	f004 fea2 	bl	8005f28 <HAL_TIM_Base_Start_IT>
/* USER CODE BEGIN WHILE */
while (1) {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	handle_keypad_input(&motor1_pi);
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <main+0x4d8>)
 80011e6:	f7ff fcb1 	bl	8000b4c <handle_keypad_input>
	HAL_Delay(100);  // Prevent double reads if holding a key
 80011ea:	2064      	movs	r0, #100	@ 0x64
 80011ec:	f002 f83e 	bl	800326c <HAL_Delay>
	ertc_dlog_update(&logger);
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <main+0x4dc>)
 80011f2:	f7ff fbff 	bl	80009f4 <ertc_dlog_update>
	handle_keypad_input(&motor1_pi);
 80011f6:	bf00      	nop
 80011f8:	e7f4      	b.n	80011e4 <main+0x4a0>
 80011fa:	bf00      	nop
 80011fc:	20000258 	.word	0x20000258
 8001200:	0800b2d4 	.word	0x0800b2d4
 8001204:	0800b2f4 	.word	0x0800b2f4
 8001208:	200003fc 	.word	0x200003fc
 800120c:	20000448 	.word	0x20000448
 8001210:	20000364 	.word	0x20000364
 8001214:	2000052c 	.word	0x2000052c
 8001218:	200004e0 	.word	0x200004e0
 800121c:	20000000 	.word	0x20000000
 8001220:	2000086c 	.word	0x2000086c

08001224 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2234      	movs	r2, #52	@ 0x34
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f008 f9dc 	bl	80095f0 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

/** Configure LSE Drive Capability
 */
HAL_PWR_EnableBkUpAccess();
 8001248:	f003 fc10 	bl	8004a6c <HAL_PWR_EnableBkUpAccess>

/** Configure the main internal regulator output voltage
 */
__HAL_RCC_PWR_CLK_ENABLE();
 800124c:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <SystemClock_Config+0xdc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a2b      	ldr	r2, [pc, #172]	@ (8001300 <SystemClock_Config+0xdc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <SystemClock_Config+0xdc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001264:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <SystemClock_Config+0xe0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800126c:	4a25      	ldr	r2, [pc, #148]	@ (8001304 <SystemClock_Config+0xe0>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <SystemClock_Config+0xe0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2301      	movs	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001284:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001288:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001292:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLM = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
RCC_OscInitStruct.PLL.PLLN = 96;
 8001298:	2360      	movs	r3, #96	@ 0x60
 800129a:	643b      	str	r3, [r7, #64]	@ 0x40
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	647b      	str	r3, [r7, #68]	@ 0x44
RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	64bb      	str	r3, [r7, #72]	@ 0x48
RCC_OscInitStruct.PLL.PLLR = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fc3d 	bl	8004b2c <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x98>
	Error_Handler();
 80012b8:	f000 ff4e 	bl	8002158 <Error_Handler>
}

/** Activate the Over-Drive mode
 */
if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80012bc:	f003 fbe6 	bl	8004a8c <HAL_PWREx_EnableOverDrive>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xa6>
	Error_Handler();
 80012c6:	f000 ff47 	bl	8002158 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	60bb      	str	r3, [r7, #8]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2302      	movs	r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012da:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	2103      	movs	r1, #3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fece 	bl	8005088 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xd2>
	Error_Handler();
 80012f2:	f000 ff31 	bl	8002158 <Error_Handler>
}
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	@ 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC1_Init 0 */

/* USER CODE END ADC1_Init 0 */

ADC_ChannelConfTypeDef sConfig = { 0 };
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]

/* USER CODE END ADC1_Init 1 */

/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
 */
hadc1.Instance = ADC1;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800131c:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <MX_ADC1_Init+0x9c>)
 800131e:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001322:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001326:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
hadc1.Init.ContinuousConvMode = DISABLE;
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
hadc1.Init.DiscontinuousConvMode = DISABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2020 	strb.w	r2, [r3, #32]
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800134a:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <MX_ADC1_Init+0xa0>)
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
hadc1.Init.NbrOfConversion = 1;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001356:	2201      	movs	r2, #1
 8001358:	61da      	str	r2, [r3, #28]
hadc1.Init.DMAContinuousRequests = DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_ADC1_Init+0x98>)
 8001364:	2201      	movs	r2, #1
 8001366:	615a      	str	r2, [r3, #20]
if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800136a:	f001 ffa3 	bl	80032b4 <HAL_ADC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x70>
	Error_Handler();
 8001374:	f000 fef0 	bl	8002158 <Error_Handler>
}

/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
 */
sConfig.Channel = ADC_CHANNEL_3;
 8001378:	2303      	movs	r3, #3
 800137a:	603b      	str	r3, [r7, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 800137c:	2301      	movs	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_ADC1_Init+0x98>)
 800138a:	f001 ffd7 	bl	800333c <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x90>
	Error_Handler();
 8001394:	f000 fee0 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000210 	.word	0x20000210
 80013a4:	40012000 	.word	0x40012000
 80013a8:	0f000001 	.word	0x0f000001

080013ac <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
/* USER CODE END I2C1_Init 0 */

/* USER CODE BEGIN I2C1_Init 1 */

/* USER CODE END I2C1_Init 1 */
hi2c1.Instance = I2C1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001424 <MX_I2C1_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
hi2c1.Init.Timing = 0x20303E5D;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <MX_I2C1_Init+0x7c>)
 80013ba:	605a      	str	r2, [r3, #4]
hi2c1.Init.OwnAddress1 = 0;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	60da      	str	r2, [r3, #12]
hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
hi2c1.Init.OwnAddress2 = 0;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	615a      	str	r2, [r3, #20]
hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013e6:	480e      	ldr	r0, [pc, #56]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013e8:	f002 fd1c 	bl	8003e24 <HAL_I2C_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C1_Init+0x4a>
	Error_Handler();
 80013f2:	f000 feb1 	bl	8002158 <Error_Handler>
}

/** Configure Analogue filter
 */
if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80013f6:	2100      	movs	r1, #0
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <MX_I2C1_Init+0x74>)
 80013fa:	f003 fa9f 	bl	800493c <HAL_I2CEx_ConfigAnalogFilter>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C1_Init+0x5c>
	Error_Handler();
 8001404:	f000 fea8 	bl	8002158 <Error_Handler>
}

/** Configure Digital filter
 */
if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001408:	2100      	movs	r1, #0
 800140a:	4805      	ldr	r0, [pc, #20]	@ (8001420 <MX_I2C1_Init+0x74>)
 800140c:	f003 fae1 	bl	80049d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C1_Init+0x6e>
	Error_Handler();
 8001416:	f000 fe9f 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN I2C1_Init 2 */

/* USER CODE END I2C1_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000258 	.word	0x20000258
 8001424:	40005400 	.word	0x40005400
 8001428:	20303e5d 	.word	0x20303e5d

0800142c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
/* USER CODE END I2C2_Init 0 */

/* USER CODE BEGIN I2C2_Init 1 */

/* USER CODE END I2C2_Init 1 */
hi2c2.Instance = I2C2;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <MX_I2C2_Init+0x78>)
 8001434:	601a      	str	r2, [r3, #0]
hi2c2.Init.Timing = 0x20303E5D;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <MX_I2C2_Init+0x7c>)
 800143a:	605a      	str	r2, [r3, #4]
hi2c2.Init.OwnAddress1 = 0;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_I2C2_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001444:	2201      	movs	r2, #1
 8001446:	60da      	str	r2, [r3, #12]
hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <MX_I2C2_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
hi2c2.Init.OwnAddress2 = 0;
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_I2C2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001466:	480e      	ldr	r0, [pc, #56]	@ (80014a0 <MX_I2C2_Init+0x74>)
 8001468:	f002 fcdc 	bl	8003e24 <HAL_I2C_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C2_Init+0x4a>
	Error_Handler();
 8001472:	f000 fe71 	bl	8002158 <Error_Handler>
}

/** Configure Analogue filter
 */
if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001476:	2100      	movs	r1, #0
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <MX_I2C2_Init+0x74>)
 800147a:	f003 fa5f 	bl	800493c <HAL_I2CEx_ConfigAnalogFilter>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C2_Init+0x5c>
	Error_Handler();
 8001484:	f000 fe68 	bl	8002158 <Error_Handler>
}

/** Configure Digital filter
 */
if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001488:	2100      	movs	r1, #0
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_I2C2_Init+0x74>)
 800148c:	f003 faa1 	bl	80049d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C2_Init+0x6e>
	Error_Handler();
 8001496:	f000 fe5f 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN I2C2_Init 2 */

/* USER CODE END I2C2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200002ac 	.word	0x200002ac
 80014a4:	40005800 	.word	0x40005800
 80014a8:	20303e5d 	.word	0x20303e5d

080014ac <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

/* USER CODE BEGIN SPI1_Init 1 */

/* USER CODE END SPI1_Init 1 */
/* SPI1 parameter configuration*/
hspi1.Instance = SPI1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <MX_SPI1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014bc:	605a      	str	r2, [r3, #4]
hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014c6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014ca:	60da      	str	r2, [r3, #12]
hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014de:	619a      	str	r2, [r3, #24]
hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
hspi1.Init.CRCPolynomial = 7;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_SPI1_Init+0x74>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_SPI1_Init+0x74>)
 8001506:	2208      	movs	r2, #8
 8001508:	635a      	str	r2, [r3, #52]	@ 0x34
if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_SPI1_Init+0x74>)
 800150c:	f004 fc0a 	bl	8005d24 <HAL_SPI_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_SPI1_Init+0x6e>
	Error_Handler();
 8001516:	f000 fe1f 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN SPI1_Init 2 */

/* USER CODE END SPI1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000300 	.word	0x20000300
 8001524:	40013000 	.word	0x40013000

08001528 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b09a      	sub	sp, #104	@ 0x68
 800152c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM1_Init 0 */

/* USER CODE END TIM1_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800152e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800153c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001548:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	222c      	movs	r2, #44	@ 0x2c
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f008 f844 	bl	80095f0 <memset>

/* USER CODE BEGIN TIM1_Init 1 */

/* USER CODE END TIM1_Init 1 */
htim1.Instance = TIM1;
 8001568:	4b55      	ldr	r3, [pc, #340]	@ (80016c0 <MX_TIM1_Init+0x198>)
 800156a:	4a56      	ldr	r2, [pc, #344]	@ (80016c4 <MX_TIM1_Init+0x19c>)
 800156c:	601a      	str	r2, [r3, #0]
htim1.Init.Prescaler = 0;
 800156e:	4b54      	ldr	r3, [pc, #336]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b52      	ldr	r3, [pc, #328]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
htim1.Init.Period = 0;
 800157a:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <MX_TIM1_Init+0x198>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	4b4f      	ldr	r3, [pc, #316]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
htim1.Init.RepetitionCounter = 0;
 8001586:	4b4e      	ldr	r3, [pc, #312]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b4c      	ldr	r3, [pc, #304]	@ (80016c0 <MX_TIM1_Init+0x198>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001592:	484b      	ldr	r0, [pc, #300]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001594:	f004 fc71 	bl	8005e7a <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM1_Init+0x7a>
	Error_Handler();
 800159e:	f000 fddb 	bl	8002158 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	65bb      	str	r3, [r7, #88]	@ 0x58
if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015ac:	4619      	mov	r1, r3
 80015ae:	4844      	ldr	r0, [pc, #272]	@ (80016c0 <MX_TIM1_Init+0x198>)
 80015b0:	f005 fbac 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x96>
	Error_Handler();
 80015ba:	f000 fdcd 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_OC_Init(&htim1) != HAL_OK) {
 80015be:	4840      	ldr	r0, [pc, #256]	@ (80016c0 <MX_TIM1_Init+0x198>)
 80015c0:	f004 fd2a 	bl	8006018 <HAL_TIM_OC_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0xa6>
	Error_Handler();
 80015ca:	f000 fdc5 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	653b      	str	r3, [r7, #80]	@ 0x50
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	657b      	str	r3, [r7, #84]	@ 0x54
if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80015da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015de:	4619      	mov	r1, r3
 80015e0:	4837      	ldr	r0, [pc, #220]	@ (80016c0 <MX_TIM1_Init+0x198>)
 80015e2:	f006 f979 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0xc8>
	Error_Handler();
 80015ec:	f000 fdb4 	bl	8002158 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80015f0:	2350      	movs	r3, #80	@ 0x50
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
sConfigOC.Pulse = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015f8:	2302      	movs	r3, #2
 80015fa:	63bb      	str	r3, [r7, #56]	@ 0x38
sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	643b      	str	r3, [r7, #64]	@ 0x40
sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	647b      	str	r3, [r7, #68]	@ 0x44
sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	64bb      	str	r3, [r7, #72]	@ 0x48
if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800160c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001610:	2200      	movs	r2, #0
 8001612:	4619      	mov	r1, r3
 8001614:	482a      	ldr	r0, [pc, #168]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001616:	f005 f94f 	bl	80068b8 <HAL_TIM_OC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0xfc>
	Error_Handler();
 8001620:	f000 fd9a 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001624:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001628:	2204      	movs	r2, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4824      	ldr	r0, [pc, #144]	@ (80016c0 <MX_TIM1_Init+0x198>)
 800162e:	f005 f943 	bl	80068b8 <HAL_TIM_OC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0x114>
	Error_Handler();
 8001638:	f000 fd8e 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800163c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001640:	2208      	movs	r2, #8
 8001642:	4619      	mov	r1, r3
 8001644:	481e      	ldr	r0, [pc, #120]	@ (80016c0 <MX_TIM1_Init+0x198>)
 8001646:	f005 f937 	bl	80068b8 <HAL_TIM_OC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x12c>
	Error_Handler();
 8001650:	f000 fd82 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001654:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001658:	220c      	movs	r2, #12
 800165a:	4619      	mov	r1, r3
 800165c:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <MX_TIM1_Init+0x198>)
 800165e:	f005 f92b 	bl	80068b8 <HAL_TIM_OC_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM1_Init+0x144>
	Error_Handler();
 8001668:	f000 fd76 	bl	8002158 <Error_Handler>
}
sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
sBreakDeadTimeConfig.DeadTime = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001684:	61bb      	str	r3, [r7, #24]
sBreakDeadTimeConfig.BreakFilter = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800168e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
sBreakDeadTimeConfig.Break2Filter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM1_Init+0x198>)
 80016a2:	f006 f9a7 	bl	80079f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0x188>
	Error_Handler();
 80016ac:	f000 fd54 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM1_Init 2 */

/* USER CODE END TIM1_Init 2 */
HAL_TIM_MspPostInit(&htim1);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM1_Init+0x198>)
 80016b2:	f001 f9a7 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3768      	adds	r7, #104	@ 0x68
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000364 	.word	0x20000364
 80016c4:	40010000 	.word	0x40010000

080016c8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b092      	sub	sp, #72	@ 0x48
 80016cc:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM2_Init 0 */

/* USER CODE END TIM2_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]
TIM_IC_InitTypeDef sConfigIC = { 0 };
 80016fc:	463b      	mov	r3, r7
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]

/* USER CODE BEGIN TIM2_Init 1 */

/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
 8001708:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800170a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170e:	601a      	str	r2, [r3, #0]
htim2.Init.Prescaler = 0;
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <MX_TIM2_Init+0x130>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <MX_TIM2_Init+0x130>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
htim2.Init.Period = 4294967295;
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800171e:	f04f 32ff 	mov.w	r2, #4294967295
 8001722:	60da      	str	r2, [r3, #12]
htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <MX_TIM2_Init+0x130>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001730:	4831      	ldr	r0, [pc, #196]	@ (80017f8 <MX_TIM2_Init+0x130>)
 8001732:	f004 fba2 	bl	8005e7a <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x78>
	Error_Handler();
 800173c:	f000 fd0c 	bl	8002158 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001744:	63bb      	str	r3, [r7, #56]	@ 0x38
if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001746:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800174a:	4619      	mov	r1, r3
 800174c:	482a      	ldr	r0, [pc, #168]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800174e:	f005 fadd 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0x94>
	Error_Handler();
 8001758:	f000 fcfe 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800175c:	4826      	ldr	r0, [pc, #152]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800175e:	f004 fcbc 	bl	80060da <HAL_TIM_PWM_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0xa4>
	Error_Handler();
 8001768:	f000 fcf6 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800176c:	4822      	ldr	r0, [pc, #136]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800176e:	f004 fe05 	bl	800637c <HAL_TIM_IC_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM2_Init+0xb4>
	Error_Handler();
 8001778:	f000 fcee 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001784:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	481b      	ldr	r0, [pc, #108]	@ (80017f8 <MX_TIM2_Init+0x130>)
 800178c:	f006 f8a4 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0xd2>
	Error_Handler();
 8001796:	f000 fcdf 	bl	8002158 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179a:	2360      	movs	r3, #96	@ 0x60
 800179c:	613b      	str	r3, [r7, #16]
sConfigOC.Pulse = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	4811      	ldr	r0, [pc, #68]	@ (80017f8 <MX_TIM2_Init+0x130>)
 80017b4:	f005 f996 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0xfa>
	Error_Handler();
 80017be:	f000 fccb 	bl	8002158 <Error_Handler>
}
sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017c6:	2301      	movs	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
sConfigIC.ICFilter = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 80017d2:	463b      	mov	r3, r7
 80017d4:	2208      	movs	r2, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <MX_TIM2_Init+0x130>)
 80017da:	f005 f8e7 	bl	80069ac <HAL_TIM_IC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x120>
	Error_Handler();
 80017e4:	f000 fcb8 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM2_Init 2 */

/* USER CODE END TIM2_Init 2 */
HAL_TIM_MspPostInit(&htim2);
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <MX_TIM2_Init+0x130>)
 80017ea:	f001 f90b 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3748      	adds	r7, #72	@ 0x48
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200003b0 	.word	0x200003b0

080017fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	@ 0x30
 8001800:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM3_Init 0 */

/* USER CODE END TIM3_Init 0 */

TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	2224      	movs	r2, #36	@ 0x24
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f007 fef0 	bl	80095f0 <memset>
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]

/* USER CODE BEGIN TIM3_Init 1 */

/* USER CODE END TIM3_Init 1 */
htim3.Instance = TIM3;
 800181a:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 800181c:	4a21      	ldr	r2, [pc, #132]	@ (80018a4 <MX_TIM3_Init+0xa8>)
 800181e:	601a      	str	r2, [r3, #0]
htim3.Init.Prescaler = 0;
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
htim3.Init.Period = TIM3_ARR_VALUE;
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 800182e:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8001832:	60da      	str	r2, [r3, #12]
htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001840:	2303      	movs	r3, #3
 8001842:	60fb      	str	r3, [r7, #12]
sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001848:	2301      	movs	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
sConfig.IC1Filter = 15;
 8001850:	230f      	movs	r3, #15
 8001852:	61fb      	str	r3, [r7, #28]
sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001858:	2301      	movs	r3, #1
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
sConfig.IC2Filter = 15;
 8001860:	230f      	movs	r3, #15
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 800186c:	f004 fde8 	bl	8006440 <HAL_TIM_Encoder_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM3_Init+0x7e>
	Error_Handler();
 8001876:	f000 fc6f 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <MX_TIM3_Init+0xa4>)
 8001888:	f006 f826 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0x9a>
	Error_Handler();
 8001892:	f000 fc61 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM3_Init 2 */

/* USER CODE END TIM3_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3730      	adds	r7, #48	@ 0x30
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003fc 	.word	0x200003fc
 80018a4:	40000400 	.word	0x40000400

080018a8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	@ 0x30
 80018ac:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM4_Init 0 */

/* USER CODE END TIM4_Init 0 */

TIM_Encoder_InitTypeDef sConfig = { 0 };
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2224      	movs	r2, #36	@ 0x24
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f007 fe9a 	bl	80095f0 <memset>
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]

/* USER CODE BEGIN TIM4_Init 1 */

/* USER CODE END TIM4_Init 1 */
htim4.Instance = TIM4;
 80018c6:	4b21      	ldr	r3, [pc, #132]	@ (800194c <MX_TIM4_Init+0xa4>)
 80018c8:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <MX_TIM4_Init+0xa8>)
 80018ca:	601a      	str	r2, [r3, #0]
htim4.Init.Prescaler = 0;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <MX_TIM4_Init+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <MX_TIM4_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
htim4.Init.Period = TIM4_ARR_VALUE;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <MX_TIM4_Init+0xa4>)
 80018da:	f640 62ff 	movw	r2, #3839	@ 0xeff
 80018de:	60da      	str	r2, [r3, #12]
htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <MX_TIM4_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <MX_TIM4_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018ec:	2303      	movs	r3, #3
 80018ee:	60fb      	str	r3, [r7, #12]
sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018f4:	2301      	movs	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
sConfig.IC1Filter = 15;
 80018fc:	230f      	movs	r3, #15
 80018fe:	61fb      	str	r3, [r7, #28]
sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001904:	2301      	movs	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28
sConfig.IC2Filter = 15;
 800190c:	230f      	movs	r3, #15
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	@ (800194c <MX_TIM4_Init+0xa4>)
 8001918:	f004 fd92 	bl	8006440 <HAL_TIM_Encoder_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM4_Init+0x7e>
	Error_Handler();
 8001922:	f000 fc19 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800192e:	463b      	mov	r3, r7
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <MX_TIM4_Init+0xa4>)
 8001934:	f005 ffd0 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x9a>
	Error_Handler();
 800193e:	f000 fc0b 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM4_Init 2 */

/* USER CODE END TIM4_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3730      	adds	r7, #48	@ 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000448 	.word	0x20000448
 8001950:	40000800 	.word	0x40000800

08001954 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b08e      	sub	sp, #56	@ 0x38
 8001958:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM5_Init 0 */

/* USER CODE END TIM5_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800195a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001974:	463b      	mov	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM5_Init 1 */

/* USER CODE END TIM5_Init 1 */
htim5.Instance = TIM5;
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 8001988:	4a2d      	ldr	r2, [pc, #180]	@ (8001a40 <MX_TIM5_Init+0xec>)
 800198a:	601a      	str	r2, [r3, #0]
htim5.Init.Prescaler = 0;
 800198c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
htim5.Init.Period = 4294967295;
 8001998:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 800199a:	f04f 32ff 	mov.w	r2, #4294967295
 800199e:	60da      	str	r2, [r3, #12]
htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b26      	ldr	r3, [pc, #152]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80019ac:	4823      	ldr	r0, [pc, #140]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 80019ae:	f004 fa64 	bl	8005e7a <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM5_Init+0x68>
	Error_Handler();
 80019b8:	f000 fbce 	bl	8002158 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80019c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c6:	4619      	mov	r1, r3
 80019c8:	481c      	ldr	r0, [pc, #112]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 80019ca:	f005 f99f 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM5_Init+0x84>
	Error_Handler();
 80019d4:	f000 fbc0 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80019d8:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 80019da:	f004 fb7e 	bl	80060da <HAL_TIM_PWM_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM5_Init+0x94>
	Error_Handler();
 80019e4:	f000 fbb8 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4811      	ldr	r0, [pc, #68]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 80019f8:	f005 ff6e 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM5_Init+0xb2>
	Error_Handler();
 8001a02:	f000 fba9 	bl	8002158 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a06:	2360      	movs	r3, #96	@ 0x60
 8001a08:	603b      	str	r3, [r7, #0]
sConfigOC.Pulse = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 8001a1e:	f005 f861 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM5_Init+0xd8>
	Error_Handler();
 8001a28:	f000 fb96 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM5_Init 2 */

/* USER CODE END TIM5_Init 2 */
HAL_TIM_MspPostInit(&htim5);
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <MX_TIM5_Init+0xe8>)
 8001a2e:	f000 ffe9 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3738      	adds	r7, #56	@ 0x38
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000494 	.word	0x20000494
 8001a40:	40000c00 	.word	0x40000c00

08001a44 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM6_Init 0 */

/* USER CODE END TIM6_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]

/* USER CODE BEGIN TIM6_Init 1 */

/* USER CODE END TIM6_Init 1 */
htim6.Instance = TIM6;
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a56:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <MX_TIM6_Init+0x6c>)
 8001a58:	601a      	str	r2, [r3, #0]
htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a5c:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001a60:	605a      	str	r2, [r3, #4]
htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
htim6.Init.Period = TIM6_ARR_VALUE;
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a6e:	60da      	str	r2, [r3, #12]
htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a76:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a78:	f004 f9ff 	bl	8005e7a <HAL_TIM_Base_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM6_Init+0x42>
	Error_Handler();
 8001a82:	f000 fb69 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <MX_TIM6_Init+0x68>)
 8001a94:	f005 ff20 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM6_Init+0x5e>
	Error_Handler();
 8001a9e:	f000 fb5b 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM6_Init 2 */

/* USER CODE END TIM6_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200004e0 	.word	0x200004e0
 8001ab0:	40001000 	.word	0x40001000

08001ab4 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b09a      	sub	sp, #104	@ 0x68
 8001ab8:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM8_Init 0 */

/* USER CODE END TIM8_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001aba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ac8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ad4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	619a      	str	r2, [r3, #24]
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	222c      	movs	r2, #44	@ 0x2c
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 fd7e 	bl	80095f0 <memset>

/* USER CODE BEGIN TIM8_Init 1 */

/* USER CODE END TIM8_Init 1 */
htim8.Instance = TIM8;
 8001af4:	4b56      	ldr	r3, [pc, #344]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001af6:	4a57      	ldr	r2, [pc, #348]	@ (8001c54 <MX_TIM8_Init+0x1a0>)
 8001af8:	601a      	str	r2, [r3, #0]
htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001afa:	4b55      	ldr	r3, [pc, #340]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001afc:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001b00:	605a      	str	r2, [r3, #4]
htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b53      	ldr	r3, [pc, #332]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
htim8.Init.Period = TIM8_ARR_VALUE;
 8001b08:	4b51      	ldr	r3, [pc, #324]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b0a:	f240 128f 	movw	r2, #399	@ 0x18f
 8001b0e:	60da      	str	r2, [r3, #12]
htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b4f      	ldr	r3, [pc, #316]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
htim8.Init.RepetitionCounter = 0;
 8001b16:	4b4e      	ldr	r3, [pc, #312]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001b22:	484b      	ldr	r0, [pc, #300]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b24:	f004 f9a9 	bl	8005e7a <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM8_Init+0x7e>
	Error_Handler();
 8001b2e:	f000 fb13 	bl	8002158 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b36:	65bb      	str	r3, [r7, #88]	@ 0x58
if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001b38:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4844      	ldr	r0, [pc, #272]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b40:	f005 f8e4 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM8_Init+0x9a>
	Error_Handler();
 8001b4a:	f000 fb05 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001b4e:	4840      	ldr	r0, [pc, #256]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b50:	f004 fac3 	bl	80060da <HAL_TIM_PWM_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM8_Init+0xaa>
	Error_Handler();
 8001b5a:	f000 fafd 	bl	8002158 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	653b      	str	r3, [r7, #80]	@ 0x50
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	657b      	str	r3, [r7, #84]	@ 0x54
if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8001b6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4837      	ldr	r0, [pc, #220]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001b72:	f005 feb1 	bl	80078d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM8_Init+0xcc>
	Error_Handler();
 8001b7c:	f000 faec 	bl	8002158 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b80:	2360      	movs	r3, #96	@ 0x60
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
sConfigOC.Pulse = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40
sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	647b      	str	r3, [r7, #68]	@ 0x44
sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001b9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	482a      	ldr	r0, [pc, #168]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001ba6:	f004 ff9d 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM8_Init+0x100>
	Error_Handler();
 8001bb0:	f000 fad2 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001bb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4824      	ldr	r0, [pc, #144]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001bbe:	f004 ff91 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM8_Init+0x118>
	Error_Handler();
 8001bc8:	f000 fac6 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001bcc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481e      	ldr	r0, [pc, #120]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001bd6:	f004 ff85 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM8_Init+0x130>
	Error_Handler();
 8001be0:	f000 faba 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001be4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001be8:	220c      	movs	r2, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	4818      	ldr	r0, [pc, #96]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001bee:	f004 ff79 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM8_Init+0x148>
	Error_Handler();
 8001bf8:	f000 faae 	bl	8002158 <Error_Handler>
}
sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
sBreakDeadTimeConfig.DeadTime = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c14:	61bb      	str	r3, [r7, #24]
sBreakDeadTimeConfig.BreakFilter = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
sBreakDeadTimeConfig.Break2Filter = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4807      	ldr	r0, [pc, #28]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001c32:	f005 fedf 	bl	80079f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM8_Init+0x18c>
	Error_Handler();
 8001c3c:	f000 fa8c 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM8_Init 2 */

/* USER CODE END TIM8_Init 2 */
HAL_TIM_MspPostInit(&htim8);
 8001c40:	4803      	ldr	r0, [pc, #12]	@ (8001c50 <MX_TIM8_Init+0x19c>)
 8001c42:	f000 fedf 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001c46:	bf00      	nop
 8001c48:	3768      	adds	r7, #104	@ 0x68
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000052c 	.word	0x2000052c
 8001c54:	40010400 	.word	0x40010400

08001c58 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM9_Init 0 */

/* USER CODE END TIM9_Init 0 */

TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	619a      	str	r2, [r3, #24]

/* USER CODE BEGIN TIM9_Init 1 */

/* USER CODE END TIM9_Init 1 */
htim9.Instance = TIM9;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c72:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <MX_TIM9_Init+0x9c>)
 8001c74:	601a      	str	r2, [r3, #0]
htim9.Init.Prescaler = 0;
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
htim9.Init.Period = 65535;
 8001c82:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c88:	60da      	str	r2, [r3, #12]
htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 8001c96:	4816      	ldr	r0, [pc, #88]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001c98:	f004 fa1f 	bl	80060da <HAL_TIM_PWM_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM9_Init+0x4e>
	Error_Handler();
 8001ca2:	f000 fa59 	bl	8002158 <Error_Handler>
}
sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca6:	2360      	movs	r3, #96	@ 0x60
 8001ca8:	607b      	str	r3, [r7, #4]
sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001cbe:	f004 ff11 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM9_Init+0x74>
	Error_Handler();
 8001cc8:	f000 fa46 	bl	8002158 <Error_Handler>
}
if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001cd4:	f004 ff06 	bl	8006ae4 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM9_Init+0x8a>
	Error_Handler();
 8001cde:	f000 fa3b 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN TIM9_Init 2 */

/* USER CODE END TIM9_Init 2 */
HAL_TIM_MspPostInit(&htim9);
 8001ce2:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <MX_TIM9_Init+0x98>)
 8001ce4:	f000 fe8e 	bl	8002a04 <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000578 	.word	0x20000578
 8001cf4:	40014000 	.word	0x40014000

08001cf8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
/* USER CODE END UART4_Init 0 */

/* USER CODE BEGIN UART4_Init 1 */

/* USER CODE END UART4_Init 1 */
huart4.Instance = UART4;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001cfe:	4a15      	ldr	r2, [pc, #84]	@ (8001d54 <MX_UART4_Init+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
huart4.Init.BaudRate = 9600;
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d08:	605a      	str	r2, [r3, #4]
huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
huart4.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
huart4.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
huart4.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001d3a:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_UART4_Init+0x58>)
 8001d3c:	f005 fef6 	bl	8007b2c <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_UART4_Init+0x52>
	Error_Handler();
 8001d46:	f000 fa07 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN UART4_Init 2 */

/* USER CODE END UART4_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200005c4 	.word	0x200005c4
 8001d54:	40004c00 	.word	0x40004c00

08001d58 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
/* USER CODE END UART5_Init 0 */

/* USER CODE BEGIN UART5_Init 1 */

/* USER CODE END UART5_Init 1 */
huart5.Instance = UART5;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d5e:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <MX_UART5_Init+0x5c>)
 8001d60:	601a      	str	r2, [r3, #0]
huart5.Init.BaudRate = 115200;
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d68:	605a      	str	r2, [r3, #4]
huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
huart5.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
huart5.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
huart5.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]
huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	625a      	str	r2, [r3, #36]	@ 0x24
if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001d9a:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <MX_UART5_Init+0x58>)
 8001d9c:	f005 fec6 	bl	8007b2c <HAL_UART_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_UART5_Init+0x52>
	Error_Handler();
 8001da6:	f000 f9d7 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN UART5_Init 2 */

/* USER CODE END UART5_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000064c 	.word	0x2000064c
 8001db4:	40005000 	.word	0x40005000

08001db8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
/* USER CODE END USART1_Init 0 */

/* USER CODE BEGIN USART1_Init 1 */

/* USER CODE END USART1_Init 1 */
huart1.Instance = USART1;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dbe:	4a15      	ldr	r2, [pc, #84]	@ (8001e14 <MX_USART1_UART_Init+0x5c>)
 8001dc0:	601a      	str	r2, [r3, #0]
huart1.Init.BaudRate = 115200;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
huart1.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
huart1.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dfc:	f005 fe96 	bl	8007b2c <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART1_UART_Init+0x52>
	Error_Handler();
 8001e06:	f000 f9a7 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN USART1_Init 2 */

/* USER CODE END USART1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200006d4 	.word	0x200006d4
 8001e14:	40011000 	.word	0x40011000

08001e18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e1e:	4a14      	ldr	r2, [pc, #80]	@ (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e20:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 1000000;
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e24:	4a13      	ldr	r2, [pc, #76]	@ (8001e74 <MX_USART2_UART_Init+0x5c>)
 8001e26:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e28:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e3c:	220c      	movs	r2, #12
 8001e3e:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e46:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24
if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001e58:	4804      	ldr	r0, [pc, #16]	@ (8001e6c <MX_USART2_UART_Init+0x54>)
 8001e5a:	f005 fe67 	bl	8007b2c <HAL_UART_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_USART2_UART_Init+0x50>
	Error_Handler();
 8001e64:	f000 f978 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	2000075c 	.word	0x2000075c
 8001e70:	40004400 	.word	0x40004400
 8001e74:	000f4240 	.word	0x000f4240

08001e78 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
/* USER CODE END USART3_Init 0 */

/* USER CODE BEGIN USART3_Init 1 */

/* USER CODE END USART3_Init 1 */
huart3.Instance = USART3;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ed4 <MX_USART3_UART_Init+0x5c>)
 8001e80:	601a      	str	r2, [r3, #0]
huart3.Init.BaudRate = 115200;
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
huart3.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
huart3.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
huart3.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	@ 0x24
if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_USART3_UART_Init+0x58>)
 8001ebc:	f005 fe36 	bl	8007b2c <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART3_UART_Init+0x52>
	Error_Handler();
 8001ec6:	f000 f947 	bl	8002158 <Error_Handler>
}
/* USER CODE BEGIN USART3_Init 2 */

/* USER CODE END USART3_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200007e4 	.word	0x200007e4
 8001ed4:	40004800 	.word	0x40004800

08001ed8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	@ 0x38
 8001edc:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOE_CLK_ENABLE();
 8001eee:	4b93      	ldr	r3, [pc, #588]	@ (800213c <MX_GPIO_Init+0x264>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a92      	ldr	r2, [pc, #584]	@ (800213c <MX_GPIO_Init+0x264>)
 8001ef4:	f043 0310 	orr.w	r3, r3, #16
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b90      	ldr	r3, [pc, #576]	@ (800213c <MX_GPIO_Init+0x264>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	4b8d      	ldr	r3, [pc, #564]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a8c      	ldr	r2, [pc, #560]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b8a      	ldr	r3, [pc, #552]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1e:	4b87      	ldr	r3, [pc, #540]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a86      	ldr	r2, [pc, #536]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f24:	f043 0320 	orr.w	r3, r3, #32
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b84      	ldr	r3, [pc, #528]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f36:	4b81      	ldr	r3, [pc, #516]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a80      	ldr	r2, [pc, #512]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b7e      	ldr	r3, [pc, #504]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a7a      	ldr	r2, [pc, #488]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b78      	ldr	r3, [pc, #480]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b75      	ldr	r3, [pc, #468]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a74      	ldr	r2, [pc, #464]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b72      	ldr	r3, [pc, #456]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a6e      	ldr	r2, [pc, #440]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b6c      	ldr	r3, [pc, #432]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOG_CLK_ENABLE();
 8001f96:	4b69      	ldr	r3, [pc, #420]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a68      	ldr	r2, [pc, #416]	@ (800213c <MX_GPIO_Init+0x264>)
 8001f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b66      	ldr	r3, [pc, #408]	@ (800213c <MX_GPIO_Init+0x264>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOE,
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2118      	movs	r1, #24
 8001fb2:	4863      	ldr	r0, [pc, #396]	@ (8002140 <MX_GPIO_Init+0x268>)
 8001fb4:	f001 ff02 	bl	8003dbc <HAL_GPIO_WritePin>
GPIO_OUT_SPI_CS_SDCARD_Pin | GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001fbe:	4861      	ldr	r0, [pc, #388]	@ (8002144 <MX_GPIO_Init+0x26c>)
 8001fc0:	f001 fefc 	bl	8003dbc <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2140      	movs	r1, #64	@ 0x40
 8001fc8:	485f      	ldr	r0, [pc, #380]	@ (8002148 <MX_GPIO_Init+0x270>)
 8001fca:	f001 fef7 	bl	8003dbc <HAL_GPIO_WritePin>

/*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin | GPIO_OUT_SPI_CS_LCD_Pin;
 8001fce:	2318      	movs	r3, #24
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4856      	ldr	r0, [pc, #344]	@ (8002140 <MX_GPIO_Init+0x268>)
 8001fe6:	f001 fd3d 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
 GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin | GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001fea:	f643 7308 	movw	r3, #16136	@ 0x3f08
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
		| GPIO_EXTI9_USER_BUT2_IRQ_Pin | GPIO_EXTI10_BUMP1_IRQ_Pin
		| GPIO_EXTI11_BUMP2_IRQ_Pin | GPIO_EXTI12_BUMP3_IRQ_Pin
		| GPIO_EXTI13_BUMP4_IRQ_Pin;
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	4852      	ldr	r0, [pc, #328]	@ (800214c <MX_GPIO_Init+0x274>)
 8002002:	f001 fd2f 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 8002006:	2310      	movs	r3, #16
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800200a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	484c      	ldr	r0, [pc, #304]	@ (800214c <MX_GPIO_Init+0x274>)
 800201c:	f001 fd22 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8002020:	2332      	movs	r3, #50	@ 0x32
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002030:	230b      	movs	r3, #11
 8002032:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002038:	4619      	mov	r1, r3
 800203a:	4845      	ldr	r0, [pc, #276]	@ (8002150 <MX_GPIO_Init+0x278>)
 800203c:	f001 fd12 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8002040:	2386      	movs	r3, #134	@ 0x86
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002050:	230b      	movs	r3, #11
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002058:	4619      	mov	r1, r3
 800205a:	483e      	ldr	r0, [pc, #248]	@ (8002154 <MX_GPIO_Init+0x27c>)
 800205c:	f001 fd02 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8002060:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002076:	4619      	mov	r1, r3
 8002078:	4832      	ldr	r0, [pc, #200]	@ (8002144 <MX_GPIO_Init+0x26c>)
 800207a:	f001 fcf3 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pin : RMII_TXD1_Pin */
GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800207e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002090:	230b      	movs	r3, #11
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	482a      	ldr	r0, [pc, #168]	@ (8002144 <MX_GPIO_Init+0x26c>)
 800209c:	f001 fce2 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pin : PG6 */
GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020a0:	2340      	movs	r3, #64	@ 0x40
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4824      	ldr	r0, [pc, #144]	@ (8002148 <MX_GPIO_Init+0x270>)
 80020b8:	f001 fcd4 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pin : USB_OverCurrent_Pin */
GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	481e      	ldr	r0, [pc, #120]	@ (8002148 <MX_GPIO_Init+0x270>)
 80020d0:	f001 fcc8 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80020d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020e6:	230a      	movs	r3, #10
 80020e8:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4818      	ldr	r0, [pc, #96]	@ (8002154 <MX_GPIO_Init+0x27c>)
 80020f2:	f001 fcb7 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pin : USB_VBUS_Pin */
GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002108:	4619      	mov	r1, r3
 800210a:	4812      	ldr	r0, [pc, #72]	@ (8002154 <MX_GPIO_Init+0x27c>)
 800210c:	f001 fcaa 	bl	8003a64 <HAL_GPIO_Init>

/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8002110:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002122:	230b      	movs	r3, #11
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800212a:	4619      	mov	r1, r3
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <MX_GPIO_Init+0x270>)
 800212e:	f001 fc99 	bl	8003a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002132:	bf00      	nop
 8002134:	3738      	adds	r7, #56	@ 0x38
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40021000 	.word	0x40021000
 8002144:	40020400 	.word	0x40020400
 8002148:	40021800 	.word	0x40021800
 800214c:	40021400 	.word	0x40021400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020000 	.word	0x40020000

08002158 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
	static uint32_t kLed = 0;
	if (++kLed >= 1000) {
 8002160:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <Error_Handler+0x30>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	4a08      	ldr	r2, [pc, #32]	@ (8002188 <Error_Handler+0x30>)
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <Error_Handler+0x30>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002172:	d3f5      	bcc.n	8002160 <Error_Handler+0x8>
		kLed = 0;
 8002174:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <Error_Handler+0x30>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800217a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800217e:	4803      	ldr	r0, [pc, #12]	@ (800218c <Error_Handler+0x34>)
 8002180:	f001 fe35 	bl	8003dee <HAL_GPIO_TogglePin>
while (1) {
 8002184:	e7ec      	b.n	8002160 <Error_Handler+0x8>
 8002186:	bf00      	nop
 8002188:	2000096c 	.word	0x2000096c
 800218c:	40020400 	.word	0x40020400

08002190 <encoder_update>:
 *      Author: lucag
 */

#include "motor_control.h"

void encoder_update(Encoder *enc, TIM_HandleTypeDef *htim, uint32_t arr_value) {
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	uint32_t current_count = __HAL_TIM_GET_COUNTER(htim);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	613b      	str	r3, [r7, #16]
	int32_t diff;

	// evaluate increment of TIM3 counter from previous count
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) {
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d115      	bne.n	80021de <encoder_update+0x4e>
		if (current_count <= enc->prev_count)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d806      	bhi.n	80021cc <encoder_update+0x3c>
			diff = current_count - enc->prev_count;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e01e      	b.n	800220a <encoder_update+0x7a>
		else
			diff = -((arr_value + 1) - current_count) - enc->prev_count;
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	3b01      	subs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e015      	b.n	800220a <encoder_update+0x7a>
	} else {
		if (current_count >= enc->prev_count)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d306      	bcc.n	80021f8 <encoder_update+0x68>
			diff = current_count - enc->prev_count;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e008      	b.n	800220a <encoder_update+0x7a>
		else
			diff = ((arr_value + 1) - enc->prev_count) + current_count;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	1a9a      	subs	r2, r3, r2
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	3301      	adds	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
	}
	enc->prev_count = current_count;
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]
	 Explanation: diff/3840 gives the fraction of a revolution done during Ts
	 /Ts converts revolution in Ts seconds into revolution in 1 second
	 *60 coverts into revolution per minute (RPM)
	 NB: Everything in kept as float to avoid casting errors
	 */
	enc->speed_rpm = ((float) diff / 3840.0f) * (60.0f / TS);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800223c <encoder_update+0xac>
 800221e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002222:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002240 <encoder_update+0xb0>
 8002226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	45700000 	.word	0x45700000
 8002240:	45bb8000 	.word	0x45bb8000

08002244 <pi_control>:

float pi_control(PI_Controller *controller, float measured) {
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	ed87 0a00 	vstr	s0, [r7]
	float error = controller->ref - measured;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	ed93 7a03 	vldr	s14, [r3, #12]
 8002256:	edd7 7a00 	vldr	s15, [r7]
 800225a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225e:	edc7 7a05 	vstr	s15, [r7, #20]
	controller->integral += controller->ki * TS * error;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ed93 7a02 	vldr	s14, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edd3 7a01 	vldr	s15, [r3, #4]
 800226e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80022bc <pi_control+0x78>
 8002272:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002276:	edd7 7a05 	vldr	s15, [r7, #20]
 800227a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	edc3 7a02 	vstr	s15, [r3, #8]
	float P = controller->kp * error;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	edc7 7a04 	vstr	s15, [r7, #16]
	float I = controller->integral;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	60fb      	str	r3, [r7, #12]
	return P + I;
 80022a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80022a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	3c23d70a 	.word	0x3c23d70a

080022c0 <set_motor_pwm>:
	return output;

}


void set_motor_pwm(int32_t duty, TIM_HandleTypeDef *htim_pwm, uint32_t ch1, uint32_t ch2) {
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
	if (duty >= 0) {
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db70      	blt.n	80023b6 <set_motor_pwm+0xf6>
		// Forward and coast
		// __HAL_TIM_SET_COMPARE(htim_pwm, ch1, (uint32_t )duty);
		// __HAL_TIM_SET_COMPARE(htim_pwm, ch2, 0);

		// Forward and brake
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, (uint32_t)TIM8_ARR_VALUE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <set_motor_pwm+0x26>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f240 128f 	movw	r2, #399	@ 0x18f
 80022e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80022e4:	e028      	b.n	8002338 <set_motor_pwm+0x78>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d105      	bne.n	80022f8 <set_motor_pwm+0x38>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f240 138f 	movw	r3, #399	@ 0x18f
 80022f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80022f6:	e01f      	b.n	8002338 <set_motor_pwm+0x78>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d105      	bne.n	800230a <set_motor_pwm+0x4a>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f240 138f 	movw	r3, #399	@ 0x18f
 8002306:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002308:	e016      	b.n	8002338 <set_motor_pwm+0x78>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d105      	bne.n	800231c <set_motor_pwm+0x5c>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f240 138f 	movw	r3, #399	@ 0x18f
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	e00d      	b.n	8002338 <set_motor_pwm+0x78>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b10      	cmp	r3, #16
 8002320:	d105      	bne.n	800232e <set_motor_pwm+0x6e>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f240 138f 	movw	r3, #399	@ 0x18f
 800232a:	6593      	str	r3, [r2, #88]	@ 0x58
 800232c:	e004      	b.n	8002338 <set_motor_pwm+0x78>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f240 138f 	movw	r3, #399	@ 0x18f
 8002336:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t)(TIM8_ARR_VALUE - duty));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <set_motor_pwm+0x8e>
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f240 138f 	movw	r3, #399	@ 0x18f
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	6353      	str	r3, [r2, #52]	@ 0x34
	} else {
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, 0);
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
	}
}
 800234c:	e097      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t)(TIM8_ARR_VALUE - duty));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <set_motor_pwm+0xa4>
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	f240 138f 	movw	r3, #399	@ 0x18f
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	6393      	str	r3, [r2, #56]	@ 0x38
 8002362:	e08c      	b.n	800247e <set_motor_pwm+0x1be>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d107      	bne.n	800237a <set_motor_pwm+0xba>
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	f240 138f 	movw	r3, #399	@ 0x18f
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002378:	e081      	b.n	800247e <set_motor_pwm+0x1be>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b0c      	cmp	r3, #12
 800237e:	d107      	bne.n	8002390 <set_motor_pwm+0xd0>
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	f240 138f 	movw	r3, #399	@ 0x18f
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	e076      	b.n	800247e <set_motor_pwm+0x1be>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d107      	bne.n	80023a6 <set_motor_pwm+0xe6>
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	f240 138f 	movw	r3, #399	@ 0x18f
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a4:	e06b      	b.n	800247e <set_motor_pwm+0x1be>
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f240 138f 	movw	r3, #399	@ 0x18f
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80023b4:	e063      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch1, 0);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d104      	bne.n	80023c6 <set_motor_pwm+0x106>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c4:	e023      	b.n	800240e <set_motor_pwm+0x14e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d104      	bne.n	80023d6 <set_motor_pwm+0x116>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2300      	movs	r3, #0
 80023d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80023d4:	e01b      	b.n	800240e <set_motor_pwm+0x14e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d104      	bne.n	80023e6 <set_motor_pwm+0x126>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2300      	movs	r3, #0
 80023e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80023e4:	e013      	b.n	800240e <set_motor_pwm+0x14e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d104      	bne.n	80023f6 <set_motor_pwm+0x136>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f4:	e00b      	b.n	800240e <set_motor_pwm+0x14e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d104      	bne.n	8002406 <set_motor_pwm+0x146>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	6593      	str	r3, [r2, #88]	@ 0x58
 8002404:	e003      	b.n	800240e <set_motor_pwm+0x14e>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2300      	movs	r3, #0
 800240c:	65d3      	str	r3, [r2, #92]	@ 0x5c
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <set_motor_pwm+0x160>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	425a      	negs	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800241e:	e02e      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d106      	bne.n	8002434 <set_motor_pwm+0x174>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4259      	negs	r1, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	460b      	mov	r3, r1
 8002430:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002432:	e024      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b08      	cmp	r3, #8
 8002438:	d106      	bne.n	8002448 <set_motor_pwm+0x188>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4259      	negs	r1, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	460b      	mov	r3, r1
 8002444:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002446:	e01a      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d106      	bne.n	800245c <set_motor_pwm+0x19c>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4259      	negs	r1, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	460b      	mov	r3, r1
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800245a:	e010      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b10      	cmp	r3, #16
 8002460:	d106      	bne.n	8002470 <set_motor_pwm+0x1b0>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4259      	negs	r1, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	460b      	mov	r3, r1
 800246c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800246e:	e006      	b.n	800247e <set_motor_pwm+0x1be>
		__HAL_TIM_SET_COMPARE(htim_pwm, ch2, (uint32_t )(-duty));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4259      	negs	r1, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	460b      	mov	r3, r1
 800247a:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800247c:	e7ff      	b.n	800247e <set_motor_pwm+0x1be>
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_MspInit+0x44>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a0e      	ldr	r2, [pc, #56]	@ (80024d0 <HAL_MspInit+0x44>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_MspInit+0x44>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_MspInit+0x44>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_MspInit+0x44>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_MspInit+0x44>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a15      	ldr	r2, [pc, #84]	@ (8002548 <HAL_ADC_MspInit+0x74>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d123      	bne.n	800253e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024f6:	4b15      	ldr	r3, [pc, #84]	@ (800254c <HAL_ADC_MspInit+0x78>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	4a14      	ldr	r2, [pc, #80]	@ (800254c <HAL_ADC_MspInit+0x78>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002500:	6453      	str	r3, [r2, #68]	@ 0x44
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_ADC_MspInit+0x78>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <HAL_ADC_MspInit+0x78>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a0e      	ldr	r2, [pc, #56]	@ (800254c <HAL_ADC_MspInit+0x78>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <HAL_ADC_MspInit+0x78>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8002526:	2308      	movs	r3, #8
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800252a:	2303      	movs	r3, #3
 800252c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	@ (8002550 <HAL_ADC_MspInit+0x7c>)
 800253a:	f001 fa93 	bl	8003a64 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	@ 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40012000 	.word	0x40012000
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000

08002554 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0b0      	sub	sp, #192	@ 0xc0
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	2290      	movs	r2, #144	@ 0x90
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f007 f83b 	bl	80095f0 <memset>
  if(hi2c->Instance==I2C1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a44      	ldr	r2, [pc, #272]	@ (8002690 <HAL_I2C_MspInit+0x13c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d13e      	bne.n	8002602 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002584:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002588:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4618      	mov	r0, r3
 8002596:	f002 ff9d 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80025a0:	f7ff fdda 	bl	8002158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b0:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c4:	2312      	movs	r3, #18
 80025c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d6:	2304      	movs	r3, #4
 80025d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025e0:	4619      	mov	r1, r3
 80025e2:	482d      	ldr	r0, [pc, #180]	@ (8002698 <HAL_I2C_MspInit+0x144>)
 80025e4:	f001 fa3e 	bl	8003a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	4a29      	ldr	r2, [pc, #164]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 80025ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f4:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002600:	e041      	b.n	8002686 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a25      	ldr	r2, [pc, #148]	@ (800269c <HAL_I2C_MspInit+0x148>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d13c      	bne.n	8002686 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800260c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002610:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4618      	mov	r0, r3
 800261e:	f002 ff59 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002628:	f7ff fd96 	bl	8002158 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002630:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 8002632:	f043 0320 	orr.w	r3, r3, #32
 8002636:	6313      	str	r3, [r2, #48]	@ 0x30
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002644:	2303      	movs	r3, #3
 8002646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264a:	2312      	movs	r3, #18
 800264c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002650:	2301      	movs	r3, #1
 8002652:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800265c:	2304      	movs	r3, #4
 800265e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002662:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002666:	4619      	mov	r1, r3
 8002668:	480d      	ldr	r0, [pc, #52]	@ (80026a0 <HAL_I2C_MspInit+0x14c>)
 800266a:	f001 f9fb 	bl	8003a64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_I2C_MspInit+0x140>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	bf00      	nop
 8002688:	37c0      	adds	r7, #192	@ 0xc0
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40005400 	.word	0x40005400
 8002694:	40023800 	.word	0x40023800
 8002698:	40020400 	.word	0x40020400
 800269c:	40005800 	.word	0x40005800
 80026a0:	40021400 	.word	0x40021400

080026a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	@ 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 031c 	add.w	r3, r7, #28
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a33      	ldr	r2, [pc, #204]	@ (8002790 <HAL_SPI_MspInit+0xec>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d160      	bne.n	8002788 <HAL_SPI_MspInit+0xe4>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026c6:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a32      	ldr	r2, [pc, #200]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026de:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a20      	ldr	r2, [pc, #128]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 8002714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_SPI_MspInit+0xf0>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002726:	2320      	movs	r3, #32
 8002728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002732:	2303      	movs	r3, #3
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002736:	2305      	movs	r3, #5
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 031c 	add.w	r3, r7, #28
 800273e:	4619      	mov	r1, r3
 8002740:	4815      	ldr	r0, [pc, #84]	@ (8002798 <HAL_SPI_MspInit+0xf4>)
 8002742:	f001 f98f 	bl	8003a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002756:	2305      	movs	r3, #5
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	480e      	ldr	r0, [pc, #56]	@ (800279c <HAL_SPI_MspInit+0xf8>)
 8002762:	f001 f97f 	bl	8003a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002778:	2305      	movs	r3, #5
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4807      	ldr	r0, [pc, #28]	@ (80027a0 <HAL_SPI_MspInit+0xfc>)
 8002784:	f001 f96e 	bl	8003a64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002788:	bf00      	nop
 800278a:	3730      	adds	r7, #48	@ 0x30
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40013000 	.word	0x40013000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40021800 	.word	0x40021800

080027a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	@ 0x38
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3f      	ldr	r2, [pc, #252]	@ (80028c0 <HAL_TIM_Base_MspInit+0x11c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10c      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027c6:	4b3f      	ldr	r3, [pc, #252]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	4a3e      	ldr	r2, [pc, #248]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d2:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80027de:	e06b      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e8:	d129      	bne.n	800283e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a35      	ldr	r2, [pc, #212]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a2f      	ldr	r2, [pc, #188]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 800281a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800282c:	2301      	movs	r3, #1
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	4824      	ldr	r0, [pc, #144]	@ (80028c8 <HAL_TIM_Base_MspInit+0x124>)
 8002838:	f001 f914 	bl	8003a64 <HAL_GPIO_Init>
}
 800283c:	e03c      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a22      	ldr	r2, [pc, #136]	@ (80028cc <HAL_TIM_Base_MspInit+0x128>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d10c      	bne.n	8002862 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002848:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6413      	str	r3, [r2, #64]	@ 0x40
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
}
 8002860:	e02a      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1a      	ldr	r2, [pc, #104]	@ (80028d0 <HAL_TIM_Base_MspInit+0x12c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d114      	bne.n	8002896 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 8002872:	f043 0310 	orr.w	r3, r3, #16
 8002876:	6413      	str	r3, [r2, #64]	@ 0x40
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002884:	2200      	movs	r2, #0
 8002886:	2101      	movs	r1, #1
 8002888:	2036      	movs	r0, #54	@ 0x36
 800288a:	f001 f8a6 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800288e:	2036      	movs	r0, #54	@ 0x36
 8002890:	f001 f8bf 	bl	8003a12 <HAL_NVIC_EnableIRQ>
}
 8002894:	e010      	b.n	80028b8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a0e      	ldr	r2, [pc, #56]	@ (80028d4 <HAL_TIM_Base_MspInit+0x130>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10b      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80028a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_TIM_Base_MspInit+0x120>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3738      	adds	r7, #56	@ 0x38
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40001000 	.word	0x40001000
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2e      	ldr	r2, [pc, #184]	@ (80029b0 <HAL_TIM_Encoder_MspInit+0xd8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d128      	bne.n	800294c <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028fa:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	4a2d      	ldr	r2, [pc, #180]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6413      	str	r3, [r2, #64]	@ 0x40
 8002906:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b28      	ldr	r3, [pc, #160]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a27      	ldr	r2, [pc, #156]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 800292a:	2330      	movs	r3, #48	@ 0x30
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800293a:	2302      	movs	r3, #2
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	481c      	ldr	r0, [pc, #112]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002946:	f001 f88d 	bl	8003a64 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800294a:	e02d      	b.n	80029a8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d128      	bne.n	80029a8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002956:	4b17      	ldr	r3, [pc, #92]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4a16      	ldr	r2, [pc, #88]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6413      	str	r3, [r2, #64]	@ 0x40
 8002962:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800296e:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002986:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002998:	2302      	movs	r3, #2
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4807      	ldr	r0, [pc, #28]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80029a4:	f001 f85e 	bl	8003a64 <HAL_GPIO_Init>
}
 80029a8:	bf00      	nop
 80029aa:	3730      	adds	r7, #48	@ 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40020c00 	.word	0x40020c00

080029c4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_TIM_PWM_MspInit+0x38>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10b      	bne.n	80029ee <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_TIM_PWM_MspInit+0x3c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM9_MspInit 1 */

  }

}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40023800 	.word	0x40023800

08002a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	@ 0x30
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a56      	ldr	r2, [pc, #344]	@ (8002b7c <HAL_TIM_MspPostInit+0x178>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d11d      	bne.n	8002a62 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a26:	4b56      	ldr	r3, [pc, #344]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a55      	ldr	r2, [pc, #340]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002a2c:	f043 0310 	orr.w	r3, r3, #16
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002a3e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	4619      	mov	r1, r3
 8002a5a:	484a      	ldr	r0, [pc, #296]	@ (8002b84 <HAL_TIM_MspPostInit+0x180>)
 8002a5c:	f001 f802 	bl	8003a64 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM9_MspPostInit 1 */

    /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002a60:	e088      	b.n	8002b74 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d11d      	bne.n	8002aa8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b44      	ldr	r3, [pc, #272]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	4a43      	ldr	r2, [pc, #268]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a78:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a96:	2301      	movs	r3, #1
 8002a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4839      	ldr	r0, [pc, #228]	@ (8002b88 <HAL_TIM_MspPostInit+0x184>)
 8002aa2:	f000 ffdf 	bl	8003a64 <HAL_GPIO_Init>
}
 8002aa6:	e065      	b.n	8002b74 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a37      	ldr	r2, [pc, #220]	@ (8002b8c <HAL_TIM_MspPostInit+0x188>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d11c      	bne.n	8002aec <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	4b33      	ldr	r3, [pc, #204]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a32      	ldr	r2, [pc, #200]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ada:	2302      	movs	r3, #2
 8002adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4828      	ldr	r0, [pc, #160]	@ (8002b88 <HAL_TIM_MspPostInit+0x184>)
 8002ae6:	f000 ffbd 	bl	8003a64 <HAL_GPIO_Init>
}
 8002aea:	e043      	b.n	8002b74 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a27      	ldr	r2, [pc, #156]	@ (8002b90 <HAL_TIM_MspPostInit+0x18c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11d      	bne.n	8002b32 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af6:	4b22      	ldr	r3, [pc, #136]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a21      	ldr	r2, [pc, #132]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b1f      	ldr	r3, [pc, #124]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002b0e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	481a      	ldr	r0, [pc, #104]	@ (8002b94 <HAL_TIM_MspPostInit+0x190>)
 8002b2c:	f000 ff9a 	bl	8003a64 <HAL_GPIO_Init>
}
 8002b30:	e020      	b.n	8002b74 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <HAL_TIM_MspPostInit+0x194>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3c:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	4a0f      	ldr	r2, [pc, #60]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <HAL_TIM_MspPostInit+0x17c>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002b54:	2360      	movs	r3, #96	@ 0x60
 8002b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002b64:	2303      	movs	r3, #3
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4805      	ldr	r0, [pc, #20]	@ (8002b84 <HAL_TIM_MspPostInit+0x180>)
 8002b70:	f000 ff78 	bl	8003a64 <HAL_GPIO_Init>
}
 8002b74:	bf00      	nop
 8002b76:	3730      	adds	r7, #48	@ 0x30
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	40010400 	.word	0x40010400
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40014000 	.word	0x40014000

08002b9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b0b6      	sub	sp, #216	@ 0xd8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bb8:	2290      	movs	r2, #144	@ 0x90
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f006 fd17 	bl	80095f0 <memset>
  if(huart->Instance==UART4)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4aa0      	ldr	r2, [pc, #640]	@ (8002e48 <HAL_UART_MspInit+0x2ac>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d13e      	bne.n	8002c4a <HAL_UART_MspInit+0xae>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002bcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fc79 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002be8:	f7ff fab6 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bec:	4b97      	ldr	r3, [pc, #604]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	4a96      	ldr	r2, [pc, #600]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002bf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf8:	4b94      	ldr	r3, [pc, #592]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c04:	4b91      	ldr	r3, [pc, #580]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	4a90      	ldr	r2, [pc, #576]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c10:	4b8e      	ldr	r3, [pc, #568]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002c1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c36:	2308      	movs	r3, #8
 8002c38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4883      	ldr	r0, [pc, #524]	@ (8002e50 <HAL_UART_MspInit+0x2b4>)
 8002c44:	f000 ff0e 	bl	8003a64 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c48:	e151      	b.n	8002eee <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a81      	ldr	r2, [pc, #516]	@ (8002e54 <HAL_UART_MspInit+0x2b8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d160      	bne.n	8002d16 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fc35 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002c70:	f7ff fa72 	bl	8002158 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c74:	4b75      	ldr	r3, [pc, #468]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	4a74      	ldr	r2, [pc, #464]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c80:	4b72      	ldr	r3, [pc, #456]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	4a6e      	ldr	r2, [pc, #440]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c98:	4b6c      	ldr	r3, [pc, #432]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca4:	4b69      	ldr	r3, [pc, #420]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	4a68      	ldr	r2, [pc, #416]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb0:	4b66      	ldr	r3, [pc, #408]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cdc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	485d      	ldr	r0, [pc, #372]	@ (8002e58 <HAL_UART_MspInit+0x2bc>)
 8002ce4:	f000 febe 	bl	8003a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d02:	2308      	movs	r3, #8
 8002d04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d08:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4850      	ldr	r0, [pc, #320]	@ (8002e50 <HAL_UART_MspInit+0x2b4>)
 8002d10:	f000 fea8 	bl	8003a64 <HAL_GPIO_Init>
}
 8002d14:	e0eb      	b.n	8002eee <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a50      	ldr	r2, [pc, #320]	@ (8002e5c <HAL_UART_MspInit+0x2c0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d151      	bne.n	8002dc4 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d20:	2340      	movs	r3, #64	@ 0x40
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d24:	2300      	movs	r3, #0
 8002d26:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fbd1 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002d38:	f7ff fa0e 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d3c:	4b43      	ldr	r3, [pc, #268]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d40:	4a42      	ldr	r2, [pc, #264]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d48:	4b40      	ldr	r3, [pc, #256]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d54:	4b3d      	ldr	r3, [pc, #244]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	4a3c      	ldr	r2, [pc, #240]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d60:	4b3a      	ldr	r3, [pc, #232]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4831      	ldr	r0, [pc, #196]	@ (8002e58 <HAL_UART_MspInit+0x2bc>)
 8002d94:	f000 fe66 	bl	8003a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d98:	2340      	movs	r3, #64	@ 0x40
 8002d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002db0:	2307      	movs	r3, #7
 8002db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4826      	ldr	r0, [pc, #152]	@ (8002e58 <HAL_UART_MspInit+0x2bc>)
 8002dbe:	f000 fe51 	bl	8003a64 <HAL_GPIO_Init>
}
 8002dc2:	e094      	b.n	8002eee <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a25      	ldr	r2, [pc, #148]	@ (8002e60 <HAL_UART_MspInit+0x2c4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d14c      	bne.n	8002e68 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 fb7a 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002de6:	f7ff f9b7 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df6:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4a11      	ldr	r2, [pc, #68]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <HAL_UART_MspInit+0x2b0>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e1a:	2360      	movs	r3, #96	@ 0x60
 8002e1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e32:	2307      	movs	r3, #7
 8002e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e38:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4809      	ldr	r0, [pc, #36]	@ (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002e40:	f000 fe10 	bl	8003a64 <HAL_GPIO_Init>
}
 8002e44:	e053      	b.n	8002eee <HAL_UART_MspInit+0x352>
 8002e46:	bf00      	nop
 8002e48:	40004c00 	.word	0x40004c00
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020800 	.word	0x40020800
 8002e54:	40005000 	.word	0x40005000
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40004400 	.word	0x40004400
 8002e64:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <HAL_UART_MspInit+0x35c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d13d      	bne.n	8002eee <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 fb26 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002e8e:	f7ff f963 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e92:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_UART_MspInit+0x360>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_UART_MspInit+0x360>)
 8002e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9e:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <HAL_UART_MspInit+0x360>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eaa:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_UART_MspInit+0x360>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_UART_MspInit+0x360>)
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb6:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_UART_MspInit+0x360>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ec2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ec6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002edc:	2307      	movs	r3, #7
 8002ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <HAL_UART_MspInit+0x364>)
 8002eea:	f000 fdbb 	bl	8003a64 <HAL_GPIO_Init>
}
 8002eee:	bf00      	nop
 8002ef0:	37d8      	adds	r7, #216	@ 0xd8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40004800 	.word	0x40004800
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020c00 	.word	0x40020c00

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <NMI_Handler+0x4>

08002f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HardFault_Handler+0x2c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3301      	adds	r3, #1
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HardFault_Handler+0x2c>)
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <HardFault_Handler+0x2c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a07      	ldr	r2, [pc, #28]	@ (8002f3c <HardFault_Handler+0x30>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d9f5      	bls.n	8002f10 <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <HardFault_Handler+0x2c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002f2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f2e:	4804      	ldr	r0, [pc, #16]	@ (8002f40 <HardFault_Handler+0x34>)
 8002f30:	f000 ff5d 	bl	8003dee <HAL_GPIO_TogglePin>
  {
 8002f34:	e7ec      	b.n	8002f10 <HardFault_Handler+0x4>
 8002f36:	bf00      	nop
 8002f38:	20000970 	.word	0x20000970
 8002f3c:	0001869f 	.word	0x0001869f
 8002f40:	40020400 	.word	0x40020400

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <BusFault_Handler+0x4>

08002f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <UsageFault_Handler+0x4>

08002f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f8a:	f000 f94f 	bl	800322c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <TIM6_DAC_IRQHandler+0x10>)
 8002f9a:	f003 fb85 	bl	80066a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200004e0 	.word	0x200004e0

08002fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
	return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_kill>:

int _kill(int pid, int sig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fc2:	f006 fb75 	bl	80096b0 <__errno>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2216      	movs	r2, #22
 8002fca:	601a      	str	r2, [r3, #0]
	return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_exit>:

void _exit (int status)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ffe7 	bl	8002fb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <_exit+0x12>

08002fee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e00a      	b.n	8003016 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003000:	f3af 8000 	nop.w
 8003004:	4601      	mov	r1, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	60ba      	str	r2, [r7, #8]
 800300c:	b2ca      	uxtb	r2, r1
 800300e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3301      	adds	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	dbf0      	blt.n	8003000 <_read+0x12>
	}

return len;
 800301e:	687b      	ldr	r3, [r7, #4]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e009      	b.n	800304e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	60ba      	str	r2, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3301      	adds	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	dbf1      	blt.n	800303a <_write+0x12>
	}
	return len;
 8003056:	687b      	ldr	r3, [r7, #4]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_close>:

int _close(int file)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	return -1;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003088:	605a      	str	r2, [r3, #4]
	return 0;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_isatty>:

int _isatty(int file)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	return 1;
 80030a0:	2301      	movs	r3, #1
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
	return 0;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d0:	4a14      	ldr	r2, [pc, #80]	@ (8003124 <_sbrk+0x5c>)
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <_sbrk+0x60>)
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030dc:	4b13      	ldr	r3, [pc, #76]	@ (800312c <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <_sbrk+0x64>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	@ (8003130 <_sbrk+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ea:	4b10      	ldr	r3, [pc, #64]	@ (800312c <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f8:	f006 fada 	bl	80096b0 <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	220c      	movs	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e009      	b.n	800311c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003108:	4b08      	ldr	r3, [pc, #32]	@ (800312c <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310e:	4b07      	ldr	r3, [pc, #28]	@ (800312c <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	4a05      	ldr	r2, [pc, #20]	@ (800312c <_sbrk+0x64>)
 8003118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20080000 	.word	0x20080000
 8003128:	00000400 	.word	0x00000400
 800312c:	20000974 	.word	0x20000974
 8003130:	20000ac8 	.word	0x20000ac8

08003134 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <SystemInit+0x28>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	4a07      	ldr	r2, [pc, #28]	@ (800315c <SystemInit+0x28>)
 8003140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <SystemInit+0x28>)
 800314a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800314e:	609a      	str	r2, [r3, #8]
#endif
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003198 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003164:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003166:	e003      	b.n	8003170 <LoopCopyDataInit>

08003168 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003168:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800316a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800316c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800316e:	3104      	adds	r1, #4

08003170 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003170:	480b      	ldr	r0, [pc, #44]	@ (80031a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003172:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003174:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003176:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003178:	d3f6      	bcc.n	8003168 <CopyDataInit>
  ldr  r2, =_sbss
 800317a:	4a0b      	ldr	r2, [pc, #44]	@ (80031a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800317c:	e002      	b.n	8003184 <LoopFillZerobss>

0800317e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800317e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003180:	f842 3b04 	str.w	r3, [r2], #4

08003184 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003184:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003188:	d3f9      	bcc.n	800317e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800318a:	f7ff ffd3 	bl	8003134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318e:	f006 fa95 	bl	80096bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003192:	f7fd fdd7 	bl	8000d44 <main>
  bx  lr    
 8003196:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003198:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800319c:	0800b6f4 	.word	0x0800b6f4
  ldr  r0, =_sdata
 80031a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031a4:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80031a8:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80031ac:	20000ac8 	.word	0x20000ac8

080031b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b0:	e7fe      	b.n	80031b0 <ADC_IRQHandler>

080031b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b6:	2003      	movs	r0, #3
 80031b8:	f000 fc04 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031bc:	2000      	movs	r0, #0
 80031be:	f000 f805 	bl	80031cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c2:	f7ff f963 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <HAL_InitTick+0x54>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <HAL_InitTick+0x58>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fc2d 	bl	8003a4a <HAL_SYSTICK_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00e      	b.n	8003218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b0f      	cmp	r3, #15
 80031fe:	d80a      	bhi.n	8003216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003200:	2200      	movs	r2, #0
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f000 fbe7 	bl	80039da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800320c:	4a06      	ldr	r2, [pc, #24]	@ (8003228 <HAL_InitTick+0x5c>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000020 	.word	0x20000020
 8003224:	20000028 	.word	0x20000028
 8003228:	20000024 	.word	0x20000024

0800322c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_IncTick+0x20>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_IncTick+0x24>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4413      	add	r3, r2
 800323c:	4a04      	ldr	r2, [pc, #16]	@ (8003250 <HAL_IncTick+0x24>)
 800323e:	6013      	str	r3, [r2, #0]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000028 	.word	0x20000028
 8003250:	20000978 	.word	0x20000978

08003254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return uwTick;
 8003258:	4b03      	ldr	r3, [pc, #12]	@ (8003268 <HAL_GetTick+0x14>)
 800325a:	681b      	ldr	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000978 	.word	0x20000978

0800326c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7ff ffee 	bl	8003254 <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d005      	beq.n	8003292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_Delay+0x44>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003292:	bf00      	nop
 8003294:	f7ff ffde 	bl	8003254 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d8f7      	bhi.n	8003294 <HAL_Delay+0x28>
  {
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000028 	.word	0x20000028

080032b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e031      	b.n	800332e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff f8fe 	bl	80024d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d116      	bne.n	8003320 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <HAL_ADC_Init+0x84>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f970 	bl	80035e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
 800331e:	e001      	b.n	8003324 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	ffffeefd 	.word	0xffffeefd

0800333c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1c>
 8003354:	2302      	movs	r3, #2
 8003356:	e136      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x28a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d93a      	bls.n	80033de <HAL_ADC_ConfigChannel+0xa2>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003370:	d035      	beq.n	80033de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68d9      	ldr	r1, [r3, #12]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	3b1e      	subs	r3, #30
 8003388:	2207      	movs	r2, #7
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	400a      	ands	r2, r1
 8003396:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a8d      	ldr	r2, [pc, #564]	@ (80035d4 <HAL_ADC_ConfigChannel+0x298>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10a      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68d9      	ldr	r1, [r3, #12]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	061a      	lsls	r2, r3, #24
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033b6:	e035      	b.n	8003424 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4403      	add	r3, r0
 80033d0:	3b1e      	subs	r3, #30
 80033d2:	409a      	lsls	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033dc:	e022      	b.n	8003424 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	2207      	movs	r2, #7
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43da      	mvns	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	400a      	ands	r2, r1
 8003400:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6919      	ldr	r1, [r3, #16]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	4618      	mov	r0, r3
 8003414:	4603      	mov	r3, r0
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4403      	add	r3, r0
 800341a:	409a      	lsls	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d824      	bhi.n	8003476 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	3b05      	subs	r3, #5
 800343e:	221f      	movs	r2, #31
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43da      	mvns	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	400a      	ands	r2, r1
 800344c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	4618      	mov	r0, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	3b05      	subs	r3, #5
 8003468:	fa00 f203 	lsl.w	r2, r0, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	635a      	str	r2, [r3, #52]	@ 0x34
 8003474:	e04c      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d824      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b23      	subs	r3, #35	@ 0x23
 8003490:	221f      	movs	r2, #31
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	400a      	ands	r2, r1
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b23      	subs	r3, #35	@ 0x23
 80034ba:	fa00 f203 	lsl.w	r2, r0, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c6:	e023      	b.n	8003510 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b41      	subs	r3, #65	@ 0x41
 80034da:	221f      	movs	r2, #31
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43da      	mvns	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	400a      	ands	r2, r1
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	4618      	mov	r0, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3b41      	subs	r3, #65	@ 0x41
 8003504:	fa00 f203 	lsl.w	r2, r0, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a30      	ldr	r2, [pc, #192]	@ (80035d8 <HAL_ADC_ConfigChannel+0x29c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10a      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1f4>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003524:	4b2d      	ldr	r3, [pc, #180]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a2c      	ldr	r2, [pc, #176]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 800352a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800352e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a28      	ldr	r2, [pc, #160]	@ (80035d8 <HAL_ADC_ConfigChannel+0x29c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10f      	bne.n	800355a <HAL_ADC_ConfigChannel+0x21e>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b12      	cmp	r3, #18
 8003540:	d10b      	bne.n	800355a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003548:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800354c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003558:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_ADC_ConfigChannel+0x29c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d12b      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x280>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_ADC_ConfigChannel+0x298>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x23a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b11      	cmp	r3, #17
 8003574:	d122      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003576:	4b19      	ldr	r3, [pc, #100]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 800357c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003580:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003582:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003588:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800358c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a10      	ldr	r2, [pc, #64]	@ (80035d4 <HAL_ADC_ConfigChannel+0x298>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003598:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0c9a      	lsrs	r2, r3, #18
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035ae:	e002      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f9      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	10000012 	.word	0x10000012
 80035d8:	40012000 	.word	0x40012000
 80035dc:	40012300 	.word	0x40012300
 80035e0:	20000020 	.word	0x20000020
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035f0:	4b78      	ldr	r3, [pc, #480]	@ (80037d4 <ADC_Init+0x1ec>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a77      	ldr	r2, [pc, #476]	@ (80037d4 <ADC_Init+0x1ec>)
 80035f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80035fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035fc:	4b75      	ldr	r3, [pc, #468]	@ (80037d4 <ADC_Init+0x1ec>)
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4973      	ldr	r1, [pc, #460]	@ (80037d4 <ADC_Init+0x1ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800363c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	4a58      	ldr	r2, [pc, #352]	@ (80037d8 <ADC_Init+0x1f0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800368a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e00f      	b.n	80036e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0202 	bic.w	r2, r2, #2
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800371e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800372e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	3b01      	subs	r3, #1
 800373c:	035a      	lsls	r2, r3, #13
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e007      	b.n	8003758 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	3b01      	subs	r3, #1
 8003774:	051a      	lsls	r2, r3, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800378c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800379a:	025a      	lsls	r2, r3, #9
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	029a      	lsls	r2, r3, #10
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012300 	.word	0x40012300
 80037d8:	0f000001 	.word	0x0f000001

080037dc <__NVIC_SetPriorityGrouping>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <__NVIC_SetPriorityGrouping+0x40>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037f8:	4013      	ands	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	4313      	orrs	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	@ (800381c <__NVIC_SetPriorityGrouping+0x40>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000ed00 	.word	0xe000ed00
 8003820:	05fa0000 	.word	0x05fa0000

08003824 <__NVIC_GetPriorityGrouping>:
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003828:	4b04      	ldr	r3, [pc, #16]	@ (800383c <__NVIC_GetPriorityGrouping+0x18>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	f003 0307 	and.w	r3, r3, #7
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_EnableIRQ>:
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	db0b      	blt.n	800386a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4907      	ldr	r1, [pc, #28]	@ (8003878 <__NVIC_EnableIRQ+0x38>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2001      	movs	r0, #1
 8003862:	fa00 f202 	lsl.w	r2, r0, r2
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_DisableIRQ>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db12      	blt.n	80038b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	490a      	ldr	r1, [pc, #40]	@ (80038c0 <__NVIC_DisableIRQ+0x44>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	3320      	adds	r3, #32
 80038a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038a8:	f3bf 8f4f 	dsb	sy
}
 80038ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038ae:	f3bf 8f6f 	isb	sy
}
 80038b2:	bf00      	nop
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff05 	bl	80037dc <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ec:	f7ff ff1a 	bl	8003824 <__NVIC_GetPriorityGrouping>
 80039f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7ff ff8e 	bl	8003918 <NVIC_EncodePriority>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff0d 	bl	8003840 <__NVIC_EnableIRQ>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff1d 	bl	800387c <__NVIC_DisableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff94 	bl	8003980 <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	@ 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	e175      	b.n	8003d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a84:	2201      	movs	r2, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 8164 	bne.w	8003d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d005      	beq.n	8003aba <HAL_GPIO_Init+0x56>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d130      	bne.n	8003b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af0:	2201      	movs	r2, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 0201 	and.w	r2, r3, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d017      	beq.n	8003b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d123      	bne.n	8003bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80be 	beq.w	8003d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bee:	4b66      	ldr	r3, [pc, #408]	@ (8003d88 <HAL_GPIO_Init+0x324>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	4a65      	ldr	r2, [pc, #404]	@ (8003d88 <HAL_GPIO_Init+0x324>)
 8003bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bfa:	4b63      	ldr	r3, [pc, #396]	@ (8003d88 <HAL_GPIO_Init+0x324>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c06:	4a61      	ldr	r2, [pc, #388]	@ (8003d8c <HAL_GPIO_Init+0x328>)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_GPIO_Init+0x32c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d037      	beq.n	8003ca2 <HAL_GPIO_Init+0x23e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a57      	ldr	r2, [pc, #348]	@ (8003d94 <HAL_GPIO_Init+0x330>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d031      	beq.n	8003c9e <HAL_GPIO_Init+0x23a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a56      	ldr	r2, [pc, #344]	@ (8003d98 <HAL_GPIO_Init+0x334>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02b      	beq.n	8003c9a <HAL_GPIO_Init+0x236>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a55      	ldr	r2, [pc, #340]	@ (8003d9c <HAL_GPIO_Init+0x338>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d025      	beq.n	8003c96 <HAL_GPIO_Init+0x232>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a54      	ldr	r2, [pc, #336]	@ (8003da0 <HAL_GPIO_Init+0x33c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01f      	beq.n	8003c92 <HAL_GPIO_Init+0x22e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a53      	ldr	r2, [pc, #332]	@ (8003da4 <HAL_GPIO_Init+0x340>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d019      	beq.n	8003c8e <HAL_GPIO_Init+0x22a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_GPIO_Init+0x344>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_GPIO_Init+0x226>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a51      	ldr	r2, [pc, #324]	@ (8003dac <HAL_GPIO_Init+0x348>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00d      	beq.n	8003c86 <HAL_GPIO_Init+0x222>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a50      	ldr	r2, [pc, #320]	@ (8003db0 <HAL_GPIO_Init+0x34c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <HAL_GPIO_Init+0x21e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4f      	ldr	r2, [pc, #316]	@ (8003db4 <HAL_GPIO_Init+0x350>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_GPIO_Init+0x21a>
 8003c7a:	2309      	movs	r3, #9
 8003c7c:	e012      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c7e:	230a      	movs	r3, #10
 8003c80:	e010      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c82:	2308      	movs	r3, #8
 8003c84:	e00e      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c86:	2307      	movs	r3, #7
 8003c88:	e00c      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c8a:	2306      	movs	r3, #6
 8003c8c:	e00a      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c8e:	2305      	movs	r3, #5
 8003c90:	e008      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c92:	2304      	movs	r3, #4
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c96:	2303      	movs	r3, #3
 8003c98:	e004      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e002      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	f002 0203 	and.w	r2, r2, #3
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	4093      	lsls	r3, r2
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cb4:	4935      	ldr	r1, [pc, #212]	@ (8003d8c <HAL_GPIO_Init+0x328>)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ce6:	4a34      	ldr	r2, [pc, #208]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cec:	4b32      	ldr	r3, [pc, #200]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d10:	4a29      	ldr	r2, [pc, #164]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d16:	4b28      	ldr	r3, [pc, #160]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d64:	4a14      	ldr	r2, [pc, #80]	@ (8003db8 <HAL_GPIO_Init+0x354>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	f67f ae86 	bls.w	8003a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3724      	adds	r7, #36	@ 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020c00 	.word	0x40020c00
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40021400 	.word	0x40021400
 8003da8:	40021800 	.word	0x40021800
 8003dac:	40021c00 	.word	0x40021c00
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40022400 	.word	0x40022400
 8003db8:	40013c00 	.word	0x40013c00

08003dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dcc:	787b      	ldrb	r3, [r7, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003dd8:	e003      	b.n	8003de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	041a      	lsls	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	619a      	str	r2, [r3, #24]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e00:	887a      	ldrh	r2, [r7, #2]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4013      	ands	r3, r2
 8003e06:	041a      	lsls	r2, r3, #16
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43d9      	mvns	r1, r3
 8003e0c:	887b      	ldrh	r3, [r7, #2]
 8003e0e:	400b      	ands	r3, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	619a      	str	r2, [r3, #24]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e08b      	b.n	8003f4e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fe fb82 	bl	8002554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	@ 0x24
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d107      	bne.n	8003e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e006      	b.n	8003eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d108      	bne.n	8003ec6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	e007      	b.n	8003ed6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <HAL_I2C_Init+0x134>)
 8003ee2:	430b      	orrs	r3, r1
 8003ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69d9      	ldr	r1, [r3, #28]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	02008000 	.word	0x02008000

08003f5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	817b      	strh	r3, [r7, #10]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	813b      	strh	r3, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	f040 80f9 	bne.w	8004176 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x34>
 8003f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0ed      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2C_Mem_Write+0x4e>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0e6      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fb2:	f7ff f94f 	bl	8003254 <HAL_GetTick>
 8003fb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2319      	movs	r3, #25
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fac3 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0d1      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2221      	movs	r2, #33	@ 0x21
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2240      	movs	r2, #64	@ 0x40
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a3a      	ldr	r2, [r7, #32]
 8003fee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ffc:	88f8      	ldrh	r0, [r7, #6]
 8003ffe:	893a      	ldrh	r2, [r7, #8]
 8004000:	8979      	ldrh	r1, [r7, #10]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4603      	mov	r3, r0
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f9d3 	bl	80043b8 <I2C_RequestMemoryWrite>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0a9      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2bff      	cmp	r3, #255	@ 0xff
 800402c:	d90e      	bls.n	800404c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	22ff      	movs	r2, #255	@ 0xff
 8004032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004038:	b2da      	uxtb	r2, r3
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	2300      	movs	r3, #0
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fc47 	bl	80048d8 <I2C_TransferConfig>
 800404a:	e00f      	b.n	800406c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	b2da      	uxtb	r2, r3
 800405c:	8979      	ldrh	r1, [r7, #10]
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fc36 	bl	80048d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fac6 	bl	8004602 <I2C_WaitOnTXISFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e07b      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d034      	beq.n	8004124 <HAL_I2C_Mem_Write+0x1c8>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d130      	bne.n	8004124 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	@ 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fa3f 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e04d      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2bff      	cmp	r3, #255	@ 0xff
 80040e4:	d90e      	bls.n	8004104 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	@ 0xff
 80040ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	2300      	movs	r3, #0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fbeb 	bl	80048d8 <I2C_TransferConfig>
 8004102:	e00f      	b.n	8004124 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	b2da      	uxtb	r2, r3
 8004114:	8979      	ldrh	r1, [r7, #10]
 8004116:	2300      	movs	r3, #0
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fbda 	bl	80048d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d19e      	bne.n	800406c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 faac 	bl	8004690 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e01a      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2220      	movs	r2, #32
 8004148:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <HAL_I2C_Mem_Write+0x224>)
 8004156:	400b      	ands	r3, r1
 8004158:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	fe00e800 	.word	0xfe00e800

08004184 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	4608      	mov	r0, r1
 800418e:	4611      	mov	r1, r2
 8004190:	461a      	mov	r2, r3
 8004192:	4603      	mov	r3, r0
 8004194:	817b      	strh	r3, [r7, #10]
 8004196:	460b      	mov	r3, r1
 8004198:	813b      	strh	r3, [r7, #8]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	f040 80fd 	bne.w	80043a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_I2C_Mem_Read+0x34>
 80041b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0f1      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_I2C_Mem_Read+0x4e>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e0ea      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041da:	f7ff f83b 	bl	8003254 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2319      	movs	r3, #25
 80041e6:	2201      	movs	r2, #1
 80041e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f9af 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0d5      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2222      	movs	r2, #34	@ 0x22
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2240      	movs	r2, #64	@ 0x40
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004224:	88f8      	ldrh	r0, [r7, #6]
 8004226:	893a      	ldrh	r2, [r7, #8]
 8004228:	8979      	ldrh	r1, [r7, #10]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4603      	mov	r3, r0
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f913 	bl	8004460 <I2C_RequestMemoryRead>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0ad      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2bff      	cmp	r3, #255	@ 0xff
 8004254:	d90e      	bls.n	8004274 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	b2da      	uxtb	r2, r3
 8004262:	8979      	ldrh	r1, [r7, #10]
 8004264:	4b52      	ldr	r3, [pc, #328]	@ (80043b0 <HAL_I2C_Mem_Read+0x22c>)
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fb33 	bl	80048d8 <I2C_TransferConfig>
 8004272:	e00f      	b.n	8004294 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	b2da      	uxtb	r2, r3
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	4b4a      	ldr	r3, [pc, #296]	@ (80043b0 <HAL_I2C_Mem_Read+0x22c>)
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fb22 	bl	80048d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	2200      	movs	r2, #0
 800429c:	2104      	movs	r1, #4
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f956 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07c      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d034      	beq.n	8004354 <HAL_I2C_Mem_Read+0x1d0>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d130      	bne.n	8004354 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	2200      	movs	r2, #0
 80042fa:	2180      	movs	r1, #128	@ 0x80
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f927 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e04d      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2bff      	cmp	r3, #255	@ 0xff
 8004314:	d90e      	bls.n	8004334 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	b2da      	uxtb	r2, r3
 8004322:	8979      	ldrh	r1, [r7, #10]
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fad3 	bl	80048d8 <I2C_TransferConfig>
 8004332:	e00f      	b.n	8004354 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004342:	b2da      	uxtb	r2, r3
 8004344:	8979      	ldrh	r1, [r7, #10]
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fac2 	bl	80048d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d19a      	bne.n	8004294 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f994 	bl	8004690 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e01a      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2220      	movs	r2, #32
 8004378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_I2C_Mem_Read+0x230>)
 8004386:	400b      	ands	r3, r1
 8004388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	80002400 	.word	0x80002400
 80043b4:	fe00e800 	.word	0xfe00e800

080043b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	460b      	mov	r3, r1
 80043cc:	813b      	strh	r3, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	8979      	ldrh	r1, [r7, #10]
 80043d8:	4b20      	ldr	r3, [pc, #128]	@ (800445c <I2C_RequestMemoryWrite+0xa4>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fa79 	bl	80048d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	69b9      	ldr	r1, [r7, #24]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f909 	bl	8004602 <I2C_WaitOnTXISFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e02c      	b.n	8004454 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d105      	bne.n	800440c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004400:	893b      	ldrh	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	629a      	str	r2, [r3, #40]	@ 0x28
 800440a:	e015      	b.n	8004438 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800440c:	893b      	ldrh	r3, [r7, #8]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f8ef 	bl	8004602 <I2C_WaitOnTXISFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e012      	b.n	8004454 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800442e:	893b      	ldrh	r3, [r7, #8]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2200      	movs	r2, #0
 8004440:	2180      	movs	r1, #128	@ 0x80
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f884 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	80002000 	.word	0x80002000

08004460 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	8979      	ldrh	r1, [r7, #10]
 8004480:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <I2C_RequestMemoryRead+0xa4>)
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2300      	movs	r3, #0
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa26 	bl	80048d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f8b6 	bl	8004602 <I2C_WaitOnTXISFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e02c      	b.n	80044fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044a6:	893b      	ldrh	r3, [r7, #8]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b0:	e015      	b.n	80044de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044b2:	893b      	ldrh	r3, [r7, #8]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f89c 	bl	8004602 <I2C_WaitOnTXISFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e012      	b.n	80044fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2140      	movs	r1, #64	@ 0x40
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f831 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	80002000 	.word	0x80002000

08004508 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d103      	bne.n	8004526 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2200      	movs	r2, #0
 8004524:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d007      	beq.n	8004544 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	619a      	str	r2, [r3, #24]
  }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004560:	e03b      	b.n	80045da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8d6 	bl	8004718 <I2C_IsErrorOccurred>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e041      	b.n	80045fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d02d      	beq.n	80045da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fe fe69 	bl	8003254 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_WaitOnFlagUntilTimeout+0x44>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d122      	bne.n	80045da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d113      	bne.n	80045da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00f      	b.n	80045fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d0b4      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800460e:	e033      	b.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f87f 	bl	8004718 <I2C_IsErrorOccurred>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e031      	b.n	8004688 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d025      	beq.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462c:	f7fe fe12 	bl	8003254 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d11a      	bne.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d013      	beq.n	8004678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e007      	b.n	8004688 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b02      	cmp	r3, #2
 8004684:	d1c4      	bne.n	8004610 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800469c:	e02f      	b.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f838 	bl	8004718 <I2C_IsErrorOccurred>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e02d      	b.n	800470e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fe fdcf 	bl	8003254 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d11a      	bne.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d013      	beq.n	80046fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e007      	b.n	800470e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b20      	cmp	r3, #32
 800470a:	d1c8      	bne.n	800469e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	@ 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d068      	beq.n	8004816 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2210      	movs	r2, #16
 800474a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800474c:	e049      	b.n	80047e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d045      	beq.n	80047e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fe fd7d 	bl	8003254 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_IsErrorOccurred+0x54>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d13a      	bne.n	80047e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004776:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800477e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800478a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800478e:	d121      	bne.n	80047d4 <I2C_IsErrorOccurred+0xbc>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004796:	d01d      	beq.n	80047d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b20      	cmp	r3, #32
 800479c:	d01a      	beq.n	80047d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047ae:	f7fe fd51 	bl	8003254 <HAL_GetTick>
 80047b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b4:	e00e      	b.n	80047d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047b6:	f7fe fd4d 	bl	8003254 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b19      	cmp	r3, #25
 80047c2:	d907      	bls.n	80047d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	f043 0320 	orr.w	r3, r3, #32
 80047ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047d2:	e006      	b.n	80047e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d1e9      	bne.n	80047b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d003      	beq.n	80047f8 <I2C_IsErrorOccurred+0xe0>
 80047f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0aa      	beq.n	800474e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2220      	movs	r2, #32
 8004806:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800485a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00b      	beq.n	8004884 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800487c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01c      	beq.n	80048c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7ff fe3b 	bl	8004508 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b0d      	ldr	r3, [pc, #52]	@ (80048d4 <I2C_IsErrorOccurred+0x1bc>)
 800489e:	400b      	ands	r3, r1
 80048a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3728      	adds	r7, #40	@ 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	fe00e800 	.word	0xfe00e800

080048d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	817b      	strh	r3, [r7, #10]
 80048e6:	4613      	mov	r3, r2
 80048e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048f0:	7a7b      	ldrb	r3, [r7, #9]
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	4313      	orrs	r3, r2
 8004902:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004906:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	0d5b      	lsrs	r3, r3, #21
 8004912:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004916:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <I2C_TransferConfig+0x60>)
 8004918:	430b      	orrs	r3, r1
 800491a:	43db      	mvns	r3, r3
 800491c:	ea02 0103 	and.w	r1, r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	03ff63ff 	.word	0x03ff63ff

0800493c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	d138      	bne.n	80049c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800495c:	2302      	movs	r3, #2
 800495e:	e032      	b.n	80049c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	@ 0x24
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800498e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6819      	ldr	r1, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	e000      	b.n	80049c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049c4:	2302      	movs	r3, #2
  }
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d139      	bne.n	8004a5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e033      	b.n	8004a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2224      	movs	r2, #36	@ 0x24
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0201 	bic.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a70:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a04      	ldr	r2, [pc, #16]	@ (8004a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40007000 	.word	0x40007000

08004a8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b23      	ldr	r3, [pc, #140]	@ (8004b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aa2:	4b20      	ldr	r3, [pc, #128]	@ (8004b24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004aae:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aba:	f7fe fbcb 	bl	8003254 <HAL_GetTick>
 8004abe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ac0:	e009      	b.n	8004ad6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ac2:	f7fe fbc7 	bl	8003254 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ad0:	d901      	bls.n	8004ad6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e022      	b.n	8004b1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae2:	d1ee      	bne.n	8004ac2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ae4:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8004b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004af0:	f7fe fbb0 	bl	8003254 <HAL_GetTick>
 8004af4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004af6:	e009      	b.n	8004b0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004af8:	f7fe fbac 	bl	8003254 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b06:	d901      	bls.n	8004b0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e007      	b.n	8004b1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b0c:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b18:	d1ee      	bne.n	8004af8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40007000 	.word	0x40007000

08004b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b34:	2300      	movs	r3, #0
 8004b36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e29b      	b.n	800507a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8087 	beq.w	8004c5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b50:	4b96      	ldr	r3, [pc, #600]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 030c 	and.w	r3, r3, #12
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d00c      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5c:	4b93      	ldr	r3, [pc, #588]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d112      	bne.n	8004b8e <HAL_RCC_OscConfig+0x62>
 8004b68:	4b90      	ldr	r3, [pc, #576]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b74:	d10b      	bne.n	8004b8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b76:	4b8d      	ldr	r3, [pc, #564]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d06c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x130>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d168      	bne.n	8004c5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e275      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x7a>
 8004b98:	4b84      	ldr	r3, [pc, #528]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a83      	ldr	r2, [pc, #524]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e02e      	b.n	8004c04 <HAL_RCC_OscConfig+0xd8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x9c>
 8004bae:	4b7f      	ldr	r3, [pc, #508]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b7c      	ldr	r3, [pc, #496]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e01d      	b.n	8004c04 <HAL_RCC_OscConfig+0xd8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCC_OscConfig+0xc0>
 8004bd2:	4b76      	ldr	r3, [pc, #472]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a75      	ldr	r2, [pc, #468]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b73      	ldr	r3, [pc, #460]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a72      	ldr	r2, [pc, #456]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e00b      	b.n	8004c04 <HAL_RCC_OscConfig+0xd8>
 8004bec:	4b6f      	ldr	r3, [pc, #444]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d013      	beq.n	8004c34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0c:	f7fe fb22 	bl	8003254 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c14:	f7fe fb1e 	bl	8003254 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	@ 0x64
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e229      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b61      	ldr	r3, [pc, #388]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0xe8>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fe fb0e 	bl	8003254 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c3c:	f7fe fb0a 	bl	8003254 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	@ 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e215      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	4b57      	ldr	r3, [pc, #348]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x110>
 8004c5a:	e000      	b.n	8004c5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d069      	beq.n	8004d3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6a:	4b50      	ldr	r3, [pc, #320]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c76:	4b4d      	ldr	r3, [pc, #308]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d11c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x190>
 8004c82:	4b4a      	ldr	r3, [pc, #296]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d116      	bne.n	8004cbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8e:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x17a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e1e9      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	493d      	ldr	r1, [pc, #244]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cba:	e040      	b.n	8004d3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d023      	beq.n	8004d0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc4:	4b39      	ldr	r3, [pc, #228]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a38      	ldr	r2, [pc, #224]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fac0 	bl	8003254 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fe fabc 	bl	8003254 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1c7      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b30      	ldr	r3, [pc, #192]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4929      	ldr	r1, [pc, #164]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
 8004d0a:	e018      	b.n	8004d3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fa9c 	bl	8003254 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fe fa98 	bl	8003254 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1a3      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	4b1e      	ldr	r3, [pc, #120]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d038      	beq.n	8004dbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d019      	beq.n	8004d86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b16      	ldr	r3, [pc, #88]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d56:	4a15      	ldr	r2, [pc, #84]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fe fa79 	bl	8003254 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d66:	f7fe fa75 	bl	8003254 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e180      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x23a>
 8004d84:	e01a      	b.n	8004dbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d8a:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <HAL_RCC_OscConfig+0x280>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fe fa5f 	bl	8003254 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d98:	e00a      	b.n	8004db0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fe fa5b 	bl	8003254 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d903      	bls.n	8004db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e166      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
 8004dac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db0:	4b92      	ldr	r3, [pc, #584]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ee      	bne.n	8004d9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80a4 	beq.w	8004f12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dca:	4b8c      	ldr	r3, [pc, #560]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	4b89      	ldr	r3, [pc, #548]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	4a88      	ldr	r2, [pc, #544]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004de2:	4b86      	ldr	r3, [pc, #536]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df2:	4b83      	ldr	r3, [pc, #524]	@ (8005000 <HAL_RCC_OscConfig+0x4d4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d118      	bne.n	8004e30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004dfe:	4b80      	ldr	r3, [pc, #512]	@ (8005000 <HAL_RCC_OscConfig+0x4d4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a7f      	ldr	r2, [pc, #508]	@ (8005000 <HAL_RCC_OscConfig+0x4d4>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0a:	f7fe fa23 	bl	8003254 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e12:	f7fe fa1f 	bl	8003254 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	@ 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e12a      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e24:	4b76      	ldr	r3, [pc, #472]	@ (8005000 <HAL_RCC_OscConfig+0x4d4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x31a>
 8004e38:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3c:	4a6f      	ldr	r2, [pc, #444]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e44:	e02d      	b.n	8004ea2 <HAL_RCC_OscConfig+0x376>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x33c>
 8004e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e52:	4a6a      	ldr	r2, [pc, #424]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5a:	4b68      	ldr	r3, [pc, #416]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	4a67      	ldr	r2, [pc, #412]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e66:	e01c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x376>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x35e>
 8004e70:	4b62      	ldr	r3, [pc, #392]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e74:	4a61      	ldr	r2, [pc, #388]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e80:	4a5e      	ldr	r2, [pc, #376]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x376>
 8004e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e96:	4b59      	ldr	r3, [pc, #356]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	4a58      	ldr	r2, [pc, #352]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d015      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eaa:	f7fe f9d3 	bl	8003254 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fe f9cf 	bl	8003254 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0d8      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ee      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x386>
 8004ed4:	e014      	b.n	8004f00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7fe f9bd 	bl	8003254 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fe f9b9 	bl	8003254 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e0c2      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef4:	4b41      	ldr	r3, [pc, #260]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ee      	bne.n	8004ede <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f06:	4b3d      	ldr	r3, [pc, #244]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 80ae 	beq.w	8005078 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f1c:	4b37      	ldr	r3, [pc, #220]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d06d      	beq.n	8005004 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d14b      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b32      	ldr	r3, [pc, #200]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a31      	ldr	r2, [pc, #196]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe f98a 	bl	8003254 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fe f986 	bl	8003254 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e091      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f56:	4b29      	ldr	r3, [pc, #164]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	019b      	lsls	r3, r3, #6
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	071b      	lsls	r3, r3, #28
 8004f8e:	491b      	ldr	r1, [pc, #108]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f94:	4b19      	ldr	r3, [pc, #100]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fe f958 	bl	8003254 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fe f954 	bl	8003254 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e05f      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x47c>
 8004fc6:	e057      	b.n	8005078 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f93e 	bl	8003254 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fe f93a 	bl	8003254 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e045      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f0      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4b0>
 8004ffa:	e03d      	b.n	8005078 <HAL_RCC_OscConfig+0x54c>
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005004:	4b1f      	ldr	r3, [pc, #124]	@ (8005084 <HAL_RCC_OscConfig+0x558>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d030      	beq.n	8005074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d129      	bne.n	8005074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d122      	bne.n	8005074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800503a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800503c:	4293      	cmp	r3, r2
 800503e:	d119      	bne.n	8005074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	3b01      	subs	r3, #1
 800504e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d10f      	bne.n	8005074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800

08005088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0d0      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d910      	bls.n	80050d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b67      	ldr	r3, [pc, #412]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 020f 	bic.w	r2, r3, #15
 80050b6:	4965      	ldr	r1, [pc, #404]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b63      	ldr	r3, [pc, #396]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0b8      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e8:	4b59      	ldr	r3, [pc, #356]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a58      	ldr	r2, [pc, #352]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 80050ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005100:	4b53      	ldr	r3, [pc, #332]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a52      	ldr	r2, [pc, #328]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800510a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b50      	ldr	r3, [pc, #320]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	494d      	ldr	r1, [pc, #308]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d040      	beq.n	80051ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d115      	bne.n	800516a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e07f      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514a:	4b41      	ldr	r3, [pc, #260]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e073      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515a:	4b3d      	ldr	r3, [pc, #244]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06b      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516a:	4b39      	ldr	r3, [pc, #228]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 0203 	bic.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4936      	ldr	r1, [pc, #216]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517c:	f7fe f86a 	bl	8003254 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	e00a      	b.n	800519a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005184:	f7fe f866 	bl	8003254 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e053      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	4b2d      	ldr	r3, [pc, #180]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 020c 	and.w	r2, r3, #12
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1eb      	bne.n	8005184 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b27      	ldr	r3, [pc, #156]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d210      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b24      	ldr	r3, [pc, #144]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 020f 	bic.w	r2, r3, #15
 80051c2:	4922      	ldr	r1, [pc, #136]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b20      	ldr	r3, [pc, #128]	@ (800524c <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e032      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e8:	4b19      	ldr	r3, [pc, #100]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4916      	ldr	r1, [pc, #88]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	490e      	ldr	r1, [pc, #56]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800521a:	f000 f821 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800521e:	4602      	mov	r2, r0
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	490a      	ldr	r1, [pc, #40]	@ (8005254 <HAL_RCC_ClockConfig+0x1cc>)
 800522c:	5ccb      	ldrb	r3, [r1, r3]
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <HAL_RCC_ClockConfig+0x1d0>)
 8005234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005236:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_RCC_ClockConfig+0x1d4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd ffc6 	bl	80031cc <HAL_InitTick>

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40023c00 	.word	0x40023c00
 8005250:	40023800 	.word	0x40023800
 8005254:	0800b30c 	.word	0x0800b30c
 8005258:	20000020 	.word	0x20000020
 800525c:	20000024 	.word	0x20000024

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b094      	sub	sp, #80	@ 0x50
 8005266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
 800526c:	2300      	movs	r3, #0
 800526e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005270:	2300      	movs	r3, #0
 8005272:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005278:	4b79      	ldr	r3, [pc, #484]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b08      	cmp	r3, #8
 8005282:	d00d      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005284:	2b08      	cmp	r3, #8
 8005286:	f200 80e1 	bhi.w	800544c <HAL_RCC_GetSysClockFreq+0x1ec>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 800528e:	2b04      	cmp	r3, #4
 8005290:	d003      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x3a>
 8005292:	e0db      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b73      	ldr	r3, [pc, #460]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x204>)
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005298:	e0db      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800529a:	4b73      	ldr	r3, [pc, #460]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x208>)
 800529c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800529e:	e0d8      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d063      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	2200      	movs	r2, #0
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ca:	2300      	movs	r3, #0
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	f04f 0000 	mov.w	r0, #0
 80052da:	f04f 0100 	mov.w	r1, #0
 80052de:	0159      	lsls	r1, r3, #5
 80052e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e4:	0150      	lsls	r0, r2, #5
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4621      	mov	r1, r4
 80052ec:	1a51      	subs	r1, r2, r1
 80052ee:	6139      	str	r1, [r7, #16]
 80052f0:	4629      	mov	r1, r5
 80052f2:	eb63 0301 	sbc.w	r3, r3, r1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005304:	4659      	mov	r1, fp
 8005306:	018b      	lsls	r3, r1, #6
 8005308:	4651      	mov	r1, sl
 800530a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800530e:	4651      	mov	r1, sl
 8005310:	018a      	lsls	r2, r1, #6
 8005312:	4651      	mov	r1, sl
 8005314:	ebb2 0801 	subs.w	r8, r2, r1
 8005318:	4659      	mov	r1, fp
 800531a:	eb63 0901 	sbc.w	r9, r3, r1
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800532a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005332:	4690      	mov	r8, r2
 8005334:	4699      	mov	r9, r3
 8005336:	4623      	mov	r3, r4
 8005338:	eb18 0303 	adds.w	r3, r8, r3
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	462b      	mov	r3, r5
 8005340:	eb49 0303 	adc.w	r3, r9, r3
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005352:	4629      	mov	r1, r5
 8005354:	024b      	lsls	r3, r1, #9
 8005356:	4621      	mov	r1, r4
 8005358:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800535c:	4621      	mov	r1, r4
 800535e:	024a      	lsls	r2, r1, #9
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005366:	2200      	movs	r2, #0
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800536a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005370:	f7fb f972 	bl	8000658 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4613      	mov	r3, r2
 800537a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537c:	e058      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b38      	ldr	r3, [pc, #224]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	2200      	movs	r2, #0
 8005386:	4618      	mov	r0, r3
 8005388:	4611      	mov	r1, r2
 800538a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	2300      	movs	r3, #0
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
 8005394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	f04f 0000 	mov.w	r0, #0
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	0159      	lsls	r1, r3, #5
 80053a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053aa:	0150      	lsls	r0, r2, #5
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4641      	mov	r1, r8
 80053b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053b6:	4649      	mov	r1, r9
 80053b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053d0:	ebb2 040a 	subs.w	r4, r2, sl
 80053d4:	eb63 050b 	sbc.w	r5, r3, fp
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	00eb      	lsls	r3, r5, #3
 80053e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e6:	00e2      	lsls	r2, r4, #3
 80053e8:	4614      	mov	r4, r2
 80053ea:	461d      	mov	r5, r3
 80053ec:	4643      	mov	r3, r8
 80053ee:	18e3      	adds	r3, r4, r3
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	464b      	mov	r3, r9
 80053f4:	eb45 0303 	adc.w	r3, r5, r3
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005406:	4629      	mov	r1, r5
 8005408:	028b      	lsls	r3, r1, #10
 800540a:	4621      	mov	r1, r4
 800540c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005410:	4621      	mov	r1, r4
 8005412:	028a      	lsls	r2, r1, #10
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541a:	2200      	movs	r2, #0
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	61fa      	str	r2, [r7, #28]
 8005420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005424:	f7fb f918 	bl	8000658 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	3301      	adds	r3, #1
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800544a:	e002      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x204>)
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005454:	4618      	mov	r0, r3
 8005456:	3750      	adds	r7, #80	@ 0x50
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400
 8005468:	007a1200 	.word	0x007a1200

0800546c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <HAL_RCC_GetHCLKFreq+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000020 	.word	0x20000020

08005484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005488:	f7ff fff0 	bl	800546c <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0a9b      	lsrs	r3, r3, #10
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4903      	ldr	r1, [pc, #12]	@ (80054a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	0800b31c 	.word	0x0800b31c

080054ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054b0:	f7ff ffdc 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b4:	4602      	mov	r2, r0
 80054b6:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0b5b      	lsrs	r3, r3, #13
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4903      	ldr	r1, [pc, #12]	@ (80054d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c2:	5ccb      	ldrb	r3, [r1, r3]
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800b31c 	.word	0x0800b31c

080054d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d012      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054fc:	4b69      	ldr	r3, [pc, #420]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	4a68      	ldr	r2, [pc, #416]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005502:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005506:	6093      	str	r3, [r2, #8]
 8005508:	4b66      	ldr	r3, [pc, #408]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005510:	4964      	ldr	r1, [pc, #400]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800551e:	2301      	movs	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d017      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800552e:	4b5d      	ldr	r3, [pc, #372]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005534:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553c:	4959      	ldr	r1, [pc, #356]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005548:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800554c:	d101      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800555a:	2301      	movs	r3, #1
 800555c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d017      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800556a:	4b4e      	ldr	r3, [pc, #312]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005570:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	494a      	ldr	r1, [pc, #296]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005588:	d101      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800558a:	2301      	movs	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005596:	2301      	movs	r3, #1
 8005598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80055a6:	2301      	movs	r3, #1
 80055a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 808b 	beq.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055b8:	4b3a      	ldr	r3, [pc, #232]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	4a39      	ldr	r2, [pc, #228]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80055c4:	4b37      	ldr	r3, [pc, #220]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055d0:	4b35      	ldr	r3, [pc, #212]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a34      	ldr	r2, [pc, #208]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055dc:	f7fd fe3a 	bl	8003254 <HAL_GetTick>
 80055e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e4:	f7fd fe36 	bl	8003254 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	@ 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e38f      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80055f6:	4b2c      	ldr	r3, [pc, #176]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005602:	4b28      	ldr	r3, [pc, #160]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800560a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d035      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	429a      	cmp	r2, r3
 800561e:	d02e      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005620:	4b20      	ldr	r3, [pc, #128]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800562a:	4b1e      	ldr	r3, [pc, #120]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	4a1d      	ldr	r2, [pc, #116]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005634:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005636:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563a:	4a1a      	ldr	r2, [pc, #104]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005640:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005642:	4a18      	ldr	r2, [pc, #96]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005648:	4b16      	ldr	r3, [pc, #88]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d114      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fd fdfe 	bl	8003254 <HAL_GetTick>
 8005658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565a:	e00a      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fd fdfa 	bl	8003254 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e351      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ee      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568a:	d111      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800568c:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800569a:	400b      	ands	r3, r1
 800569c:	4901      	ldr	r1, [pc, #4]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	e00b      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80056a4:	40023800 	.word	0x40023800
 80056a8:	40007000 	.word	0x40007000
 80056ac:	0ffffcff 	.word	0x0ffffcff
 80056b0:	4bac      	ldr	r3, [pc, #688]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4aab      	ldr	r2, [pc, #684]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056ba:	6093      	str	r3, [r2, #8]
 80056bc:	4ba9      	ldr	r3, [pc, #676]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c8:	49a6      	ldr	r1, [pc, #664]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056da:	4ba2      	ldr	r3, [pc, #648]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056e0:	4aa0      	ldr	r2, [pc, #640]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80056ea:	4b9e      	ldr	r3, [pc, #632]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	499b      	ldr	r1, [pc, #620]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005708:	4b96      	ldr	r3, [pc, #600]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005716:	4993      	ldr	r1, [pc, #588]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800572a:	4b8e      	ldr	r3, [pc, #568]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005730:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005738:	498a      	ldr	r1, [pc, #552]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800574c:	4b85      	ldr	r3, [pc, #532]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575a:	4982      	ldr	r1, [pc, #520]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800576e:	4b7d      	ldr	r3, [pc, #500]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005774:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	4979      	ldr	r1, [pc, #484]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005790:	4b74      	ldr	r3, [pc, #464]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	4971      	ldr	r1, [pc, #452]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b8:	f023 020c 	bic.w	r2, r3, #12
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c0:	4968      	ldr	r1, [pc, #416]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057d4:	4b63      	ldr	r3, [pc, #396]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e2:	4960      	ldr	r1, [pc, #384]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005804:	4957      	ldr	r1, [pc, #348]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005818:	4b52      	ldr	r3, [pc, #328]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	494f      	ldr	r1, [pc, #316]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800583a:	4b4a      	ldr	r3, [pc, #296]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005840:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	4946      	ldr	r1, [pc, #280]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800585c:	4b41      	ldr	r3, [pc, #260]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005862:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586a:	493e      	ldr	r1, [pc, #248]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800587e:	4b39      	ldr	r3, [pc, #228]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005884:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588c:	4935      	ldr	r1, [pc, #212]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058a0:	4b30      	ldr	r3, [pc, #192]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ae:	492d      	ldr	r1, [pc, #180]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d011      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058c2:	4b28      	ldr	r3, [pc, #160]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d0:	4924      	ldr	r1, [pc, #144]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058e0:	d101      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80058e2:	2301      	movs	r3, #1
 80058e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005902:	4b18      	ldr	r3, [pc, #96]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005910:	4914      	ldr	r1, [pc, #80]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005934:	490b      	ldr	r1, [pc, #44]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00f      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005958:	4902      	ldr	r1, [pc, #8]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005974:	4b8a      	ldr	r3, [pc, #552]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800597a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	4986      	ldr	r1, [pc, #536]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005998:	4b81      	ldr	r3, [pc, #516]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800599e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a8:	497d      	ldr	r1, [pc, #500]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d006      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80d6 	beq.w	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059c4:	4b76      	ldr	r3, [pc, #472]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a75      	ldr	r2, [pc, #468]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fd fc40 	bl	8003254 <HAL_GetTick>
 80059d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059d8:	f7fd fc3c 	bl	8003254 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	@ 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e195      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059ea:	4b6d      	ldr	r3, [pc, #436]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d021      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d11d      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a0a:	4b65      	ldr	r3, [pc, #404]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a18:	4b61      	ldr	r3, [pc, #388]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1e:	0e1b      	lsrs	r3, r3, #24
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	019a      	lsls	r2, r3, #6
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	431a      	orrs	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	061b      	lsls	r3, r3, #24
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	071b      	lsls	r3, r3, #28
 8005a3e:	4958      	ldr	r1, [pc, #352]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d02e      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a70:	d129      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a72:	4b4b      	ldr	r3, [pc, #300]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a80:	4b47      	ldr	r3, [pc, #284]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a86:	0f1b      	lsrs	r3, r3, #28
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	019a      	lsls	r2, r3, #6
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	071b      	lsls	r3, r3, #28
 8005aa6:	493e      	ldr	r1, [pc, #248]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005aae:	4b3c      	ldr	r3, [pc, #240]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ab4:	f023 021f 	bic.w	r2, r3, #31
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abc:	3b01      	subs	r3, #1
 8005abe:	4938      	ldr	r1, [pc, #224]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01d      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ad2:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad8:	0e1b      	lsrs	r3, r3, #24
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae6:	0f1b      	lsrs	r3, r3, #28
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	019a      	lsls	r2, r3, #6
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	061b      	lsls	r3, r3, #24
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	071b      	lsls	r3, r3, #28
 8005b06:	4926      	ldr	r1, [pc, #152]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	019a      	lsls	r2, r3, #6
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	041b      	lsls	r3, r3, #16
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	491a      	ldr	r1, [pc, #104]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b3e:	4b18      	ldr	r3, [pc, #96]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a17      	ldr	r2, [pc, #92]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4a:	f7fd fb83 	bl	8003254 <HAL_GetTick>
 8005b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b50:	e008      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b52:	f7fd fb7f 	bl	8003254 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b64      	cmp	r3, #100	@ 0x64
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e0d8      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	f040 80ce 	bne.w	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b78:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fd fb66 	bl	8003254 <HAL_GetTick>
 8005b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b8a:	e00b      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b8c:	f7fd fb62 	bl	8003254 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	@ 0x64
 8005b98:	d904      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0bb      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b9e:	bf00      	nop
 8005ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb0:	d0ec      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d02e      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d12a      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bda:	4b51      	ldr	r3, [pc, #324]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005be8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bee:	0f1b      	lsrs	r3, r3, #28
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	019a      	lsls	r2, r3, #6
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	061b      	lsls	r3, r3, #24
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	071b      	lsls	r3, r3, #28
 8005c0e:	4944      	ldr	r1, [pc, #272]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c16:	4b42      	ldr	r3, [pc, #264]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	493d      	ldr	r1, [pc, #244]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d022      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c44:	d11d      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c46:	4b36      	ldr	r3, [pc, #216]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4c:	0e1b      	lsrs	r3, r3, #24
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c54:	4b32      	ldr	r3, [pc, #200]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5a:	0f1b      	lsrs	r3, r3, #28
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	019a      	lsls	r2, r3, #6
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	061b      	lsls	r3, r3, #24
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	071b      	lsls	r3, r3, #28
 8005c7a:	4929      	ldr	r1, [pc, #164]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d028      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c8e:	4b24      	ldr	r3, [pc, #144]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c94:	0e1b      	lsrs	r3, r3, #24
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c9c:	4b20      	ldr	r3, [pc, #128]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	019a      	lsls	r2, r3, #6
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	071b      	lsls	r3, r3, #28
 8005cc2:	4917      	ldr	r1, [pc, #92]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cca:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	4911      	ldr	r1, [pc, #68]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cec:	f7fd fab2 	bl	8003254 <HAL_GetTick>
 8005cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cf4:	f7fd faae 	bl	8003254 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	@ 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e007      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d06:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d12:	d1ef      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40023800 	.word	0x40023800

08005d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e09d      	b.n	8005e72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d46:	d009      	beq.n	8005d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc fc94 	bl	80026a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d9c:	d902      	bls.n	8005da4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e002      	b.n	8005daa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Init+0xa0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	ea42 0103 	orr.w	r1, r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	f003 0204 	and.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e40:	ea42 0103 	orr.w	r1, r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e049      	b.n	8005f20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fc fc7f 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f001 f819 	bl	8006ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d001      	beq.n	8005f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e054      	b.n	8005fea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d022      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6a:	d01d      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a22      	ldr	r2, [pc, #136]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	@ (8006000 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <HAL_TIM_Base_Start_IT+0xe4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8006010 <HAL_TIM_Base_Start_IT+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d115      	bne.n	8005fd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	4b19      	ldr	r3, [pc, #100]	@ (8006014 <HAL_TIM_Base_Start_IT+0xec>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d015      	beq.n	8005fe6 <HAL_TIM_Base_Start_IT+0xbe>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc0:	d011      	beq.n	8005fe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd2:	e008      	b.n	8005fe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e000      	b.n	8005fe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40010400 	.word	0x40010400
 800600c:	40014000 	.word	0x40014000
 8006010:	40001800 	.word	0x40001800
 8006014:	00010007 	.word	0x00010007

08006018 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e049      	b.n	80060be <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f841 	bl	80060c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f000 ff4a 	bl	8006ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e049      	b.n	8006180 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7fc fc5f 	bl	80029c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 fee9 	bl	8006ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <HAL_TIM_PWM_Start+0x24>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e03c      	b.n	8006226 <HAL_TIM_PWM_Start+0x9e>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d109      	bne.n	80061c6 <HAL_TIM_PWM_Start+0x3e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	bf14      	ite	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	2300      	moveq	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	e02f      	b.n	8006226 <HAL_TIM_PWM_Start+0x9e>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d109      	bne.n	80061e0 <HAL_TIM_PWM_Start+0x58>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e022      	b.n	8006226 <HAL_TIM_PWM_Start+0x9e>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d109      	bne.n	80061fa <HAL_TIM_PWM_Start+0x72>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	e015      	b.n	8006226 <HAL_TIM_PWM_Start+0x9e>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x8c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e008      	b.n	8006226 <HAL_TIM_PWM_Start+0x9e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e092      	b.n	8006354 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0xb6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800623c:	e023      	b.n	8006286 <HAL_TIM_PWM_Start+0xfe>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0xc6>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800624c:	e01b      	b.n	8006286 <HAL_TIM_PWM_Start+0xfe>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0xd6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800625c:	e013      	b.n	8006286 <HAL_TIM_PWM_Start+0xfe>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b0c      	cmp	r3, #12
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start+0xe6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800626c:	e00b      	b.n	8006286 <HAL_TIM_PWM_Start+0xfe>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b10      	cmp	r3, #16
 8006272:	d104      	bne.n	800627e <HAL_TIM_PWM_Start+0xf6>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800627c:	e003      	b.n	8006286 <HAL_TIM_PWM_Start+0xfe>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2201      	movs	r2, #1
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fafc 	bl	800788c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a30      	ldr	r2, [pc, #192]	@ (800635c <HAL_TIM_PWM_Start+0x1d4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIM_PWM_Start+0x120>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006360 <HAL_TIM_PWM_Start+0x1d8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_PWM_Start+0x124>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_TIM_PWM_Start+0x126>
 80062ac:	2300      	movs	r3, #0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a25      	ldr	r2, [pc, #148]	@ (800635c <HAL_TIM_PWM_Start+0x1d4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d022      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d4:	d01d      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a22      	ldr	r2, [pc, #136]	@ (8006364 <HAL_TIM_PWM_Start+0x1dc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a20      	ldr	r2, [pc, #128]	@ (8006368 <HAL_TIM_PWM_Start+0x1e0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1f      	ldr	r2, [pc, #124]	@ (800636c <HAL_TIM_PWM_Start+0x1e4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a19      	ldr	r2, [pc, #100]	@ (8006360 <HAL_TIM_PWM_Start+0x1d8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <HAL_TIM_PWM_Start+0x1e8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_TIM_PWM_Start+0x18a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a19      	ldr	r2, [pc, #100]	@ (8006374 <HAL_TIM_PWM_Start+0x1ec>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d115      	bne.n	800633e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	4b17      	ldr	r3, [pc, #92]	@ (8006378 <HAL_TIM_PWM_Start+0x1f0>)
 800631a:	4013      	ands	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b06      	cmp	r3, #6
 8006322:	d015      	beq.n	8006350 <HAL_TIM_PWM_Start+0x1c8>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800632a:	d011      	beq.n	8006350 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633c:	e008      	b.n	8006350 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e000      	b.n	8006352 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40014000 	.word	0x40014000
 8006374:	40001800 	.word	0x40001800
 8006378:	00010007 	.word	0x00010007

0800637c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e049      	b.n	8006422 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f841 	bl	800642a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f000 fd98 	bl	8006ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e08f      	b.n	8006574 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fc fa35 	bl	80028d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6899      	ldr	r1, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b3e      	ldr	r3, [pc, #248]	@ (800657c <HAL_TIM_Encoder_Init+0x13c>)
 8006482:	400b      	ands	r3, r1
 8006484:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f000 fd2d 	bl	8006ef0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4b31      	ldr	r3, [pc, #196]	@ (8006580 <HAL_TIM_Encoder_Init+0x140>)
 80064bc:	4013      	ands	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	4313      	orrs	r3, r2
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006584 <HAL_TIM_Encoder_Init+0x144>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006588 <HAL_TIM_Encoder_Init+0x148>)
 80064de:	4013      	ands	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	4313      	orrs	r3, r2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	011a      	lsls	r2, r3, #4
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	031b      	lsls	r3, r3, #12
 8006500:	4313      	orrs	r3, r2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	4313      	orrs	r3, r2
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	fffebff8 	.word	0xfffebff8
 8006580:	fffffcfc 	.word	0xfffffcfc
 8006584:	fffff3f3 	.word	0xfffff3f3
 8006588:	ffff0f0f 	.word	0xffff0f0f

0800658c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800659c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d110      	bne.n	80065de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d102      	bne.n	80065c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80065c2:	7b7b      	ldrb	r3, [r7, #13]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e069      	b.n	80066a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065dc:	e031      	b.n	8006642 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d110      	bne.n	8006606 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d102      	bne.n	80065f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065ea:	7b3b      	ldrb	r3, [r7, #12]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d001      	beq.n	80065f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e055      	b.n	80066a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006604:	e01d      	b.n	8006642 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d108      	bne.n	800661e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d105      	bne.n	800661e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006612:	7b7b      	ldrb	r3, [r7, #13]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d102      	bne.n	800661e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006618:	7b3b      	ldrb	r3, [r7, #12]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d001      	beq.n	8006622 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e03e      	b.n	80066a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2202      	movs	r2, #2
 800663e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_TIM_Encoder_Start+0xc4>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d008      	beq.n	8006660 <HAL_TIM_Encoder_Start+0xd4>
 800664e:	e00f      	b.n	8006670 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2201      	movs	r2, #1
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f917 	bl	800788c <TIM_CCxChannelCmd>
      break;
 800665e:	e016      	b.n	800668e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2201      	movs	r2, #1
 8006666:	2104      	movs	r1, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f001 f90f 	bl	800788c <TIM_CCxChannelCmd>
      break;
 800666e:	e00e      	b.n	800668e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2201      	movs	r2, #1
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f001 f907 	bl	800788c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	2104      	movs	r1, #4
 8006686:	4618      	mov	r0, r3
 8006688:	f001 f900 	bl	800788c <TIM_CCxChannelCmd>
      break;
 800668c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01b      	beq.n	800670c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0202 	mvn.w	r2, #2
 80066dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fbde 	bl	8006eb4 <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fbd0 	bl	8006ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fbe1 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d020      	beq.n	8006758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0204 	mvn.w	r2, #4
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fbb8 	bl	8006eb4 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fbaa 	bl	8006ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fbbb 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0208 	mvn.w	r2, #8
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fb92 	bl	8006eb4 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fb84 	bl	8006ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fb95 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d020      	beq.n	80067f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01b      	beq.n	80067f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0210 	mvn.w	r2, #16
 80067c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2208      	movs	r2, #8
 80067c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fb6c 	bl	8006eb4 <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb5e 	bl	8006ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb6f 	bl	8006ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00c      	beq.n	8006814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d007      	beq.n	8006814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0201 	mvn.w	r2, #1
 800680c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fa fa1e 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f961 	bl	8007b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00c      	beq.n	8006866 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800685e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f959 	bl	8007b18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb29 	bl	8006edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0220 	mvn.w	r2, #32
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 f921 	bl	8007af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ae:	bf00      	nop
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e066      	b.n	80069a4 <HAL_TIM_OC_ConfigChannel+0xec>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b14      	cmp	r3, #20
 80068e2:	d857      	bhi.n	8006994 <HAL_TIM_OC_ConfigChannel+0xdc>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006941 	.word	0x08006941
 80068f0:	08006995 	.word	0x08006995
 80068f4:	08006995 	.word	0x08006995
 80068f8:	08006995 	.word	0x08006995
 80068fc:	0800694f 	.word	0x0800694f
 8006900:	08006995 	.word	0x08006995
 8006904:	08006995 	.word	0x08006995
 8006908:	08006995 	.word	0x08006995
 800690c:	0800695d 	.word	0x0800695d
 8006910:	08006995 	.word	0x08006995
 8006914:	08006995 	.word	0x08006995
 8006918:	08006995 	.word	0x08006995
 800691c:	0800696b 	.word	0x0800696b
 8006920:	08006995 	.word	0x08006995
 8006924:	08006995 	.word	0x08006995
 8006928:	08006995 	.word	0x08006995
 800692c:	08006979 	.word	0x08006979
 8006930:	08006995 	.word	0x08006995
 8006934:	08006995 	.word	0x08006995
 8006938:	08006995 	.word	0x08006995
 800693c:	08006987 	.word	0x08006987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fb7e 	bl	8007048 <TIM_OC1_SetConfig>
      break;
 800694c:	e025      	b.n	800699a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbe9 	bl	800712c <TIM_OC2_SetConfig>
      break;
 800695a:	e01e      	b.n	800699a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fc5a 	bl	800721c <TIM_OC3_SetConfig>
      break;
 8006968:	e017      	b.n	800699a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fcc9 	bl	8007308 <TIM_OC4_SetConfig>
      break;
 8006976:	e010      	b.n	800699a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fd1a 	bl	80073b8 <TIM_OC5_SetConfig>
      break;
 8006984:	e009      	b.n	800699a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fd65 	bl	800745c <TIM_OC6_SetConfig>
      break;
 8006992:	e002      	b.n	800699a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
      break;
 8006998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e088      	b.n	8006adc <HAL_TIM_IC_ConfigChannel+0x130>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11b      	bne.n	8006a10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80069e8:	f000 fd8c 	bl	8007504 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 020c 	bic.w	r2, r2, #12
 80069fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6999      	ldr	r1, [r3, #24]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	619a      	str	r2, [r3, #24]
 8006a0e:	e060      	b.n	8006ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d11c      	bne.n	8006a50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006a26:	f000 fe10 	bl	800764a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6999      	ldr	r1, [r3, #24]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	021a      	lsls	r2, r3, #8
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	619a      	str	r2, [r3, #24]
 8006a4e:	e040      	b.n	8006ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d11b      	bne.n	8006a8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006a66:	f000 fe5d 	bl	8007724 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 020c 	bic.w	r2, r2, #12
 8006a78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69d9      	ldr	r1, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	61da      	str	r2, [r3, #28]
 8006a8c:	e021      	b.n	8006ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b0c      	cmp	r3, #12
 8006a92:	d11c      	bne.n	8006ace <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006aa4:	f000 fe7a 	bl	800779c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ab6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69d9      	ldr	r1, [r3, #28]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	61da      	str	r2, [r3, #28]
 8006acc:	e001      	b.n	8006ad2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e0ff      	b.n	8006d02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b14      	cmp	r3, #20
 8006b0e:	f200 80f0 	bhi.w	8006cf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006cf3 	.word	0x08006cf3
 8006b20:	08006cf3 	.word	0x08006cf3
 8006b24:	08006cf3 	.word	0x08006cf3
 8006b28:	08006bad 	.word	0x08006bad
 8006b2c:	08006cf3 	.word	0x08006cf3
 8006b30:	08006cf3 	.word	0x08006cf3
 8006b34:	08006cf3 	.word	0x08006cf3
 8006b38:	08006bef 	.word	0x08006bef
 8006b3c:	08006cf3 	.word	0x08006cf3
 8006b40:	08006cf3 	.word	0x08006cf3
 8006b44:	08006cf3 	.word	0x08006cf3
 8006b48:	08006c2f 	.word	0x08006c2f
 8006b4c:	08006cf3 	.word	0x08006cf3
 8006b50:	08006cf3 	.word	0x08006cf3
 8006b54:	08006cf3 	.word	0x08006cf3
 8006b58:	08006c71 	.word	0x08006c71
 8006b5c:	08006cf3 	.word	0x08006cf3
 8006b60:	08006cf3 	.word	0x08006cf3
 8006b64:	08006cf3 	.word	0x08006cf3
 8006b68:	08006cb1 	.word	0x08006cb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fa68 	bl	8007048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0204 	bic.w	r2, r2, #4
 8006b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6999      	ldr	r1, [r3, #24]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	619a      	str	r2, [r3, #24]
      break;
 8006baa:	e0a5      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 faba 	bl	800712c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6999      	ldr	r1, [r3, #24]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	619a      	str	r2, [r3, #24]
      break;
 8006bec:	e084      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fb11 	bl	800721c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0208 	orr.w	r2, r2, #8
 8006c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0204 	bic.w	r2, r2, #4
 8006c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	61da      	str	r2, [r3, #28]
      break;
 8006c2c:	e064      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fb67 	bl	8007308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69d9      	ldr	r1, [r3, #28]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	021a      	lsls	r2, r3, #8
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	61da      	str	r2, [r3, #28]
      break;
 8006c6e:	e043      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fb9e 	bl	80073b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0208 	orr.w	r2, r2, #8
 8006c8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0204 	bic.w	r2, r2, #4
 8006c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006cae:	e023      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fbd0 	bl	800745c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	021a      	lsls	r2, r3, #8
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006cf0:	e002      	b.n	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop

08006d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_TIM_ConfigClockSource+0x1c>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e0b4      	b.n	8006e92 <HAL_TIM_ConfigClockSource+0x186>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	4b56      	ldr	r3, [pc, #344]	@ (8006e9c <HAL_TIM_ConfigClockSource+0x190>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d60:	d03e      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0xd4>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d66:	f200 8087 	bhi.w	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6e:	f000 8086 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x172>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d76:	d87f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d78:	2b70      	cmp	r3, #112	@ 0x70
 8006d7a:	d01a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xa6>
 8006d7c:	2b70      	cmp	r3, #112	@ 0x70
 8006d7e:	d87b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d80:	2b60      	cmp	r3, #96	@ 0x60
 8006d82:	d050      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x11a>
 8006d84:	2b60      	cmp	r3, #96	@ 0x60
 8006d86:	d877      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d88:	2b50      	cmp	r3, #80	@ 0x50
 8006d8a:	d03c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xfa>
 8006d8c:	2b50      	cmp	r3, #80	@ 0x50
 8006d8e:	d873      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d058      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0x13a>
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d86f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d98:	2b30      	cmp	r3, #48	@ 0x30
 8006d9a:	d064      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006d9c:	2b30      	cmp	r3, #48	@ 0x30
 8006d9e:	d86b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d060      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d867      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d05a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	e062      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dc2:	f000 fd43 	bl	800784c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]
      break;
 8006dde:	e04f      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006df0:	f000 fd2c 	bl	800784c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e02:	609a      	str	r2, [r3, #8]
      break;
 8006e04:	e03c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 fbea 	bl	80075ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2150      	movs	r1, #80	@ 0x50
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fcf9 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006e24:	e02c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e32:	461a      	mov	r2, r3
 8006e34:	f000 fc46 	bl	80076c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2160      	movs	r1, #96	@ 0x60
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fce9 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006e44:	e01c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 fbca 	bl	80075ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2140      	movs	r1, #64	@ 0x40
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fcd9 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 fcd0 	bl	8007816 <TIM_ITRx_SetConfig>
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	fffeff88 	.word	0xfffeff88

08006ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a46      	ldr	r2, [pc, #280]	@ (800701c <TIM_Base_SetConfig+0x12c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d013      	beq.n	8006f30 <TIM_Base_SetConfig+0x40>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0e:	d00f      	beq.n	8006f30 <TIM_Base_SetConfig+0x40>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a43      	ldr	r2, [pc, #268]	@ (8007020 <TIM_Base_SetConfig+0x130>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <TIM_Base_SetConfig+0x40>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a42      	ldr	r2, [pc, #264]	@ (8007024 <TIM_Base_SetConfig+0x134>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <TIM_Base_SetConfig+0x40>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a41      	ldr	r2, [pc, #260]	@ (8007028 <TIM_Base_SetConfig+0x138>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_Base_SetConfig+0x40>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a40      	ldr	r2, [pc, #256]	@ (800702c <TIM_Base_SetConfig+0x13c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d108      	bne.n	8006f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a35      	ldr	r2, [pc, #212]	@ (800701c <TIM_Base_SetConfig+0x12c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d02b      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f50:	d027      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a32      	ldr	r2, [pc, #200]	@ (8007020 <TIM_Base_SetConfig+0x130>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d023      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a31      	ldr	r2, [pc, #196]	@ (8007024 <TIM_Base_SetConfig+0x134>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01f      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a30      	ldr	r2, [pc, #192]	@ (8007028 <TIM_Base_SetConfig+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01b      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800702c <TIM_Base_SetConfig+0x13c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d017      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a2e      	ldr	r2, [pc, #184]	@ (8007030 <TIM_Base_SetConfig+0x140>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8007034 <TIM_Base_SetConfig+0x144>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00f      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a2c      	ldr	r2, [pc, #176]	@ (8007038 <TIM_Base_SetConfig+0x148>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800703c <TIM_Base_SetConfig+0x14c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2a      	ldr	r2, [pc, #168]	@ (8007040 <TIM_Base_SetConfig+0x150>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a29      	ldr	r2, [pc, #164]	@ (8007044 <TIM_Base_SetConfig+0x154>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d108      	bne.n	8006fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a10      	ldr	r2, [pc, #64]	@ (800701c <TIM_Base_SetConfig+0x12c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_Base_SetConfig+0xf8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a12      	ldr	r2, [pc, #72]	@ (800702c <TIM_Base_SetConfig+0x13c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d103      	bne.n	8006ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d105      	bne.n	800700e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	611a      	str	r2, [r3, #16]
  }
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40010400 	.word	0x40010400
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800
 800703c:	40001800 	.word	0x40001800
 8007040:	40001c00 	.word	0x40001c00
 8007044:	40002000 	.word	0x40002000

08007048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f023 0201 	bic.w	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4b2b      	ldr	r3, [pc, #172]	@ (8007120 <TIM_OC1_SetConfig+0xd8>)
 8007074:	4013      	ands	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0303 	bic.w	r3, r3, #3
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 0302 	bic.w	r3, r3, #2
 8007090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a21      	ldr	r2, [pc, #132]	@ (8007124 <TIM_OC1_SetConfig+0xdc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC1_SetConfig+0x64>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a20      	ldr	r2, [pc, #128]	@ (8007128 <TIM_OC1_SetConfig+0xe0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d10c      	bne.n	80070c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 0308 	bic.w	r3, r3, #8
 80070b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 0304 	bic.w	r3, r3, #4
 80070c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a16      	ldr	r2, [pc, #88]	@ (8007124 <TIM_OC1_SetConfig+0xdc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_OC1_SetConfig+0x8e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <TIM_OC1_SetConfig+0xe0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d111      	bne.n	80070fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	fffeff8f 	.word	0xfffeff8f
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400

0800712c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f023 0210 	bic.w	r2, r3, #16
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4b2e      	ldr	r3, [pc, #184]	@ (8007210 <TIM_OC2_SetConfig+0xe4>)
 8007158:	4013      	ands	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0320 	bic.w	r3, r3, #32
 8007176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a23      	ldr	r2, [pc, #140]	@ (8007214 <TIM_OC2_SetConfig+0xe8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC2_SetConfig+0x68>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a22      	ldr	r2, [pc, #136]	@ (8007218 <TIM_OC2_SetConfig+0xec>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10d      	bne.n	80071b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a18      	ldr	r2, [pc, #96]	@ (8007214 <TIM_OC2_SetConfig+0xe8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_OC2_SetConfig+0x94>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a17      	ldr	r2, [pc, #92]	@ (8007218 <TIM_OC2_SetConfig+0xec>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d113      	bne.n	80071e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	feff8fff 	.word	0xfeff8fff
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400

0800721c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4b2d      	ldr	r3, [pc, #180]	@ (80072fc <TIM_OC3_SetConfig+0xe0>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a22      	ldr	r2, [pc, #136]	@ (8007300 <TIM_OC3_SetConfig+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_OC3_SetConfig+0x66>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a21      	ldr	r2, [pc, #132]	@ (8007304 <TIM_OC3_SetConfig+0xe8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d10d      	bne.n	800729e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	021b      	lsls	r3, r3, #8
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800729c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a17      	ldr	r2, [pc, #92]	@ (8007300 <TIM_OC3_SetConfig+0xe4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC3_SetConfig+0x92>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a16      	ldr	r2, [pc, #88]	@ (8007304 <TIM_OC3_SetConfig+0xe8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d113      	bne.n	80072d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	621a      	str	r2, [r3, #32]
}
 80072f0:	bf00      	nop
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	fffeff8f 	.word	0xfffeff8f
 8007300:	40010000 	.word	0x40010000
 8007304:	40010400 	.word	0x40010400

08007308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4b1e      	ldr	r3, [pc, #120]	@ (80073ac <TIM_OC4_SetConfig+0xa4>)
 8007334:	4013      	ands	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800733e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a13      	ldr	r2, [pc, #76]	@ (80073b0 <TIM_OC4_SetConfig+0xa8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d003      	beq.n	8007370 <TIM_OC4_SetConfig+0x68>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a12      	ldr	r2, [pc, #72]	@ (80073b4 <TIM_OC4_SetConfig+0xac>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d109      	bne.n	8007384 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	019b      	lsls	r3, r3, #6
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	feff8fff 	.word	0xfeff8fff
 80073b0:	40010000 	.word	0x40010000
 80073b4:	40010400 	.word	0x40010400

080073b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007450 <TIM_OC5_SetConfig+0x98>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a12      	ldr	r2, [pc, #72]	@ (8007454 <TIM_OC5_SetConfig+0x9c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_OC5_SetConfig+0x5e>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a11      	ldr	r2, [pc, #68]	@ (8007458 <TIM_OC5_SetConfig+0xa0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d109      	bne.n	800742a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	fffeff8f 	.word	0xfffeff8f
 8007454:	40010000 	.word	0x40010000
 8007458:	40010400 	.word	0x40010400

0800745c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4b1c      	ldr	r3, [pc, #112]	@ (80074f8 <TIM_OC6_SetConfig+0x9c>)
 8007488:	4013      	ands	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800749e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	051b      	lsls	r3, r3, #20
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a13      	ldr	r2, [pc, #76]	@ (80074fc <TIM_OC6_SetConfig+0xa0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC6_SetConfig+0x60>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a12      	ldr	r2, [pc, #72]	@ (8007500 <TIM_OC6_SetConfig+0xa4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d109      	bne.n	80074d0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	029b      	lsls	r3, r3, #10
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	feff8fff 	.word	0xfeff8fff
 80074fc:	40010000 	.word	0x40010000
 8007500:	40010400 	.word	0x40010400

08007504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f023 0201 	bic.w	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a28      	ldr	r2, [pc, #160]	@ (80075d0 <TIM_TI1_SetConfig+0xcc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01b      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007538:	d017      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a25      	ldr	r2, [pc, #148]	@ (80075d4 <TIM_TI1_SetConfig+0xd0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a24      	ldr	r2, [pc, #144]	@ (80075d8 <TIM_TI1_SetConfig+0xd4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a23      	ldr	r2, [pc, #140]	@ (80075dc <TIM_TI1_SetConfig+0xd8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4a22      	ldr	r2, [pc, #136]	@ (80075e0 <TIM_TI1_SetConfig+0xdc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a21      	ldr	r2, [pc, #132]	@ (80075e4 <TIM_TI1_SetConfig+0xe0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_TI1_SetConfig+0x66>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4a20      	ldr	r2, [pc, #128]	@ (80075e8 <TIM_TI1_SetConfig+0xe4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d101      	bne.n	800756e <TIM_TI1_SetConfig+0x6a>
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <TIM_TI1_SetConfig+0x6c>
 800756e:	2300      	movs	r3, #0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	e003      	b.n	800758e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	b2db      	uxtb	r3, r3
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f023 030a 	bic.w	r3, r3, #10
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f003 030a 	and.w	r3, r3, #10
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40010400 	.word	0x40010400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40001800 	.word	0x40001800

080075ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f023 0201 	bic.w	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f023 030a 	bic.w	r3, r3, #10
 8007628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800764a:	b480      	push	{r7}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f023 0210 	bic.w	r2, r3, #16
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	021b      	lsls	r3, r3, #8
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	4313      	orrs	r3, r2
 8007680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	031b      	lsls	r3, r3, #12
 800768e:	b29b      	uxth	r3, r3
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800769c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0210 	bic.w	r2, r3, #16
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	031b      	lsls	r3, r3, #12
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007700:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	621a      	str	r2, [r3, #32]
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007760:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	b2db      	uxtb	r3, r3
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	031b      	lsls	r3, r3, #12
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80077ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	031b      	lsls	r3, r3, #12
 80077f4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800782c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	f043 0307 	orr.w	r3, r3, #7
 8007838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	021a      	lsls	r2, r3, #8
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	431a      	orrs	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4313      	orrs	r3, r2
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	609a      	str	r2, [r3, #8]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2201      	movs	r2, #1
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	401a      	ands	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d101      	bne.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e06d      	b.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a30      	ldr	r2, [pc, #192]	@ (80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d004      	beq.n	8007924 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a2f      	ldr	r2, [pc, #188]	@ (80079dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d108      	bne.n	8007936 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800792a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a20      	ldr	r2, [pc, #128]	@ (80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d022      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007962:	d01d      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1d      	ldr	r2, [pc, #116]	@ (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d018      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1c      	ldr	r2, [pc, #112]	@ (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d013      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1a      	ldr	r2, [pc, #104]	@ (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00e      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a15      	ldr	r2, [pc, #84]	@ (80079dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d009      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a16      	ldr	r2, [pc, #88]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d004      	beq.n	80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a15      	ldr	r2, [pc, #84]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10c      	bne.n	80079ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40010000 	.word	0x40010000
 80079dc:	40010400 	.word	0x40010400
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800
 80079e8:	40000c00 	.word	0x40000c00
 80079ec:	40014000 	.word	0x40014000
 80079f0:	40001800 	.word	0x40001800

080079f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e065      	b.n	8007adc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	041b      	lsls	r3, r3, #16
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a14      	ldr	r2, [pc, #80]	@ (8007aec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d115      	bne.n	8007aca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	051b      	lsls	r3, r3, #20
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40010000 	.word	0x40010000
 8007aec:	40010400 	.word	0x40010400

08007af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e040      	b.n	8007bc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fb f824 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2224      	movs	r2, #36	@ 0x24
 8007b58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0201 	bic.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb54 	bl	8008220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8ed 	bl	8007d58 <UART_SetConfig>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e01b      	b.n	8007bc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fbd3 	bl	8008364 <UART_CheckIdleState>
 8007bbe:	4603      	mov	r3, r0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	@ 0x28
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	f040 80b5 	bne.w	8007d4e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_UART_Receive+0x28>
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0ad      	b.n	8007d50 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2222      	movs	r2, #34	@ 0x22
 8007c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c0a:	f7fb fb23 	bl	8003254 <HAL_GetTick>
 8007c0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	88fa      	ldrh	r2, [r7, #6]
 8007c14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	88fa      	ldrh	r2, [r7, #6]
 8007c1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c28:	d10e      	bne.n	8007c48 <HAL_UART_Receive+0x80>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <HAL_UART_Receive+0x76>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c3c:	e02d      	b.n	8007c9a <HAL_UART_Receive+0xd2>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	22ff      	movs	r2, #255	@ 0xff
 8007c42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c46:	e028      	b.n	8007c9a <HAL_UART_Receive+0xd2>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10d      	bne.n	8007c6c <HAL_UART_Receive+0xa4>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <HAL_UART_Receive+0x9a>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	22ff      	movs	r2, #255	@ 0xff
 8007c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c60:	e01b      	b.n	8007c9a <HAL_UART_Receive+0xd2>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	227f      	movs	r2, #127	@ 0x7f
 8007c66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c6a:	e016      	b.n	8007c9a <HAL_UART_Receive+0xd2>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c74:	d10d      	bne.n	8007c92 <HAL_UART_Receive+0xca>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <HAL_UART_Receive+0xc0>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	227f      	movs	r2, #127	@ 0x7f
 8007c82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c86:	e008      	b.n	8007c9a <HAL_UART_Receive+0xd2>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	223f      	movs	r2, #63	@ 0x3f
 8007c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007c90:	e003      	b.n	8007c9a <HAL_UART_Receive+0xd2>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ca0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007caa:	d108      	bne.n	8007cbe <HAL_UART_Receive+0xf6>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	e003      	b.n	8007cc6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007cc6:	e036      	b.n	8007d36 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2120      	movs	r1, #32
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fbee 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e032      	b.n	8007d50 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10c      	bne.n	8007d0a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	8a7b      	ldrh	r3, [r7, #18]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	3302      	adds	r3, #2
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	e00c      	b.n	8007d24 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	8a7b      	ldrh	r3, [r7, #18]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	4013      	ands	r3, r2
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	3301      	adds	r3, #1
 8007d22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1c2      	bne.n	8007cc8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007d4e:	2302      	movs	r3, #2
  }
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4ba6      	ldr	r3, [pc, #664]	@ (800801c <UART_SetConfig+0x2c4>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	6979      	ldr	r1, [r7, #20]
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a94      	ldr	r2, [pc, #592]	@ (8008020 <UART_SetConfig+0x2c8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d120      	bne.n	8007e16 <UART_SetConfig+0xbe>
 8007dd4:	4b93      	ldr	r3, [pc, #588]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d816      	bhi.n	8007e10 <UART_SetConfig+0xb8>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0x90>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007df9 	.word	0x08007df9
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007dff 	.word	0x08007dff
 8007df4:	08007e0b 	.word	0x08007e0b
 8007df8:	2301      	movs	r3, #1
 8007dfa:	77fb      	strb	r3, [r7, #31]
 8007dfc:	e150      	b.n	80080a0 <UART_SetConfig+0x348>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e14d      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e04:	2304      	movs	r3, #4
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e14a      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e0a:	2308      	movs	r3, #8
 8007e0c:	77fb      	strb	r3, [r7, #31]
 8007e0e:	e147      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e10:	2310      	movs	r3, #16
 8007e12:	77fb      	strb	r3, [r7, #31]
 8007e14:	e144      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a83      	ldr	r2, [pc, #524]	@ (8008028 <UART_SetConfig+0x2d0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d132      	bne.n	8007e86 <UART_SetConfig+0x12e>
 8007e20:	4b80      	ldr	r3, [pc, #512]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e26:	f003 030c 	and.w	r3, r3, #12
 8007e2a:	2b0c      	cmp	r3, #12
 8007e2c:	d828      	bhi.n	8007e80 <UART_SetConfig+0x128>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <UART_SetConfig+0xdc>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e69 	.word	0x08007e69
 8007e38:	08007e81 	.word	0x08007e81
 8007e3c:	08007e81 	.word	0x08007e81
 8007e40:	08007e81 	.word	0x08007e81
 8007e44:	08007e75 	.word	0x08007e75
 8007e48:	08007e81 	.word	0x08007e81
 8007e4c:	08007e81 	.word	0x08007e81
 8007e50:	08007e81 	.word	0x08007e81
 8007e54:	08007e6f 	.word	0x08007e6f
 8007e58:	08007e81 	.word	0x08007e81
 8007e5c:	08007e81 	.word	0x08007e81
 8007e60:	08007e81 	.word	0x08007e81
 8007e64:	08007e7b 	.word	0x08007e7b
 8007e68:	2300      	movs	r3, #0
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e118      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	77fb      	strb	r3, [r7, #31]
 8007e72:	e115      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e74:	2304      	movs	r3, #4
 8007e76:	77fb      	strb	r3, [r7, #31]
 8007e78:	e112      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e7a:	2308      	movs	r3, #8
 8007e7c:	77fb      	strb	r3, [r7, #31]
 8007e7e:	e10f      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e80:	2310      	movs	r3, #16
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e10c      	b.n	80080a0 <UART_SetConfig+0x348>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a68      	ldr	r2, [pc, #416]	@ (800802c <UART_SetConfig+0x2d4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d120      	bne.n	8007ed2 <UART_SetConfig+0x17a>
 8007e90:	4b64      	ldr	r3, [pc, #400]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e96:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e9a:	2b30      	cmp	r3, #48	@ 0x30
 8007e9c:	d013      	beq.n	8007ec6 <UART_SetConfig+0x16e>
 8007e9e:	2b30      	cmp	r3, #48	@ 0x30
 8007ea0:	d814      	bhi.n	8007ecc <UART_SetConfig+0x174>
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d009      	beq.n	8007eba <UART_SetConfig+0x162>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d810      	bhi.n	8007ecc <UART_SetConfig+0x174>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <UART_SetConfig+0x15c>
 8007eae:	2b10      	cmp	r3, #16
 8007eb0:	d006      	beq.n	8007ec0 <UART_SetConfig+0x168>
 8007eb2:	e00b      	b.n	8007ecc <UART_SetConfig+0x174>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e0f2      	b.n	80080a0 <UART_SetConfig+0x348>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e0ef      	b.n	80080a0 <UART_SetConfig+0x348>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e0ec      	b.n	80080a0 <UART_SetConfig+0x348>
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e0e9      	b.n	80080a0 <UART_SetConfig+0x348>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e0e6      	b.n	80080a0 <UART_SetConfig+0x348>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a56      	ldr	r2, [pc, #344]	@ (8008030 <UART_SetConfig+0x2d8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d120      	bne.n	8007f1e <UART_SetConfig+0x1c6>
 8007edc:	4b51      	ldr	r3, [pc, #324]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee8:	d013      	beq.n	8007f12 <UART_SetConfig+0x1ba>
 8007eea:	2bc0      	cmp	r3, #192	@ 0xc0
 8007eec:	d814      	bhi.n	8007f18 <UART_SetConfig+0x1c0>
 8007eee:	2b80      	cmp	r3, #128	@ 0x80
 8007ef0:	d009      	beq.n	8007f06 <UART_SetConfig+0x1ae>
 8007ef2:	2b80      	cmp	r3, #128	@ 0x80
 8007ef4:	d810      	bhi.n	8007f18 <UART_SetConfig+0x1c0>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <UART_SetConfig+0x1a8>
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d006      	beq.n	8007f0c <UART_SetConfig+0x1b4>
 8007efe:	e00b      	b.n	8007f18 <UART_SetConfig+0x1c0>
 8007f00:	2300      	movs	r3, #0
 8007f02:	77fb      	strb	r3, [r7, #31]
 8007f04:	e0cc      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f06:	2302      	movs	r3, #2
 8007f08:	77fb      	strb	r3, [r7, #31]
 8007f0a:	e0c9      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	77fb      	strb	r3, [r7, #31]
 8007f10:	e0c6      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f12:	2308      	movs	r3, #8
 8007f14:	77fb      	strb	r3, [r7, #31]
 8007f16:	e0c3      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	77fb      	strb	r3, [r7, #31]
 8007f1c:	e0c0      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a44      	ldr	r2, [pc, #272]	@ (8008034 <UART_SetConfig+0x2dc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d125      	bne.n	8007f74 <UART_SetConfig+0x21c>
 8007f28:	4b3e      	ldr	r3, [pc, #248]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f36:	d017      	beq.n	8007f68 <UART_SetConfig+0x210>
 8007f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f3c:	d817      	bhi.n	8007f6e <UART_SetConfig+0x216>
 8007f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f42:	d00b      	beq.n	8007f5c <UART_SetConfig+0x204>
 8007f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f48:	d811      	bhi.n	8007f6e <UART_SetConfig+0x216>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <UART_SetConfig+0x1fe>
 8007f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f52:	d006      	beq.n	8007f62 <UART_SetConfig+0x20a>
 8007f54:	e00b      	b.n	8007f6e <UART_SetConfig+0x216>
 8007f56:	2300      	movs	r3, #0
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e0a1      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e09e      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f62:	2304      	movs	r3, #4
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e09b      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e098      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f6e:	2310      	movs	r3, #16
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e095      	b.n	80080a0 <UART_SetConfig+0x348>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a2f      	ldr	r2, [pc, #188]	@ (8008038 <UART_SetConfig+0x2e0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d125      	bne.n	8007fca <UART_SetConfig+0x272>
 8007f7e:	4b29      	ldr	r3, [pc, #164]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f8c:	d017      	beq.n	8007fbe <UART_SetConfig+0x266>
 8007f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f92:	d817      	bhi.n	8007fc4 <UART_SetConfig+0x26c>
 8007f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f98:	d00b      	beq.n	8007fb2 <UART_SetConfig+0x25a>
 8007f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f9e:	d811      	bhi.n	8007fc4 <UART_SetConfig+0x26c>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <UART_SetConfig+0x254>
 8007fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa8:	d006      	beq.n	8007fb8 <UART_SetConfig+0x260>
 8007faa:	e00b      	b.n	8007fc4 <UART_SetConfig+0x26c>
 8007fac:	2301      	movs	r3, #1
 8007fae:	77fb      	strb	r3, [r7, #31]
 8007fb0:	e076      	b.n	80080a0 <UART_SetConfig+0x348>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	77fb      	strb	r3, [r7, #31]
 8007fb6:	e073      	b.n	80080a0 <UART_SetConfig+0x348>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	77fb      	strb	r3, [r7, #31]
 8007fbc:	e070      	b.n	80080a0 <UART_SetConfig+0x348>
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	77fb      	strb	r3, [r7, #31]
 8007fc2:	e06d      	b.n	80080a0 <UART_SetConfig+0x348>
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	77fb      	strb	r3, [r7, #31]
 8007fc8:	e06a      	b.n	80080a0 <UART_SetConfig+0x348>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1b      	ldr	r2, [pc, #108]	@ (800803c <UART_SetConfig+0x2e4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d138      	bne.n	8008046 <UART_SetConfig+0x2ee>
 8007fd4:	4b13      	ldr	r3, [pc, #76]	@ (8008024 <UART_SetConfig+0x2cc>)
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fda:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007fde:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fe2:	d017      	beq.n	8008014 <UART_SetConfig+0x2bc>
 8007fe4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fe8:	d82a      	bhi.n	8008040 <UART_SetConfig+0x2e8>
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fee:	d00b      	beq.n	8008008 <UART_SetConfig+0x2b0>
 8007ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff4:	d824      	bhi.n	8008040 <UART_SetConfig+0x2e8>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <UART_SetConfig+0x2aa>
 8007ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ffe:	d006      	beq.n	800800e <UART_SetConfig+0x2b6>
 8008000:	e01e      	b.n	8008040 <UART_SetConfig+0x2e8>
 8008002:	2300      	movs	r3, #0
 8008004:	77fb      	strb	r3, [r7, #31]
 8008006:	e04b      	b.n	80080a0 <UART_SetConfig+0x348>
 8008008:	2302      	movs	r3, #2
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e048      	b.n	80080a0 <UART_SetConfig+0x348>
 800800e:	2304      	movs	r3, #4
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e045      	b.n	80080a0 <UART_SetConfig+0x348>
 8008014:	2308      	movs	r3, #8
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e042      	b.n	80080a0 <UART_SetConfig+0x348>
 800801a:	bf00      	nop
 800801c:	efff69f3 	.word	0xefff69f3
 8008020:	40011000 	.word	0x40011000
 8008024:	40023800 	.word	0x40023800
 8008028:	40004400 	.word	0x40004400
 800802c:	40004800 	.word	0x40004800
 8008030:	40004c00 	.word	0x40004c00
 8008034:	40005000 	.word	0x40005000
 8008038:	40011400 	.word	0x40011400
 800803c:	40007800 	.word	0x40007800
 8008040:	2310      	movs	r3, #16
 8008042:	77fb      	strb	r3, [r7, #31]
 8008044:	e02c      	b.n	80080a0 <UART_SetConfig+0x348>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a72      	ldr	r2, [pc, #456]	@ (8008214 <UART_SetConfig+0x4bc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d125      	bne.n	800809c <UART_SetConfig+0x344>
 8008050:	4b71      	ldr	r3, [pc, #452]	@ (8008218 <UART_SetConfig+0x4c0>)
 8008052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008056:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800805a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800805e:	d017      	beq.n	8008090 <UART_SetConfig+0x338>
 8008060:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008064:	d817      	bhi.n	8008096 <UART_SetConfig+0x33e>
 8008066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800806a:	d00b      	beq.n	8008084 <UART_SetConfig+0x32c>
 800806c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008070:	d811      	bhi.n	8008096 <UART_SetConfig+0x33e>
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <UART_SetConfig+0x326>
 8008076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807a:	d006      	beq.n	800808a <UART_SetConfig+0x332>
 800807c:	e00b      	b.n	8008096 <UART_SetConfig+0x33e>
 800807e:	2300      	movs	r3, #0
 8008080:	77fb      	strb	r3, [r7, #31]
 8008082:	e00d      	b.n	80080a0 <UART_SetConfig+0x348>
 8008084:	2302      	movs	r3, #2
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e00a      	b.n	80080a0 <UART_SetConfig+0x348>
 800808a:	2304      	movs	r3, #4
 800808c:	77fb      	strb	r3, [r7, #31]
 800808e:	e007      	b.n	80080a0 <UART_SetConfig+0x348>
 8008090:	2308      	movs	r3, #8
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e004      	b.n	80080a0 <UART_SetConfig+0x348>
 8008096:	2310      	movs	r3, #16
 8008098:	77fb      	strb	r3, [r7, #31]
 800809a:	e001      	b.n	80080a0 <UART_SetConfig+0x348>
 800809c:	2310      	movs	r3, #16
 800809e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a8:	d15b      	bne.n	8008162 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80080aa:	7ffb      	ldrb	r3, [r7, #31]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d828      	bhi.n	8008102 <UART_SetConfig+0x3aa>
 80080b0:	a201      	add	r2, pc, #4	@ (adr r2, 80080b8 <UART_SetConfig+0x360>)
 80080b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b6:	bf00      	nop
 80080b8:	080080dd 	.word	0x080080dd
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080ed 	.word	0x080080ed
 80080c4:	08008103 	.word	0x08008103
 80080c8:	080080f3 	.word	0x080080f3
 80080cc:	08008103 	.word	0x08008103
 80080d0:	08008103 	.word	0x08008103
 80080d4:	08008103 	.word	0x08008103
 80080d8:	080080fb 	.word	0x080080fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080dc:	f7fd f9d2 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 80080e0:	61b8      	str	r0, [r7, #24]
        break;
 80080e2:	e013      	b.n	800810c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e4:	f7fd f9e2 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 80080e8:	61b8      	str	r0, [r7, #24]
        break;
 80080ea:	e00f      	b.n	800810c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ec:	4b4b      	ldr	r3, [pc, #300]	@ (800821c <UART_SetConfig+0x4c4>)
 80080ee:	61bb      	str	r3, [r7, #24]
        break;
 80080f0:	e00c      	b.n	800810c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080f2:	f7fd f8b5 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80080f6:	61b8      	str	r0, [r7, #24]
        break;
 80080f8:	e008      	b.n	800810c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080fe:	61bb      	str	r3, [r7, #24]
        break;
 8008100:	e004      	b.n	800810c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	77bb      	strb	r3, [r7, #30]
        break;
 800810a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d074      	beq.n	80081fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	005a      	lsls	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	441a      	add	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d916      	bls.n	800815c <UART_SetConfig+0x404>
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008134:	d212      	bcs.n	800815c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	b29b      	uxth	r3, r3
 800813a:	f023 030f 	bic.w	r3, r3, #15
 800813e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	b29a      	uxth	r2, r3
 800814c:	89fb      	ldrh	r3, [r7, #14]
 800814e:	4313      	orrs	r3, r2
 8008150:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	89fa      	ldrh	r2, [r7, #14]
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	e04f      	b.n	80081fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	77bb      	strb	r3, [r7, #30]
 8008160:	e04c      	b.n	80081fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	2b08      	cmp	r3, #8
 8008166:	d828      	bhi.n	80081ba <UART_SetConfig+0x462>
 8008168:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0x418>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008195 	.word	0x08008195
 8008174:	0800819d 	.word	0x0800819d
 8008178:	080081a5 	.word	0x080081a5
 800817c:	080081bb 	.word	0x080081bb
 8008180:	080081ab 	.word	0x080081ab
 8008184:	080081bb 	.word	0x080081bb
 8008188:	080081bb 	.word	0x080081bb
 800818c:	080081bb 	.word	0x080081bb
 8008190:	080081b3 	.word	0x080081b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008194:	f7fd f976 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8008198:	61b8      	str	r0, [r7, #24]
        break;
 800819a:	e013      	b.n	80081c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800819c:	f7fd f986 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 80081a0:	61b8      	str	r0, [r7, #24]
        break;
 80081a2:	e00f      	b.n	80081c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a4:	4b1d      	ldr	r3, [pc, #116]	@ (800821c <UART_SetConfig+0x4c4>)
 80081a6:	61bb      	str	r3, [r7, #24]
        break;
 80081a8:	e00c      	b.n	80081c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081aa:	f7fd f859 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80081ae:	61b8      	str	r0, [r7, #24]
        break;
 80081b0:	e008      	b.n	80081c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b6:	61bb      	str	r3, [r7, #24]
        break;
 80081b8:	e004      	b.n	80081c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	77bb      	strb	r3, [r7, #30]
        break;
 80081c2:	bf00      	nop
    }

    if (pclk != 0U)
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d018      	beq.n	80081fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	085a      	lsrs	r2, r3, #1
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	441a      	add	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b0f      	cmp	r3, #15
 80081e2:	d909      	bls.n	80081f8 <UART_SetConfig+0x4a0>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ea:	d205      	bcs.n	80081f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	e001      	b.n	80081fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008208:	7fbb      	ldrb	r3, [r7, #30]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	40007c00 	.word	0x40007c00
 8008218:	40023800 	.word	0x40023800
 800821c:	00f42400 	.word	0x00f42400

08008220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00a      	beq.n	800824a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008292:	f003 0304 	and.w	r3, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01a      	beq.n	8008336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831e:	d10a      	bne.n	8008336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b098      	sub	sp, #96	@ 0x60
 8008368:	af02      	add	r7, sp, #8
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008374:	f7fa ff6e 	bl	8003254 <HAL_GetTick>
 8008378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0308 	and.w	r3, r3, #8
 8008384:	2b08      	cmp	r3, #8
 8008386:	d12e      	bne.n	80083e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008390:	2200      	movs	r2, #0
 8008392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f88c 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d021      	beq.n	80083e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e6      	bne.n	80083a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e062      	b.n	80084ac <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d149      	bne.n	8008488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083fc:	2200      	movs	r2, #0
 80083fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f856 	bl	80084b4 <UART_WaitOnFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d03c      	beq.n	8008488 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	623b      	str	r3, [r7, #32]
   return(result);
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842c:	633b      	str	r3, [r7, #48]	@ 0x30
 800842e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800843a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e6      	bne.n	800840e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008460:	61fa      	str	r2, [r7, #28]
 8008462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	69b9      	ldr	r1, [r7, #24]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	617b      	str	r3, [r7, #20]
   return(result);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e5      	bne.n	8008440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e011      	b.n	80084ac <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3758      	adds	r7, #88	@ 0x58
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c4:	e04f      	b.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d04b      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ce:	f7fa fec1 	bl	8003254 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d302      	bcc.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e04e      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d037      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b80      	cmp	r3, #128	@ 0x80
 80084fa:	d034      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b40      	cmp	r3, #64	@ 0x40
 8008500:	d031      	beq.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d110      	bne.n	8008532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2208      	movs	r2, #8
 8008516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f838 	bl	800858e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2208      	movs	r2, #8
 8008522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e029      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800853c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008540:	d111      	bne.n	8008566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800854a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f81e 	bl	800858e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e00f      	b.n	8008586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69da      	ldr	r2, [r3, #28]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4013      	ands	r3, r2
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	429a      	cmp	r2, r3
 8008574:	bf0c      	ite	eq
 8008576:	2301      	moveq	r3, #1
 8008578:	2300      	movne	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	429a      	cmp	r2, r3
 8008582:	d0a0      	beq.n	80084c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800858e:	b480      	push	{r7}
 8008590:	b095      	sub	sp, #84	@ 0x54
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80085b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e6      	bne.n	8008596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3308      	adds	r3, #8
 80085ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3308      	adds	r3, #8
 80085e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e5      	bne.n	80085c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008600:	2b01      	cmp	r3, #1
 8008602:	d118      	bne.n	8008636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	60bb      	str	r3, [r7, #8]
   return(result);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f023 0310 	bic.w	r3, r3, #16
 8008618:	647b      	str	r3, [r7, #68]	@ 0x44
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6979      	ldr	r1, [r7, #20]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	613b      	str	r3, [r7, #16]
   return(result);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e6      	bne.n	8008604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800864a:	bf00      	nop
 800864c:	3754      	adds	r7, #84	@ 0x54
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <atof>:
 8008656:	2100      	movs	r1, #0
 8008658:	f000 bdb4 	b.w	80091c4 <strtod>

0800865c <sulp>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	4616      	mov	r6, r2
 8008664:	ec45 4b10 	vmov	d0, r4, r5
 8008668:	f002 f816 	bl	800a698 <__ulp>
 800866c:	b17e      	cbz	r6, 800868e <sulp+0x32>
 800866e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008672:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008676:	2b00      	cmp	r3, #0
 8008678:	dd09      	ble.n	800868e <sulp+0x32>
 800867a:	051b      	lsls	r3, r3, #20
 800867c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8008680:	2000      	movs	r0, #0
 8008682:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008686:	ec41 0b17 	vmov	d7, r0, r1
 800868a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800868e:	bd70      	pop	{r4, r5, r6, pc}

08008690 <_strtod_l>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ed2d 8b0a 	vpush	{d8-d12}
 8008698:	b097      	sub	sp, #92	@ 0x5c
 800869a:	4688      	mov	r8, r1
 800869c:	920e      	str	r2, [sp, #56]	@ 0x38
 800869e:	2200      	movs	r2, #0
 80086a0:	9212      	str	r2, [sp, #72]	@ 0x48
 80086a2:	9005      	str	r0, [sp, #20]
 80086a4:	f04f 0a00 	mov.w	sl, #0
 80086a8:	f04f 0b00 	mov.w	fp, #0
 80086ac:	460a      	mov	r2, r1
 80086ae:	9211      	str	r2, [sp, #68]	@ 0x44
 80086b0:	7811      	ldrb	r1, [r2, #0]
 80086b2:	292b      	cmp	r1, #43	@ 0x2b
 80086b4:	d04c      	beq.n	8008750 <_strtod_l+0xc0>
 80086b6:	d839      	bhi.n	800872c <_strtod_l+0x9c>
 80086b8:	290d      	cmp	r1, #13
 80086ba:	d833      	bhi.n	8008724 <_strtod_l+0x94>
 80086bc:	2908      	cmp	r1, #8
 80086be:	d833      	bhi.n	8008728 <_strtod_l+0x98>
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d03c      	beq.n	800873e <_strtod_l+0xae>
 80086c4:	2200      	movs	r2, #0
 80086c6:	9208      	str	r2, [sp, #32]
 80086c8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80086ca:	782a      	ldrb	r2, [r5, #0]
 80086cc:	2a30      	cmp	r2, #48	@ 0x30
 80086ce:	f040 80b7 	bne.w	8008840 <_strtod_l+0x1b0>
 80086d2:	786a      	ldrb	r2, [r5, #1]
 80086d4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086d8:	2a58      	cmp	r2, #88	@ 0x58
 80086da:	d170      	bne.n	80087be <_strtod_l+0x12e>
 80086dc:	9302      	str	r3, [sp, #8]
 80086de:	9b08      	ldr	r3, [sp, #32]
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	ab12      	add	r3, sp, #72	@ 0x48
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4a90      	ldr	r2, [pc, #576]	@ (8008928 <_strtod_l+0x298>)
 80086e8:	9805      	ldr	r0, [sp, #20]
 80086ea:	ab13      	add	r3, sp, #76	@ 0x4c
 80086ec:	a911      	add	r1, sp, #68	@ 0x44
 80086ee:	f001 f8d5 	bl	800989c <__gethex>
 80086f2:	f010 060f 	ands.w	r6, r0, #15
 80086f6:	4604      	mov	r4, r0
 80086f8:	d005      	beq.n	8008706 <_strtod_l+0x76>
 80086fa:	2e06      	cmp	r6, #6
 80086fc:	d12a      	bne.n	8008754 <_strtod_l+0xc4>
 80086fe:	3501      	adds	r5, #1
 8008700:	2300      	movs	r3, #0
 8008702:	9511      	str	r5, [sp, #68]	@ 0x44
 8008704:	9308      	str	r3, [sp, #32]
 8008706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	f040 8537 	bne.w	800917c <_strtod_l+0xaec>
 800870e:	9b08      	ldr	r3, [sp, #32]
 8008710:	ec4b ab10 	vmov	d0, sl, fp
 8008714:	b1cb      	cbz	r3, 800874a <_strtod_l+0xba>
 8008716:	eeb1 0b40 	vneg.f64	d0, d0
 800871a:	b017      	add	sp, #92	@ 0x5c
 800871c:	ecbd 8b0a 	vpop	{d8-d12}
 8008720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	2920      	cmp	r1, #32
 8008726:	d1cd      	bne.n	80086c4 <_strtod_l+0x34>
 8008728:	3201      	adds	r2, #1
 800872a:	e7c0      	b.n	80086ae <_strtod_l+0x1e>
 800872c:	292d      	cmp	r1, #45	@ 0x2d
 800872e:	d1c9      	bne.n	80086c4 <_strtod_l+0x34>
 8008730:	2101      	movs	r1, #1
 8008732:	9108      	str	r1, [sp, #32]
 8008734:	1c51      	adds	r1, r2, #1
 8008736:	9111      	str	r1, [sp, #68]	@ 0x44
 8008738:	7852      	ldrb	r2, [r2, #1]
 800873a:	2a00      	cmp	r2, #0
 800873c:	d1c4      	bne.n	80086c8 <_strtod_l+0x38>
 800873e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008740:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008744:	2b00      	cmp	r3, #0
 8008746:	f040 8517 	bne.w	8009178 <_strtod_l+0xae8>
 800874a:	ec4b ab10 	vmov	d0, sl, fp
 800874e:	e7e4      	b.n	800871a <_strtod_l+0x8a>
 8008750:	2100      	movs	r1, #0
 8008752:	e7ee      	b.n	8008732 <_strtod_l+0xa2>
 8008754:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008756:	b13a      	cbz	r2, 8008768 <_strtod_l+0xd8>
 8008758:	2135      	movs	r1, #53	@ 0x35
 800875a:	a814      	add	r0, sp, #80	@ 0x50
 800875c:	f002 f893 	bl	800a886 <__copybits>
 8008760:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008762:	9805      	ldr	r0, [sp, #20]
 8008764:	f001 fc6c 	bl	800a040 <_Bfree>
 8008768:	1e73      	subs	r3, r6, #1
 800876a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800876c:	2b04      	cmp	r3, #4
 800876e:	d806      	bhi.n	800877e <_strtod_l+0xee>
 8008770:	e8df f003 	tbb	[pc, r3]
 8008774:	201d0314 	.word	0x201d0314
 8008778:	14          	.byte	0x14
 8008779:	00          	.byte	0x00
 800877a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800877e:	05e3      	lsls	r3, r4, #23
 8008780:	bf48      	it	mi
 8008782:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008786:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800878a:	0d1b      	lsrs	r3, r3, #20
 800878c:	051b      	lsls	r3, r3, #20
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1b9      	bne.n	8008706 <_strtod_l+0x76>
 8008792:	f000 ff8d 	bl	80096b0 <__errno>
 8008796:	2322      	movs	r3, #34	@ 0x22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	e7b4      	b.n	8008706 <_strtod_l+0x76>
 800879c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80087a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80087a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80087a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80087ac:	e7e7      	b.n	800877e <_strtod_l+0xee>
 80087ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008930 <_strtod_l+0x2a0>
 80087b2:	e7e4      	b.n	800877e <_strtod_l+0xee>
 80087b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80087b8:	f04f 3aff 	mov.w	sl, #4294967295
 80087bc:	e7df      	b.n	800877e <_strtod_l+0xee>
 80087be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	9211      	str	r2, [sp, #68]	@ 0x44
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b30      	cmp	r3, #48	@ 0x30
 80087c8:	d0f9      	beq.n	80087be <_strtod_l+0x12e>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d09b      	beq.n	8008706 <_strtod_l+0x76>
 80087ce:	2301      	movs	r3, #1
 80087d0:	9307      	str	r3, [sp, #28]
 80087d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d6:	2300      	movs	r3, #0
 80087d8:	9306      	str	r3, [sp, #24]
 80087da:	4699      	mov	r9, r3
 80087dc:	461d      	mov	r5, r3
 80087de:	220a      	movs	r2, #10
 80087e0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80087e2:	7804      	ldrb	r4, [r0, #0]
 80087e4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80087e8:	b2d9      	uxtb	r1, r3
 80087ea:	2909      	cmp	r1, #9
 80087ec:	d92a      	bls.n	8008844 <_strtod_l+0x1b4>
 80087ee:	494f      	ldr	r1, [pc, #316]	@ (800892c <_strtod_l+0x29c>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	f000 ff05 	bl	8009600 <strncmp>
 80087f6:	b398      	cbz	r0, 8008860 <_strtod_l+0x1d0>
 80087f8:	2000      	movs	r0, #0
 80087fa:	4622      	mov	r2, r4
 80087fc:	462b      	mov	r3, r5
 80087fe:	4607      	mov	r7, r0
 8008800:	4601      	mov	r1, r0
 8008802:	2a65      	cmp	r2, #101	@ 0x65
 8008804:	d001      	beq.n	800880a <_strtod_l+0x17a>
 8008806:	2a45      	cmp	r2, #69	@ 0x45
 8008808:	d118      	bne.n	800883c <_strtod_l+0x1ac>
 800880a:	b91b      	cbnz	r3, 8008814 <_strtod_l+0x184>
 800880c:	9b07      	ldr	r3, [sp, #28]
 800880e:	4303      	orrs	r3, r0
 8008810:	d095      	beq.n	800873e <_strtod_l+0xae>
 8008812:	2300      	movs	r3, #0
 8008814:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008818:	f108 0201 	add.w	r2, r8, #1
 800881c:	9211      	str	r2, [sp, #68]	@ 0x44
 800881e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008822:	2a2b      	cmp	r2, #43	@ 0x2b
 8008824:	d074      	beq.n	8008910 <_strtod_l+0x280>
 8008826:	2a2d      	cmp	r2, #45	@ 0x2d
 8008828:	d07a      	beq.n	8008920 <_strtod_l+0x290>
 800882a:	f04f 0e00 	mov.w	lr, #0
 800882e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008832:	2c09      	cmp	r4, #9
 8008834:	f240 8082 	bls.w	800893c <_strtod_l+0x2ac>
 8008838:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800883c:	2400      	movs	r4, #0
 800883e:	e09d      	b.n	800897c <_strtod_l+0x2ec>
 8008840:	2300      	movs	r3, #0
 8008842:	e7c5      	b.n	80087d0 <_strtod_l+0x140>
 8008844:	2d08      	cmp	r5, #8
 8008846:	bfc8      	it	gt
 8008848:	9906      	ldrgt	r1, [sp, #24]
 800884a:	f100 0001 	add.w	r0, r0, #1
 800884e:	bfca      	itet	gt
 8008850:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008854:	fb02 3909 	mlale	r9, r2, r9, r3
 8008858:	9306      	strgt	r3, [sp, #24]
 800885a:	3501      	adds	r5, #1
 800885c:	9011      	str	r0, [sp, #68]	@ 0x44
 800885e:	e7bf      	b.n	80087e0 <_strtod_l+0x150>
 8008860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	9211      	str	r2, [sp, #68]	@ 0x44
 8008866:	785a      	ldrb	r2, [r3, #1]
 8008868:	b3bd      	cbz	r5, 80088da <_strtod_l+0x24a>
 800886a:	4607      	mov	r7, r0
 800886c:	462b      	mov	r3, r5
 800886e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008872:	2909      	cmp	r1, #9
 8008874:	d912      	bls.n	800889c <_strtod_l+0x20c>
 8008876:	2101      	movs	r1, #1
 8008878:	e7c3      	b.n	8008802 <_strtod_l+0x172>
 800887a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008880:	785a      	ldrb	r2, [r3, #1]
 8008882:	3001      	adds	r0, #1
 8008884:	2a30      	cmp	r2, #48	@ 0x30
 8008886:	d0f8      	beq.n	800887a <_strtod_l+0x1ea>
 8008888:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800888c:	2b08      	cmp	r3, #8
 800888e:	f200 847a 	bhi.w	8009186 <_strtod_l+0xaf6>
 8008892:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008894:	930a      	str	r3, [sp, #40]	@ 0x28
 8008896:	4607      	mov	r7, r0
 8008898:	2000      	movs	r0, #0
 800889a:	4603      	mov	r3, r0
 800889c:	3a30      	subs	r2, #48	@ 0x30
 800889e:	f100 0101 	add.w	r1, r0, #1
 80088a2:	d014      	beq.n	80088ce <_strtod_l+0x23e>
 80088a4:	440f      	add	r7, r1
 80088a6:	469c      	mov	ip, r3
 80088a8:	f04f 0e0a 	mov.w	lr, #10
 80088ac:	f10c 0401 	add.w	r4, ip, #1
 80088b0:	1ae6      	subs	r6, r4, r3
 80088b2:	42b1      	cmp	r1, r6
 80088b4:	dc13      	bgt.n	80088de <_strtod_l+0x24e>
 80088b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80088ba:	1819      	adds	r1, r3, r0
 80088bc:	2908      	cmp	r1, #8
 80088be:	f103 0301 	add.w	r3, r3, #1
 80088c2:	4403      	add	r3, r0
 80088c4:	dc19      	bgt.n	80088fa <_strtod_l+0x26a>
 80088c6:	210a      	movs	r1, #10
 80088c8:	fb01 2909 	mla	r9, r1, r9, r2
 80088cc:	2100      	movs	r1, #0
 80088ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80088d0:	1c50      	adds	r0, r2, #1
 80088d2:	9011      	str	r0, [sp, #68]	@ 0x44
 80088d4:	7852      	ldrb	r2, [r2, #1]
 80088d6:	4608      	mov	r0, r1
 80088d8:	e7c9      	b.n	800886e <_strtod_l+0x1de>
 80088da:	4628      	mov	r0, r5
 80088dc:	e7d2      	b.n	8008884 <_strtod_l+0x1f4>
 80088de:	f1bc 0f08 	cmp.w	ip, #8
 80088e2:	dc03      	bgt.n	80088ec <_strtod_l+0x25c>
 80088e4:	fb0e f909 	mul.w	r9, lr, r9
 80088e8:	46a4      	mov	ip, r4
 80088ea:	e7df      	b.n	80088ac <_strtod_l+0x21c>
 80088ec:	2c10      	cmp	r4, #16
 80088ee:	bfde      	ittt	le
 80088f0:	9e06      	ldrle	r6, [sp, #24]
 80088f2:	fb0e f606 	mulle.w	r6, lr, r6
 80088f6:	9606      	strle	r6, [sp, #24]
 80088f8:	e7f6      	b.n	80088e8 <_strtod_l+0x258>
 80088fa:	290f      	cmp	r1, #15
 80088fc:	bfdf      	itttt	le
 80088fe:	9806      	ldrle	r0, [sp, #24]
 8008900:	210a      	movle	r1, #10
 8008902:	fb01 2200 	mlale	r2, r1, r0, r2
 8008906:	9206      	strle	r2, [sp, #24]
 8008908:	e7e0      	b.n	80088cc <_strtod_l+0x23c>
 800890a:	2700      	movs	r7, #0
 800890c:	2101      	movs	r1, #1
 800890e:	e77d      	b.n	800880c <_strtod_l+0x17c>
 8008910:	f04f 0e00 	mov.w	lr, #0
 8008914:	f108 0202 	add.w	r2, r8, #2
 8008918:	9211      	str	r2, [sp, #68]	@ 0x44
 800891a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800891e:	e786      	b.n	800882e <_strtod_l+0x19e>
 8008920:	f04f 0e01 	mov.w	lr, #1
 8008924:	e7f6      	b.n	8008914 <_strtod_l+0x284>
 8008926:	bf00      	nop
 8008928:	0800b4a0 	.word	0x0800b4a0
 800892c:	0800b324 	.word	0x0800b324
 8008930:	7ff00000 	.word	0x7ff00000
 8008934:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008936:	1c54      	adds	r4, r2, #1
 8008938:	9411      	str	r4, [sp, #68]	@ 0x44
 800893a:	7852      	ldrb	r2, [r2, #1]
 800893c:	2a30      	cmp	r2, #48	@ 0x30
 800893e:	d0f9      	beq.n	8008934 <_strtod_l+0x2a4>
 8008940:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008944:	2c08      	cmp	r4, #8
 8008946:	f63f af79 	bhi.w	800883c <_strtod_l+0x1ac>
 800894a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800894e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008950:	9209      	str	r2, [sp, #36]	@ 0x24
 8008952:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008954:	1c54      	adds	r4, r2, #1
 8008956:	9411      	str	r4, [sp, #68]	@ 0x44
 8008958:	7852      	ldrb	r2, [r2, #1]
 800895a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800895e:	2e09      	cmp	r6, #9
 8008960:	d937      	bls.n	80089d2 <_strtod_l+0x342>
 8008962:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008964:	1ba4      	subs	r4, r4, r6
 8008966:	2c08      	cmp	r4, #8
 8008968:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800896c:	dc02      	bgt.n	8008974 <_strtod_l+0x2e4>
 800896e:	4564      	cmp	r4, ip
 8008970:	bfa8      	it	ge
 8008972:	4664      	movge	r4, ip
 8008974:	f1be 0f00 	cmp.w	lr, #0
 8008978:	d000      	beq.n	800897c <_strtod_l+0x2ec>
 800897a:	4264      	negs	r4, r4
 800897c:	2b00      	cmp	r3, #0
 800897e:	d14d      	bne.n	8008a1c <_strtod_l+0x38c>
 8008980:	9b07      	ldr	r3, [sp, #28]
 8008982:	4318      	orrs	r0, r3
 8008984:	f47f aebf 	bne.w	8008706 <_strtod_l+0x76>
 8008988:	2900      	cmp	r1, #0
 800898a:	f47f aed8 	bne.w	800873e <_strtod_l+0xae>
 800898e:	2a69      	cmp	r2, #105	@ 0x69
 8008990:	d027      	beq.n	80089e2 <_strtod_l+0x352>
 8008992:	dc24      	bgt.n	80089de <_strtod_l+0x34e>
 8008994:	2a49      	cmp	r2, #73	@ 0x49
 8008996:	d024      	beq.n	80089e2 <_strtod_l+0x352>
 8008998:	2a4e      	cmp	r2, #78	@ 0x4e
 800899a:	f47f aed0 	bne.w	800873e <_strtod_l+0xae>
 800899e:	4997      	ldr	r1, [pc, #604]	@ (8008bfc <_strtod_l+0x56c>)
 80089a0:	a811      	add	r0, sp, #68	@ 0x44
 80089a2:	f001 f99d 	bl	8009ce0 <__match>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f43f aec9 	beq.w	800873e <_strtod_l+0xae>
 80089ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b28      	cmp	r3, #40	@ 0x28
 80089b2:	d12d      	bne.n	8008a10 <_strtod_l+0x380>
 80089b4:	4992      	ldr	r1, [pc, #584]	@ (8008c00 <_strtod_l+0x570>)
 80089b6:	aa14      	add	r2, sp, #80	@ 0x50
 80089b8:	a811      	add	r0, sp, #68	@ 0x44
 80089ba:	f001 f9a5 	bl	8009d08 <__hexnan>
 80089be:	2805      	cmp	r0, #5
 80089c0:	d126      	bne.n	8008a10 <_strtod_l+0x380>
 80089c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80089c4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80089c8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80089cc:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80089d0:	e699      	b.n	8008706 <_strtod_l+0x76>
 80089d2:	240a      	movs	r4, #10
 80089d4:	fb04 2c0c 	mla	ip, r4, ip, r2
 80089d8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80089dc:	e7b9      	b.n	8008952 <_strtod_l+0x2c2>
 80089de:	2a6e      	cmp	r2, #110	@ 0x6e
 80089e0:	e7db      	b.n	800899a <_strtod_l+0x30a>
 80089e2:	4988      	ldr	r1, [pc, #544]	@ (8008c04 <_strtod_l+0x574>)
 80089e4:	a811      	add	r0, sp, #68	@ 0x44
 80089e6:	f001 f97b 	bl	8009ce0 <__match>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	f43f aea7 	beq.w	800873e <_strtod_l+0xae>
 80089f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089f2:	4985      	ldr	r1, [pc, #532]	@ (8008c08 <_strtod_l+0x578>)
 80089f4:	3b01      	subs	r3, #1
 80089f6:	a811      	add	r0, sp, #68	@ 0x44
 80089f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80089fa:	f001 f971 	bl	8009ce0 <__match>
 80089fe:	b910      	cbnz	r0, 8008a06 <_strtod_l+0x376>
 8008a00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a02:	3301      	adds	r3, #1
 8008a04:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a06:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8008c1c <_strtod_l+0x58c>
 8008a0a:	f04f 0a00 	mov.w	sl, #0
 8008a0e:	e67a      	b.n	8008706 <_strtod_l+0x76>
 8008a10:	487e      	ldr	r0, [pc, #504]	@ (8008c0c <_strtod_l+0x57c>)
 8008a12:	f000 fe89 	bl	8009728 <nan>
 8008a16:	ec5b ab10 	vmov	sl, fp, d0
 8008a1a:	e674      	b.n	8008706 <_strtod_l+0x76>
 8008a1c:	ee07 9a90 	vmov	s15, r9
 8008a20:	1be2      	subs	r2, r4, r7
 8008a22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	bf08      	it	eq
 8008a2a:	461d      	moveq	r5, r3
 8008a2c:	2b10      	cmp	r3, #16
 8008a2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a30:	461a      	mov	r2, r3
 8008a32:	bfa8      	it	ge
 8008a34:	2210      	movge	r2, #16
 8008a36:	2b09      	cmp	r3, #9
 8008a38:	ec5b ab17 	vmov	sl, fp, d7
 8008a3c:	dc15      	bgt.n	8008a6a <_strtod_l+0x3da>
 8008a3e:	1be1      	subs	r1, r4, r7
 8008a40:	2900      	cmp	r1, #0
 8008a42:	f43f ae60 	beq.w	8008706 <_strtod_l+0x76>
 8008a46:	eba4 0107 	sub.w	r1, r4, r7
 8008a4a:	dd72      	ble.n	8008b32 <_strtod_l+0x4a2>
 8008a4c:	2916      	cmp	r1, #22
 8008a4e:	dc59      	bgt.n	8008b04 <_strtod_l+0x474>
 8008a50:	4b6f      	ldr	r3, [pc, #444]	@ (8008c10 <_strtod_l+0x580>)
 8008a52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a58:	ed93 7b00 	vldr	d7, [r3]
 8008a5c:	ec4b ab16 	vmov	d6, sl, fp
 8008a60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a64:	ec5b ab17 	vmov	sl, fp, d7
 8008a68:	e64d      	b.n	8008706 <_strtod_l+0x76>
 8008a6a:	4969      	ldr	r1, [pc, #420]	@ (8008c10 <_strtod_l+0x580>)
 8008a6c:	eddd 6a06 	vldr	s13, [sp, #24]
 8008a70:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008a74:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8008a78:	2b0f      	cmp	r3, #15
 8008a7a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008a7e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008a82:	ec5b ab16 	vmov	sl, fp, d6
 8008a86:	ddda      	ble.n	8008a3e <_strtod_l+0x3ae>
 8008a88:	1a9a      	subs	r2, r3, r2
 8008a8a:	1be1      	subs	r1, r4, r7
 8008a8c:	440a      	add	r2, r1
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	f340 8094 	ble.w	8008bbc <_strtod_l+0x52c>
 8008a94:	f012 000f 	ands.w	r0, r2, #15
 8008a98:	d00a      	beq.n	8008ab0 <_strtod_l+0x420>
 8008a9a:	495d      	ldr	r1, [pc, #372]	@ (8008c10 <_strtod_l+0x580>)
 8008a9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008aa0:	ed91 7b00 	vldr	d7, [r1]
 8008aa4:	ec4b ab16 	vmov	d6, sl, fp
 8008aa8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008aac:	ec5b ab17 	vmov	sl, fp, d7
 8008ab0:	f032 020f 	bics.w	r2, r2, #15
 8008ab4:	d073      	beq.n	8008b9e <_strtod_l+0x50e>
 8008ab6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8008aba:	dd47      	ble.n	8008b4c <_strtod_l+0x4bc>
 8008abc:	2400      	movs	r4, #0
 8008abe:	4625      	mov	r5, r4
 8008ac0:	9407      	str	r4, [sp, #28]
 8008ac2:	4626      	mov	r6, r4
 8008ac4:	9a05      	ldr	r2, [sp, #20]
 8008ac6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008c1c <_strtod_l+0x58c>
 8008aca:	2322      	movs	r3, #34	@ 0x22
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	f04f 0a00 	mov.w	sl, #0
 8008ad2:	9b07      	ldr	r3, [sp, #28]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f43f ae16 	beq.w	8008706 <_strtod_l+0x76>
 8008ada:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008adc:	9805      	ldr	r0, [sp, #20]
 8008ade:	f001 faaf 	bl	800a040 <_Bfree>
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	f001 faab 	bl	800a040 <_Bfree>
 8008aea:	9805      	ldr	r0, [sp, #20]
 8008aec:	4629      	mov	r1, r5
 8008aee:	f001 faa7 	bl	800a040 <_Bfree>
 8008af2:	9907      	ldr	r1, [sp, #28]
 8008af4:	9805      	ldr	r0, [sp, #20]
 8008af6:	f001 faa3 	bl	800a040 <_Bfree>
 8008afa:	9805      	ldr	r0, [sp, #20]
 8008afc:	4621      	mov	r1, r4
 8008afe:	f001 fa9f 	bl	800a040 <_Bfree>
 8008b02:	e600      	b.n	8008706 <_strtod_l+0x76>
 8008b04:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8008b08:	1be0      	subs	r0, r4, r7
 8008b0a:	4281      	cmp	r1, r0
 8008b0c:	dbbc      	blt.n	8008a88 <_strtod_l+0x3f8>
 8008b0e:	4a40      	ldr	r2, [pc, #256]	@ (8008c10 <_strtod_l+0x580>)
 8008b10:	f1c3 030f 	rsb	r3, r3, #15
 8008b14:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008b18:	ed91 7b00 	vldr	d7, [r1]
 8008b1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b1e:	ec4b ab16 	vmov	d6, sl, fp
 8008b22:	1acb      	subs	r3, r1, r3
 8008b24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008b28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b2c:	ed92 6b00 	vldr	d6, [r2]
 8008b30:	e796      	b.n	8008a60 <_strtod_l+0x3d0>
 8008b32:	3116      	adds	r1, #22
 8008b34:	dba8      	blt.n	8008a88 <_strtod_l+0x3f8>
 8008b36:	4b36      	ldr	r3, [pc, #216]	@ (8008c10 <_strtod_l+0x580>)
 8008b38:	1b3c      	subs	r4, r7, r4
 8008b3a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008b3e:	ed94 7b00 	vldr	d7, [r4]
 8008b42:	ec4b ab16 	vmov	d6, sl, fp
 8008b46:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b4a:	e78b      	b.n	8008a64 <_strtod_l+0x3d4>
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	ec4b ab17 	vmov	d7, sl, fp
 8008b52:	4e30      	ldr	r6, [pc, #192]	@ (8008c14 <_strtod_l+0x584>)
 8008b54:	1112      	asrs	r2, r2, #4
 8008b56:	4601      	mov	r1, r0
 8008b58:	2a01      	cmp	r2, #1
 8008b5a:	dc23      	bgt.n	8008ba4 <_strtod_l+0x514>
 8008b5c:	b108      	cbz	r0, 8008b62 <_strtod_l+0x4d2>
 8008b5e:	ec5b ab17 	vmov	sl, fp, d7
 8008b62:	4a2c      	ldr	r2, [pc, #176]	@ (8008c14 <_strtod_l+0x584>)
 8008b64:	482c      	ldr	r0, [pc, #176]	@ (8008c18 <_strtod_l+0x588>)
 8008b66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008b6a:	ed92 7b00 	vldr	d7, [r2]
 8008b6e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008b72:	ec4b ab16 	vmov	d6, sl, fp
 8008b76:	4a29      	ldr	r2, [pc, #164]	@ (8008c1c <_strtod_l+0x58c>)
 8008b78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b7c:	ee17 1a90 	vmov	r1, s15
 8008b80:	400a      	ands	r2, r1
 8008b82:	4282      	cmp	r2, r0
 8008b84:	ec5b ab17 	vmov	sl, fp, d7
 8008b88:	d898      	bhi.n	8008abc <_strtod_l+0x42c>
 8008b8a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8008b8e:	4282      	cmp	r2, r0
 8008b90:	bf86      	itte	hi
 8008b92:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008c20 <_strtod_l+0x590>
 8008b96:	f04f 3aff 	movhi.w	sl, #4294967295
 8008b9a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	9206      	str	r2, [sp, #24]
 8008ba2:	e076      	b.n	8008c92 <_strtod_l+0x602>
 8008ba4:	f012 0f01 	tst.w	r2, #1
 8008ba8:	d004      	beq.n	8008bb4 <_strtod_l+0x524>
 8008baa:	ed96 6b00 	vldr	d6, [r6]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bb4:	3101      	adds	r1, #1
 8008bb6:	1052      	asrs	r2, r2, #1
 8008bb8:	3608      	adds	r6, #8
 8008bba:	e7cd      	b.n	8008b58 <_strtod_l+0x4c8>
 8008bbc:	d0ef      	beq.n	8008b9e <_strtod_l+0x50e>
 8008bbe:	4252      	negs	r2, r2
 8008bc0:	f012 000f 	ands.w	r0, r2, #15
 8008bc4:	d00a      	beq.n	8008bdc <_strtod_l+0x54c>
 8008bc6:	4912      	ldr	r1, [pc, #72]	@ (8008c10 <_strtod_l+0x580>)
 8008bc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008bcc:	ed91 7b00 	vldr	d7, [r1]
 8008bd0:	ec4b ab16 	vmov	d6, sl, fp
 8008bd4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008bd8:	ec5b ab17 	vmov	sl, fp, d7
 8008bdc:	1112      	asrs	r2, r2, #4
 8008bde:	d0de      	beq.n	8008b9e <_strtod_l+0x50e>
 8008be0:	2a1f      	cmp	r2, #31
 8008be2:	dd1f      	ble.n	8008c24 <_strtod_l+0x594>
 8008be4:	2400      	movs	r4, #0
 8008be6:	4625      	mov	r5, r4
 8008be8:	9407      	str	r4, [sp, #28]
 8008bea:	4626      	mov	r6, r4
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	2322      	movs	r3, #34	@ 0x22
 8008bf0:	f04f 0a00 	mov.w	sl, #0
 8008bf4:	f04f 0b00 	mov.w	fp, #0
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e76a      	b.n	8008ad2 <_strtod_l+0x442>
 8008bfc:	0800b32f 	.word	0x0800b32f
 8008c00:	0800b48c 	.word	0x0800b48c
 8008c04:	0800b326 	.word	0x0800b326
 8008c08:	0800b329 	.word	0x0800b329
 8008c0c:	0800b489 	.word	0x0800b489
 8008c10:	0800b518 	.word	0x0800b518
 8008c14:	0800b4f0 	.word	0x0800b4f0
 8008c18:	7ca00000 	.word	0x7ca00000
 8008c1c:	7ff00000 	.word	0x7ff00000
 8008c20:	7fefffff 	.word	0x7fefffff
 8008c24:	f012 0110 	ands.w	r1, r2, #16
 8008c28:	bf18      	it	ne
 8008c2a:	216a      	movne	r1, #106	@ 0x6a
 8008c2c:	9106      	str	r1, [sp, #24]
 8008c2e:	ec4b ab17 	vmov	d7, sl, fp
 8008c32:	49af      	ldr	r1, [pc, #700]	@ (8008ef0 <_strtod_l+0x860>)
 8008c34:	2000      	movs	r0, #0
 8008c36:	07d6      	lsls	r6, r2, #31
 8008c38:	d504      	bpl.n	8008c44 <_strtod_l+0x5b4>
 8008c3a:	ed91 6b00 	vldr	d6, [r1]
 8008c3e:	2001      	movs	r0, #1
 8008c40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c44:	1052      	asrs	r2, r2, #1
 8008c46:	f101 0108 	add.w	r1, r1, #8
 8008c4a:	d1f4      	bne.n	8008c36 <_strtod_l+0x5a6>
 8008c4c:	b108      	cbz	r0, 8008c52 <_strtod_l+0x5c2>
 8008c4e:	ec5b ab17 	vmov	sl, fp, d7
 8008c52:	9a06      	ldr	r2, [sp, #24]
 8008c54:	b1b2      	cbz	r2, 8008c84 <_strtod_l+0x5f4>
 8008c56:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8008c5a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	4658      	mov	r0, fp
 8008c62:	dd0f      	ble.n	8008c84 <_strtod_l+0x5f4>
 8008c64:	2a1f      	cmp	r2, #31
 8008c66:	dd55      	ble.n	8008d14 <_strtod_l+0x684>
 8008c68:	2a34      	cmp	r2, #52	@ 0x34
 8008c6a:	bfde      	ittt	le
 8008c6c:	f04f 32ff 	movle.w	r2, #4294967295
 8008c70:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8008c74:	408a      	lslle	r2, r1
 8008c76:	f04f 0a00 	mov.w	sl, #0
 8008c7a:	bfcc      	ite	gt
 8008c7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008c80:	ea02 0b00 	andle.w	fp, r2, r0
 8008c84:	ec4b ab17 	vmov	d7, sl, fp
 8008c88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	d0a8      	beq.n	8008be4 <_strtod_l+0x554>
 8008c92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c94:	9805      	ldr	r0, [sp, #20]
 8008c96:	f8cd 9000 	str.w	r9, [sp]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	f001 fa38 	bl	800a110 <__s2b>
 8008ca0:	9007      	str	r0, [sp, #28]
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f43f af0a 	beq.w	8008abc <_strtod_l+0x42c>
 8008ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008caa:	1b3f      	subs	r7, r7, r4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bfb4      	ite	lt
 8008cb0:	463b      	movlt	r3, r7
 8008cb2:	2300      	movge	r3, #0
 8008cb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8008ee0 <_strtod_l+0x850>
 8008cbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008cc0:	2400      	movs	r4, #0
 8008cc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cc4:	4625      	mov	r5, r4
 8008cc6:	9b07      	ldr	r3, [sp, #28]
 8008cc8:	9805      	ldr	r0, [sp, #20]
 8008cca:	6859      	ldr	r1, [r3, #4]
 8008ccc:	f001 f978 	bl	8009fc0 <_Balloc>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f aef6 	beq.w	8008ac4 <_strtod_l+0x434>
 8008cd8:	9b07      	ldr	r3, [sp, #28]
 8008cda:	691a      	ldr	r2, [r3, #16]
 8008cdc:	ec4b ab19 	vmov	d9, sl, fp
 8008ce0:	3202      	adds	r2, #2
 8008ce2:	f103 010c 	add.w	r1, r3, #12
 8008ce6:	0092      	lsls	r2, r2, #2
 8008ce8:	300c      	adds	r0, #12
 8008cea:	f000 fd0e 	bl	800970a <memcpy>
 8008cee:	eeb0 0b49 	vmov.f64	d0, d9
 8008cf2:	9805      	ldr	r0, [sp, #20]
 8008cf4:	aa14      	add	r2, sp, #80	@ 0x50
 8008cf6:	a913      	add	r1, sp, #76	@ 0x4c
 8008cf8:	f001 fd3e 	bl	800a778 <__d2b>
 8008cfc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f43f aee0 	beq.w	8008ac4 <_strtod_l+0x434>
 8008d04:	9805      	ldr	r0, [sp, #20]
 8008d06:	2101      	movs	r1, #1
 8008d08:	f001 fa98 	bl	800a23c <__i2b>
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	b940      	cbnz	r0, 8008d22 <_strtod_l+0x692>
 8008d10:	2500      	movs	r5, #0
 8008d12:	e6d7      	b.n	8008ac4 <_strtod_l+0x434>
 8008d14:	f04f 31ff 	mov.w	r1, #4294967295
 8008d18:	fa01 f202 	lsl.w	r2, r1, r2
 8008d1c:	ea02 0a0a 	and.w	sl, r2, sl
 8008d20:	e7b0      	b.n	8008c84 <_strtod_l+0x5f4>
 8008d22:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008d24:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	bfab      	itete	ge
 8008d2a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8008d2c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8008d2e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8008d32:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8008d36:	bfac      	ite	ge
 8008d38:	eb07 0903 	addge.w	r9, r7, r3
 8008d3c:	eba3 0807 	sublt.w	r8, r3, r7
 8008d40:	9b06      	ldr	r3, [sp, #24]
 8008d42:	1aff      	subs	r7, r7, r3
 8008d44:	4417      	add	r7, r2
 8008d46:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8008d4a:	4a6a      	ldr	r2, [pc, #424]	@ (8008ef4 <_strtod_l+0x864>)
 8008d4c:	3f01      	subs	r7, #1
 8008d4e:	4297      	cmp	r7, r2
 8008d50:	da51      	bge.n	8008df6 <_strtod_l+0x766>
 8008d52:	1bd1      	subs	r1, r2, r7
 8008d54:	291f      	cmp	r1, #31
 8008d56:	eba3 0301 	sub.w	r3, r3, r1
 8008d5a:	f04f 0201 	mov.w	r2, #1
 8008d5e:	dc3e      	bgt.n	8008dde <_strtod_l+0x74e>
 8008d60:	408a      	lsls	r2, r1
 8008d62:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d64:	2200      	movs	r2, #0
 8008d66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d68:	eb09 0703 	add.w	r7, r9, r3
 8008d6c:	4498      	add	r8, r3
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	45b9      	cmp	r9, r7
 8008d72:	4498      	add	r8, r3
 8008d74:	464b      	mov	r3, r9
 8008d76:	bfa8      	it	ge
 8008d78:	463b      	movge	r3, r7
 8008d7a:	4543      	cmp	r3, r8
 8008d7c:	bfa8      	it	ge
 8008d7e:	4643      	movge	r3, r8
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bfc2      	ittt	gt
 8008d84:	1aff      	subgt	r7, r7, r3
 8008d86:	eba8 0803 	subgt.w	r8, r8, r3
 8008d8a:	eba9 0903 	subgt.w	r9, r9, r3
 8008d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dd16      	ble.n	8008dc2 <_strtod_l+0x732>
 8008d94:	4629      	mov	r1, r5
 8008d96:	9805      	ldr	r0, [sp, #20]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	f001 fb07 	bl	800a3ac <__pow5mult>
 8008d9e:	4605      	mov	r5, r0
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d0b5      	beq.n	8008d10 <_strtod_l+0x680>
 8008da4:	4601      	mov	r1, r0
 8008da6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008da8:	9805      	ldr	r0, [sp, #20]
 8008daa:	f001 fa5d 	bl	800a268 <__multiply>
 8008dae:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008db0:	2800      	cmp	r0, #0
 8008db2:	f43f ae87 	beq.w	8008ac4 <_strtod_l+0x434>
 8008db6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008db8:	9805      	ldr	r0, [sp, #20]
 8008dba:	f001 f941 	bl	800a040 <_Bfree>
 8008dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008dc2:	2f00      	cmp	r7, #0
 8008dc4:	dc1b      	bgt.n	8008dfe <_strtod_l+0x76e>
 8008dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dd21      	ble.n	8008e10 <_strtod_l+0x780>
 8008dcc:	4631      	mov	r1, r6
 8008dce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dd0:	9805      	ldr	r0, [sp, #20]
 8008dd2:	f001 faeb 	bl	800a3ac <__pow5mult>
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	b9d0      	cbnz	r0, 8008e10 <_strtod_l+0x780>
 8008dda:	2600      	movs	r6, #0
 8008ddc:	e672      	b.n	8008ac4 <_strtod_l+0x434>
 8008dde:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8008de2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8008de6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8008dea:	37e2      	adds	r7, #226	@ 0xe2
 8008dec:	fa02 f107 	lsl.w	r1, r2, r7
 8008df0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008df2:	920c      	str	r2, [sp, #48]	@ 0x30
 8008df4:	e7b8      	b.n	8008d68 <_strtod_l+0x6d8>
 8008df6:	2200      	movs	r2, #0
 8008df8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	e7f9      	b.n	8008df2 <_strtod_l+0x762>
 8008dfe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008e00:	9805      	ldr	r0, [sp, #20]
 8008e02:	463a      	mov	r2, r7
 8008e04:	f001 fb2c 	bl	800a460 <__lshift>
 8008e08:	9012      	str	r0, [sp, #72]	@ 0x48
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	d1db      	bne.n	8008dc6 <_strtod_l+0x736>
 8008e0e:	e659      	b.n	8008ac4 <_strtod_l+0x434>
 8008e10:	f1b8 0f00 	cmp.w	r8, #0
 8008e14:	dd07      	ble.n	8008e26 <_strtod_l+0x796>
 8008e16:	4631      	mov	r1, r6
 8008e18:	9805      	ldr	r0, [sp, #20]
 8008e1a:	4642      	mov	r2, r8
 8008e1c:	f001 fb20 	bl	800a460 <__lshift>
 8008e20:	4606      	mov	r6, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d0d9      	beq.n	8008dda <_strtod_l+0x74a>
 8008e26:	f1b9 0f00 	cmp.w	r9, #0
 8008e2a:	dd08      	ble.n	8008e3e <_strtod_l+0x7ae>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	9805      	ldr	r0, [sp, #20]
 8008e30:	464a      	mov	r2, r9
 8008e32:	f001 fb15 	bl	800a460 <__lshift>
 8008e36:	4605      	mov	r5, r0
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f43f ae43 	beq.w	8008ac4 <_strtod_l+0x434>
 8008e3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008e40:	9805      	ldr	r0, [sp, #20]
 8008e42:	4632      	mov	r2, r6
 8008e44:	f001 fb94 	bl	800a570 <__mdiff>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	f43f ae3a 	beq.w	8008ac4 <_strtod_l+0x434>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8008e56:	60c3      	str	r3, [r0, #12]
 8008e58:	4629      	mov	r1, r5
 8008e5a:	f001 fb6d 	bl	800a538 <__mcmp>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	da4c      	bge.n	8008efc <_strtod_l+0x86c>
 8008e62:	ea58 080a 	orrs.w	r8, r8, sl
 8008e66:	d172      	bne.n	8008f4e <_strtod_l+0x8be>
 8008e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d16e      	bne.n	8008f4e <_strtod_l+0x8be>
 8008e70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e74:	0d1b      	lsrs	r3, r3, #20
 8008e76:	051b      	lsls	r3, r3, #20
 8008e78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008e7c:	d967      	bls.n	8008f4e <_strtod_l+0x8be>
 8008e7e:	6963      	ldr	r3, [r4, #20]
 8008e80:	b913      	cbnz	r3, 8008e88 <_strtod_l+0x7f8>
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	dd62      	ble.n	8008f4e <_strtod_l+0x8be>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	9805      	ldr	r0, [sp, #20]
 8008e8e:	f001 fae7 	bl	800a460 <__lshift>
 8008e92:	4629      	mov	r1, r5
 8008e94:	4604      	mov	r4, r0
 8008e96:	f001 fb4f 	bl	800a538 <__mcmp>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	dd57      	ble.n	8008f4e <_strtod_l+0x8be>
 8008e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ea2:	9a06      	ldr	r2, [sp, #24]
 8008ea4:	0d1b      	lsrs	r3, r3, #20
 8008ea6:	051b      	lsls	r3, r3, #20
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	d06e      	beq.n	8008f8a <_strtod_l+0x8fa>
 8008eac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008eb0:	d86b      	bhi.n	8008f8a <_strtod_l+0x8fa>
 8008eb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008eb6:	f67f ae99 	bls.w	8008bec <_strtod_l+0x55c>
 8008eba:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8008ee8 <_strtod_l+0x858>
 8008ebe:	ec4b ab16 	vmov	d6, sl, fp
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ef8 <_strtod_l+0x868>)
 8008ec4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008ec8:	ee17 2a90 	vmov	r2, s15
 8008ecc:	4013      	ands	r3, r2
 8008ece:	ec5b ab17 	vmov	sl, fp, d7
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f47f ae01 	bne.w	8008ada <_strtod_l+0x44a>
 8008ed8:	9a05      	ldr	r2, [sp, #20]
 8008eda:	2322      	movs	r3, #34	@ 0x22
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	e5fc      	b.n	8008ada <_strtod_l+0x44a>
 8008ee0:	ffc00000 	.word	0xffc00000
 8008ee4:	41dfffff 	.word	0x41dfffff
 8008ee8:	00000000 	.word	0x00000000
 8008eec:	39500000 	.word	0x39500000
 8008ef0:	0800b4b8 	.word	0x0800b4b8
 8008ef4:	fffffc02 	.word	0xfffffc02
 8008ef8:	7ff00000 	.word	0x7ff00000
 8008efc:	46d9      	mov	r9, fp
 8008efe:	d15d      	bne.n	8008fbc <_strtod_l+0x92c>
 8008f00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f04:	f1b8 0f00 	cmp.w	r8, #0
 8008f08:	d02a      	beq.n	8008f60 <_strtod_l+0x8d0>
 8008f0a:	4aa9      	ldr	r2, [pc, #676]	@ (80091b0 <_strtod_l+0xb20>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d12a      	bne.n	8008f66 <_strtod_l+0x8d6>
 8008f10:	9b06      	ldr	r3, [sp, #24]
 8008f12:	4652      	mov	r2, sl
 8008f14:	b1fb      	cbz	r3, 8008f56 <_strtod_l+0x8c6>
 8008f16:	4ba7      	ldr	r3, [pc, #668]	@ (80091b4 <_strtod_l+0xb24>)
 8008f18:	ea0b 0303 	and.w	r3, fp, r3
 8008f1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008f20:	f04f 31ff 	mov.w	r1, #4294967295
 8008f24:	d81a      	bhi.n	8008f5c <_strtod_l+0x8cc>
 8008f26:	0d1b      	lsrs	r3, r3, #20
 8008f28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d118      	bne.n	8008f66 <_strtod_l+0x8d6>
 8008f34:	4ba0      	ldr	r3, [pc, #640]	@ (80091b8 <_strtod_l+0xb28>)
 8008f36:	4599      	cmp	r9, r3
 8008f38:	d102      	bne.n	8008f40 <_strtod_l+0x8b0>
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	f43f adc2 	beq.w	8008ac4 <_strtod_l+0x434>
 8008f40:	4b9c      	ldr	r3, [pc, #624]	@ (80091b4 <_strtod_l+0xb24>)
 8008f42:	ea09 0303 	and.w	r3, r9, r3
 8008f46:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8008f4a:	f04f 0a00 	mov.w	sl, #0
 8008f4e:	9b06      	ldr	r3, [sp, #24]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1b2      	bne.n	8008eba <_strtod_l+0x82a>
 8008f54:	e5c1      	b.n	8008ada <_strtod_l+0x44a>
 8008f56:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5a:	e7e9      	b.n	8008f30 <_strtod_l+0x8a0>
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	e7e7      	b.n	8008f30 <_strtod_l+0x8a0>
 8008f60:	ea53 030a 	orrs.w	r3, r3, sl
 8008f64:	d09b      	beq.n	8008e9e <_strtod_l+0x80e>
 8008f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f68:	b1c3      	cbz	r3, 8008f9c <_strtod_l+0x90c>
 8008f6a:	ea13 0f09 	tst.w	r3, r9
 8008f6e:	d0ee      	beq.n	8008f4e <_strtod_l+0x8be>
 8008f70:	9a06      	ldr	r2, [sp, #24]
 8008f72:	4650      	mov	r0, sl
 8008f74:	4659      	mov	r1, fp
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	d013      	beq.n	8008fa4 <_strtod_l+0x914>
 8008f7c:	f7ff fb6e 	bl	800865c <sulp>
 8008f80:	ee39 7b00 	vadd.f64	d7, d9, d0
 8008f84:	ec5b ab17 	vmov	sl, fp, d7
 8008f88:	e7e1      	b.n	8008f4e <_strtod_l+0x8be>
 8008f8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008f8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008f92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008f96:	f04f 3aff 	mov.w	sl, #4294967295
 8008f9a:	e7d8      	b.n	8008f4e <_strtod_l+0x8be>
 8008f9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f9e:	ea13 0f0a 	tst.w	r3, sl
 8008fa2:	e7e4      	b.n	8008f6e <_strtod_l+0x8de>
 8008fa4:	f7ff fb5a 	bl	800865c <sulp>
 8008fa8:	ee39 0b40 	vsub.f64	d0, d9, d0
 8008fac:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb4:	ec5b ab10 	vmov	sl, fp, d0
 8008fb8:	d1c9      	bne.n	8008f4e <_strtod_l+0x8be>
 8008fba:	e617      	b.n	8008bec <_strtod_l+0x55c>
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f001 fc32 	bl	800a828 <__ratio>
 8008fc4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8008fc8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	d85d      	bhi.n	800908e <_strtod_l+0x9fe>
 8008fd2:	f1b8 0f00 	cmp.w	r8, #0
 8008fd6:	d164      	bne.n	80090a2 <_strtod_l+0xa12>
 8008fd8:	f1ba 0f00 	cmp.w	sl, #0
 8008fdc:	d14b      	bne.n	8009076 <_strtod_l+0x9e6>
 8008fde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fe2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d160      	bne.n	80090ac <_strtod_l+0xa1c>
 8008fea:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8008fee:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8008ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff6:	d401      	bmi.n	8008ffc <_strtod_l+0x96c>
 8008ff8:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008ffc:	eeb1 ab48 	vneg.f64	d10, d8
 8009000:	486c      	ldr	r0, [pc, #432]	@ (80091b4 <_strtod_l+0xb24>)
 8009002:	496e      	ldr	r1, [pc, #440]	@ (80091bc <_strtod_l+0xb2c>)
 8009004:	ea09 0700 	and.w	r7, r9, r0
 8009008:	428f      	cmp	r7, r1
 800900a:	ec53 2b1a 	vmov	r2, r3, d10
 800900e:	d17d      	bne.n	800910c <_strtod_l+0xa7c>
 8009010:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009014:	ec4b ab1c 	vmov	d12, sl, fp
 8009018:	eeb0 0b4c 	vmov.f64	d0, d12
 800901c:	f001 fb3c 	bl	800a698 <__ulp>
 8009020:	4864      	ldr	r0, [pc, #400]	@ (80091b4 <_strtod_l+0xb24>)
 8009022:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8009026:	ee1c 3a90 	vmov	r3, s25
 800902a:	4a65      	ldr	r2, [pc, #404]	@ (80091c0 <_strtod_l+0xb30>)
 800902c:	ea03 0100 	and.w	r1, r3, r0
 8009030:	4291      	cmp	r1, r2
 8009032:	ec5b ab1c 	vmov	sl, fp, d12
 8009036:	d93c      	bls.n	80090b2 <_strtod_l+0xa22>
 8009038:	ee19 2a90 	vmov	r2, s19
 800903c:	4b5e      	ldr	r3, [pc, #376]	@ (80091b8 <_strtod_l+0xb28>)
 800903e:	429a      	cmp	r2, r3
 8009040:	d104      	bne.n	800904c <_strtod_l+0x9bc>
 8009042:	ee19 3a10 	vmov	r3, s18
 8009046:	3301      	adds	r3, #1
 8009048:	f43f ad3c 	beq.w	8008ac4 <_strtod_l+0x434>
 800904c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80091b8 <_strtod_l+0xb28>
 8009050:	f04f 3aff 	mov.w	sl, #4294967295
 8009054:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009056:	9805      	ldr	r0, [sp, #20]
 8009058:	f000 fff2 	bl	800a040 <_Bfree>
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	4631      	mov	r1, r6
 8009060:	f000 ffee 	bl	800a040 <_Bfree>
 8009064:	9805      	ldr	r0, [sp, #20]
 8009066:	4629      	mov	r1, r5
 8009068:	f000 ffea 	bl	800a040 <_Bfree>
 800906c:	9805      	ldr	r0, [sp, #20]
 800906e:	4621      	mov	r1, r4
 8009070:	f000 ffe6 	bl	800a040 <_Bfree>
 8009074:	e627      	b.n	8008cc6 <_strtod_l+0x636>
 8009076:	f1ba 0f01 	cmp.w	sl, #1
 800907a:	d103      	bne.n	8009084 <_strtod_l+0x9f4>
 800907c:	f1bb 0f00 	cmp.w	fp, #0
 8009080:	f43f adb4 	beq.w	8008bec <_strtod_l+0x55c>
 8009084:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009088:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800908c:	e7b8      	b.n	8009000 <_strtod_l+0x970>
 800908e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009092:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009096:	f1b8 0f00 	cmp.w	r8, #0
 800909a:	d0af      	beq.n	8008ffc <_strtod_l+0x96c>
 800909c:	eeb0 ab48 	vmov.f64	d10, d8
 80090a0:	e7ae      	b.n	8009000 <_strtod_l+0x970>
 80090a2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80090a6:	eeb0 8b4a 	vmov.f64	d8, d10
 80090aa:	e7a9      	b.n	8009000 <_strtod_l+0x970>
 80090ac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80090b0:	e7a6      	b.n	8009000 <_strtod_l+0x970>
 80090b2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	46d9      	mov	r9, fp
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1ca      	bne.n	8009054 <_strtod_l+0x9c4>
 80090be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090c2:	0d1b      	lsrs	r3, r3, #20
 80090c4:	051b      	lsls	r3, r3, #20
 80090c6:	429f      	cmp	r7, r3
 80090c8:	d1c4      	bne.n	8009054 <_strtod_l+0x9c4>
 80090ca:	ec51 0b18 	vmov	r0, r1, d8
 80090ce:	f7f7 fadb 	bl	8000688 <__aeabi_d2lz>
 80090d2:	f7f7 fa93 	bl	80005fc <__aeabi_l2d>
 80090d6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80090da:	ec41 0b17 	vmov	d7, r0, r1
 80090de:	ea49 090a 	orr.w	r9, r9, sl
 80090e2:	ea59 0908 	orrs.w	r9, r9, r8
 80090e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80090ea:	d03c      	beq.n	8009166 <_strtod_l+0xad6>
 80090ec:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009198 <_strtod_l+0xb08>
 80090f0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	f53f acef 	bmi.w	8008ada <_strtod_l+0x44a>
 80090fc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80091a0 <_strtod_l+0xb10>
 8009100:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	dda4      	ble.n	8009054 <_strtod_l+0x9c4>
 800910a:	e4e6      	b.n	8008ada <_strtod_l+0x44a>
 800910c:	9906      	ldr	r1, [sp, #24]
 800910e:	b1e1      	cbz	r1, 800914a <_strtod_l+0xaba>
 8009110:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009114:	d819      	bhi.n	800914a <_strtod_l+0xaba>
 8009116:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800911a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800911e:	d811      	bhi.n	8009144 <_strtod_l+0xab4>
 8009120:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009124:	ee18 3a10 	vmov	r3, s16
 8009128:	2b01      	cmp	r3, #1
 800912a:	bf38      	it	cc
 800912c:	2301      	movcc	r3, #1
 800912e:	ee08 3a10 	vmov	s16, r3
 8009132:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	d111      	bne.n	8009160 <_strtod_l+0xad0>
 800913c:	eeb1 7b48 	vneg.f64	d7, d8
 8009140:	ec53 2b17 	vmov	r2, r3, d7
 8009144:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8009148:	1bcb      	subs	r3, r1, r7
 800914a:	eeb0 0b49 	vmov.f64	d0, d9
 800914e:	ec43 2b1a 	vmov	d10, r2, r3
 8009152:	f001 faa1 	bl	800a698 <__ulp>
 8009156:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800915a:	ec5b ab19 	vmov	sl, fp, d9
 800915e:	e7aa      	b.n	80090b6 <_strtod_l+0xa26>
 8009160:	eeb0 7b48 	vmov.f64	d7, d8
 8009164:	e7ec      	b.n	8009140 <_strtod_l+0xab0>
 8009166:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80091a8 <_strtod_l+0xb18>
 800916a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800916e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009172:	f57f af6f 	bpl.w	8009054 <_strtod_l+0x9c4>
 8009176:	e4b0      	b.n	8008ada <_strtod_l+0x44a>
 8009178:	2300      	movs	r3, #0
 800917a:	9308      	str	r3, [sp, #32]
 800917c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800917e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009180:	6013      	str	r3, [r2, #0]
 8009182:	f7ff bac4 	b.w	800870e <_strtod_l+0x7e>
 8009186:	2a65      	cmp	r2, #101	@ 0x65
 8009188:	f43f abbf 	beq.w	800890a <_strtod_l+0x27a>
 800918c:	2a45      	cmp	r2, #69	@ 0x45
 800918e:	f43f abbc 	beq.w	800890a <_strtod_l+0x27a>
 8009192:	2101      	movs	r1, #1
 8009194:	f7ff bbf4 	b.w	8008980 <_strtod_l+0x2f0>
 8009198:	94a03595 	.word	0x94a03595
 800919c:	3fdfffff 	.word	0x3fdfffff
 80091a0:	35afe535 	.word	0x35afe535
 80091a4:	3fe00000 	.word	0x3fe00000
 80091a8:	94a03595 	.word	0x94a03595
 80091ac:	3fcfffff 	.word	0x3fcfffff
 80091b0:	000fffff 	.word	0x000fffff
 80091b4:	7ff00000 	.word	0x7ff00000
 80091b8:	7fefffff 	.word	0x7fefffff
 80091bc:	7fe00000 	.word	0x7fe00000
 80091c0:	7c9fffff 	.word	0x7c9fffff

080091c4 <strtod>:
 80091c4:	460a      	mov	r2, r1
 80091c6:	4601      	mov	r1, r0
 80091c8:	4802      	ldr	r0, [pc, #8]	@ (80091d4 <strtod+0x10>)
 80091ca:	4b03      	ldr	r3, [pc, #12]	@ (80091d8 <strtod+0x14>)
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	f7ff ba5f 	b.w	8008690 <_strtod_l>
 80091d2:	bf00      	nop
 80091d4:	200001a4 	.word	0x200001a4
 80091d8:	20000038 	.word	0x20000038

080091dc <std>:
 80091dc:	2300      	movs	r3, #0
 80091de:	b510      	push	{r4, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	e9c0 3300 	strd	r3, r3, [r0]
 80091e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ea:	6083      	str	r3, [r0, #8]
 80091ec:	8181      	strh	r1, [r0, #12]
 80091ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80091f0:	81c2      	strh	r2, [r0, #14]
 80091f2:	6183      	str	r3, [r0, #24]
 80091f4:	4619      	mov	r1, r3
 80091f6:	2208      	movs	r2, #8
 80091f8:	305c      	adds	r0, #92	@ 0x5c
 80091fa:	f000 f9f9 	bl	80095f0 <memset>
 80091fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <std+0x58>)
 8009200:	6263      	str	r3, [r4, #36]	@ 0x24
 8009202:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <std+0x5c>)
 8009204:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009206:	4b0d      	ldr	r3, [pc, #52]	@ (800923c <std+0x60>)
 8009208:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800920a:	4b0d      	ldr	r3, [pc, #52]	@ (8009240 <std+0x64>)
 800920c:	6323      	str	r3, [r4, #48]	@ 0x30
 800920e:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <std+0x68>)
 8009210:	6224      	str	r4, [r4, #32]
 8009212:	429c      	cmp	r4, r3
 8009214:	d006      	beq.n	8009224 <std+0x48>
 8009216:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800921a:	4294      	cmp	r4, r2
 800921c:	d002      	beq.n	8009224 <std+0x48>
 800921e:	33d0      	adds	r3, #208	@ 0xd0
 8009220:	429c      	cmp	r4, r3
 8009222:	d105      	bne.n	8009230 <std+0x54>
 8009224:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800922c:	f000 ba6a 	b.w	8009704 <__retarget_lock_init_recursive>
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	08009441 	.word	0x08009441
 8009238:	08009463 	.word	0x08009463
 800923c:	0800949b 	.word	0x0800949b
 8009240:	080094bf 	.word	0x080094bf
 8009244:	2000097c 	.word	0x2000097c

08009248 <stdio_exit_handler>:
 8009248:	4a02      	ldr	r2, [pc, #8]	@ (8009254 <stdio_exit_handler+0xc>)
 800924a:	4903      	ldr	r1, [pc, #12]	@ (8009258 <stdio_exit_handler+0x10>)
 800924c:	4803      	ldr	r0, [pc, #12]	@ (800925c <stdio_exit_handler+0x14>)
 800924e:	f000 b869 	b.w	8009324 <_fwalk_sglue>
 8009252:	bf00      	nop
 8009254:	2000002c 	.word	0x2000002c
 8009258:	0800afcd 	.word	0x0800afcd
 800925c:	200001a8 	.word	0x200001a8

08009260 <cleanup_stdio>:
 8009260:	6841      	ldr	r1, [r0, #4]
 8009262:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <cleanup_stdio+0x34>)
 8009264:	4299      	cmp	r1, r3
 8009266:	b510      	push	{r4, lr}
 8009268:	4604      	mov	r4, r0
 800926a:	d001      	beq.n	8009270 <cleanup_stdio+0x10>
 800926c:	f001 feae 	bl	800afcc <_fflush_r>
 8009270:	68a1      	ldr	r1, [r4, #8]
 8009272:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <cleanup_stdio+0x38>)
 8009274:	4299      	cmp	r1, r3
 8009276:	d002      	beq.n	800927e <cleanup_stdio+0x1e>
 8009278:	4620      	mov	r0, r4
 800927a:	f001 fea7 	bl	800afcc <_fflush_r>
 800927e:	68e1      	ldr	r1, [r4, #12]
 8009280:	4b06      	ldr	r3, [pc, #24]	@ (800929c <cleanup_stdio+0x3c>)
 8009282:	4299      	cmp	r1, r3
 8009284:	d004      	beq.n	8009290 <cleanup_stdio+0x30>
 8009286:	4620      	mov	r0, r4
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	f001 be9e 	b.w	800afcc <_fflush_r>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	2000097c 	.word	0x2000097c
 8009298:	200009e4 	.word	0x200009e4
 800929c:	20000a4c 	.word	0x20000a4c

080092a0 <global_stdio_init.part.0>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <global_stdio_init.part.0+0x30>)
 80092a4:	4c0b      	ldr	r4, [pc, #44]	@ (80092d4 <global_stdio_init.part.0+0x34>)
 80092a6:	4a0c      	ldr	r2, [pc, #48]	@ (80092d8 <global_stdio_init.part.0+0x38>)
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	4620      	mov	r0, r4
 80092ac:	2200      	movs	r2, #0
 80092ae:	2104      	movs	r1, #4
 80092b0:	f7ff ff94 	bl	80091dc <std>
 80092b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092b8:	2201      	movs	r2, #1
 80092ba:	2109      	movs	r1, #9
 80092bc:	f7ff ff8e 	bl	80091dc <std>
 80092c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092c4:	2202      	movs	r2, #2
 80092c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ca:	2112      	movs	r1, #18
 80092cc:	f7ff bf86 	b.w	80091dc <std>
 80092d0:	20000ab4 	.word	0x20000ab4
 80092d4:	2000097c 	.word	0x2000097c
 80092d8:	08009249 	.word	0x08009249

080092dc <__sfp_lock_acquire>:
 80092dc:	4801      	ldr	r0, [pc, #4]	@ (80092e4 <__sfp_lock_acquire+0x8>)
 80092de:	f000 ba12 	b.w	8009706 <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	20000abd 	.word	0x20000abd

080092e8 <__sfp_lock_release>:
 80092e8:	4801      	ldr	r0, [pc, #4]	@ (80092f0 <__sfp_lock_release+0x8>)
 80092ea:	f000 ba0d 	b.w	8009708 <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	20000abd 	.word	0x20000abd

080092f4 <__sinit>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	f7ff fff0 	bl	80092dc <__sfp_lock_acquire>
 80092fc:	6a23      	ldr	r3, [r4, #32]
 80092fe:	b11b      	cbz	r3, 8009308 <__sinit+0x14>
 8009300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009304:	f7ff bff0 	b.w	80092e8 <__sfp_lock_release>
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <__sinit+0x28>)
 800930a:	6223      	str	r3, [r4, #32]
 800930c:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <__sinit+0x2c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f5      	bne.n	8009300 <__sinit+0xc>
 8009314:	f7ff ffc4 	bl	80092a0 <global_stdio_init.part.0>
 8009318:	e7f2      	b.n	8009300 <__sinit+0xc>
 800931a:	bf00      	nop
 800931c:	08009261 	.word	0x08009261
 8009320:	20000ab4 	.word	0x20000ab4

08009324 <_fwalk_sglue>:
 8009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009328:	4607      	mov	r7, r0
 800932a:	4688      	mov	r8, r1
 800932c:	4614      	mov	r4, r2
 800932e:	2600      	movs	r6, #0
 8009330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009334:	f1b9 0901 	subs.w	r9, r9, #1
 8009338:	d505      	bpl.n	8009346 <_fwalk_sglue+0x22>
 800933a:	6824      	ldr	r4, [r4, #0]
 800933c:	2c00      	cmp	r4, #0
 800933e:	d1f7      	bne.n	8009330 <_fwalk_sglue+0xc>
 8009340:	4630      	mov	r0, r6
 8009342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d907      	bls.n	800935c <_fwalk_sglue+0x38>
 800934c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009350:	3301      	adds	r3, #1
 8009352:	d003      	beq.n	800935c <_fwalk_sglue+0x38>
 8009354:	4629      	mov	r1, r5
 8009356:	4638      	mov	r0, r7
 8009358:	47c0      	blx	r8
 800935a:	4306      	orrs	r6, r0
 800935c:	3568      	adds	r5, #104	@ 0x68
 800935e:	e7e9      	b.n	8009334 <_fwalk_sglue+0x10>

08009360 <iprintf>:
 8009360:	b40f      	push	{r0, r1, r2, r3}
 8009362:	b507      	push	{r0, r1, r2, lr}
 8009364:	4906      	ldr	r1, [pc, #24]	@ (8009380 <iprintf+0x20>)
 8009366:	ab04      	add	r3, sp, #16
 8009368:	6808      	ldr	r0, [r1, #0]
 800936a:	f853 2b04 	ldr.w	r2, [r3], #4
 800936e:	6881      	ldr	r1, [r0, #8]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	f001 fb03 	bl	800a97c <_vfiprintf_r>
 8009376:	b003      	add	sp, #12
 8009378:	f85d eb04 	ldr.w	lr, [sp], #4
 800937c:	b004      	add	sp, #16
 800937e:	4770      	bx	lr
 8009380:	200001a4 	.word	0x200001a4

08009384 <_puts_r>:
 8009384:	6a03      	ldr	r3, [r0, #32]
 8009386:	b570      	push	{r4, r5, r6, lr}
 8009388:	6884      	ldr	r4, [r0, #8]
 800938a:	4605      	mov	r5, r0
 800938c:	460e      	mov	r6, r1
 800938e:	b90b      	cbnz	r3, 8009394 <_puts_r+0x10>
 8009390:	f7ff ffb0 	bl	80092f4 <__sinit>
 8009394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009396:	07db      	lsls	r3, r3, #31
 8009398:	d405      	bmi.n	80093a6 <_puts_r+0x22>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	0598      	lsls	r0, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_puts_r+0x22>
 80093a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093a2:	f000 f9b0 	bl	8009706 <__retarget_lock_acquire_recursive>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	0719      	lsls	r1, r3, #28
 80093aa:	d502      	bpl.n	80093b2 <_puts_r+0x2e>
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d135      	bne.n	800941e <_puts_r+0x9a>
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 f8c5 	bl	8009544 <__swsetup_r>
 80093ba:	b380      	cbz	r0, 800941e <_puts_r+0x9a>
 80093bc:	f04f 35ff 	mov.w	r5, #4294967295
 80093c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093c2:	07da      	lsls	r2, r3, #31
 80093c4:	d405      	bmi.n	80093d2 <_puts_r+0x4e>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	059b      	lsls	r3, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_puts_r+0x4e>
 80093cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ce:	f000 f99b 	bl	8009708 <__retarget_lock_release_recursive>
 80093d2:	4628      	mov	r0, r5
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da04      	bge.n	80093e4 <_puts_r+0x60>
 80093da:	69a2      	ldr	r2, [r4, #24]
 80093dc:	429a      	cmp	r2, r3
 80093de:	dc17      	bgt.n	8009410 <_puts_r+0x8c>
 80093e0:	290a      	cmp	r1, #10
 80093e2:	d015      	beq.n	8009410 <_puts_r+0x8c>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	7019      	strb	r1, [r3, #0]
 80093ec:	68a3      	ldr	r3, [r4, #8]
 80093ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093f2:	3b01      	subs	r3, #1
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d1ed      	bne.n	80093d6 <_puts_r+0x52>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da11      	bge.n	8009422 <_puts_r+0x9e>
 80093fe:	4622      	mov	r2, r4
 8009400:	210a      	movs	r1, #10
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f85f 	bl	80094c6 <__swbuf_r>
 8009408:	3001      	adds	r0, #1
 800940a:	d0d7      	beq.n	80093bc <_puts_r+0x38>
 800940c:	250a      	movs	r5, #10
 800940e:	e7d7      	b.n	80093c0 <_puts_r+0x3c>
 8009410:	4622      	mov	r2, r4
 8009412:	4628      	mov	r0, r5
 8009414:	f000 f857 	bl	80094c6 <__swbuf_r>
 8009418:	3001      	adds	r0, #1
 800941a:	d1e7      	bne.n	80093ec <_puts_r+0x68>
 800941c:	e7ce      	b.n	80093bc <_puts_r+0x38>
 800941e:	3e01      	subs	r6, #1
 8009420:	e7e4      	b.n	80093ec <_puts_r+0x68>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	6022      	str	r2, [r4, #0]
 8009428:	220a      	movs	r2, #10
 800942a:	701a      	strb	r2, [r3, #0]
 800942c:	e7ee      	b.n	800940c <_puts_r+0x88>
	...

08009430 <puts>:
 8009430:	4b02      	ldr	r3, [pc, #8]	@ (800943c <puts+0xc>)
 8009432:	4601      	mov	r1, r0
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	f7ff bfa5 	b.w	8009384 <_puts_r>
 800943a:	bf00      	nop
 800943c:	200001a4 	.word	0x200001a4

08009440 <__sread>:
 8009440:	b510      	push	{r4, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	f000 f90e 	bl	8009668 <_read_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	bfab      	itete	ge
 8009450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009452:	89a3      	ldrhlt	r3, [r4, #12]
 8009454:	181b      	addge	r3, r3, r0
 8009456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800945a:	bfac      	ite	ge
 800945c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800945e:	81a3      	strhlt	r3, [r4, #12]
 8009460:	bd10      	pop	{r4, pc}

08009462 <__swrite>:
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	461f      	mov	r7, r3
 8009468:	898b      	ldrh	r3, [r1, #12]
 800946a:	05db      	lsls	r3, r3, #23
 800946c:	4605      	mov	r5, r0
 800946e:	460c      	mov	r4, r1
 8009470:	4616      	mov	r6, r2
 8009472:	d505      	bpl.n	8009480 <__swrite+0x1e>
 8009474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009478:	2302      	movs	r3, #2
 800947a:	2200      	movs	r2, #0
 800947c:	f000 f8e2 	bl	8009644 <_lseek_r>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	4628      	mov	r0, r5
 8009492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009496:	f000 b8f9 	b.w	800968c <_write_r>

0800949a <__sseek>:
 800949a:	b510      	push	{r4, lr}
 800949c:	460c      	mov	r4, r1
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 f8cf 	bl	8009644 <_lseek_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	bf15      	itete	ne
 80094ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094b6:	81a3      	strheq	r3, [r4, #12]
 80094b8:	bf18      	it	ne
 80094ba:	81a3      	strhne	r3, [r4, #12]
 80094bc:	bd10      	pop	{r4, pc}

080094be <__sclose>:
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 b8af 	b.w	8009624 <_close_r>

080094c6 <__swbuf_r>:
 80094c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c8:	460e      	mov	r6, r1
 80094ca:	4614      	mov	r4, r2
 80094cc:	4605      	mov	r5, r0
 80094ce:	b118      	cbz	r0, 80094d8 <__swbuf_r+0x12>
 80094d0:	6a03      	ldr	r3, [r0, #32]
 80094d2:	b90b      	cbnz	r3, 80094d8 <__swbuf_r+0x12>
 80094d4:	f7ff ff0e 	bl	80092f4 <__sinit>
 80094d8:	69a3      	ldr	r3, [r4, #24]
 80094da:	60a3      	str	r3, [r4, #8]
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	071a      	lsls	r2, r3, #28
 80094e0:	d501      	bpl.n	80094e6 <__swbuf_r+0x20>
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	b943      	cbnz	r3, 80094f8 <__swbuf_r+0x32>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	f000 f82b 	bl	8009544 <__swsetup_r>
 80094ee:	b118      	cbz	r0, 80094f8 <__swbuf_r+0x32>
 80094f0:	f04f 37ff 	mov.w	r7, #4294967295
 80094f4:	4638      	mov	r0, r7
 80094f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	6922      	ldr	r2, [r4, #16]
 80094fc:	1a98      	subs	r0, r3, r2
 80094fe:	6963      	ldr	r3, [r4, #20]
 8009500:	b2f6      	uxtb	r6, r6
 8009502:	4283      	cmp	r3, r0
 8009504:	4637      	mov	r7, r6
 8009506:	dc05      	bgt.n	8009514 <__swbuf_r+0x4e>
 8009508:	4621      	mov	r1, r4
 800950a:	4628      	mov	r0, r5
 800950c:	f001 fd5e 	bl	800afcc <_fflush_r>
 8009510:	2800      	cmp	r0, #0
 8009512:	d1ed      	bne.n	80094f0 <__swbuf_r+0x2a>
 8009514:	68a3      	ldr	r3, [r4, #8]
 8009516:	3b01      	subs	r3, #1
 8009518:	60a3      	str	r3, [r4, #8]
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	701e      	strb	r6, [r3, #0]
 8009522:	6962      	ldr	r2, [r4, #20]
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	429a      	cmp	r2, r3
 8009528:	d004      	beq.n	8009534 <__swbuf_r+0x6e>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	07db      	lsls	r3, r3, #31
 800952e:	d5e1      	bpl.n	80094f4 <__swbuf_r+0x2e>
 8009530:	2e0a      	cmp	r6, #10
 8009532:	d1df      	bne.n	80094f4 <__swbuf_r+0x2e>
 8009534:	4621      	mov	r1, r4
 8009536:	4628      	mov	r0, r5
 8009538:	f001 fd48 	bl	800afcc <_fflush_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	d0d9      	beq.n	80094f4 <__swbuf_r+0x2e>
 8009540:	e7d6      	b.n	80094f0 <__swbuf_r+0x2a>
	...

08009544 <__swsetup_r>:
 8009544:	b538      	push	{r3, r4, r5, lr}
 8009546:	4b29      	ldr	r3, [pc, #164]	@ (80095ec <__swsetup_r+0xa8>)
 8009548:	4605      	mov	r5, r0
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	460c      	mov	r4, r1
 800954e:	b118      	cbz	r0, 8009558 <__swsetup_r+0x14>
 8009550:	6a03      	ldr	r3, [r0, #32]
 8009552:	b90b      	cbnz	r3, 8009558 <__swsetup_r+0x14>
 8009554:	f7ff fece 	bl	80092f4 <__sinit>
 8009558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955c:	0719      	lsls	r1, r3, #28
 800955e:	d422      	bmi.n	80095a6 <__swsetup_r+0x62>
 8009560:	06da      	lsls	r2, r3, #27
 8009562:	d407      	bmi.n	8009574 <__swsetup_r+0x30>
 8009564:	2209      	movs	r2, #9
 8009566:	602a      	str	r2, [r5, #0]
 8009568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	e033      	b.n	80095dc <__swsetup_r+0x98>
 8009574:	0758      	lsls	r0, r3, #29
 8009576:	d512      	bpl.n	800959e <__swsetup_r+0x5a>
 8009578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800957a:	b141      	cbz	r1, 800958e <__swsetup_r+0x4a>
 800957c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009580:	4299      	cmp	r1, r3
 8009582:	d002      	beq.n	800958a <__swsetup_r+0x46>
 8009584:	4628      	mov	r0, r5
 8009586:	f000 f8d7 	bl	8009738 <_free_r>
 800958a:	2300      	movs	r3, #0
 800958c:	6363      	str	r3, [r4, #52]	@ 0x34
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	2300      	movs	r3, #0
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	f043 0308 	orr.w	r3, r3, #8
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	b94b      	cbnz	r3, 80095be <__swsetup_r+0x7a>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b4:	d003      	beq.n	80095be <__swsetup_r+0x7a>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f001 fd55 	bl	800b068 <__smakebuf_r>
 80095be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095c2:	f013 0201 	ands.w	r2, r3, #1
 80095c6:	d00a      	beq.n	80095de <__swsetup_r+0x9a>
 80095c8:	2200      	movs	r2, #0
 80095ca:	60a2      	str	r2, [r4, #8]
 80095cc:	6962      	ldr	r2, [r4, #20]
 80095ce:	4252      	negs	r2, r2
 80095d0:	61a2      	str	r2, [r4, #24]
 80095d2:	6922      	ldr	r2, [r4, #16]
 80095d4:	b942      	cbnz	r2, 80095e8 <__swsetup_r+0xa4>
 80095d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095da:	d1c5      	bne.n	8009568 <__swsetup_r+0x24>
 80095dc:	bd38      	pop	{r3, r4, r5, pc}
 80095de:	0799      	lsls	r1, r3, #30
 80095e0:	bf58      	it	pl
 80095e2:	6962      	ldrpl	r2, [r4, #20]
 80095e4:	60a2      	str	r2, [r4, #8]
 80095e6:	e7f4      	b.n	80095d2 <__swsetup_r+0x8e>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7f7      	b.n	80095dc <__swsetup_r+0x98>
 80095ec:	200001a4 	.word	0x200001a4

080095f0 <memset>:
 80095f0:	4402      	add	r2, r0
 80095f2:	4603      	mov	r3, r0
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d100      	bne.n	80095fa <memset+0xa>
 80095f8:	4770      	bx	lr
 80095fa:	f803 1b01 	strb.w	r1, [r3], #1
 80095fe:	e7f9      	b.n	80095f4 <memset+0x4>

08009600 <strncmp>:
 8009600:	b510      	push	{r4, lr}
 8009602:	b16a      	cbz	r2, 8009620 <strncmp+0x20>
 8009604:	3901      	subs	r1, #1
 8009606:	1884      	adds	r4, r0, r2
 8009608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009610:	429a      	cmp	r2, r3
 8009612:	d103      	bne.n	800961c <strncmp+0x1c>
 8009614:	42a0      	cmp	r0, r4
 8009616:	d001      	beq.n	800961c <strncmp+0x1c>
 8009618:	2a00      	cmp	r2, #0
 800961a:	d1f5      	bne.n	8009608 <strncmp+0x8>
 800961c:	1ad0      	subs	r0, r2, r3
 800961e:	bd10      	pop	{r4, pc}
 8009620:	4610      	mov	r0, r2
 8009622:	e7fc      	b.n	800961e <strncmp+0x1e>

08009624 <_close_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d06      	ldr	r5, [pc, #24]	@ (8009640 <_close_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	f7f9 fd16 	bl	8003060 <_close>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_close_r+0x1a>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_close_r+0x1a>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	20000ab8 	.word	0x20000ab8

08009644 <_lseek_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d07      	ldr	r5, [pc, #28]	@ (8009664 <_lseek_r+0x20>)
 8009648:	4604      	mov	r4, r0
 800964a:	4608      	mov	r0, r1
 800964c:	4611      	mov	r1, r2
 800964e:	2200      	movs	r2, #0
 8009650:	602a      	str	r2, [r5, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f7f9 fd2b 	bl	80030ae <_lseek>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_lseek_r+0x1e>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_lseek_r+0x1e>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20000ab8 	.word	0x20000ab8

08009668 <_read_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d07      	ldr	r5, [pc, #28]	@ (8009688 <_read_r+0x20>)
 800966c:	4604      	mov	r4, r0
 800966e:	4608      	mov	r0, r1
 8009670:	4611      	mov	r1, r2
 8009672:	2200      	movs	r2, #0
 8009674:	602a      	str	r2, [r5, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	f7f9 fcb9 	bl	8002fee <_read>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_read_r+0x1e>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_read_r+0x1e>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	20000ab8 	.word	0x20000ab8

0800968c <_write_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d07      	ldr	r5, [pc, #28]	@ (80096ac <_write_r+0x20>)
 8009690:	4604      	mov	r4, r0
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	2200      	movs	r2, #0
 8009698:	602a      	str	r2, [r5, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	f7f9 fcc4 	bl	8003028 <_write>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_write_r+0x1e>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_write_r+0x1e>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20000ab8 	.word	0x20000ab8

080096b0 <__errno>:
 80096b0:	4b01      	ldr	r3, [pc, #4]	@ (80096b8 <__errno+0x8>)
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	200001a4 	.word	0x200001a4

080096bc <__libc_init_array>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	4d0d      	ldr	r5, [pc, #52]	@ (80096f4 <__libc_init_array+0x38>)
 80096c0:	4c0d      	ldr	r4, [pc, #52]	@ (80096f8 <__libc_init_array+0x3c>)
 80096c2:	1b64      	subs	r4, r4, r5
 80096c4:	10a4      	asrs	r4, r4, #2
 80096c6:	2600      	movs	r6, #0
 80096c8:	42a6      	cmp	r6, r4
 80096ca:	d109      	bne.n	80096e0 <__libc_init_array+0x24>
 80096cc:	4d0b      	ldr	r5, [pc, #44]	@ (80096fc <__libc_init_array+0x40>)
 80096ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009700 <__libc_init_array+0x44>)
 80096d0:	f001 fdd0 	bl	800b274 <_init>
 80096d4:	1b64      	subs	r4, r4, r5
 80096d6:	10a4      	asrs	r4, r4, #2
 80096d8:	2600      	movs	r6, #0
 80096da:	42a6      	cmp	r6, r4
 80096dc:	d105      	bne.n	80096ea <__libc_init_array+0x2e>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e4:	4798      	blx	r3
 80096e6:	3601      	adds	r6, #1
 80096e8:	e7ee      	b.n	80096c8 <__libc_init_array+0xc>
 80096ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ee:	4798      	blx	r3
 80096f0:	3601      	adds	r6, #1
 80096f2:	e7f2      	b.n	80096da <__libc_init_array+0x1e>
 80096f4:	0800b6ec 	.word	0x0800b6ec
 80096f8:	0800b6ec 	.word	0x0800b6ec
 80096fc:	0800b6ec 	.word	0x0800b6ec
 8009700:	0800b6f0 	.word	0x0800b6f0

08009704 <__retarget_lock_init_recursive>:
 8009704:	4770      	bx	lr

08009706 <__retarget_lock_acquire_recursive>:
 8009706:	4770      	bx	lr

08009708 <__retarget_lock_release_recursive>:
 8009708:	4770      	bx	lr

0800970a <memcpy>:
 800970a:	440a      	add	r2, r1
 800970c:	4291      	cmp	r1, r2
 800970e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009712:	d100      	bne.n	8009716 <memcpy+0xc>
 8009714:	4770      	bx	lr
 8009716:	b510      	push	{r4, lr}
 8009718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800971c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009720:	4291      	cmp	r1, r2
 8009722:	d1f9      	bne.n	8009718 <memcpy+0xe>
 8009724:	bd10      	pop	{r4, pc}
	...

08009728 <nan>:
 8009728:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009730 <nan+0x8>
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	00000000 	.word	0x00000000
 8009734:	7ff80000 	.word	0x7ff80000

08009738 <_free_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4605      	mov	r5, r0
 800973c:	2900      	cmp	r1, #0
 800973e:	d041      	beq.n	80097c4 <_free_r+0x8c>
 8009740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009744:	1f0c      	subs	r4, r1, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	bfb8      	it	lt
 800974a:	18e4      	addlt	r4, r4, r3
 800974c:	f000 fc2c 	bl	8009fa8 <__malloc_lock>
 8009750:	4a1d      	ldr	r2, [pc, #116]	@ (80097c8 <_free_r+0x90>)
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	b933      	cbnz	r3, 8009764 <_free_r+0x2c>
 8009756:	6063      	str	r3, [r4, #4]
 8009758:	6014      	str	r4, [r2, #0]
 800975a:	4628      	mov	r0, r5
 800975c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009760:	f000 bc28 	b.w	8009fb4 <__malloc_unlock>
 8009764:	42a3      	cmp	r3, r4
 8009766:	d908      	bls.n	800977a <_free_r+0x42>
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	1821      	adds	r1, r4, r0
 800976c:	428b      	cmp	r3, r1
 800976e:	bf01      	itttt	eq
 8009770:	6819      	ldreq	r1, [r3, #0]
 8009772:	685b      	ldreq	r3, [r3, #4]
 8009774:	1809      	addeq	r1, r1, r0
 8009776:	6021      	streq	r1, [r4, #0]
 8009778:	e7ed      	b.n	8009756 <_free_r+0x1e>
 800977a:	461a      	mov	r2, r3
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	b10b      	cbz	r3, 8009784 <_free_r+0x4c>
 8009780:	42a3      	cmp	r3, r4
 8009782:	d9fa      	bls.n	800977a <_free_r+0x42>
 8009784:	6811      	ldr	r1, [r2, #0]
 8009786:	1850      	adds	r0, r2, r1
 8009788:	42a0      	cmp	r0, r4
 800978a:	d10b      	bne.n	80097a4 <_free_r+0x6c>
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	4401      	add	r1, r0
 8009790:	1850      	adds	r0, r2, r1
 8009792:	4283      	cmp	r3, r0
 8009794:	6011      	str	r1, [r2, #0]
 8009796:	d1e0      	bne.n	800975a <_free_r+0x22>
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	6053      	str	r3, [r2, #4]
 800979e:	4408      	add	r0, r1
 80097a0:	6010      	str	r0, [r2, #0]
 80097a2:	e7da      	b.n	800975a <_free_r+0x22>
 80097a4:	d902      	bls.n	80097ac <_free_r+0x74>
 80097a6:	230c      	movs	r3, #12
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	e7d6      	b.n	800975a <_free_r+0x22>
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	1821      	adds	r1, r4, r0
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf04      	itt	eq
 80097b4:	6819      	ldreq	r1, [r3, #0]
 80097b6:	685b      	ldreq	r3, [r3, #4]
 80097b8:	6063      	str	r3, [r4, #4]
 80097ba:	bf04      	itt	eq
 80097bc:	1809      	addeq	r1, r1, r0
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	6054      	str	r4, [r2, #4]
 80097c2:	e7ca      	b.n	800975a <_free_r+0x22>
 80097c4:	bd38      	pop	{r3, r4, r5, pc}
 80097c6:	bf00      	nop
 80097c8:	20000ac4 	.word	0x20000ac4

080097cc <rshift>:
 80097cc:	6903      	ldr	r3, [r0, #16]
 80097ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097da:	f100 0414 	add.w	r4, r0, #20
 80097de:	dd45      	ble.n	800986c <rshift+0xa0>
 80097e0:	f011 011f 	ands.w	r1, r1, #31
 80097e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097ec:	d10c      	bne.n	8009808 <rshift+0x3c>
 80097ee:	f100 0710 	add.w	r7, r0, #16
 80097f2:	4629      	mov	r1, r5
 80097f4:	42b1      	cmp	r1, r6
 80097f6:	d334      	bcc.n	8009862 <rshift+0x96>
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	1eea      	subs	r2, r5, #3
 80097fe:	4296      	cmp	r6, r2
 8009800:	bf38      	it	cc
 8009802:	2300      	movcc	r3, #0
 8009804:	4423      	add	r3, r4
 8009806:	e015      	b.n	8009834 <rshift+0x68>
 8009808:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800980c:	f1c1 0820 	rsb	r8, r1, #32
 8009810:	40cf      	lsrs	r7, r1
 8009812:	f105 0e04 	add.w	lr, r5, #4
 8009816:	46a1      	mov	r9, r4
 8009818:	4576      	cmp	r6, lr
 800981a:	46f4      	mov	ip, lr
 800981c:	d815      	bhi.n	800984a <rshift+0x7e>
 800981e:	1a9a      	subs	r2, r3, r2
 8009820:	0092      	lsls	r2, r2, #2
 8009822:	3a04      	subs	r2, #4
 8009824:	3501      	adds	r5, #1
 8009826:	42ae      	cmp	r6, r5
 8009828:	bf38      	it	cc
 800982a:	2200      	movcc	r2, #0
 800982c:	18a3      	adds	r3, r4, r2
 800982e:	50a7      	str	r7, [r4, r2]
 8009830:	b107      	cbz	r7, 8009834 <rshift+0x68>
 8009832:	3304      	adds	r3, #4
 8009834:	1b1a      	subs	r2, r3, r4
 8009836:	42a3      	cmp	r3, r4
 8009838:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800983c:	bf08      	it	eq
 800983e:	2300      	moveq	r3, #0
 8009840:	6102      	str	r2, [r0, #16]
 8009842:	bf08      	it	eq
 8009844:	6143      	streq	r3, [r0, #20]
 8009846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800984a:	f8dc c000 	ldr.w	ip, [ip]
 800984e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009852:	ea4c 0707 	orr.w	r7, ip, r7
 8009856:	f849 7b04 	str.w	r7, [r9], #4
 800985a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800985e:	40cf      	lsrs	r7, r1
 8009860:	e7da      	b.n	8009818 <rshift+0x4c>
 8009862:	f851 cb04 	ldr.w	ip, [r1], #4
 8009866:	f847 cf04 	str.w	ip, [r7, #4]!
 800986a:	e7c3      	b.n	80097f4 <rshift+0x28>
 800986c:	4623      	mov	r3, r4
 800986e:	e7e1      	b.n	8009834 <rshift+0x68>

08009870 <__hexdig_fun>:
 8009870:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009874:	2b09      	cmp	r3, #9
 8009876:	d802      	bhi.n	800987e <__hexdig_fun+0xe>
 8009878:	3820      	subs	r0, #32
 800987a:	b2c0      	uxtb	r0, r0
 800987c:	4770      	bx	lr
 800987e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009882:	2b05      	cmp	r3, #5
 8009884:	d801      	bhi.n	800988a <__hexdig_fun+0x1a>
 8009886:	3847      	subs	r0, #71	@ 0x47
 8009888:	e7f7      	b.n	800987a <__hexdig_fun+0xa>
 800988a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800988e:	2b05      	cmp	r3, #5
 8009890:	d801      	bhi.n	8009896 <__hexdig_fun+0x26>
 8009892:	3827      	subs	r0, #39	@ 0x27
 8009894:	e7f1      	b.n	800987a <__hexdig_fun+0xa>
 8009896:	2000      	movs	r0, #0
 8009898:	4770      	bx	lr
	...

0800989c <__gethex>:
 800989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	b085      	sub	sp, #20
 80098a2:	468a      	mov	sl, r1
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	680b      	ldr	r3, [r1, #0]
 80098a8:	9001      	str	r0, [sp, #4]
 80098aa:	4690      	mov	r8, r2
 80098ac:	1c9c      	adds	r4, r3, #2
 80098ae:	46a1      	mov	r9, r4
 80098b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80098b4:	2830      	cmp	r0, #48	@ 0x30
 80098b6:	d0fa      	beq.n	80098ae <__gethex+0x12>
 80098b8:	eba9 0303 	sub.w	r3, r9, r3
 80098bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80098c0:	f7ff ffd6 	bl	8009870 <__hexdig_fun>
 80098c4:	4605      	mov	r5, r0
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d168      	bne.n	800999c <__gethex+0x100>
 80098ca:	49a0      	ldr	r1, [pc, #640]	@ (8009b4c <__gethex+0x2b0>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	4648      	mov	r0, r9
 80098d0:	f7ff fe96 	bl	8009600 <strncmp>
 80098d4:	4607      	mov	r7, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d167      	bne.n	80099aa <__gethex+0x10e>
 80098da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80098de:	4626      	mov	r6, r4
 80098e0:	f7ff ffc6 	bl	8009870 <__hexdig_fun>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d062      	beq.n	80099ae <__gethex+0x112>
 80098e8:	4623      	mov	r3, r4
 80098ea:	7818      	ldrb	r0, [r3, #0]
 80098ec:	2830      	cmp	r0, #48	@ 0x30
 80098ee:	4699      	mov	r9, r3
 80098f0:	f103 0301 	add.w	r3, r3, #1
 80098f4:	d0f9      	beq.n	80098ea <__gethex+0x4e>
 80098f6:	f7ff ffbb 	bl	8009870 <__hexdig_fun>
 80098fa:	fab0 f580 	clz	r5, r0
 80098fe:	096d      	lsrs	r5, r5, #5
 8009900:	f04f 0b01 	mov.w	fp, #1
 8009904:	464a      	mov	r2, r9
 8009906:	4616      	mov	r6, r2
 8009908:	3201      	adds	r2, #1
 800990a:	7830      	ldrb	r0, [r6, #0]
 800990c:	f7ff ffb0 	bl	8009870 <__hexdig_fun>
 8009910:	2800      	cmp	r0, #0
 8009912:	d1f8      	bne.n	8009906 <__gethex+0x6a>
 8009914:	498d      	ldr	r1, [pc, #564]	@ (8009b4c <__gethex+0x2b0>)
 8009916:	2201      	movs	r2, #1
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff fe71 	bl	8009600 <strncmp>
 800991e:	2800      	cmp	r0, #0
 8009920:	d13f      	bne.n	80099a2 <__gethex+0x106>
 8009922:	b944      	cbnz	r4, 8009936 <__gethex+0x9a>
 8009924:	1c74      	adds	r4, r6, #1
 8009926:	4622      	mov	r2, r4
 8009928:	4616      	mov	r6, r2
 800992a:	3201      	adds	r2, #1
 800992c:	7830      	ldrb	r0, [r6, #0]
 800992e:	f7ff ff9f 	bl	8009870 <__hexdig_fun>
 8009932:	2800      	cmp	r0, #0
 8009934:	d1f8      	bne.n	8009928 <__gethex+0x8c>
 8009936:	1ba4      	subs	r4, r4, r6
 8009938:	00a7      	lsls	r7, r4, #2
 800993a:	7833      	ldrb	r3, [r6, #0]
 800993c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009940:	2b50      	cmp	r3, #80	@ 0x50
 8009942:	d13e      	bne.n	80099c2 <__gethex+0x126>
 8009944:	7873      	ldrb	r3, [r6, #1]
 8009946:	2b2b      	cmp	r3, #43	@ 0x2b
 8009948:	d033      	beq.n	80099b2 <__gethex+0x116>
 800994a:	2b2d      	cmp	r3, #45	@ 0x2d
 800994c:	d034      	beq.n	80099b8 <__gethex+0x11c>
 800994e:	1c71      	adds	r1, r6, #1
 8009950:	2400      	movs	r4, #0
 8009952:	7808      	ldrb	r0, [r1, #0]
 8009954:	f7ff ff8c 	bl	8009870 <__hexdig_fun>
 8009958:	1e43      	subs	r3, r0, #1
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b18      	cmp	r3, #24
 800995e:	d830      	bhi.n	80099c2 <__gethex+0x126>
 8009960:	f1a0 0210 	sub.w	r2, r0, #16
 8009964:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009968:	f7ff ff82 	bl	8009870 <__hexdig_fun>
 800996c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009970:	fa5f fc8c 	uxtb.w	ip, ip
 8009974:	f1bc 0f18 	cmp.w	ip, #24
 8009978:	f04f 030a 	mov.w	r3, #10
 800997c:	d91e      	bls.n	80099bc <__gethex+0x120>
 800997e:	b104      	cbz	r4, 8009982 <__gethex+0xe6>
 8009980:	4252      	negs	r2, r2
 8009982:	4417      	add	r7, r2
 8009984:	f8ca 1000 	str.w	r1, [sl]
 8009988:	b1ed      	cbz	r5, 80099c6 <__gethex+0x12a>
 800998a:	f1bb 0f00 	cmp.w	fp, #0
 800998e:	bf0c      	ite	eq
 8009990:	2506      	moveq	r5, #6
 8009992:	2500      	movne	r5, #0
 8009994:	4628      	mov	r0, r5
 8009996:	b005      	add	sp, #20
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	2500      	movs	r5, #0
 800999e:	462c      	mov	r4, r5
 80099a0:	e7b0      	b.n	8009904 <__gethex+0x68>
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	d1c7      	bne.n	8009936 <__gethex+0x9a>
 80099a6:	4627      	mov	r7, r4
 80099a8:	e7c7      	b.n	800993a <__gethex+0x9e>
 80099aa:	464e      	mov	r6, r9
 80099ac:	462f      	mov	r7, r5
 80099ae:	2501      	movs	r5, #1
 80099b0:	e7c3      	b.n	800993a <__gethex+0x9e>
 80099b2:	2400      	movs	r4, #0
 80099b4:	1cb1      	adds	r1, r6, #2
 80099b6:	e7cc      	b.n	8009952 <__gethex+0xb6>
 80099b8:	2401      	movs	r4, #1
 80099ba:	e7fb      	b.n	80099b4 <__gethex+0x118>
 80099bc:	fb03 0002 	mla	r0, r3, r2, r0
 80099c0:	e7ce      	b.n	8009960 <__gethex+0xc4>
 80099c2:	4631      	mov	r1, r6
 80099c4:	e7de      	b.n	8009984 <__gethex+0xe8>
 80099c6:	eba6 0309 	sub.w	r3, r6, r9
 80099ca:	3b01      	subs	r3, #1
 80099cc:	4629      	mov	r1, r5
 80099ce:	2b07      	cmp	r3, #7
 80099d0:	dc0a      	bgt.n	80099e8 <__gethex+0x14c>
 80099d2:	9801      	ldr	r0, [sp, #4]
 80099d4:	f000 faf4 	bl	8009fc0 <_Balloc>
 80099d8:	4604      	mov	r4, r0
 80099da:	b940      	cbnz	r0, 80099ee <__gethex+0x152>
 80099dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b50 <__gethex+0x2b4>)
 80099de:	4602      	mov	r2, r0
 80099e0:	21e4      	movs	r1, #228	@ 0xe4
 80099e2:	485c      	ldr	r0, [pc, #368]	@ (8009b54 <__gethex+0x2b8>)
 80099e4:	f001 fbae 	bl	800b144 <__assert_func>
 80099e8:	3101      	adds	r1, #1
 80099ea:	105b      	asrs	r3, r3, #1
 80099ec:	e7ef      	b.n	80099ce <__gethex+0x132>
 80099ee:	f100 0a14 	add.w	sl, r0, #20
 80099f2:	2300      	movs	r3, #0
 80099f4:	4655      	mov	r5, sl
 80099f6:	469b      	mov	fp, r3
 80099f8:	45b1      	cmp	r9, r6
 80099fa:	d337      	bcc.n	8009a6c <__gethex+0x1d0>
 80099fc:	f845 bb04 	str.w	fp, [r5], #4
 8009a00:	eba5 050a 	sub.w	r5, r5, sl
 8009a04:	10ad      	asrs	r5, r5, #2
 8009a06:	6125      	str	r5, [r4, #16]
 8009a08:	4658      	mov	r0, fp
 8009a0a:	f000 fbcb 	bl	800a1a4 <__hi0bits>
 8009a0e:	016d      	lsls	r5, r5, #5
 8009a10:	f8d8 6000 	ldr.w	r6, [r8]
 8009a14:	1a2d      	subs	r5, r5, r0
 8009a16:	42b5      	cmp	r5, r6
 8009a18:	dd54      	ble.n	8009ac4 <__gethex+0x228>
 8009a1a:	1bad      	subs	r5, r5, r6
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f000 ff54 	bl	800a8cc <__any_on>
 8009a24:	4681      	mov	r9, r0
 8009a26:	b178      	cbz	r0, 8009a48 <__gethex+0x1ac>
 8009a28:	1e6b      	subs	r3, r5, #1
 8009a2a:	1159      	asrs	r1, r3, #5
 8009a2c:	f003 021f 	and.w	r2, r3, #31
 8009a30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a34:	f04f 0901 	mov.w	r9, #1
 8009a38:	fa09 f202 	lsl.w	r2, r9, r2
 8009a3c:	420a      	tst	r2, r1
 8009a3e:	d003      	beq.n	8009a48 <__gethex+0x1ac>
 8009a40:	454b      	cmp	r3, r9
 8009a42:	dc36      	bgt.n	8009ab2 <__gethex+0x216>
 8009a44:	f04f 0902 	mov.w	r9, #2
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff febe 	bl	80097cc <rshift>
 8009a50:	442f      	add	r7, r5
 8009a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a56:	42bb      	cmp	r3, r7
 8009a58:	da42      	bge.n	8009ae0 <__gethex+0x244>
 8009a5a:	9801      	ldr	r0, [sp, #4]
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	f000 faef 	bl	800a040 <_Bfree>
 8009a62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a64:	2300      	movs	r3, #0
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	25a3      	movs	r5, #163	@ 0xa3
 8009a6a:	e793      	b.n	8009994 <__gethex+0xf8>
 8009a6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a70:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a72:	d012      	beq.n	8009a9a <__gethex+0x1fe>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d104      	bne.n	8009a82 <__gethex+0x1e6>
 8009a78:	f845 bb04 	str.w	fp, [r5], #4
 8009a7c:	f04f 0b00 	mov.w	fp, #0
 8009a80:	465b      	mov	r3, fp
 8009a82:	7830      	ldrb	r0, [r6, #0]
 8009a84:	9303      	str	r3, [sp, #12]
 8009a86:	f7ff fef3 	bl	8009870 <__hexdig_fun>
 8009a8a:	9b03      	ldr	r3, [sp, #12]
 8009a8c:	f000 000f 	and.w	r0, r0, #15
 8009a90:	4098      	lsls	r0, r3
 8009a92:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a96:	3304      	adds	r3, #4
 8009a98:	e7ae      	b.n	80099f8 <__gethex+0x15c>
 8009a9a:	45b1      	cmp	r9, r6
 8009a9c:	d8ea      	bhi.n	8009a74 <__gethex+0x1d8>
 8009a9e:	492b      	ldr	r1, [pc, #172]	@ (8009b4c <__gethex+0x2b0>)
 8009aa0:	9303      	str	r3, [sp, #12]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7ff fdab 	bl	8009600 <strncmp>
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d1e1      	bne.n	8009a74 <__gethex+0x1d8>
 8009ab0:	e7a2      	b.n	80099f8 <__gethex+0x15c>
 8009ab2:	1ea9      	subs	r1, r5, #2
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 ff09 	bl	800a8cc <__any_on>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d0c2      	beq.n	8009a44 <__gethex+0x1a8>
 8009abe:	f04f 0903 	mov.w	r9, #3
 8009ac2:	e7c1      	b.n	8009a48 <__gethex+0x1ac>
 8009ac4:	da09      	bge.n	8009ada <__gethex+0x23e>
 8009ac6:	1b75      	subs	r5, r6, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	9801      	ldr	r0, [sp, #4]
 8009acc:	462a      	mov	r2, r5
 8009ace:	f000 fcc7 	bl	800a460 <__lshift>
 8009ad2:	1b7f      	subs	r7, r7, r5
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	f100 0a14 	add.w	sl, r0, #20
 8009ada:	f04f 0900 	mov.w	r9, #0
 8009ade:	e7b8      	b.n	8009a52 <__gethex+0x1b6>
 8009ae0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ae4:	42bd      	cmp	r5, r7
 8009ae6:	dd6f      	ble.n	8009bc8 <__gethex+0x32c>
 8009ae8:	1bed      	subs	r5, r5, r7
 8009aea:	42ae      	cmp	r6, r5
 8009aec:	dc34      	bgt.n	8009b58 <__gethex+0x2bc>
 8009aee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d022      	beq.n	8009b3c <__gethex+0x2a0>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d024      	beq.n	8009b44 <__gethex+0x2a8>
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d115      	bne.n	8009b2a <__gethex+0x28e>
 8009afe:	42ae      	cmp	r6, r5
 8009b00:	d113      	bne.n	8009b2a <__gethex+0x28e>
 8009b02:	2e01      	cmp	r6, #1
 8009b04:	d10b      	bne.n	8009b1e <__gethex+0x282>
 8009b06:	9a02      	ldr	r2, [sp, #8]
 8009b08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	2301      	movs	r3, #1
 8009b10:	6123      	str	r3, [r4, #16]
 8009b12:	f8ca 3000 	str.w	r3, [sl]
 8009b16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b18:	2562      	movs	r5, #98	@ 0x62
 8009b1a:	601c      	str	r4, [r3, #0]
 8009b1c:	e73a      	b.n	8009994 <__gethex+0xf8>
 8009b1e:	1e71      	subs	r1, r6, #1
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fed3 	bl	800a8cc <__any_on>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d1ed      	bne.n	8009b06 <__gethex+0x26a>
 8009b2a:	9801      	ldr	r0, [sp, #4]
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f000 fa87 	bl	800a040 <_Bfree>
 8009b32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b34:	2300      	movs	r3, #0
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	2550      	movs	r5, #80	@ 0x50
 8009b3a:	e72b      	b.n	8009994 <__gethex+0xf8>
 8009b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f3      	bne.n	8009b2a <__gethex+0x28e>
 8009b42:	e7e0      	b.n	8009b06 <__gethex+0x26a>
 8009b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1dd      	bne.n	8009b06 <__gethex+0x26a>
 8009b4a:	e7ee      	b.n	8009b2a <__gethex+0x28e>
 8009b4c:	0800b324 	.word	0x0800b324
 8009b50:	0800b33a 	.word	0x0800b33a
 8009b54:	0800b34b 	.word	0x0800b34b
 8009b58:	1e6f      	subs	r7, r5, #1
 8009b5a:	f1b9 0f00 	cmp.w	r9, #0
 8009b5e:	d130      	bne.n	8009bc2 <__gethex+0x326>
 8009b60:	b127      	cbz	r7, 8009b6c <__gethex+0x2d0>
 8009b62:	4639      	mov	r1, r7
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 feb1 	bl	800a8cc <__any_on>
 8009b6a:	4681      	mov	r9, r0
 8009b6c:	117a      	asrs	r2, r7, #5
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b74:	f007 071f 	and.w	r7, r7, #31
 8009b78:	40bb      	lsls	r3, r7
 8009b7a:	4213      	tst	r3, r2
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	4620      	mov	r0, r4
 8009b80:	bf18      	it	ne
 8009b82:	f049 0902 	orrne.w	r9, r9, #2
 8009b86:	f7ff fe21 	bl	80097cc <rshift>
 8009b8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b8e:	1b76      	subs	r6, r6, r5
 8009b90:	2502      	movs	r5, #2
 8009b92:	f1b9 0f00 	cmp.w	r9, #0
 8009b96:	d047      	beq.n	8009c28 <__gethex+0x38c>
 8009b98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d015      	beq.n	8009bcc <__gethex+0x330>
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d017      	beq.n	8009bd4 <__gethex+0x338>
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d109      	bne.n	8009bbc <__gethex+0x320>
 8009ba8:	f019 0f02 	tst.w	r9, #2
 8009bac:	d006      	beq.n	8009bbc <__gethex+0x320>
 8009bae:	f8da 3000 	ldr.w	r3, [sl]
 8009bb2:	ea49 0903 	orr.w	r9, r9, r3
 8009bb6:	f019 0f01 	tst.w	r9, #1
 8009bba:	d10e      	bne.n	8009bda <__gethex+0x33e>
 8009bbc:	f045 0510 	orr.w	r5, r5, #16
 8009bc0:	e032      	b.n	8009c28 <__gethex+0x38c>
 8009bc2:	f04f 0901 	mov.w	r9, #1
 8009bc6:	e7d1      	b.n	8009b6c <__gethex+0x2d0>
 8009bc8:	2501      	movs	r5, #1
 8009bca:	e7e2      	b.n	8009b92 <__gethex+0x2f6>
 8009bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bce:	f1c3 0301 	rsb	r3, r3, #1
 8009bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0f0      	beq.n	8009bbc <__gethex+0x320>
 8009bda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bde:	f104 0314 	add.w	r3, r4, #20
 8009be2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009be6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bea:	f04f 0c00 	mov.w	ip, #0
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009bf8:	d01b      	beq.n	8009c32 <__gethex+0x396>
 8009bfa:	3201      	adds	r2, #1
 8009bfc:	6002      	str	r2, [r0, #0]
 8009bfe:	2d02      	cmp	r5, #2
 8009c00:	f104 0314 	add.w	r3, r4, #20
 8009c04:	d13c      	bne.n	8009c80 <__gethex+0x3e4>
 8009c06:	f8d8 2000 	ldr.w	r2, [r8]
 8009c0a:	3a01      	subs	r2, #1
 8009c0c:	42b2      	cmp	r2, r6
 8009c0e:	d109      	bne.n	8009c24 <__gethex+0x388>
 8009c10:	1171      	asrs	r1, r6, #5
 8009c12:	2201      	movs	r2, #1
 8009c14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c18:	f006 061f 	and.w	r6, r6, #31
 8009c1c:	fa02 f606 	lsl.w	r6, r2, r6
 8009c20:	421e      	tst	r6, r3
 8009c22:	d13a      	bne.n	8009c9a <__gethex+0x3fe>
 8009c24:	f045 0520 	orr.w	r5, r5, #32
 8009c28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c2a:	601c      	str	r4, [r3, #0]
 8009c2c:	9b02      	ldr	r3, [sp, #8]
 8009c2e:	601f      	str	r7, [r3, #0]
 8009c30:	e6b0      	b.n	8009994 <__gethex+0xf8>
 8009c32:	4299      	cmp	r1, r3
 8009c34:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c38:	d8d9      	bhi.n	8009bee <__gethex+0x352>
 8009c3a:	68a3      	ldr	r3, [r4, #8]
 8009c3c:	459b      	cmp	fp, r3
 8009c3e:	db17      	blt.n	8009c70 <__gethex+0x3d4>
 8009c40:	6861      	ldr	r1, [r4, #4]
 8009c42:	9801      	ldr	r0, [sp, #4]
 8009c44:	3101      	adds	r1, #1
 8009c46:	f000 f9bb 	bl	8009fc0 <_Balloc>
 8009c4a:	4681      	mov	r9, r0
 8009c4c:	b918      	cbnz	r0, 8009c56 <__gethex+0x3ba>
 8009c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb8 <__gethex+0x41c>)
 8009c50:	4602      	mov	r2, r0
 8009c52:	2184      	movs	r1, #132	@ 0x84
 8009c54:	e6c5      	b.n	80099e2 <__gethex+0x146>
 8009c56:	6922      	ldr	r2, [r4, #16]
 8009c58:	3202      	adds	r2, #2
 8009c5a:	f104 010c 	add.w	r1, r4, #12
 8009c5e:	0092      	lsls	r2, r2, #2
 8009c60:	300c      	adds	r0, #12
 8009c62:	f7ff fd52 	bl	800970a <memcpy>
 8009c66:	4621      	mov	r1, r4
 8009c68:	9801      	ldr	r0, [sp, #4]
 8009c6a:	f000 f9e9 	bl	800a040 <_Bfree>
 8009c6e:	464c      	mov	r4, r9
 8009c70:	6923      	ldr	r3, [r4, #16]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c78:	6122      	str	r2, [r4, #16]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	615a      	str	r2, [r3, #20]
 8009c7e:	e7be      	b.n	8009bfe <__gethex+0x362>
 8009c80:	6922      	ldr	r2, [r4, #16]
 8009c82:	455a      	cmp	r2, fp
 8009c84:	dd0b      	ble.n	8009c9e <__gethex+0x402>
 8009c86:	2101      	movs	r1, #1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff fd9f 	bl	80097cc <rshift>
 8009c8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c92:	3701      	adds	r7, #1
 8009c94:	42bb      	cmp	r3, r7
 8009c96:	f6ff aee0 	blt.w	8009a5a <__gethex+0x1be>
 8009c9a:	2501      	movs	r5, #1
 8009c9c:	e7c2      	b.n	8009c24 <__gethex+0x388>
 8009c9e:	f016 061f 	ands.w	r6, r6, #31
 8009ca2:	d0fa      	beq.n	8009c9a <__gethex+0x3fe>
 8009ca4:	4453      	add	r3, sl
 8009ca6:	f1c6 0620 	rsb	r6, r6, #32
 8009caa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009cae:	f000 fa79 	bl	800a1a4 <__hi0bits>
 8009cb2:	42b0      	cmp	r0, r6
 8009cb4:	dbe7      	blt.n	8009c86 <__gethex+0x3ea>
 8009cb6:	e7f0      	b.n	8009c9a <__gethex+0x3fe>
 8009cb8:	0800b33a 	.word	0x0800b33a

08009cbc <L_shift>:
 8009cbc:	f1c2 0208 	rsb	r2, r2, #8
 8009cc0:	0092      	lsls	r2, r2, #2
 8009cc2:	b570      	push	{r4, r5, r6, lr}
 8009cc4:	f1c2 0620 	rsb	r6, r2, #32
 8009cc8:	6843      	ldr	r3, [r0, #4]
 8009cca:	6804      	ldr	r4, [r0, #0]
 8009ccc:	fa03 f506 	lsl.w	r5, r3, r6
 8009cd0:	432c      	orrs	r4, r5
 8009cd2:	40d3      	lsrs	r3, r2
 8009cd4:	6004      	str	r4, [r0, #0]
 8009cd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cda:	4288      	cmp	r0, r1
 8009cdc:	d3f4      	bcc.n	8009cc8 <L_shift+0xc>
 8009cde:	bd70      	pop	{r4, r5, r6, pc}

08009ce0 <__match>:
 8009ce0:	b530      	push	{r4, r5, lr}
 8009ce2:	6803      	ldr	r3, [r0, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cea:	b914      	cbnz	r4, 8009cf2 <__match+0x12>
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	2001      	movs	r0, #1
 8009cf0:	bd30      	pop	{r4, r5, pc}
 8009cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009cfa:	2d19      	cmp	r5, #25
 8009cfc:	bf98      	it	ls
 8009cfe:	3220      	addls	r2, #32
 8009d00:	42a2      	cmp	r2, r4
 8009d02:	d0f0      	beq.n	8009ce6 <__match+0x6>
 8009d04:	2000      	movs	r0, #0
 8009d06:	e7f3      	b.n	8009cf0 <__match+0x10>

08009d08 <__hexnan>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	680b      	ldr	r3, [r1, #0]
 8009d0e:	6801      	ldr	r1, [r0, #0]
 8009d10:	115e      	asrs	r6, r3, #5
 8009d12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d16:	f013 031f 	ands.w	r3, r3, #31
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	bf18      	it	ne
 8009d1e:	3604      	addne	r6, #4
 8009d20:	2500      	movs	r5, #0
 8009d22:	1f37      	subs	r7, r6, #4
 8009d24:	4682      	mov	sl, r0
 8009d26:	4690      	mov	r8, r2
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d2e:	46b9      	mov	r9, r7
 8009d30:	463c      	mov	r4, r7
 8009d32:	9502      	str	r5, [sp, #8]
 8009d34:	46ab      	mov	fp, r5
 8009d36:	784a      	ldrb	r2, [r1, #1]
 8009d38:	1c4b      	adds	r3, r1, #1
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	b342      	cbz	r2, 8009d90 <__hexnan+0x88>
 8009d3e:	4610      	mov	r0, r2
 8009d40:	9105      	str	r1, [sp, #20]
 8009d42:	9204      	str	r2, [sp, #16]
 8009d44:	f7ff fd94 	bl	8009870 <__hexdig_fun>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d151      	bne.n	8009df0 <__hexnan+0xe8>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	9905      	ldr	r1, [sp, #20]
 8009d50:	2a20      	cmp	r2, #32
 8009d52:	d818      	bhi.n	8009d86 <__hexnan+0x7e>
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	459b      	cmp	fp, r3
 8009d58:	dd13      	ble.n	8009d82 <__hexnan+0x7a>
 8009d5a:	454c      	cmp	r4, r9
 8009d5c:	d206      	bcs.n	8009d6c <__hexnan+0x64>
 8009d5e:	2d07      	cmp	r5, #7
 8009d60:	dc04      	bgt.n	8009d6c <__hexnan+0x64>
 8009d62:	462a      	mov	r2, r5
 8009d64:	4649      	mov	r1, r9
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7ff ffa8 	bl	8009cbc <L_shift>
 8009d6c:	4544      	cmp	r4, r8
 8009d6e:	d952      	bls.n	8009e16 <__hexnan+0x10e>
 8009d70:	2300      	movs	r3, #0
 8009d72:	f1a4 0904 	sub.w	r9, r4, #4
 8009d76:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d7a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d7e:	464c      	mov	r4, r9
 8009d80:	461d      	mov	r5, r3
 8009d82:	9903      	ldr	r1, [sp, #12]
 8009d84:	e7d7      	b.n	8009d36 <__hexnan+0x2e>
 8009d86:	2a29      	cmp	r2, #41	@ 0x29
 8009d88:	d157      	bne.n	8009e3a <__hexnan+0x132>
 8009d8a:	3102      	adds	r1, #2
 8009d8c:	f8ca 1000 	str.w	r1, [sl]
 8009d90:	f1bb 0f00 	cmp.w	fp, #0
 8009d94:	d051      	beq.n	8009e3a <__hexnan+0x132>
 8009d96:	454c      	cmp	r4, r9
 8009d98:	d206      	bcs.n	8009da8 <__hexnan+0xa0>
 8009d9a:	2d07      	cmp	r5, #7
 8009d9c:	dc04      	bgt.n	8009da8 <__hexnan+0xa0>
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4649      	mov	r1, r9
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff ff8a 	bl	8009cbc <L_shift>
 8009da8:	4544      	cmp	r4, r8
 8009daa:	d936      	bls.n	8009e1a <__hexnan+0x112>
 8009dac:	f1a8 0204 	sub.w	r2, r8, #4
 8009db0:	4623      	mov	r3, r4
 8009db2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009db6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009dba:	429f      	cmp	r7, r3
 8009dbc:	d2f9      	bcs.n	8009db2 <__hexnan+0xaa>
 8009dbe:	1b3b      	subs	r3, r7, r4
 8009dc0:	f023 0303 	bic.w	r3, r3, #3
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	3401      	adds	r4, #1
 8009dc8:	3e03      	subs	r6, #3
 8009dca:	42b4      	cmp	r4, r6
 8009dcc:	bf88      	it	hi
 8009dce:	2304      	movhi	r3, #4
 8009dd0:	4443      	add	r3, r8
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f843 2b04 	str.w	r2, [r3], #4
 8009dd8:	429f      	cmp	r7, r3
 8009dda:	d2fb      	bcs.n	8009dd4 <__hexnan+0xcc>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	b91b      	cbnz	r3, 8009de8 <__hexnan+0xe0>
 8009de0:	4547      	cmp	r7, r8
 8009de2:	d128      	bne.n	8009e36 <__hexnan+0x12e>
 8009de4:	2301      	movs	r3, #1
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	2005      	movs	r0, #5
 8009dea:	b007      	add	sp, #28
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	3501      	adds	r5, #1
 8009df2:	2d08      	cmp	r5, #8
 8009df4:	f10b 0b01 	add.w	fp, fp, #1
 8009df8:	dd06      	ble.n	8009e08 <__hexnan+0x100>
 8009dfa:	4544      	cmp	r4, r8
 8009dfc:	d9c1      	bls.n	8009d82 <__hexnan+0x7a>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e04:	2501      	movs	r5, #1
 8009e06:	3c04      	subs	r4, #4
 8009e08:	6822      	ldr	r2, [r4, #0]
 8009e0a:	f000 000f 	and.w	r0, r0, #15
 8009e0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e12:	6020      	str	r0, [r4, #0]
 8009e14:	e7b5      	b.n	8009d82 <__hexnan+0x7a>
 8009e16:	2508      	movs	r5, #8
 8009e18:	e7b3      	b.n	8009d82 <__hexnan+0x7a>
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d0dd      	beq.n	8009ddc <__hexnan+0xd4>
 8009e20:	f1c3 0320 	rsb	r3, r3, #32
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295
 8009e28:	40da      	lsrs	r2, r3
 8009e2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e2e:	4013      	ands	r3, r2
 8009e30:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e34:	e7d2      	b.n	8009ddc <__hexnan+0xd4>
 8009e36:	3f04      	subs	r7, #4
 8009e38:	e7d0      	b.n	8009ddc <__hexnan+0xd4>
 8009e3a:	2004      	movs	r0, #4
 8009e3c:	e7d5      	b.n	8009dea <__hexnan+0xe2>
	...

08009e40 <sbrk_aligned>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	4e0f      	ldr	r6, [pc, #60]	@ (8009e80 <sbrk_aligned+0x40>)
 8009e44:	460c      	mov	r4, r1
 8009e46:	6831      	ldr	r1, [r6, #0]
 8009e48:	4605      	mov	r5, r0
 8009e4a:	b911      	cbnz	r1, 8009e52 <sbrk_aligned+0x12>
 8009e4c:	f001 f96a 	bl	800b124 <_sbrk_r>
 8009e50:	6030      	str	r0, [r6, #0]
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f001 f965 	bl	800b124 <_sbrk_r>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d103      	bne.n	8009e66 <sbrk_aligned+0x26>
 8009e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8009e62:	4620      	mov	r0, r4
 8009e64:	bd70      	pop	{r4, r5, r6, pc}
 8009e66:	1cc4      	adds	r4, r0, #3
 8009e68:	f024 0403 	bic.w	r4, r4, #3
 8009e6c:	42a0      	cmp	r0, r4
 8009e6e:	d0f8      	beq.n	8009e62 <sbrk_aligned+0x22>
 8009e70:	1a21      	subs	r1, r4, r0
 8009e72:	4628      	mov	r0, r5
 8009e74:	f001 f956 	bl	800b124 <_sbrk_r>
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d1f2      	bne.n	8009e62 <sbrk_aligned+0x22>
 8009e7c:	e7ef      	b.n	8009e5e <sbrk_aligned+0x1e>
 8009e7e:	bf00      	nop
 8009e80:	20000ac0 	.word	0x20000ac0

08009e84 <_malloc_r>:
 8009e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e88:	1ccd      	adds	r5, r1, #3
 8009e8a:	f025 0503 	bic.w	r5, r5, #3
 8009e8e:	3508      	adds	r5, #8
 8009e90:	2d0c      	cmp	r5, #12
 8009e92:	bf38      	it	cc
 8009e94:	250c      	movcc	r5, #12
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	4606      	mov	r6, r0
 8009e9a:	db01      	blt.n	8009ea0 <_malloc_r+0x1c>
 8009e9c:	42a9      	cmp	r1, r5
 8009e9e:	d904      	bls.n	8009eaa <_malloc_r+0x26>
 8009ea0:	230c      	movs	r3, #12
 8009ea2:	6033      	str	r3, [r6, #0]
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f80 <_malloc_r+0xfc>
 8009eae:	f000 f87b 	bl	8009fa8 <__malloc_lock>
 8009eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	bb44      	cbnz	r4, 8009f0c <_malloc_r+0x88>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f7ff ffbf 	bl	8009e40 <sbrk_aligned>
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	d158      	bne.n	8009f7a <_malloc_r+0xf6>
 8009ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8009ecc:	4627      	mov	r7, r4
 8009ece:	2f00      	cmp	r7, #0
 8009ed0:	d143      	bne.n	8009f5a <_malloc_r+0xd6>
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d04b      	beq.n	8009f6e <_malloc_r+0xea>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	4639      	mov	r1, r7
 8009eda:	4630      	mov	r0, r6
 8009edc:	eb04 0903 	add.w	r9, r4, r3
 8009ee0:	f001 f920 	bl	800b124 <_sbrk_r>
 8009ee4:	4581      	cmp	r9, r0
 8009ee6:	d142      	bne.n	8009f6e <_malloc_r+0xea>
 8009ee8:	6821      	ldr	r1, [r4, #0]
 8009eea:	1a6d      	subs	r5, r5, r1
 8009eec:	4629      	mov	r1, r5
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ffa6 	bl	8009e40 <sbrk_aligned>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d03a      	beq.n	8009f6e <_malloc_r+0xea>
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	442b      	add	r3, r5
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	f8d8 3000 	ldr.w	r3, [r8]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	bb62      	cbnz	r2, 8009f60 <_malloc_r+0xdc>
 8009f06:	f8c8 7000 	str.w	r7, [r8]
 8009f0a:	e00f      	b.n	8009f2c <_malloc_r+0xa8>
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	1b52      	subs	r2, r2, r5
 8009f10:	d420      	bmi.n	8009f54 <_malloc_r+0xd0>
 8009f12:	2a0b      	cmp	r2, #11
 8009f14:	d917      	bls.n	8009f46 <_malloc_r+0xc2>
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	6025      	str	r5, [r4, #0]
 8009f1c:	bf18      	it	ne
 8009f1e:	6059      	strne	r1, [r3, #4]
 8009f20:	6863      	ldr	r3, [r4, #4]
 8009f22:	bf08      	it	eq
 8009f24:	f8c8 1000 	streq.w	r1, [r8]
 8009f28:	5162      	str	r2, [r4, r5]
 8009f2a:	604b      	str	r3, [r1, #4]
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f000 f841 	bl	8009fb4 <__malloc_unlock>
 8009f32:	f104 000b 	add.w	r0, r4, #11
 8009f36:	1d23      	adds	r3, r4, #4
 8009f38:	f020 0007 	bic.w	r0, r0, #7
 8009f3c:	1ac2      	subs	r2, r0, r3
 8009f3e:	bf1c      	itt	ne
 8009f40:	1a1b      	subne	r3, r3, r0
 8009f42:	50a3      	strne	r3, [r4, r2]
 8009f44:	e7af      	b.n	8009ea6 <_malloc_r+0x22>
 8009f46:	6862      	ldr	r2, [r4, #4]
 8009f48:	42a3      	cmp	r3, r4
 8009f4a:	bf0c      	ite	eq
 8009f4c:	f8c8 2000 	streq.w	r2, [r8]
 8009f50:	605a      	strne	r2, [r3, #4]
 8009f52:	e7eb      	b.n	8009f2c <_malloc_r+0xa8>
 8009f54:	4623      	mov	r3, r4
 8009f56:	6864      	ldr	r4, [r4, #4]
 8009f58:	e7ae      	b.n	8009eb8 <_malloc_r+0x34>
 8009f5a:	463c      	mov	r4, r7
 8009f5c:	687f      	ldr	r7, [r7, #4]
 8009f5e:	e7b6      	b.n	8009ece <_malloc_r+0x4a>
 8009f60:	461a      	mov	r2, r3
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d1fb      	bne.n	8009f60 <_malloc_r+0xdc>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6053      	str	r3, [r2, #4]
 8009f6c:	e7de      	b.n	8009f2c <_malloc_r+0xa8>
 8009f6e:	230c      	movs	r3, #12
 8009f70:	6033      	str	r3, [r6, #0]
 8009f72:	4630      	mov	r0, r6
 8009f74:	f000 f81e 	bl	8009fb4 <__malloc_unlock>
 8009f78:	e794      	b.n	8009ea4 <_malloc_r+0x20>
 8009f7a:	6005      	str	r5, [r0, #0]
 8009f7c:	e7d6      	b.n	8009f2c <_malloc_r+0xa8>
 8009f7e:	bf00      	nop
 8009f80:	20000ac4 	.word	0x20000ac4

08009f84 <__ascii_mbtowc>:
 8009f84:	b082      	sub	sp, #8
 8009f86:	b901      	cbnz	r1, 8009f8a <__ascii_mbtowc+0x6>
 8009f88:	a901      	add	r1, sp, #4
 8009f8a:	b142      	cbz	r2, 8009f9e <__ascii_mbtowc+0x1a>
 8009f8c:	b14b      	cbz	r3, 8009fa2 <__ascii_mbtowc+0x1e>
 8009f8e:	7813      	ldrb	r3, [r2, #0]
 8009f90:	600b      	str	r3, [r1, #0]
 8009f92:	7812      	ldrb	r2, [r2, #0]
 8009f94:	1e10      	subs	r0, r2, #0
 8009f96:	bf18      	it	ne
 8009f98:	2001      	movne	r0, #1
 8009f9a:	b002      	add	sp, #8
 8009f9c:	4770      	bx	lr
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	e7fb      	b.n	8009f9a <__ascii_mbtowc+0x16>
 8009fa2:	f06f 0001 	mvn.w	r0, #1
 8009fa6:	e7f8      	b.n	8009f9a <__ascii_mbtowc+0x16>

08009fa8 <__malloc_lock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	@ (8009fb0 <__malloc_lock+0x8>)
 8009faa:	f7ff bbac 	b.w	8009706 <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	20000abc 	.word	0x20000abc

08009fb4 <__malloc_unlock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	@ (8009fbc <__malloc_unlock+0x8>)
 8009fb6:	f7ff bba7 	b.w	8009708 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20000abc 	.word	0x20000abc

08009fc0 <_Balloc>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	69c6      	ldr	r6, [r0, #28]
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	460d      	mov	r5, r1
 8009fc8:	b976      	cbnz	r6, 8009fe8 <_Balloc+0x28>
 8009fca:	2010      	movs	r0, #16
 8009fcc:	f001 f8ec 	bl	800b1a8 <malloc>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	61e0      	str	r0, [r4, #28]
 8009fd4:	b920      	cbnz	r0, 8009fe0 <_Balloc+0x20>
 8009fd6:	4b18      	ldr	r3, [pc, #96]	@ (800a038 <_Balloc+0x78>)
 8009fd8:	4818      	ldr	r0, [pc, #96]	@ (800a03c <_Balloc+0x7c>)
 8009fda:	216b      	movs	r1, #107	@ 0x6b
 8009fdc:	f001 f8b2 	bl	800b144 <__assert_func>
 8009fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fe4:	6006      	str	r6, [r0, #0]
 8009fe6:	60c6      	str	r6, [r0, #12]
 8009fe8:	69e6      	ldr	r6, [r4, #28]
 8009fea:	68f3      	ldr	r3, [r6, #12]
 8009fec:	b183      	cbz	r3, 800a010 <_Balloc+0x50>
 8009fee:	69e3      	ldr	r3, [r4, #28]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ff6:	b9b8      	cbnz	r0, 800a028 <_Balloc+0x68>
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8009ffe:	1d72      	adds	r2, r6, #5
 800a000:	0092      	lsls	r2, r2, #2
 800a002:	4620      	mov	r0, r4
 800a004:	f001 f8bc 	bl	800b180 <_calloc_r>
 800a008:	b160      	cbz	r0, 800a024 <_Balloc+0x64>
 800a00a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a00e:	e00e      	b.n	800a02e <_Balloc+0x6e>
 800a010:	2221      	movs	r2, #33	@ 0x21
 800a012:	2104      	movs	r1, #4
 800a014:	4620      	mov	r0, r4
 800a016:	f001 f8b3 	bl	800b180 <_calloc_r>
 800a01a:	69e3      	ldr	r3, [r4, #28]
 800a01c:	60f0      	str	r0, [r6, #12]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e4      	bne.n	8009fee <_Balloc+0x2e>
 800a024:	2000      	movs	r0, #0
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	6802      	ldr	r2, [r0, #0]
 800a02a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a02e:	2300      	movs	r3, #0
 800a030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a034:	e7f7      	b.n	800a026 <_Balloc+0x66>
 800a036:	bf00      	nop
 800a038:	0800b3ab 	.word	0x0800b3ab
 800a03c:	0800b3c2 	.word	0x0800b3c2

0800a040 <_Bfree>:
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	69c6      	ldr	r6, [r0, #28]
 800a044:	4605      	mov	r5, r0
 800a046:	460c      	mov	r4, r1
 800a048:	b976      	cbnz	r6, 800a068 <_Bfree+0x28>
 800a04a:	2010      	movs	r0, #16
 800a04c:	f001 f8ac 	bl	800b1a8 <malloc>
 800a050:	4602      	mov	r2, r0
 800a052:	61e8      	str	r0, [r5, #28]
 800a054:	b920      	cbnz	r0, 800a060 <_Bfree+0x20>
 800a056:	4b09      	ldr	r3, [pc, #36]	@ (800a07c <_Bfree+0x3c>)
 800a058:	4809      	ldr	r0, [pc, #36]	@ (800a080 <_Bfree+0x40>)
 800a05a:	218f      	movs	r1, #143	@ 0x8f
 800a05c:	f001 f872 	bl	800b144 <__assert_func>
 800a060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a064:	6006      	str	r6, [r0, #0]
 800a066:	60c6      	str	r6, [r0, #12]
 800a068:	b13c      	cbz	r4, 800a07a <_Bfree+0x3a>
 800a06a:	69eb      	ldr	r3, [r5, #28]
 800a06c:	6862      	ldr	r2, [r4, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a074:	6021      	str	r1, [r4, #0]
 800a076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a07a:	bd70      	pop	{r4, r5, r6, pc}
 800a07c:	0800b3ab 	.word	0x0800b3ab
 800a080:	0800b3c2 	.word	0x0800b3c2

0800a084 <__multadd>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	690d      	ldr	r5, [r1, #16]
 800a08a:	4607      	mov	r7, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	461e      	mov	r6, r3
 800a090:	f101 0c14 	add.w	ip, r1, #20
 800a094:	2000      	movs	r0, #0
 800a096:	f8dc 3000 	ldr.w	r3, [ip]
 800a09a:	b299      	uxth	r1, r3
 800a09c:	fb02 6101 	mla	r1, r2, r1, r6
 800a0a0:	0c1e      	lsrs	r6, r3, #16
 800a0a2:	0c0b      	lsrs	r3, r1, #16
 800a0a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a0a8:	b289      	uxth	r1, r1
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0b0:	4285      	cmp	r5, r0
 800a0b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ba:	dcec      	bgt.n	800a096 <__multadd+0x12>
 800a0bc:	b30e      	cbz	r6, 800a102 <__multadd+0x7e>
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	42ab      	cmp	r3, r5
 800a0c2:	dc19      	bgt.n	800a0f8 <__multadd+0x74>
 800a0c4:	6861      	ldr	r1, [r4, #4]
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	f7ff ff79 	bl	8009fc0 <_Balloc>
 800a0ce:	4680      	mov	r8, r0
 800a0d0:	b928      	cbnz	r0, 800a0de <__multadd+0x5a>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a108 <__multadd+0x84>)
 800a0d6:	480d      	ldr	r0, [pc, #52]	@ (800a10c <__multadd+0x88>)
 800a0d8:	21ba      	movs	r1, #186	@ 0xba
 800a0da:	f001 f833 	bl	800b144 <__assert_func>
 800a0de:	6922      	ldr	r2, [r4, #16]
 800a0e0:	3202      	adds	r2, #2
 800a0e2:	f104 010c 	add.w	r1, r4, #12
 800a0e6:	0092      	lsls	r2, r2, #2
 800a0e8:	300c      	adds	r0, #12
 800a0ea:	f7ff fb0e 	bl	800970a <memcpy>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff ffa5 	bl	800a040 <_Bfree>
 800a0f6:	4644      	mov	r4, r8
 800a0f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	615e      	str	r6, [r3, #20]
 800a100:	6125      	str	r5, [r4, #16]
 800a102:	4620      	mov	r0, r4
 800a104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a108:	0800b33a 	.word	0x0800b33a
 800a10c:	0800b3c2 	.word	0x0800b3c2

0800a110 <__s2b>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	460c      	mov	r4, r1
 800a116:	4615      	mov	r5, r2
 800a118:	461f      	mov	r7, r3
 800a11a:	2209      	movs	r2, #9
 800a11c:	3308      	adds	r3, #8
 800a11e:	4606      	mov	r6, r0
 800a120:	fb93 f3f2 	sdiv	r3, r3, r2
 800a124:	2100      	movs	r1, #0
 800a126:	2201      	movs	r2, #1
 800a128:	429a      	cmp	r2, r3
 800a12a:	db09      	blt.n	800a140 <__s2b+0x30>
 800a12c:	4630      	mov	r0, r6
 800a12e:	f7ff ff47 	bl	8009fc0 <_Balloc>
 800a132:	b940      	cbnz	r0, 800a146 <__s2b+0x36>
 800a134:	4602      	mov	r2, r0
 800a136:	4b19      	ldr	r3, [pc, #100]	@ (800a19c <__s2b+0x8c>)
 800a138:	4819      	ldr	r0, [pc, #100]	@ (800a1a0 <__s2b+0x90>)
 800a13a:	21d3      	movs	r1, #211	@ 0xd3
 800a13c:	f001 f802 	bl	800b144 <__assert_func>
 800a140:	0052      	lsls	r2, r2, #1
 800a142:	3101      	adds	r1, #1
 800a144:	e7f0      	b.n	800a128 <__s2b+0x18>
 800a146:	9b08      	ldr	r3, [sp, #32]
 800a148:	6143      	str	r3, [r0, #20]
 800a14a:	2d09      	cmp	r5, #9
 800a14c:	f04f 0301 	mov.w	r3, #1
 800a150:	6103      	str	r3, [r0, #16]
 800a152:	dd16      	ble.n	800a182 <__s2b+0x72>
 800a154:	f104 0909 	add.w	r9, r4, #9
 800a158:	46c8      	mov	r8, r9
 800a15a:	442c      	add	r4, r5
 800a15c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a160:	4601      	mov	r1, r0
 800a162:	3b30      	subs	r3, #48	@ 0x30
 800a164:	220a      	movs	r2, #10
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff8c 	bl	800a084 <__multadd>
 800a16c:	45a0      	cmp	r8, r4
 800a16e:	d1f5      	bne.n	800a15c <__s2b+0x4c>
 800a170:	f1a5 0408 	sub.w	r4, r5, #8
 800a174:	444c      	add	r4, r9
 800a176:	1b2d      	subs	r5, r5, r4
 800a178:	1963      	adds	r3, r4, r5
 800a17a:	42bb      	cmp	r3, r7
 800a17c:	db04      	blt.n	800a188 <__s2b+0x78>
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a182:	340a      	adds	r4, #10
 800a184:	2509      	movs	r5, #9
 800a186:	e7f6      	b.n	800a176 <__s2b+0x66>
 800a188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a18c:	4601      	mov	r1, r0
 800a18e:	3b30      	subs	r3, #48	@ 0x30
 800a190:	220a      	movs	r2, #10
 800a192:	4630      	mov	r0, r6
 800a194:	f7ff ff76 	bl	800a084 <__multadd>
 800a198:	e7ee      	b.n	800a178 <__s2b+0x68>
 800a19a:	bf00      	nop
 800a19c:	0800b33a 	.word	0x0800b33a
 800a1a0:	0800b3c2 	.word	0x0800b3c2

0800a1a4 <__hi0bits>:
 800a1a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	bf36      	itet	cc
 800a1ac:	0403      	lslcc	r3, r0, #16
 800a1ae:	2000      	movcs	r0, #0
 800a1b0:	2010      	movcc	r0, #16
 800a1b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1b6:	bf3c      	itt	cc
 800a1b8:	021b      	lslcc	r3, r3, #8
 800a1ba:	3008      	addcc	r0, #8
 800a1bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1c0:	bf3c      	itt	cc
 800a1c2:	011b      	lslcc	r3, r3, #4
 800a1c4:	3004      	addcc	r0, #4
 800a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ca:	bf3c      	itt	cc
 800a1cc:	009b      	lslcc	r3, r3, #2
 800a1ce:	3002      	addcc	r0, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	db05      	blt.n	800a1e0 <__hi0bits+0x3c>
 800a1d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1d8:	f100 0001 	add.w	r0, r0, #1
 800a1dc:	bf08      	it	eq
 800a1de:	2020      	moveq	r0, #32
 800a1e0:	4770      	bx	lr

0800a1e2 <__lo0bits>:
 800a1e2:	6803      	ldr	r3, [r0, #0]
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f013 0007 	ands.w	r0, r3, #7
 800a1ea:	d00b      	beq.n	800a204 <__lo0bits+0x22>
 800a1ec:	07d9      	lsls	r1, r3, #31
 800a1ee:	d421      	bmi.n	800a234 <__lo0bits+0x52>
 800a1f0:	0798      	lsls	r0, r3, #30
 800a1f2:	bf49      	itett	mi
 800a1f4:	085b      	lsrmi	r3, r3, #1
 800a1f6:	089b      	lsrpl	r3, r3, #2
 800a1f8:	2001      	movmi	r0, #1
 800a1fa:	6013      	strmi	r3, [r2, #0]
 800a1fc:	bf5c      	itt	pl
 800a1fe:	6013      	strpl	r3, [r2, #0]
 800a200:	2002      	movpl	r0, #2
 800a202:	4770      	bx	lr
 800a204:	b299      	uxth	r1, r3
 800a206:	b909      	cbnz	r1, 800a20c <__lo0bits+0x2a>
 800a208:	0c1b      	lsrs	r3, r3, #16
 800a20a:	2010      	movs	r0, #16
 800a20c:	b2d9      	uxtb	r1, r3
 800a20e:	b909      	cbnz	r1, 800a214 <__lo0bits+0x32>
 800a210:	3008      	adds	r0, #8
 800a212:	0a1b      	lsrs	r3, r3, #8
 800a214:	0719      	lsls	r1, r3, #28
 800a216:	bf04      	itt	eq
 800a218:	091b      	lsreq	r3, r3, #4
 800a21a:	3004      	addeq	r0, #4
 800a21c:	0799      	lsls	r1, r3, #30
 800a21e:	bf04      	itt	eq
 800a220:	089b      	lsreq	r3, r3, #2
 800a222:	3002      	addeq	r0, #2
 800a224:	07d9      	lsls	r1, r3, #31
 800a226:	d403      	bmi.n	800a230 <__lo0bits+0x4e>
 800a228:	085b      	lsrs	r3, r3, #1
 800a22a:	f100 0001 	add.w	r0, r0, #1
 800a22e:	d003      	beq.n	800a238 <__lo0bits+0x56>
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	4770      	bx	lr
 800a234:	2000      	movs	r0, #0
 800a236:	4770      	bx	lr
 800a238:	2020      	movs	r0, #32
 800a23a:	4770      	bx	lr

0800a23c <__i2b>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	460c      	mov	r4, r1
 800a240:	2101      	movs	r1, #1
 800a242:	f7ff febd 	bl	8009fc0 <_Balloc>
 800a246:	4602      	mov	r2, r0
 800a248:	b928      	cbnz	r0, 800a256 <__i2b+0x1a>
 800a24a:	4b05      	ldr	r3, [pc, #20]	@ (800a260 <__i2b+0x24>)
 800a24c:	4805      	ldr	r0, [pc, #20]	@ (800a264 <__i2b+0x28>)
 800a24e:	f240 1145 	movw	r1, #325	@ 0x145
 800a252:	f000 ff77 	bl	800b144 <__assert_func>
 800a256:	2301      	movs	r3, #1
 800a258:	6144      	str	r4, [r0, #20]
 800a25a:	6103      	str	r3, [r0, #16]
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop
 800a260:	0800b33a 	.word	0x0800b33a
 800a264:	0800b3c2 	.word	0x0800b3c2

0800a268 <__multiply>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	4617      	mov	r7, r2
 800a26e:	690a      	ldr	r2, [r1, #16]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	429a      	cmp	r2, r3
 800a274:	bfa8      	it	ge
 800a276:	463b      	movge	r3, r7
 800a278:	4689      	mov	r9, r1
 800a27a:	bfa4      	itt	ge
 800a27c:	460f      	movge	r7, r1
 800a27e:	4699      	movge	r9, r3
 800a280:	693d      	ldr	r5, [r7, #16]
 800a282:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	eb05 060a 	add.w	r6, r5, sl
 800a28e:	42b3      	cmp	r3, r6
 800a290:	b085      	sub	sp, #20
 800a292:	bfb8      	it	lt
 800a294:	3101      	addlt	r1, #1
 800a296:	f7ff fe93 	bl	8009fc0 <_Balloc>
 800a29a:	b930      	cbnz	r0, 800a2aa <__multiply+0x42>
 800a29c:	4602      	mov	r2, r0
 800a29e:	4b41      	ldr	r3, [pc, #260]	@ (800a3a4 <__multiply+0x13c>)
 800a2a0:	4841      	ldr	r0, [pc, #260]	@ (800a3a8 <__multiply+0x140>)
 800a2a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2a6:	f000 ff4d 	bl	800b144 <__assert_func>
 800a2aa:	f100 0414 	add.w	r4, r0, #20
 800a2ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a2b2:	4623      	mov	r3, r4
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4573      	cmp	r3, lr
 800a2b8:	d320      	bcc.n	800a2fc <__multiply+0x94>
 800a2ba:	f107 0814 	add.w	r8, r7, #20
 800a2be:	f109 0114 	add.w	r1, r9, #20
 800a2c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a2c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a2ca:	9302      	str	r3, [sp, #8]
 800a2cc:	1beb      	subs	r3, r5, r7
 800a2ce:	3b15      	subs	r3, #21
 800a2d0:	f023 0303 	bic.w	r3, r3, #3
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	3715      	adds	r7, #21
 800a2d8:	42bd      	cmp	r5, r7
 800a2da:	bf38      	it	cc
 800a2dc:	2304      	movcc	r3, #4
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	9b02      	ldr	r3, [sp, #8]
 800a2e2:	9103      	str	r1, [sp, #12]
 800a2e4:	428b      	cmp	r3, r1
 800a2e6:	d80c      	bhi.n	800a302 <__multiply+0x9a>
 800a2e8:	2e00      	cmp	r6, #0
 800a2ea:	dd03      	ble.n	800a2f4 <__multiply+0x8c>
 800a2ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d055      	beq.n	800a3a0 <__multiply+0x138>
 800a2f4:	6106      	str	r6, [r0, #16]
 800a2f6:	b005      	add	sp, #20
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	f843 2b04 	str.w	r2, [r3], #4
 800a300:	e7d9      	b.n	800a2b6 <__multiply+0x4e>
 800a302:	f8b1 a000 	ldrh.w	sl, [r1]
 800a306:	f1ba 0f00 	cmp.w	sl, #0
 800a30a:	d01f      	beq.n	800a34c <__multiply+0xe4>
 800a30c:	46c4      	mov	ip, r8
 800a30e:	46a1      	mov	r9, r4
 800a310:	2700      	movs	r7, #0
 800a312:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a316:	f8d9 3000 	ldr.w	r3, [r9]
 800a31a:	fa1f fb82 	uxth.w	fp, r2
 800a31e:	b29b      	uxth	r3, r3
 800a320:	fb0a 330b 	mla	r3, sl, fp, r3
 800a324:	443b      	add	r3, r7
 800a326:	f8d9 7000 	ldr.w	r7, [r9]
 800a32a:	0c12      	lsrs	r2, r2, #16
 800a32c:	0c3f      	lsrs	r7, r7, #16
 800a32e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a332:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a336:	b29b      	uxth	r3, r3
 800a338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a33c:	4565      	cmp	r5, ip
 800a33e:	f849 3b04 	str.w	r3, [r9], #4
 800a342:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a346:	d8e4      	bhi.n	800a312 <__multiply+0xaa>
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	50e7      	str	r7, [r4, r3]
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a352:	3104      	adds	r1, #4
 800a354:	f1b9 0f00 	cmp.w	r9, #0
 800a358:	d020      	beq.n	800a39c <__multiply+0x134>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	4647      	mov	r7, r8
 800a35e:	46a4      	mov	ip, r4
 800a360:	f04f 0a00 	mov.w	sl, #0
 800a364:	f8b7 b000 	ldrh.w	fp, [r7]
 800a368:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a36c:	fb09 220b 	mla	r2, r9, fp, r2
 800a370:	4452      	add	r2, sl
 800a372:	b29b      	uxth	r3, r3
 800a374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a378:	f84c 3b04 	str.w	r3, [ip], #4
 800a37c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a380:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a384:	f8bc 3000 	ldrh.w	r3, [ip]
 800a388:	fb09 330a 	mla	r3, r9, sl, r3
 800a38c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a390:	42bd      	cmp	r5, r7
 800a392:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a396:	d8e5      	bhi.n	800a364 <__multiply+0xfc>
 800a398:	9a01      	ldr	r2, [sp, #4]
 800a39a:	50a3      	str	r3, [r4, r2]
 800a39c:	3404      	adds	r4, #4
 800a39e:	e79f      	b.n	800a2e0 <__multiply+0x78>
 800a3a0:	3e01      	subs	r6, #1
 800a3a2:	e7a1      	b.n	800a2e8 <__multiply+0x80>
 800a3a4:	0800b33a 	.word	0x0800b33a
 800a3a8:	0800b3c2 	.word	0x0800b3c2

0800a3ac <__pow5mult>:
 800a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	4615      	mov	r5, r2
 800a3b2:	f012 0203 	ands.w	r2, r2, #3
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	d007      	beq.n	800a3cc <__pow5mult+0x20>
 800a3bc:	4c25      	ldr	r4, [pc, #148]	@ (800a454 <__pow5mult+0xa8>)
 800a3be:	3a01      	subs	r2, #1
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3c6:	f7ff fe5d 	bl	800a084 <__multadd>
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	10ad      	asrs	r5, r5, #2
 800a3ce:	d03d      	beq.n	800a44c <__pow5mult+0xa0>
 800a3d0:	69fc      	ldr	r4, [r7, #28]
 800a3d2:	b97c      	cbnz	r4, 800a3f4 <__pow5mult+0x48>
 800a3d4:	2010      	movs	r0, #16
 800a3d6:	f000 fee7 	bl	800b1a8 <malloc>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	61f8      	str	r0, [r7, #28]
 800a3de:	b928      	cbnz	r0, 800a3ec <__pow5mult+0x40>
 800a3e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a458 <__pow5mult+0xac>)
 800a3e2:	481e      	ldr	r0, [pc, #120]	@ (800a45c <__pow5mult+0xb0>)
 800a3e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3e8:	f000 feac 	bl	800b144 <__assert_func>
 800a3ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3f0:	6004      	str	r4, [r0, #0]
 800a3f2:	60c4      	str	r4, [r0, #12]
 800a3f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a3f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3fc:	b94c      	cbnz	r4, 800a412 <__pow5mult+0x66>
 800a3fe:	f240 2171 	movw	r1, #625	@ 0x271
 800a402:	4638      	mov	r0, r7
 800a404:	f7ff ff1a 	bl	800a23c <__i2b>
 800a408:	2300      	movs	r3, #0
 800a40a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a40e:	4604      	mov	r4, r0
 800a410:	6003      	str	r3, [r0, #0]
 800a412:	f04f 0900 	mov.w	r9, #0
 800a416:	07eb      	lsls	r3, r5, #31
 800a418:	d50a      	bpl.n	800a430 <__pow5mult+0x84>
 800a41a:	4631      	mov	r1, r6
 800a41c:	4622      	mov	r2, r4
 800a41e:	4638      	mov	r0, r7
 800a420:	f7ff ff22 	bl	800a268 <__multiply>
 800a424:	4631      	mov	r1, r6
 800a426:	4680      	mov	r8, r0
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff fe09 	bl	800a040 <_Bfree>
 800a42e:	4646      	mov	r6, r8
 800a430:	106d      	asrs	r5, r5, #1
 800a432:	d00b      	beq.n	800a44c <__pow5mult+0xa0>
 800a434:	6820      	ldr	r0, [r4, #0]
 800a436:	b938      	cbnz	r0, 800a448 <__pow5mult+0x9c>
 800a438:	4622      	mov	r2, r4
 800a43a:	4621      	mov	r1, r4
 800a43c:	4638      	mov	r0, r7
 800a43e:	f7ff ff13 	bl	800a268 <__multiply>
 800a442:	6020      	str	r0, [r4, #0]
 800a444:	f8c0 9000 	str.w	r9, [r0]
 800a448:	4604      	mov	r4, r0
 800a44a:	e7e4      	b.n	800a416 <__pow5mult+0x6a>
 800a44c:	4630      	mov	r0, r6
 800a44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a452:	bf00      	nop
 800a454:	0800b4e0 	.word	0x0800b4e0
 800a458:	0800b3ab 	.word	0x0800b3ab
 800a45c:	0800b3c2 	.word	0x0800b3c2

0800a460 <__lshift>:
 800a460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	460c      	mov	r4, r1
 800a466:	6849      	ldr	r1, [r1, #4]
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	4607      	mov	r7, r0
 800a472:	4691      	mov	r9, r2
 800a474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a478:	f108 0601 	add.w	r6, r8, #1
 800a47c:	42b3      	cmp	r3, r6
 800a47e:	db0b      	blt.n	800a498 <__lshift+0x38>
 800a480:	4638      	mov	r0, r7
 800a482:	f7ff fd9d 	bl	8009fc0 <_Balloc>
 800a486:	4605      	mov	r5, r0
 800a488:	b948      	cbnz	r0, 800a49e <__lshift+0x3e>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4b28      	ldr	r3, [pc, #160]	@ (800a530 <__lshift+0xd0>)
 800a48e:	4829      	ldr	r0, [pc, #164]	@ (800a534 <__lshift+0xd4>)
 800a490:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a494:	f000 fe56 	bl	800b144 <__assert_func>
 800a498:	3101      	adds	r1, #1
 800a49a:	005b      	lsls	r3, r3, #1
 800a49c:	e7ee      	b.n	800a47c <__lshift+0x1c>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f100 0114 	add.w	r1, r0, #20
 800a4a4:	f100 0210 	add.w	r2, r0, #16
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	4553      	cmp	r3, sl
 800a4ac:	db33      	blt.n	800a516 <__lshift+0xb6>
 800a4ae:	6920      	ldr	r0, [r4, #16]
 800a4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4b4:	f104 0314 	add.w	r3, r4, #20
 800a4b8:	f019 091f 	ands.w	r9, r9, #31
 800a4bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4c4:	d02b      	beq.n	800a51e <__lshift+0xbe>
 800a4c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ca:	468a      	mov	sl, r1
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	6818      	ldr	r0, [r3, #0]
 800a4d0:	fa00 f009 	lsl.w	r0, r0, r9
 800a4d4:	4310      	orrs	r0, r2
 800a4d6:	f84a 0b04 	str.w	r0, [sl], #4
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	459c      	cmp	ip, r3
 800a4e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4e4:	d8f3      	bhi.n	800a4ce <__lshift+0x6e>
 800a4e6:	ebac 0304 	sub.w	r3, ip, r4
 800a4ea:	3b15      	subs	r3, #21
 800a4ec:	f023 0303 	bic.w	r3, r3, #3
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	f104 0015 	add.w	r0, r4, #21
 800a4f6:	4560      	cmp	r0, ip
 800a4f8:	bf88      	it	hi
 800a4fa:	2304      	movhi	r3, #4
 800a4fc:	50ca      	str	r2, [r1, r3]
 800a4fe:	b10a      	cbz	r2, 800a504 <__lshift+0xa4>
 800a500:	f108 0602 	add.w	r6, r8, #2
 800a504:	3e01      	subs	r6, #1
 800a506:	4638      	mov	r0, r7
 800a508:	612e      	str	r6, [r5, #16]
 800a50a:	4621      	mov	r1, r4
 800a50c:	f7ff fd98 	bl	800a040 <_Bfree>
 800a510:	4628      	mov	r0, r5
 800a512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a516:	f842 0f04 	str.w	r0, [r2, #4]!
 800a51a:	3301      	adds	r3, #1
 800a51c:	e7c5      	b.n	800a4aa <__lshift+0x4a>
 800a51e:	3904      	subs	r1, #4
 800a520:	f853 2b04 	ldr.w	r2, [r3], #4
 800a524:	f841 2f04 	str.w	r2, [r1, #4]!
 800a528:	459c      	cmp	ip, r3
 800a52a:	d8f9      	bhi.n	800a520 <__lshift+0xc0>
 800a52c:	e7ea      	b.n	800a504 <__lshift+0xa4>
 800a52e:	bf00      	nop
 800a530:	0800b33a 	.word	0x0800b33a
 800a534:	0800b3c2 	.word	0x0800b3c2

0800a538 <__mcmp>:
 800a538:	690a      	ldr	r2, [r1, #16]
 800a53a:	4603      	mov	r3, r0
 800a53c:	6900      	ldr	r0, [r0, #16]
 800a53e:	1a80      	subs	r0, r0, r2
 800a540:	b530      	push	{r4, r5, lr}
 800a542:	d10e      	bne.n	800a562 <__mcmp+0x2a>
 800a544:	3314      	adds	r3, #20
 800a546:	3114      	adds	r1, #20
 800a548:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a54c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a550:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a554:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a558:	4295      	cmp	r5, r2
 800a55a:	d003      	beq.n	800a564 <__mcmp+0x2c>
 800a55c:	d205      	bcs.n	800a56a <__mcmp+0x32>
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	bd30      	pop	{r4, r5, pc}
 800a564:	42a3      	cmp	r3, r4
 800a566:	d3f3      	bcc.n	800a550 <__mcmp+0x18>
 800a568:	e7fb      	b.n	800a562 <__mcmp+0x2a>
 800a56a:	2001      	movs	r0, #1
 800a56c:	e7f9      	b.n	800a562 <__mcmp+0x2a>
	...

0800a570 <__mdiff>:
 800a570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	4689      	mov	r9, r1
 800a576:	4606      	mov	r6, r0
 800a578:	4611      	mov	r1, r2
 800a57a:	4648      	mov	r0, r9
 800a57c:	4614      	mov	r4, r2
 800a57e:	f7ff ffdb 	bl	800a538 <__mcmp>
 800a582:	1e05      	subs	r5, r0, #0
 800a584:	d112      	bne.n	800a5ac <__mdiff+0x3c>
 800a586:	4629      	mov	r1, r5
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff fd19 	bl	8009fc0 <_Balloc>
 800a58e:	4602      	mov	r2, r0
 800a590:	b928      	cbnz	r0, 800a59e <__mdiff+0x2e>
 800a592:	4b3f      	ldr	r3, [pc, #252]	@ (800a690 <__mdiff+0x120>)
 800a594:	f240 2137 	movw	r1, #567	@ 0x237
 800a598:	483e      	ldr	r0, [pc, #248]	@ (800a694 <__mdiff+0x124>)
 800a59a:	f000 fdd3 	bl	800b144 <__assert_func>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	b003      	add	sp, #12
 800a5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	bfbc      	itt	lt
 800a5ae:	464b      	movlt	r3, r9
 800a5b0:	46a1      	movlt	r9, r4
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5b8:	bfba      	itte	lt
 800a5ba:	461c      	movlt	r4, r3
 800a5bc:	2501      	movlt	r5, #1
 800a5be:	2500      	movge	r5, #0
 800a5c0:	f7ff fcfe 	bl	8009fc0 <_Balloc>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	b918      	cbnz	r0, 800a5d0 <__mdiff+0x60>
 800a5c8:	4b31      	ldr	r3, [pc, #196]	@ (800a690 <__mdiff+0x120>)
 800a5ca:	f240 2145 	movw	r1, #581	@ 0x245
 800a5ce:	e7e3      	b.n	800a598 <__mdiff+0x28>
 800a5d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5d4:	6926      	ldr	r6, [r4, #16]
 800a5d6:	60c5      	str	r5, [r0, #12]
 800a5d8:	f109 0310 	add.w	r3, r9, #16
 800a5dc:	f109 0514 	add.w	r5, r9, #20
 800a5e0:	f104 0e14 	add.w	lr, r4, #20
 800a5e4:	f100 0b14 	add.w	fp, r0, #20
 800a5e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	46d9      	mov	r9, fp
 800a5f4:	f04f 0c00 	mov.w	ip, #0
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	fa1f f38a 	uxth.w	r3, sl
 800a608:	4619      	mov	r1, r3
 800a60a:	b283      	uxth	r3, r0
 800a60c:	1acb      	subs	r3, r1, r3
 800a60e:	0c00      	lsrs	r0, r0, #16
 800a610:	4463      	add	r3, ip
 800a612:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a616:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a620:	4576      	cmp	r6, lr
 800a622:	f849 3b04 	str.w	r3, [r9], #4
 800a626:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a62a:	d8e5      	bhi.n	800a5f8 <__mdiff+0x88>
 800a62c:	1b33      	subs	r3, r6, r4
 800a62e:	3b15      	subs	r3, #21
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	3415      	adds	r4, #21
 800a636:	3304      	adds	r3, #4
 800a638:	42a6      	cmp	r6, r4
 800a63a:	bf38      	it	cc
 800a63c:	2304      	movcc	r3, #4
 800a63e:	441d      	add	r5, r3
 800a640:	445b      	add	r3, fp
 800a642:	461e      	mov	r6, r3
 800a644:	462c      	mov	r4, r5
 800a646:	4544      	cmp	r4, r8
 800a648:	d30e      	bcc.n	800a668 <__mdiff+0xf8>
 800a64a:	f108 0103 	add.w	r1, r8, #3
 800a64e:	1b49      	subs	r1, r1, r5
 800a650:	f021 0103 	bic.w	r1, r1, #3
 800a654:	3d03      	subs	r5, #3
 800a656:	45a8      	cmp	r8, r5
 800a658:	bf38      	it	cc
 800a65a:	2100      	movcc	r1, #0
 800a65c:	440b      	add	r3, r1
 800a65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a662:	b191      	cbz	r1, 800a68a <__mdiff+0x11a>
 800a664:	6117      	str	r7, [r2, #16]
 800a666:	e79d      	b.n	800a5a4 <__mdiff+0x34>
 800a668:	f854 1b04 	ldr.w	r1, [r4], #4
 800a66c:	46e6      	mov	lr, ip
 800a66e:	0c08      	lsrs	r0, r1, #16
 800a670:	fa1c fc81 	uxtah	ip, ip, r1
 800a674:	4471      	add	r1, lr
 800a676:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a67a:	b289      	uxth	r1, r1
 800a67c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a680:	f846 1b04 	str.w	r1, [r6], #4
 800a684:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a688:	e7dd      	b.n	800a646 <__mdiff+0xd6>
 800a68a:	3f01      	subs	r7, #1
 800a68c:	e7e7      	b.n	800a65e <__mdiff+0xee>
 800a68e:	bf00      	nop
 800a690:	0800b33a 	.word	0x0800b33a
 800a694:	0800b3c2 	.word	0x0800b3c2

0800a698 <__ulp>:
 800a698:	b082      	sub	sp, #8
 800a69a:	ed8d 0b00 	vstr	d0, [sp]
 800a69e:	9a01      	ldr	r2, [sp, #4]
 800a6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e0 <__ulp+0x48>)
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dc08      	bgt.n	800a6be <__ulp+0x26>
 800a6ac:	425b      	negs	r3, r3
 800a6ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6b6:	da04      	bge.n	800a6c2 <__ulp+0x2a>
 800a6b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6bc:	4113      	asrs	r3, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	e008      	b.n	800a6d4 <__ulp+0x3c>
 800a6c2:	f1a2 0314 	sub.w	r3, r2, #20
 800a6c6:	2b1e      	cmp	r3, #30
 800a6c8:	bfda      	itte	le
 800a6ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6ce:	40da      	lsrle	r2, r3
 800a6d0:	2201      	movgt	r2, #1
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	ec41 0b10 	vmov	d0, r0, r1
 800a6dc:	b002      	add	sp, #8
 800a6de:	4770      	bx	lr
 800a6e0:	7ff00000 	.word	0x7ff00000

0800a6e4 <__b2d>:
 800a6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e8:	6906      	ldr	r6, [r0, #16]
 800a6ea:	f100 0814 	add.w	r8, r0, #20
 800a6ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a6f2:	1f37      	subs	r7, r6, #4
 800a6f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f7ff fd53 	bl	800a1a4 <__hi0bits>
 800a6fe:	f1c0 0320 	rsb	r3, r0, #32
 800a702:	280a      	cmp	r0, #10
 800a704:	600b      	str	r3, [r1, #0]
 800a706:	491b      	ldr	r1, [pc, #108]	@ (800a774 <__b2d+0x90>)
 800a708:	dc15      	bgt.n	800a736 <__b2d+0x52>
 800a70a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a70e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a712:	45b8      	cmp	r8, r7
 800a714:	ea43 0501 	orr.w	r5, r3, r1
 800a718:	bf34      	ite	cc
 800a71a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a71e:	2300      	movcs	r3, #0
 800a720:	3015      	adds	r0, #21
 800a722:	fa02 f000 	lsl.w	r0, r2, r0
 800a726:	fa23 f30c 	lsr.w	r3, r3, ip
 800a72a:	4303      	orrs	r3, r0
 800a72c:	461c      	mov	r4, r3
 800a72e:	ec45 4b10 	vmov	d0, r4, r5
 800a732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a736:	45b8      	cmp	r8, r7
 800a738:	bf3a      	itte	cc
 800a73a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a73e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a742:	2300      	movcs	r3, #0
 800a744:	380b      	subs	r0, #11
 800a746:	d012      	beq.n	800a76e <__b2d+0x8a>
 800a748:	f1c0 0120 	rsb	r1, r0, #32
 800a74c:	fa23 f401 	lsr.w	r4, r3, r1
 800a750:	4082      	lsls	r2, r0
 800a752:	4322      	orrs	r2, r4
 800a754:	4547      	cmp	r7, r8
 800a756:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a75a:	bf8c      	ite	hi
 800a75c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a760:	2200      	movls	r2, #0
 800a762:	4083      	lsls	r3, r0
 800a764:	40ca      	lsrs	r2, r1
 800a766:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a76a:	4313      	orrs	r3, r2
 800a76c:	e7de      	b.n	800a72c <__b2d+0x48>
 800a76e:	ea42 0501 	orr.w	r5, r2, r1
 800a772:	e7db      	b.n	800a72c <__b2d+0x48>
 800a774:	3ff00000 	.word	0x3ff00000

0800a778 <__d2b>:
 800a778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	460f      	mov	r7, r1
 800a77e:	2101      	movs	r1, #1
 800a780:	ec59 8b10 	vmov	r8, r9, d0
 800a784:	4616      	mov	r6, r2
 800a786:	f7ff fc1b 	bl	8009fc0 <_Balloc>
 800a78a:	4604      	mov	r4, r0
 800a78c:	b930      	cbnz	r0, 800a79c <__d2b+0x24>
 800a78e:	4602      	mov	r2, r0
 800a790:	4b23      	ldr	r3, [pc, #140]	@ (800a820 <__d2b+0xa8>)
 800a792:	4824      	ldr	r0, [pc, #144]	@ (800a824 <__d2b+0xac>)
 800a794:	f240 310f 	movw	r1, #783	@ 0x30f
 800a798:	f000 fcd4 	bl	800b144 <__assert_func>
 800a79c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7a4:	b10d      	cbz	r5, 800a7aa <__d2b+0x32>
 800a7a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	f1b8 0300 	subs.w	r3, r8, #0
 800a7b0:	d023      	beq.n	800a7fa <__d2b+0x82>
 800a7b2:	4668      	mov	r0, sp
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	f7ff fd14 	bl	800a1e2 <__lo0bits>
 800a7ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7be:	b1d0      	cbz	r0, 800a7f6 <__d2b+0x7e>
 800a7c0:	f1c0 0320 	rsb	r3, r0, #32
 800a7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	40c2      	lsrs	r2, r0
 800a7cc:	6163      	str	r3, [r4, #20]
 800a7ce:	9201      	str	r2, [sp, #4]
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	61a3      	str	r3, [r4, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2201      	moveq	r2, #1
 800a7da:	2202      	movne	r2, #2
 800a7dc:	6122      	str	r2, [r4, #16]
 800a7de:	b1a5      	cbz	r5, 800a80a <__d2b+0x92>
 800a7e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7e4:	4405      	add	r5, r0
 800a7e6:	603d      	str	r5, [r7, #0]
 800a7e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7ec:	6030      	str	r0, [r6, #0]
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	b003      	add	sp, #12
 800a7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7f6:	6161      	str	r1, [r4, #20]
 800a7f8:	e7ea      	b.n	800a7d0 <__d2b+0x58>
 800a7fa:	a801      	add	r0, sp, #4
 800a7fc:	f7ff fcf1 	bl	800a1e2 <__lo0bits>
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	6163      	str	r3, [r4, #20]
 800a804:	3020      	adds	r0, #32
 800a806:	2201      	movs	r2, #1
 800a808:	e7e8      	b.n	800a7dc <__d2b+0x64>
 800a80a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a80e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a812:	6038      	str	r0, [r7, #0]
 800a814:	6918      	ldr	r0, [r3, #16]
 800a816:	f7ff fcc5 	bl	800a1a4 <__hi0bits>
 800a81a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a81e:	e7e5      	b.n	800a7ec <__d2b+0x74>
 800a820:	0800b33a 	.word	0x0800b33a
 800a824:	0800b3c2 	.word	0x0800b3c2

0800a828 <__ratio>:
 800a828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	4688      	mov	r8, r1
 800a82e:	4669      	mov	r1, sp
 800a830:	4681      	mov	r9, r0
 800a832:	f7ff ff57 	bl	800a6e4 <__b2d>
 800a836:	a901      	add	r1, sp, #4
 800a838:	4640      	mov	r0, r8
 800a83a:	ec55 4b10 	vmov	r4, r5, d0
 800a83e:	f7ff ff51 	bl	800a6e4 <__b2d>
 800a842:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a846:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a850:	1a5b      	subs	r3, r3, r1
 800a852:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a856:	ec57 6b10 	vmov	r6, r7, d0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfd6      	itet	le
 800a85e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a862:	462a      	movgt	r2, r5
 800a864:	463a      	movle	r2, r7
 800a866:	46ab      	mov	fp, r5
 800a868:	46a2      	mov	sl, r4
 800a86a:	bfce      	itee	gt
 800a86c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a870:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a874:	ee00 3a90 	vmovle	s1, r3
 800a878:	ec4b ab17 	vmov	d7, sl, fp
 800a87c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a880:	b003      	add	sp, #12
 800a882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a886 <__copybits>:
 800a886:	3901      	subs	r1, #1
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	1149      	asrs	r1, r1, #5
 800a88c:	6914      	ldr	r4, [r2, #16]
 800a88e:	3101      	adds	r1, #1
 800a890:	f102 0314 	add.w	r3, r2, #20
 800a894:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a898:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a89c:	1f05      	subs	r5, r0, #4
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	d30c      	bcc.n	800a8bc <__copybits+0x36>
 800a8a2:	1aa3      	subs	r3, r4, r2
 800a8a4:	3b11      	subs	r3, #17
 800a8a6:	f023 0303 	bic.w	r3, r3, #3
 800a8aa:	3211      	adds	r2, #17
 800a8ac:	42a2      	cmp	r2, r4
 800a8ae:	bf88      	it	hi
 800a8b0:	2300      	movhi	r3, #0
 800a8b2:	4418      	add	r0, r3
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4288      	cmp	r0, r1
 800a8b8:	d305      	bcc.n	800a8c6 <__copybits+0x40>
 800a8ba:	bd70      	pop	{r4, r5, r6, pc}
 800a8bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8c4:	e7eb      	b.n	800a89e <__copybits+0x18>
 800a8c6:	f840 3b04 	str.w	r3, [r0], #4
 800a8ca:	e7f4      	b.n	800a8b6 <__copybits+0x30>

0800a8cc <__any_on>:
 800a8cc:	f100 0214 	add.w	r2, r0, #20
 800a8d0:	6900      	ldr	r0, [r0, #16]
 800a8d2:	114b      	asrs	r3, r1, #5
 800a8d4:	4298      	cmp	r0, r3
 800a8d6:	b510      	push	{r4, lr}
 800a8d8:	db11      	blt.n	800a8fe <__any_on+0x32>
 800a8da:	dd0a      	ble.n	800a8f2 <__any_on+0x26>
 800a8dc:	f011 011f 	ands.w	r1, r1, #31
 800a8e0:	d007      	beq.n	800a8f2 <__any_on+0x26>
 800a8e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8e6:	fa24 f001 	lsr.w	r0, r4, r1
 800a8ea:	fa00 f101 	lsl.w	r1, r0, r1
 800a8ee:	428c      	cmp	r4, r1
 800a8f0:	d10b      	bne.n	800a90a <__any_on+0x3e>
 800a8f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d803      	bhi.n	800a902 <__any_on+0x36>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	4603      	mov	r3, r0
 800a900:	e7f7      	b.n	800a8f2 <__any_on+0x26>
 800a902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a906:	2900      	cmp	r1, #0
 800a908:	d0f5      	beq.n	800a8f6 <__any_on+0x2a>
 800a90a:	2001      	movs	r0, #1
 800a90c:	e7f6      	b.n	800a8fc <__any_on+0x30>

0800a90e <__ascii_wctomb>:
 800a90e:	4603      	mov	r3, r0
 800a910:	4608      	mov	r0, r1
 800a912:	b141      	cbz	r1, 800a926 <__ascii_wctomb+0x18>
 800a914:	2aff      	cmp	r2, #255	@ 0xff
 800a916:	d904      	bls.n	800a922 <__ascii_wctomb+0x14>
 800a918:	228a      	movs	r2, #138	@ 0x8a
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	4770      	bx	lr
 800a922:	700a      	strb	r2, [r1, #0]
 800a924:	2001      	movs	r0, #1
 800a926:	4770      	bx	lr

0800a928 <__sfputc_r>:
 800a928:	6893      	ldr	r3, [r2, #8]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	b410      	push	{r4}
 800a930:	6093      	str	r3, [r2, #8]
 800a932:	da08      	bge.n	800a946 <__sfputc_r+0x1e>
 800a934:	6994      	ldr	r4, [r2, #24]
 800a936:	42a3      	cmp	r3, r4
 800a938:	db01      	blt.n	800a93e <__sfputc_r+0x16>
 800a93a:	290a      	cmp	r1, #10
 800a93c:	d103      	bne.n	800a946 <__sfputc_r+0x1e>
 800a93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a942:	f7fe bdc0 	b.w	80094c6 <__swbuf_r>
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	1c58      	adds	r0, r3, #1
 800a94a:	6010      	str	r0, [r2, #0]
 800a94c:	7019      	strb	r1, [r3, #0]
 800a94e:	4608      	mov	r0, r1
 800a950:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <__sfputs_r>:
 800a956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a958:	4606      	mov	r6, r0
 800a95a:	460f      	mov	r7, r1
 800a95c:	4614      	mov	r4, r2
 800a95e:	18d5      	adds	r5, r2, r3
 800a960:	42ac      	cmp	r4, r5
 800a962:	d101      	bne.n	800a968 <__sfputs_r+0x12>
 800a964:	2000      	movs	r0, #0
 800a966:	e007      	b.n	800a978 <__sfputs_r+0x22>
 800a968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a96c:	463a      	mov	r2, r7
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ffda 	bl	800a928 <__sfputc_r>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d1f3      	bne.n	800a960 <__sfputs_r+0xa>
 800a978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a97c <_vfiprintf_r>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	460d      	mov	r5, r1
 800a982:	b09d      	sub	sp, #116	@ 0x74
 800a984:	4614      	mov	r4, r2
 800a986:	4698      	mov	r8, r3
 800a988:	4606      	mov	r6, r0
 800a98a:	b118      	cbz	r0, 800a994 <_vfiprintf_r+0x18>
 800a98c:	6a03      	ldr	r3, [r0, #32]
 800a98e:	b90b      	cbnz	r3, 800a994 <_vfiprintf_r+0x18>
 800a990:	f7fe fcb0 	bl	80092f4 <__sinit>
 800a994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a996:	07d9      	lsls	r1, r3, #31
 800a998:	d405      	bmi.n	800a9a6 <_vfiprintf_r+0x2a>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	059a      	lsls	r2, r3, #22
 800a99e:	d402      	bmi.n	800a9a6 <_vfiprintf_r+0x2a>
 800a9a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9a2:	f7fe feb0 	bl	8009706 <__retarget_lock_acquire_recursive>
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	071b      	lsls	r3, r3, #28
 800a9aa:	d501      	bpl.n	800a9b0 <_vfiprintf_r+0x34>
 800a9ac:	692b      	ldr	r3, [r5, #16]
 800a9ae:	b99b      	cbnz	r3, 800a9d8 <_vfiprintf_r+0x5c>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	f7fe fdc6 	bl	8009544 <__swsetup_r>
 800a9b8:	b170      	cbz	r0, 800a9d8 <_vfiprintf_r+0x5c>
 800a9ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9bc:	07dc      	lsls	r4, r3, #31
 800a9be:	d504      	bpl.n	800a9ca <_vfiprintf_r+0x4e>
 800a9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c4:	b01d      	add	sp, #116	@ 0x74
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	0598      	lsls	r0, r3, #22
 800a9ce:	d4f7      	bmi.n	800a9c0 <_vfiprintf_r+0x44>
 800a9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9d2:	f7fe fe99 	bl	8009708 <__retarget_lock_release_recursive>
 800a9d6:	e7f3      	b.n	800a9c0 <_vfiprintf_r+0x44>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9dc:	2320      	movs	r3, #32
 800a9de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e6:	2330      	movs	r3, #48	@ 0x30
 800a9e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab98 <_vfiprintf_r+0x21c>
 800a9ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9f0:	f04f 0901 	mov.w	r9, #1
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	469a      	mov	sl, r3
 800a9f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9fc:	b10a      	cbz	r2, 800aa02 <_vfiprintf_r+0x86>
 800a9fe:	2a25      	cmp	r2, #37	@ 0x25
 800aa00:	d1f9      	bne.n	800a9f6 <_vfiprintf_r+0x7a>
 800aa02:	ebba 0b04 	subs.w	fp, sl, r4
 800aa06:	d00b      	beq.n	800aa20 <_vfiprintf_r+0xa4>
 800aa08:	465b      	mov	r3, fp
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ffa1 	bl	800a956 <__sfputs_r>
 800aa14:	3001      	adds	r0, #1
 800aa16:	f000 80a7 	beq.w	800ab68 <_vfiprintf_r+0x1ec>
 800aa1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa1c:	445a      	add	r2, fp
 800aa1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa20:	f89a 3000 	ldrb.w	r3, [sl]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 809f 	beq.w	800ab68 <_vfiprintf_r+0x1ec>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa34:	f10a 0a01 	add.w	sl, sl, #1
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	9307      	str	r3, [sp, #28]
 800aa3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa40:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa42:	4654      	mov	r4, sl
 800aa44:	2205      	movs	r2, #5
 800aa46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4a:	4853      	ldr	r0, [pc, #332]	@ (800ab98 <_vfiprintf_r+0x21c>)
 800aa4c:	f7f5 fbf8 	bl	8000240 <memchr>
 800aa50:	9a04      	ldr	r2, [sp, #16]
 800aa52:	b9d8      	cbnz	r0, 800aa8c <_vfiprintf_r+0x110>
 800aa54:	06d1      	lsls	r1, r2, #27
 800aa56:	bf44      	itt	mi
 800aa58:	2320      	movmi	r3, #32
 800aa5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa5e:	0713      	lsls	r3, r2, #28
 800aa60:	bf44      	itt	mi
 800aa62:	232b      	movmi	r3, #43	@ 0x2b
 800aa64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa68:	f89a 3000 	ldrb.w	r3, [sl]
 800aa6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa6e:	d015      	beq.n	800aa9c <_vfiprintf_r+0x120>
 800aa70:	9a07      	ldr	r2, [sp, #28]
 800aa72:	4654      	mov	r4, sl
 800aa74:	2000      	movs	r0, #0
 800aa76:	f04f 0c0a 	mov.w	ip, #10
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa80:	3b30      	subs	r3, #48	@ 0x30
 800aa82:	2b09      	cmp	r3, #9
 800aa84:	d94b      	bls.n	800ab1e <_vfiprintf_r+0x1a2>
 800aa86:	b1b0      	cbz	r0, 800aab6 <_vfiprintf_r+0x13a>
 800aa88:	9207      	str	r2, [sp, #28]
 800aa8a:	e014      	b.n	800aab6 <_vfiprintf_r+0x13a>
 800aa8c:	eba0 0308 	sub.w	r3, r0, r8
 800aa90:	fa09 f303 	lsl.w	r3, r9, r3
 800aa94:	4313      	orrs	r3, r2
 800aa96:	9304      	str	r3, [sp, #16]
 800aa98:	46a2      	mov	sl, r4
 800aa9a:	e7d2      	b.n	800aa42 <_vfiprintf_r+0xc6>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	1d19      	adds	r1, r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	9103      	str	r1, [sp, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	bfbb      	ittet	lt
 800aaa8:	425b      	neglt	r3, r3
 800aaaa:	f042 0202 	orrlt.w	r2, r2, #2
 800aaae:	9307      	strge	r3, [sp, #28]
 800aab0:	9307      	strlt	r3, [sp, #28]
 800aab2:	bfb8      	it	lt
 800aab4:	9204      	strlt	r2, [sp, #16]
 800aab6:	7823      	ldrb	r3, [r4, #0]
 800aab8:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaba:	d10a      	bne.n	800aad2 <_vfiprintf_r+0x156>
 800aabc:	7863      	ldrb	r3, [r4, #1]
 800aabe:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac0:	d132      	bne.n	800ab28 <_vfiprintf_r+0x1ac>
 800aac2:	9b03      	ldr	r3, [sp, #12]
 800aac4:	1d1a      	adds	r2, r3, #4
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	9203      	str	r2, [sp, #12]
 800aaca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aace:	3402      	adds	r4, #2
 800aad0:	9305      	str	r3, [sp, #20]
 800aad2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aba8 <_vfiprintf_r+0x22c>
 800aad6:	7821      	ldrb	r1, [r4, #0]
 800aad8:	2203      	movs	r2, #3
 800aada:	4650      	mov	r0, sl
 800aadc:	f7f5 fbb0 	bl	8000240 <memchr>
 800aae0:	b138      	cbz	r0, 800aaf2 <_vfiprintf_r+0x176>
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	eba0 000a 	sub.w	r0, r0, sl
 800aae8:	2240      	movs	r2, #64	@ 0x40
 800aaea:	4082      	lsls	r2, r0
 800aaec:	4313      	orrs	r3, r2
 800aaee:	3401      	adds	r4, #1
 800aaf0:	9304      	str	r3, [sp, #16]
 800aaf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf6:	4829      	ldr	r0, [pc, #164]	@ (800ab9c <_vfiprintf_r+0x220>)
 800aaf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aafc:	2206      	movs	r2, #6
 800aafe:	f7f5 fb9f 	bl	8000240 <memchr>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d03f      	beq.n	800ab86 <_vfiprintf_r+0x20a>
 800ab06:	4b26      	ldr	r3, [pc, #152]	@ (800aba0 <_vfiprintf_r+0x224>)
 800ab08:	bb1b      	cbnz	r3, 800ab52 <_vfiprintf_r+0x1d6>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	3307      	adds	r3, #7
 800ab0e:	f023 0307 	bic.w	r3, r3, #7
 800ab12:	3308      	adds	r3, #8
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab18:	443b      	add	r3, r7
 800ab1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab1c:	e76a      	b.n	800a9f4 <_vfiprintf_r+0x78>
 800ab1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab22:	460c      	mov	r4, r1
 800ab24:	2001      	movs	r0, #1
 800ab26:	e7a8      	b.n	800aa7a <_vfiprintf_r+0xfe>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	3401      	adds	r4, #1
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	f04f 0c0a 	mov.w	ip, #10
 800ab34:	4620      	mov	r0, r4
 800ab36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab3a:	3a30      	subs	r2, #48	@ 0x30
 800ab3c:	2a09      	cmp	r2, #9
 800ab3e:	d903      	bls.n	800ab48 <_vfiprintf_r+0x1cc>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0c6      	beq.n	800aad2 <_vfiprintf_r+0x156>
 800ab44:	9105      	str	r1, [sp, #20]
 800ab46:	e7c4      	b.n	800aad2 <_vfiprintf_r+0x156>
 800ab48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7f0      	b.n	800ab34 <_vfiprintf_r+0x1b8>
 800ab52:	ab03      	add	r3, sp, #12
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	462a      	mov	r2, r5
 800ab58:	4b12      	ldr	r3, [pc, #72]	@ (800aba4 <_vfiprintf_r+0x228>)
 800ab5a:	a904      	add	r1, sp, #16
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f3af 8000 	nop.w
 800ab62:	4607      	mov	r7, r0
 800ab64:	1c78      	adds	r0, r7, #1
 800ab66:	d1d6      	bne.n	800ab16 <_vfiprintf_r+0x19a>
 800ab68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab6a:	07d9      	lsls	r1, r3, #31
 800ab6c:	d405      	bmi.n	800ab7a <_vfiprintf_r+0x1fe>
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	059a      	lsls	r2, r3, #22
 800ab72:	d402      	bmi.n	800ab7a <_vfiprintf_r+0x1fe>
 800ab74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab76:	f7fe fdc7 	bl	8009708 <__retarget_lock_release_recursive>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	065b      	lsls	r3, r3, #25
 800ab7e:	f53f af1f 	bmi.w	800a9c0 <_vfiprintf_r+0x44>
 800ab82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab84:	e71e      	b.n	800a9c4 <_vfiprintf_r+0x48>
 800ab86:	ab03      	add	r3, sp, #12
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	462a      	mov	r2, r5
 800ab8c:	4b05      	ldr	r3, [pc, #20]	@ (800aba4 <_vfiprintf_r+0x228>)
 800ab8e:	a904      	add	r1, sp, #16
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f879 	bl	800ac88 <_printf_i>
 800ab96:	e7e4      	b.n	800ab62 <_vfiprintf_r+0x1e6>
 800ab98:	0800b41b 	.word	0x0800b41b
 800ab9c:	0800b425 	.word	0x0800b425
 800aba0:	00000000 	.word	0x00000000
 800aba4:	0800a957 	.word	0x0800a957
 800aba8:	0800b421 	.word	0x0800b421

0800abac <_printf_common>:
 800abac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	4616      	mov	r6, r2
 800abb2:	4698      	mov	r8, r3
 800abb4:	688a      	ldr	r2, [r1, #8]
 800abb6:	690b      	ldr	r3, [r1, #16]
 800abb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bfb8      	it	lt
 800abc0:	4613      	movlt	r3, r2
 800abc2:	6033      	str	r3, [r6, #0]
 800abc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abc8:	4607      	mov	r7, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b10a      	cbz	r2, 800abd2 <_printf_common+0x26>
 800abce:	3301      	adds	r3, #1
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	0699      	lsls	r1, r3, #26
 800abd6:	bf42      	ittt	mi
 800abd8:	6833      	ldrmi	r3, [r6, #0]
 800abda:	3302      	addmi	r3, #2
 800abdc:	6033      	strmi	r3, [r6, #0]
 800abde:	6825      	ldr	r5, [r4, #0]
 800abe0:	f015 0506 	ands.w	r5, r5, #6
 800abe4:	d106      	bne.n	800abf4 <_printf_common+0x48>
 800abe6:	f104 0a19 	add.w	sl, r4, #25
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	6832      	ldr	r2, [r6, #0]
 800abee:	1a9b      	subs	r3, r3, r2
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dc26      	bgt.n	800ac42 <_printf_common+0x96>
 800abf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	3b00      	subs	r3, #0
 800abfc:	bf18      	it	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	0692      	lsls	r2, r2, #26
 800ac02:	d42b      	bmi.n	800ac5c <_printf_common+0xb0>
 800ac04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	47c8      	blx	r9
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d01e      	beq.n	800ac50 <_printf_common+0xa4>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	6922      	ldr	r2, [r4, #16]
 800ac16:	f003 0306 	and.w	r3, r3, #6
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	bf02      	ittt	eq
 800ac1e:	68e5      	ldreq	r5, [r4, #12]
 800ac20:	6833      	ldreq	r3, [r6, #0]
 800ac22:	1aed      	subeq	r5, r5, r3
 800ac24:	68a3      	ldr	r3, [r4, #8]
 800ac26:	bf0c      	ite	eq
 800ac28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac2c:	2500      	movne	r5, #0
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	bfc4      	itt	gt
 800ac32:	1a9b      	subgt	r3, r3, r2
 800ac34:	18ed      	addgt	r5, r5, r3
 800ac36:	2600      	movs	r6, #0
 800ac38:	341a      	adds	r4, #26
 800ac3a:	42b5      	cmp	r5, r6
 800ac3c:	d11a      	bne.n	800ac74 <_printf_common+0xc8>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e008      	b.n	800ac54 <_printf_common+0xa8>
 800ac42:	2301      	movs	r3, #1
 800ac44:	4652      	mov	r2, sl
 800ac46:	4641      	mov	r1, r8
 800ac48:	4638      	mov	r0, r7
 800ac4a:	47c8      	blx	r9
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d103      	bne.n	800ac58 <_printf_common+0xac>
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	3501      	adds	r5, #1
 800ac5a:	e7c6      	b.n	800abea <_printf_common+0x3e>
 800ac5c:	18e1      	adds	r1, r4, r3
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	2030      	movs	r0, #48	@ 0x30
 800ac62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac66:	4422      	add	r2, r4
 800ac68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac70:	3302      	adds	r3, #2
 800ac72:	e7c7      	b.n	800ac04 <_printf_common+0x58>
 800ac74:	2301      	movs	r3, #1
 800ac76:	4622      	mov	r2, r4
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	47c8      	blx	r9
 800ac7e:	3001      	adds	r0, #1
 800ac80:	d0e6      	beq.n	800ac50 <_printf_common+0xa4>
 800ac82:	3601      	adds	r6, #1
 800ac84:	e7d9      	b.n	800ac3a <_printf_common+0x8e>
	...

0800ac88 <_printf_i>:
 800ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	7e0f      	ldrb	r7, [r1, #24]
 800ac8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac90:	2f78      	cmp	r7, #120	@ 0x78
 800ac92:	4691      	mov	r9, r2
 800ac94:	4680      	mov	r8, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	469a      	mov	sl, r3
 800ac9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac9e:	d807      	bhi.n	800acb0 <_printf_i+0x28>
 800aca0:	2f62      	cmp	r7, #98	@ 0x62
 800aca2:	d80a      	bhi.n	800acba <_printf_i+0x32>
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	f000 80d1 	beq.w	800ae4c <_printf_i+0x1c4>
 800acaa:	2f58      	cmp	r7, #88	@ 0x58
 800acac:	f000 80b8 	beq.w	800ae20 <_printf_i+0x198>
 800acb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800acb8:	e03a      	b.n	800ad30 <_printf_i+0xa8>
 800acba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acbe:	2b15      	cmp	r3, #21
 800acc0:	d8f6      	bhi.n	800acb0 <_printf_i+0x28>
 800acc2:	a101      	add	r1, pc, #4	@ (adr r1, 800acc8 <_printf_i+0x40>)
 800acc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acc8:	0800ad21 	.word	0x0800ad21
 800accc:	0800ad35 	.word	0x0800ad35
 800acd0:	0800acb1 	.word	0x0800acb1
 800acd4:	0800acb1 	.word	0x0800acb1
 800acd8:	0800acb1 	.word	0x0800acb1
 800acdc:	0800acb1 	.word	0x0800acb1
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800acb1 	.word	0x0800acb1
 800ace8:	0800acb1 	.word	0x0800acb1
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800ae33 	.word	0x0800ae33
 800acf8:	0800ad5f 	.word	0x0800ad5f
 800acfc:	0800aded 	.word	0x0800aded
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae55 	.word	0x0800ae55
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800ad5f 	.word	0x0800ad5f
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800adf5 	.word	0x0800adf5
 800ad20:	6833      	ldr	r3, [r6, #0]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6032      	str	r2, [r6, #0]
 800ad28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad30:	2301      	movs	r3, #1
 800ad32:	e09c      	b.n	800ae6e <_printf_i+0x1e6>
 800ad34:	6833      	ldr	r3, [r6, #0]
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	6031      	str	r1, [r6, #0]
 800ad3c:	0606      	lsls	r6, r0, #24
 800ad3e:	d501      	bpl.n	800ad44 <_printf_i+0xbc>
 800ad40:	681d      	ldr	r5, [r3, #0]
 800ad42:	e003      	b.n	800ad4c <_printf_i+0xc4>
 800ad44:	0645      	lsls	r5, r0, #25
 800ad46:	d5fb      	bpl.n	800ad40 <_printf_i+0xb8>
 800ad48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	da03      	bge.n	800ad58 <_printf_i+0xd0>
 800ad50:	232d      	movs	r3, #45	@ 0x2d
 800ad52:	426d      	negs	r5, r5
 800ad54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad58:	4858      	ldr	r0, [pc, #352]	@ (800aebc <_printf_i+0x234>)
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	e011      	b.n	800ad82 <_printf_i+0xfa>
 800ad5e:	6821      	ldr	r1, [r4, #0]
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	0608      	lsls	r0, r1, #24
 800ad64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad68:	d402      	bmi.n	800ad70 <_printf_i+0xe8>
 800ad6a:	0649      	lsls	r1, r1, #25
 800ad6c:	bf48      	it	mi
 800ad6e:	b2ad      	uxthmi	r5, r5
 800ad70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad72:	4852      	ldr	r0, [pc, #328]	@ (800aebc <_printf_i+0x234>)
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	bf14      	ite	ne
 800ad78:	230a      	movne	r3, #10
 800ad7a:	2308      	moveq	r3, #8
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad82:	6866      	ldr	r6, [r4, #4]
 800ad84:	60a6      	str	r6, [r4, #8]
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	db05      	blt.n	800ad96 <_printf_i+0x10e>
 800ad8a:	6821      	ldr	r1, [r4, #0]
 800ad8c:	432e      	orrs	r6, r5
 800ad8e:	f021 0104 	bic.w	r1, r1, #4
 800ad92:	6021      	str	r1, [r4, #0]
 800ad94:	d04b      	beq.n	800ae2e <_printf_i+0x1a6>
 800ad96:	4616      	mov	r6, r2
 800ad98:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad9c:	fb03 5711 	mls	r7, r3, r1, r5
 800ada0:	5dc7      	ldrb	r7, [r0, r7]
 800ada2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ada6:	462f      	mov	r7, r5
 800ada8:	42bb      	cmp	r3, r7
 800adaa:	460d      	mov	r5, r1
 800adac:	d9f4      	bls.n	800ad98 <_printf_i+0x110>
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d10b      	bne.n	800adca <_printf_i+0x142>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	07df      	lsls	r7, r3, #31
 800adb6:	d508      	bpl.n	800adca <_printf_i+0x142>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	6861      	ldr	r1, [r4, #4]
 800adbc:	4299      	cmp	r1, r3
 800adbe:	bfde      	ittt	le
 800adc0:	2330      	movle	r3, #48	@ 0x30
 800adc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adca:	1b92      	subs	r2, r2, r6
 800adcc:	6122      	str	r2, [r4, #16]
 800adce:	f8cd a000 	str.w	sl, [sp]
 800add2:	464b      	mov	r3, r9
 800add4:	aa03      	add	r2, sp, #12
 800add6:	4621      	mov	r1, r4
 800add8:	4640      	mov	r0, r8
 800adda:	f7ff fee7 	bl	800abac <_printf_common>
 800adde:	3001      	adds	r0, #1
 800ade0:	d14a      	bne.n	800ae78 <_printf_i+0x1f0>
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	b004      	add	sp, #16
 800ade8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	f043 0320 	orr.w	r3, r3, #32
 800adf2:	6023      	str	r3, [r4, #0]
 800adf4:	4832      	ldr	r0, [pc, #200]	@ (800aec0 <_printf_i+0x238>)
 800adf6:	2778      	movs	r7, #120	@ 0x78
 800adf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6831      	ldr	r1, [r6, #0]
 800ae00:	061f      	lsls	r7, r3, #24
 800ae02:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae06:	d402      	bmi.n	800ae0e <_printf_i+0x186>
 800ae08:	065f      	lsls	r7, r3, #25
 800ae0a:	bf48      	it	mi
 800ae0c:	b2ad      	uxthmi	r5, r5
 800ae0e:	6031      	str	r1, [r6, #0]
 800ae10:	07d9      	lsls	r1, r3, #31
 800ae12:	bf44      	itt	mi
 800ae14:	f043 0320 	orrmi.w	r3, r3, #32
 800ae18:	6023      	strmi	r3, [r4, #0]
 800ae1a:	b11d      	cbz	r5, 800ae24 <_printf_i+0x19c>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	e7ad      	b.n	800ad7c <_printf_i+0xf4>
 800ae20:	4826      	ldr	r0, [pc, #152]	@ (800aebc <_printf_i+0x234>)
 800ae22:	e7e9      	b.n	800adf8 <_printf_i+0x170>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	f023 0320 	bic.w	r3, r3, #32
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	e7f6      	b.n	800ae1c <_printf_i+0x194>
 800ae2e:	4616      	mov	r6, r2
 800ae30:	e7bd      	b.n	800adae <_printf_i+0x126>
 800ae32:	6833      	ldr	r3, [r6, #0]
 800ae34:	6825      	ldr	r5, [r4, #0]
 800ae36:	6961      	ldr	r1, [r4, #20]
 800ae38:	1d18      	adds	r0, r3, #4
 800ae3a:	6030      	str	r0, [r6, #0]
 800ae3c:	062e      	lsls	r6, r5, #24
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	d501      	bpl.n	800ae46 <_printf_i+0x1be>
 800ae42:	6019      	str	r1, [r3, #0]
 800ae44:	e002      	b.n	800ae4c <_printf_i+0x1c4>
 800ae46:	0668      	lsls	r0, r5, #25
 800ae48:	d5fb      	bpl.n	800ae42 <_printf_i+0x1ba>
 800ae4a:	8019      	strh	r1, [r3, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	6123      	str	r3, [r4, #16]
 800ae50:	4616      	mov	r6, r2
 800ae52:	e7bc      	b.n	800adce <_printf_i+0x146>
 800ae54:	6833      	ldr	r3, [r6, #0]
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	6032      	str	r2, [r6, #0]
 800ae5a:	681e      	ldr	r6, [r3, #0]
 800ae5c:	6862      	ldr	r2, [r4, #4]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7f5 f9ed 	bl	8000240 <memchr>
 800ae66:	b108      	cbz	r0, 800ae6c <_printf_i+0x1e4>
 800ae68:	1b80      	subs	r0, r0, r6
 800ae6a:	6060      	str	r0, [r4, #4]
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	2300      	movs	r3, #0
 800ae72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae76:	e7aa      	b.n	800adce <_printf_i+0x146>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	4649      	mov	r1, r9
 800ae7e:	4640      	mov	r0, r8
 800ae80:	47d0      	blx	sl
 800ae82:	3001      	adds	r0, #1
 800ae84:	d0ad      	beq.n	800ade2 <_printf_i+0x15a>
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	079b      	lsls	r3, r3, #30
 800ae8a:	d413      	bmi.n	800aeb4 <_printf_i+0x22c>
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	4298      	cmp	r0, r3
 800ae92:	bfb8      	it	lt
 800ae94:	4618      	movlt	r0, r3
 800ae96:	e7a6      	b.n	800ade6 <_printf_i+0x15e>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4632      	mov	r2, r6
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	4640      	mov	r0, r8
 800aea0:	47d0      	blx	sl
 800aea2:	3001      	adds	r0, #1
 800aea4:	d09d      	beq.n	800ade2 <_printf_i+0x15a>
 800aea6:	3501      	adds	r5, #1
 800aea8:	68e3      	ldr	r3, [r4, #12]
 800aeaa:	9903      	ldr	r1, [sp, #12]
 800aeac:	1a5b      	subs	r3, r3, r1
 800aeae:	42ab      	cmp	r3, r5
 800aeb0:	dcf2      	bgt.n	800ae98 <_printf_i+0x210>
 800aeb2:	e7eb      	b.n	800ae8c <_printf_i+0x204>
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	f104 0619 	add.w	r6, r4, #25
 800aeba:	e7f5      	b.n	800aea8 <_printf_i+0x220>
 800aebc:	0800b42c 	.word	0x0800b42c
 800aec0:	0800b43d 	.word	0x0800b43d

0800aec4 <__sflush_r>:
 800aec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	0716      	lsls	r6, r2, #28
 800aece:	4605      	mov	r5, r0
 800aed0:	460c      	mov	r4, r1
 800aed2:	d454      	bmi.n	800af7e <__sflush_r+0xba>
 800aed4:	684b      	ldr	r3, [r1, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dc02      	bgt.n	800aee0 <__sflush_r+0x1c>
 800aeda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dd48      	ble.n	800af72 <__sflush_r+0xae>
 800aee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	d045      	beq.n	800af72 <__sflush_r+0xae>
 800aee6:	2300      	movs	r3, #0
 800aee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aeec:	682f      	ldr	r7, [r5, #0]
 800aeee:	6a21      	ldr	r1, [r4, #32]
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	d030      	beq.n	800af56 <__sflush_r+0x92>
 800aef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	0759      	lsls	r1, r3, #29
 800aefa:	d505      	bpl.n	800af08 <__sflush_r+0x44>
 800aefc:	6863      	ldr	r3, [r4, #4]
 800aefe:	1ad2      	subs	r2, r2, r3
 800af00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af02:	b10b      	cbz	r3, 800af08 <__sflush_r+0x44>
 800af04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af06:	1ad2      	subs	r2, r2, r3
 800af08:	2300      	movs	r3, #0
 800af0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af0c:	6a21      	ldr	r1, [r4, #32]
 800af0e:	4628      	mov	r0, r5
 800af10:	47b0      	blx	r6
 800af12:	1c43      	adds	r3, r0, #1
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	d106      	bne.n	800af26 <__sflush_r+0x62>
 800af18:	6829      	ldr	r1, [r5, #0]
 800af1a:	291d      	cmp	r1, #29
 800af1c:	d82b      	bhi.n	800af76 <__sflush_r+0xb2>
 800af1e:	4a2a      	ldr	r2, [pc, #168]	@ (800afc8 <__sflush_r+0x104>)
 800af20:	40ca      	lsrs	r2, r1
 800af22:	07d6      	lsls	r6, r2, #31
 800af24:	d527      	bpl.n	800af76 <__sflush_r+0xb2>
 800af26:	2200      	movs	r2, #0
 800af28:	6062      	str	r2, [r4, #4]
 800af2a:	04d9      	lsls	r1, r3, #19
 800af2c:	6922      	ldr	r2, [r4, #16]
 800af2e:	6022      	str	r2, [r4, #0]
 800af30:	d504      	bpl.n	800af3c <__sflush_r+0x78>
 800af32:	1c42      	adds	r2, r0, #1
 800af34:	d101      	bne.n	800af3a <__sflush_r+0x76>
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	b903      	cbnz	r3, 800af3c <__sflush_r+0x78>
 800af3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800af3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af3e:	602f      	str	r7, [r5, #0]
 800af40:	b1b9      	cbz	r1, 800af72 <__sflush_r+0xae>
 800af42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af46:	4299      	cmp	r1, r3
 800af48:	d002      	beq.n	800af50 <__sflush_r+0x8c>
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7fe fbf4 	bl	8009738 <_free_r>
 800af50:	2300      	movs	r3, #0
 800af52:	6363      	str	r3, [r4, #52]	@ 0x34
 800af54:	e00d      	b.n	800af72 <__sflush_r+0xae>
 800af56:	2301      	movs	r3, #1
 800af58:	4628      	mov	r0, r5
 800af5a:	47b0      	blx	r6
 800af5c:	4602      	mov	r2, r0
 800af5e:	1c50      	adds	r0, r2, #1
 800af60:	d1c9      	bne.n	800aef6 <__sflush_r+0x32>
 800af62:	682b      	ldr	r3, [r5, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0c6      	beq.n	800aef6 <__sflush_r+0x32>
 800af68:	2b1d      	cmp	r3, #29
 800af6a:	d001      	beq.n	800af70 <__sflush_r+0xac>
 800af6c:	2b16      	cmp	r3, #22
 800af6e:	d11e      	bne.n	800afae <__sflush_r+0xea>
 800af70:	602f      	str	r7, [r5, #0]
 800af72:	2000      	movs	r0, #0
 800af74:	e022      	b.n	800afbc <__sflush_r+0xf8>
 800af76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af7a:	b21b      	sxth	r3, r3
 800af7c:	e01b      	b.n	800afb6 <__sflush_r+0xf2>
 800af7e:	690f      	ldr	r7, [r1, #16]
 800af80:	2f00      	cmp	r7, #0
 800af82:	d0f6      	beq.n	800af72 <__sflush_r+0xae>
 800af84:	0793      	lsls	r3, r2, #30
 800af86:	680e      	ldr	r6, [r1, #0]
 800af88:	bf08      	it	eq
 800af8a:	694b      	ldreq	r3, [r1, #20]
 800af8c:	600f      	str	r7, [r1, #0]
 800af8e:	bf18      	it	ne
 800af90:	2300      	movne	r3, #0
 800af92:	eba6 0807 	sub.w	r8, r6, r7
 800af96:	608b      	str	r3, [r1, #8]
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	dde9      	ble.n	800af72 <__sflush_r+0xae>
 800af9e:	6a21      	ldr	r1, [r4, #32]
 800afa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afa2:	4643      	mov	r3, r8
 800afa4:	463a      	mov	r2, r7
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b0      	blx	r6
 800afaa:	2800      	cmp	r0, #0
 800afac:	dc08      	bgt.n	800afc0 <__sflush_r+0xfc>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb6:	81a3      	strh	r3, [r4, #12]
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc0:	4407      	add	r7, r0
 800afc2:	eba8 0800 	sub.w	r8, r8, r0
 800afc6:	e7e7      	b.n	800af98 <__sflush_r+0xd4>
 800afc8:	20400001 	.word	0x20400001

0800afcc <_fflush_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	690b      	ldr	r3, [r1, #16]
 800afd0:	4605      	mov	r5, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	b913      	cbnz	r3, 800afdc <_fflush_r+0x10>
 800afd6:	2500      	movs	r5, #0
 800afd8:	4628      	mov	r0, r5
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	b118      	cbz	r0, 800afe6 <_fflush_r+0x1a>
 800afde:	6a03      	ldr	r3, [r0, #32]
 800afe0:	b90b      	cbnz	r3, 800afe6 <_fflush_r+0x1a>
 800afe2:	f7fe f987 	bl	80092f4 <__sinit>
 800afe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0f3      	beq.n	800afd6 <_fflush_r+0xa>
 800afee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aff0:	07d0      	lsls	r0, r2, #31
 800aff2:	d404      	bmi.n	800affe <_fflush_r+0x32>
 800aff4:	0599      	lsls	r1, r3, #22
 800aff6:	d402      	bmi.n	800affe <_fflush_r+0x32>
 800aff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800affa:	f7fe fb84 	bl	8009706 <__retarget_lock_acquire_recursive>
 800affe:	4628      	mov	r0, r5
 800b000:	4621      	mov	r1, r4
 800b002:	f7ff ff5f 	bl	800aec4 <__sflush_r>
 800b006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b008:	07da      	lsls	r2, r3, #31
 800b00a:	4605      	mov	r5, r0
 800b00c:	d4e4      	bmi.n	800afd8 <_fflush_r+0xc>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	059b      	lsls	r3, r3, #22
 800b012:	d4e1      	bmi.n	800afd8 <_fflush_r+0xc>
 800b014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b016:	f7fe fb77 	bl	8009708 <__retarget_lock_release_recursive>
 800b01a:	e7dd      	b.n	800afd8 <_fflush_r+0xc>

0800b01c <__swhatbuf_r>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	460c      	mov	r4, r1
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	2900      	cmp	r1, #0
 800b026:	b096      	sub	sp, #88	@ 0x58
 800b028:	4615      	mov	r5, r2
 800b02a:	461e      	mov	r6, r3
 800b02c:	da0d      	bge.n	800b04a <__swhatbuf_r+0x2e>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b034:	f04f 0100 	mov.w	r1, #0
 800b038:	bf14      	ite	ne
 800b03a:	2340      	movne	r3, #64	@ 0x40
 800b03c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b040:	2000      	movs	r0, #0
 800b042:	6031      	str	r1, [r6, #0]
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	b016      	add	sp, #88	@ 0x58
 800b048:	bd70      	pop	{r4, r5, r6, pc}
 800b04a:	466a      	mov	r2, sp
 800b04c:	f000 f848 	bl	800b0e0 <_fstat_r>
 800b050:	2800      	cmp	r0, #0
 800b052:	dbec      	blt.n	800b02e <__swhatbuf_r+0x12>
 800b054:	9901      	ldr	r1, [sp, #4]
 800b056:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b05a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b05e:	4259      	negs	r1, r3
 800b060:	4159      	adcs	r1, r3
 800b062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b066:	e7eb      	b.n	800b040 <__swhatbuf_r+0x24>

0800b068 <__smakebuf_r>:
 800b068:	898b      	ldrh	r3, [r1, #12]
 800b06a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b06c:	079d      	lsls	r5, r3, #30
 800b06e:	4606      	mov	r6, r0
 800b070:	460c      	mov	r4, r1
 800b072:	d507      	bpl.n	800b084 <__smakebuf_r+0x1c>
 800b074:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	2301      	movs	r3, #1
 800b07e:	6163      	str	r3, [r4, #20]
 800b080:	b003      	add	sp, #12
 800b082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b084:	ab01      	add	r3, sp, #4
 800b086:	466a      	mov	r2, sp
 800b088:	f7ff ffc8 	bl	800b01c <__swhatbuf_r>
 800b08c:	9f00      	ldr	r7, [sp, #0]
 800b08e:	4605      	mov	r5, r0
 800b090:	4639      	mov	r1, r7
 800b092:	4630      	mov	r0, r6
 800b094:	f7fe fef6 	bl	8009e84 <_malloc_r>
 800b098:	b948      	cbnz	r0, 800b0ae <__smakebuf_r+0x46>
 800b09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09e:	059a      	lsls	r2, r3, #22
 800b0a0:	d4ee      	bmi.n	800b080 <__smakebuf_r+0x18>
 800b0a2:	f023 0303 	bic.w	r3, r3, #3
 800b0a6:	f043 0302 	orr.w	r3, r3, #2
 800b0aa:	81a3      	strh	r3, [r4, #12]
 800b0ac:	e7e2      	b.n	800b074 <__smakebuf_r+0xc>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	6020      	str	r0, [r4, #0]
 800b0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	9b01      	ldr	r3, [sp, #4]
 800b0ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0be:	b15b      	cbz	r3, 800b0d8 <__smakebuf_r+0x70>
 800b0c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f000 f81d 	bl	800b104 <_isatty_r>
 800b0ca:	b128      	cbz	r0, 800b0d8 <__smakebuf_r+0x70>
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	f023 0303 	bic.w	r3, r3, #3
 800b0d2:	f043 0301 	orr.w	r3, r3, #1
 800b0d6:	81a3      	strh	r3, [r4, #12]
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	431d      	orrs	r5, r3
 800b0dc:	81a5      	strh	r5, [r4, #12]
 800b0de:	e7cf      	b.n	800b080 <__smakebuf_r+0x18>

0800b0e0 <_fstat_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	4d07      	ldr	r5, [pc, #28]	@ (800b100 <_fstat_r+0x20>)
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4608      	mov	r0, r1
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	f7f7 ffc3 	bl	8003078 <_fstat>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	d102      	bne.n	800b0fc <_fstat_r+0x1c>
 800b0f6:	682b      	ldr	r3, [r5, #0]
 800b0f8:	b103      	cbz	r3, 800b0fc <_fstat_r+0x1c>
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	bd38      	pop	{r3, r4, r5, pc}
 800b0fe:	bf00      	nop
 800b100:	20000ab8 	.word	0x20000ab8

0800b104 <_isatty_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4d06      	ldr	r5, [pc, #24]	@ (800b120 <_isatty_r+0x1c>)
 800b108:	2300      	movs	r3, #0
 800b10a:	4604      	mov	r4, r0
 800b10c:	4608      	mov	r0, r1
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	f7f7 ffc2 	bl	8003098 <_isatty>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	d102      	bne.n	800b11e <_isatty_r+0x1a>
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	b103      	cbz	r3, 800b11e <_isatty_r+0x1a>
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	20000ab8 	.word	0x20000ab8

0800b124 <_sbrk_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d06      	ldr	r5, [pc, #24]	@ (800b140 <_sbrk_r+0x1c>)
 800b128:	2300      	movs	r3, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	602b      	str	r3, [r5, #0]
 800b130:	f7f7 ffca 	bl	80030c8 <_sbrk>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_sbrk_r+0x1a>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_sbrk_r+0x1a>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	20000ab8 	.word	0x20000ab8

0800b144 <__assert_func>:
 800b144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b146:	4614      	mov	r4, r2
 800b148:	461a      	mov	r2, r3
 800b14a:	4b09      	ldr	r3, [pc, #36]	@ (800b170 <__assert_func+0x2c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4605      	mov	r5, r0
 800b150:	68d8      	ldr	r0, [r3, #12]
 800b152:	b14c      	cbz	r4, 800b168 <__assert_func+0x24>
 800b154:	4b07      	ldr	r3, [pc, #28]	@ (800b174 <__assert_func+0x30>)
 800b156:	9100      	str	r1, [sp, #0]
 800b158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b15c:	4906      	ldr	r1, [pc, #24]	@ (800b178 <__assert_func+0x34>)
 800b15e:	462b      	mov	r3, r5
 800b160:	f000 f82a 	bl	800b1b8 <fiprintf>
 800b164:	f000 f83a 	bl	800b1dc <abort>
 800b168:	4b04      	ldr	r3, [pc, #16]	@ (800b17c <__assert_func+0x38>)
 800b16a:	461c      	mov	r4, r3
 800b16c:	e7f3      	b.n	800b156 <__assert_func+0x12>
 800b16e:	bf00      	nop
 800b170:	200001a4 	.word	0x200001a4
 800b174:	0800b44e 	.word	0x0800b44e
 800b178:	0800b45b 	.word	0x0800b45b
 800b17c:	0800b489 	.word	0x0800b489

0800b180 <_calloc_r>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	fba1 5402 	umull	r5, r4, r1, r2
 800b186:	b934      	cbnz	r4, 800b196 <_calloc_r+0x16>
 800b188:	4629      	mov	r1, r5
 800b18a:	f7fe fe7b 	bl	8009e84 <_malloc_r>
 800b18e:	4606      	mov	r6, r0
 800b190:	b928      	cbnz	r0, 800b19e <_calloc_r+0x1e>
 800b192:	4630      	mov	r0, r6
 800b194:	bd70      	pop	{r4, r5, r6, pc}
 800b196:	220c      	movs	r2, #12
 800b198:	6002      	str	r2, [r0, #0]
 800b19a:	2600      	movs	r6, #0
 800b19c:	e7f9      	b.n	800b192 <_calloc_r+0x12>
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	f7fe fa25 	bl	80095f0 <memset>
 800b1a6:	e7f4      	b.n	800b192 <_calloc_r+0x12>

0800b1a8 <malloc>:
 800b1a8:	4b02      	ldr	r3, [pc, #8]	@ (800b1b4 <malloc+0xc>)
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	6818      	ldr	r0, [r3, #0]
 800b1ae:	f7fe be69 	b.w	8009e84 <_malloc_r>
 800b1b2:	bf00      	nop
 800b1b4:	200001a4 	.word	0x200001a4

0800b1b8 <fiprintf>:
 800b1b8:	b40e      	push	{r1, r2, r3}
 800b1ba:	b503      	push	{r0, r1, lr}
 800b1bc:	4601      	mov	r1, r0
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	4805      	ldr	r0, [pc, #20]	@ (800b1d8 <fiprintf+0x20>)
 800b1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c6:	6800      	ldr	r0, [r0, #0]
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	f7ff fbd7 	bl	800a97c <_vfiprintf_r>
 800b1ce:	b002      	add	sp, #8
 800b1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1d4:	b003      	add	sp, #12
 800b1d6:	4770      	bx	lr
 800b1d8:	200001a4 	.word	0x200001a4

0800b1dc <abort>:
 800b1dc:	b508      	push	{r3, lr}
 800b1de:	2006      	movs	r0, #6
 800b1e0:	f000 f82c 	bl	800b23c <raise>
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f7f7 fef7 	bl	8002fd8 <_exit>

0800b1ea <_raise_r>:
 800b1ea:	291f      	cmp	r1, #31
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	d904      	bls.n	800b1fe <_raise_r+0x14>
 800b1f4:	2316      	movs	r3, #22
 800b1f6:	6003      	str	r3, [r0, #0]
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b200:	b112      	cbz	r2, 800b208 <_raise_r+0x1e>
 800b202:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b206:	b94b      	cbnz	r3, 800b21c <_raise_r+0x32>
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 f831 	bl	800b270 <_getpid_r>
 800b20e:	4622      	mov	r2, r4
 800b210:	4601      	mov	r1, r0
 800b212:	4628      	mov	r0, r5
 800b214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b218:	f000 b818 	b.w	800b24c <_kill_r>
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d00a      	beq.n	800b236 <_raise_r+0x4c>
 800b220:	1c59      	adds	r1, r3, #1
 800b222:	d103      	bne.n	800b22c <_raise_r+0x42>
 800b224:	2316      	movs	r3, #22
 800b226:	6003      	str	r3, [r0, #0]
 800b228:	2001      	movs	r0, #1
 800b22a:	e7e7      	b.n	800b1fc <_raise_r+0x12>
 800b22c:	2100      	movs	r1, #0
 800b22e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b232:	4620      	mov	r0, r4
 800b234:	4798      	blx	r3
 800b236:	2000      	movs	r0, #0
 800b238:	e7e0      	b.n	800b1fc <_raise_r+0x12>
	...

0800b23c <raise>:
 800b23c:	4b02      	ldr	r3, [pc, #8]	@ (800b248 <raise+0xc>)
 800b23e:	4601      	mov	r1, r0
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	f7ff bfd2 	b.w	800b1ea <_raise_r>
 800b246:	bf00      	nop
 800b248:	200001a4 	.word	0x200001a4

0800b24c <_kill_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d07      	ldr	r5, [pc, #28]	@ (800b26c <_kill_r+0x20>)
 800b250:	2300      	movs	r3, #0
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	f7f7 fead 	bl	8002fb8 <_kill>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	d102      	bne.n	800b268 <_kill_r+0x1c>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b103      	cbz	r3, 800b268 <_kill_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	20000ab8 	.word	0x20000ab8

0800b270 <_getpid_r>:
 800b270:	f7f7 be9a 	b.w	8002fa8 <_getpid>

0800b274 <_init>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	bf00      	nop
 800b278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27a:	bc08      	pop	{r3}
 800b27c:	469e      	mov	lr, r3
 800b27e:	4770      	bx	lr

0800b280 <_fini>:
 800b280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b282:	bf00      	nop
 800b284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b286:	bc08      	pop	{r3}
 800b288:	469e      	mov	lr, r3
 800b28a:	4770      	bx	lr
