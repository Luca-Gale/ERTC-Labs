
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006f08  08006f08  00007f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f28  08006f28  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f28  08006f28  00007f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f2c  08006f2c  00007f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  2000000c  08006f3c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08006f3c  00008770  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a09  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a95  00000000  00000000  0001ea43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000214d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd6  00000000  00000000  000228f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029566  00000000  00000000  000238c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b11  00000000  00000000  0004ce2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104cb8  00000000  00000000  0006593d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a5f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055bc  00000000  00000000  0016a638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0016fbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006ef0 	.word	0x08006ef0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006ef0 	.word	0x08006ef0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	@ 0x24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	4413      	add	r3, r2
 800053a:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	607a      	str	r2, [r7, #4]
 8000542:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000544:	2301      	movs	r3, #1
 8000546:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000548:	e025      	b.n	8000596 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d109      	bne.n	8000566 <cobsEncode+0x3e>
            FinishBlock(code);
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	7efa      	ldrb	r2, [r7, #27]
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	607a      	str	r2, [r7, #4]
 800055e:	61fb      	str	r3, [r7, #28]
 8000560:	2301      	movs	r3, #1
 8000562:	76fb      	strb	r3, [r7, #27]
 8000564:	e014      	b.n	8000590 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	1c5a      	adds	r2, r3, #1
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000572:	7efb      	ldrb	r3, [r7, #27]
 8000574:	3301      	adds	r3, #1
 8000576:	76fb      	strb	r3, [r7, #27]
 8000578:	7efb      	ldrb	r3, [r7, #27]
 800057a:	2bff      	cmp	r3, #255	@ 0xff
 800057c:	d108      	bne.n	8000590 <cobsEncode+0x68>
                FinishBlock(code);
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	7efa      	ldrb	r2, [r7, #27]
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	61fb      	str	r3, [r7, #28]
 800058c:	2301      	movs	r3, #1
 800058e:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	429a      	cmp	r2, r3
 800059c:	d3d5      	bcc.n	800054a <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	7efa      	ldrb	r2, [r7, #27]
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	607a      	str	r2, [r7, #4]
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	2301      	movs	r3, #1
 80005ae:	76fb      	strb	r3, [r7, #27]
}
 80005b0:	bf00      	nop
 80005b2:	3724      	adds	r7, #36	@ 0x24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d01c      	beq.n	800060a <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3321      	adds	r3, #33	@ 0x21
 80005d4:	461a      	mov	r2, r3
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	68b8      	ldr	r0, [r7, #8]
 80005da:	f7ff ffa5 	bl	8000528 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f103 0121 	add.w	r1, r3, #33	@ 0x21
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	3302      	adds	r3, #2
 80005fe:	b29a      	uxth	r2, r3
 8000600:	2303      	movs	r3, #3
 8000602:	f005 fe69 	bl	80062d8 <HAL_UART_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	e000      	b.n	800060c <ertc_dlog_send+0x50>
	}

	return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c59      	adds	r1, r3, #1
 8000626:	2303      	movs	r3, #3
 8000628:	2201      	movs	r2, #1
 800062a:	f005 fede 	bl	80063ea <HAL_UART_Receive>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d111      	bne.n	8000658 <ertc_dlog_update+0x44>
		switch (logger->rxbuff[0]) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	2b41      	cmp	r3, #65	@ 0x41
 800063a:	d002      	beq.n	8000642 <ertc_dlog_update+0x2e>
 800063c:	2b42      	cmp	r3, #66	@ 0x42
 800063e:	d004      	beq.n	800064a <ertc_dlog_update+0x36>
 8000640:	e007      	b.n	8000652 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
				break;
 8000648:	e006      	b.n	8000658 <ertc_dlog_update+0x44>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
				break;
 8000650:	e002      	b.n	8000658 <ertc_dlog_update+0x44>
			default:
				logger->tx_enable = false;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		}
	}
	return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	0000      	movs	r0, r0
 8000664:	0000      	movs	r0, r0
	...

08000668 <HAL_TIM_PeriodElapsedCallback>:
	float u1, u2;
} data;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	static int kLed = 0;

	/* Speed ctrl routine */
	if(htim->Instance == TIM6)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d12b      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
     	/*	Prepare data packet */
		data.w1 = 10;
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 800067c:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800067e:	601a      	str	r2, [r3, #0]
		data.w2 += 1.085;
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000682:	edd3 7a01 	vldr	s15, [r3, #4]
 8000686:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800068a:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 80006e0 <HAL_TIM_PeriodElapsedCallback+0x78>
 800068e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000692:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000698:	edc3 7a01 	vstr	s15, [r3, #4]
		data.u1 = -3.14;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 800069e:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006a0:	609a      	str	r2, [r3, #8]
		data.u2 = 0.555683;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006a4:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006a6:	60da      	str	r2, [r3, #12]

		ertc_dlog_send(&logger, &data, sizeof(data));
 80006a8:	2210      	movs	r2, #16
 80006aa:	4910      	ldr	r1, [pc, #64]	@ (80006ec <HAL_TIM_PeriodElapsedCallback+0x84>)
 80006ac:	4813      	ldr	r0, [pc, #76]	@ (80006fc <HAL_TIM_PeriodElapsedCallback+0x94>)
 80006ae:	f7ff ff85 	bl	80005bc <ertc_dlog_send>

		// Indicate that the program is running
		if(++kLed >= 10)
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	3301      	adds	r3, #1
 80006b8:	4a11      	ldr	r2, [pc, #68]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b09      	cmp	r3, #9
 80006c2:	dd06      	ble.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			kLed = 0;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006ca:	2180      	movs	r1, #128	@ 0x80
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006ce:	f002 fc06 	bl	8002ede <HAL_GPIO_TogglePin>
		}
	}
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	f3af 8000 	nop.w
 80006e0:	f5c28f5c 	.word	0xf5c28f5c
 80006e4:	3ff15c28 	.word	0x3ff15c28
 80006e8:	40001000 	.word	0x40001000
 80006ec:	20000750 	.word	0x20000750
 80006f0:	41200000 	.word	0x41200000
 80006f4:	c048f5c3 	.word	0xc048f5c3
 80006f8:	3f0e413e 	.word	0x3f0e413e
 80006fc:	20000684 	.word	0x20000684
 8000700:	20000760 	.word	0x20000760
 8000704:	40020400 	.word	0x40020400

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f001 fdfb 	bl	8002306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f884 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 fedc 	bl	80014d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000718:	f000 feaa 	bl	8001470 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800071c:	f000 f8f0 	bl	8000900 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000720:	f000 f940 	bl	80009a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000724:	f000 f97e 	bl	8000a24 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000728:	f000 f9bc 	bl	8000aa4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800072c:	f000 f9f8 	bl	8000b20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000730:	f000 fac6 	bl	8000cc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000734:	f000 fb5e 	bl	8000df4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000738:	f000 fbb2 	bl	8000ea0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800073c:	f000 fc06 	bl	8000f4c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000740:	f000 fcb4 	bl	80010ac <MX_TIM8_Init>
  MX_UART4_Init();
 8000744:	f000 fdd4 	bl	80012f0 <MX_UART4_Init>
  MX_UART5_Init();
 8000748:	f000 fe02 	bl	8001350 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800074c:	f000 fe30 	bl	80013b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000750:	f000 fe5e 	bl	8001410 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000754:	f000 fd7c 	bl	8001250 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000758:	f000 fc70 	bl	800103c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <main+0xf4>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <main+0xf8>)
 8000760:	3344      	adds	r3, #68	@ 0x44
 8000762:	4611      	mov	r1, r2
 8000764:	2288      	movs	r2, #136	@ 0x88
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fbb4 	bl	8006ed4 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2110      	movs	r1, #16
 8000770:	4824      	ldr	r0, [pc, #144]	@ (8000804 <main+0xfc>)
 8000772:	f002 fb9b 	bl	8002eac <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800077a:	f001 fe21 	bl	80023c0 <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800077e:	213c      	movs	r1, #60	@ 0x3c
 8000780:	4821      	ldr	r0, [pc, #132]	@ (8000808 <main+0x100>)
 8000782:	f004 fa8b 	bl	8004c9c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000786:	213c      	movs	r1, #60	@ 0x3c
 8000788:	4820      	ldr	r0, [pc, #128]	@ (800080c <main+0x104>)
 800078a:	f004 fa87 	bl	8004c9c <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800078e:	2100      	movs	r1, #0
 8000790:	481f      	ldr	r0, [pc, #124]	@ (8000810 <main+0x108>)
 8000792:	f004 f881 	bl	8004898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000796:	2104      	movs	r1, #4
 8000798:	481d      	ldr	r0, [pc, #116]	@ (8000810 <main+0x108>)
 800079a:	f004 f87d 	bl	8004898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800079e:	2108      	movs	r1, #8
 80007a0:	481b      	ldr	r0, [pc, #108]	@ (8000810 <main+0x108>)
 80007a2:	f004 f879 	bl	8004898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007a6:	210c      	movs	r1, #12
 80007a8:	4819      	ldr	r0, [pc, #100]	@ (8000810 <main+0x108>)
 80007aa:	f004 f875 	bl	8004898 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <main+0x10c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <main+0x10c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <main+0x10c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2200      	movs	r2, #0
 80007c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80007c6:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <main+0x10c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2200      	movs	r2, #0
 80007cc:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80007ce:	2100      	movs	r1, #0
 80007d0:	4810      	ldr	r0, [pc, #64]	@ (8000814 <main+0x10c>)
 80007d2:	f004 f861 	bl	8004898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80007d6:	2104      	movs	r1, #4
 80007d8:	480e      	ldr	r0, [pc, #56]	@ (8000814 <main+0x10c>)
 80007da:	f004 f85d 	bl	8004898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80007de:	2108      	movs	r1, #8
 80007e0:	480c      	ldr	r0, [pc, #48]	@ (8000814 <main+0x10c>)
 80007e2:	f004 f859 	bl	8004898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80007e6:	210c      	movs	r1, #12
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <main+0x10c>)
 80007ea:	f004 f855 	bl	8004898 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 80007ee:	480a      	ldr	r0, [pc, #40]	@ (8000818 <main+0x110>)
 80007f0:	f003 ff22 	bl	8004638 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ertc_dlog_update(&logger);
 80007f4:	4801      	ldr	r0, [pc, #4]	@ (80007fc <main+0xf4>)
 80007f6:	f7ff ff0d 	bl	8000614 <ertc_dlog_update>
 80007fa:	e7fb      	b.n	80007f4 <main+0xec>
 80007fc:	20000684 	.word	0x20000684
 8000800:	200005fc 	.word	0x200005fc
 8000804:	40021000 	.word	0x40021000
 8000808:	20000214 	.word	0x20000214
 800080c:	20000260 	.word	0x20000260
 8000810:	2000017c 	.word	0x2000017c
 8000814:	20000344 	.word	0x20000344
 8000818:	200002f8 	.word	0x200002f8

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2234      	movs	r2, #52	@ 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fb25 	bl	8006e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000840:	f002 fc9c 	bl	800317c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	4b2c      	ldr	r3, [pc, #176]	@ (80008f8 <SystemClock_Config+0xdc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a2b      	ldr	r2, [pc, #172]	@ (80008f8 <SystemClock_Config+0xdc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <SystemClock_Config+0xdc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <SystemClock_Config+0xe0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000864:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <SystemClock_Config+0xe0>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <SystemClock_Config+0xe0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000880:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000890:	2360      	movs	r3, #96	@ 0x60
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fcc9 	bl	800323c <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b0:	f000 ff40 	bl	8001734 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b4:	f002 fc72 	bl	800319c <HAL_PWREx_EnableOverDrive>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008be:	f000 ff39 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2103      	movs	r1, #3
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 ff5a 	bl	8003798 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ea:	f000 ff23 	bl	8001734 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	@ 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <MX_ADC1_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800091e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_ADC1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_ADC1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <MX_ADC1_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_ADC1_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_ADC1_Init+0x98>)
 800095c:	2201      	movs	r2, #1
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000962:	f001 fd51 	bl	8002408 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800096c:	f000 fee2 	bl	8001734 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000970:	2303      	movs	r3, #3
 8000972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_ADC1_Init+0x98>)
 8000982:	f001 fd85 	bl	8002490 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 fed2 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000028 	.word	0x20000028
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <MX_I2C1_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009e0:	f002 fa98 	bl	8002f14 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 fea3 	bl	8001734 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <MX_I2C1_Init+0x74>)
 80009f2:	f002 fb2b 	bl	800304c <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 fe9a 	bl	8001734 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_I2C1_Init+0x74>)
 8000a04:	f002 fb6d 	bl	80030e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 fe91 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000070 	.word	0x20000070
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	20303e5d 	.word	0x20303e5d

08000a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <MX_I2C2_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <MX_I2C2_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a60:	f002 fa58 	bl	8002f14 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fe63 	bl	8001734 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a72:	f002 faeb 	bl	800304c <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fe5a 	bl	8001734 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_I2C2_Init+0x74>)
 8000a84:	f002 fb2d 	bl	80030e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fe51 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000c4 	.word	0x200000c4
 8000a9c:	40005800 	.word	0x40005800
 8000aa0:	20303e5d 	.word	0x20303e5d

08000aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <MX_SPI1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000abe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	@ (8000b18 <MX_SPI1_Init+0x74>)
 8000b04:	f003 fc96 	bl	8004434 <HAL_SPI_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fe11 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000118 	.word	0x20000118
 8000b1c:	40013000 	.word	0x40013000

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09a      	sub	sp, #104	@ 0x68
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	222c      	movs	r2, #44	@ 0x2c
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f98d 	bl	8006e7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b60:	4b55      	ldr	r3, [pc, #340]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b62:	4a56      	ldr	r2, [pc, #344]	@ (8000cbc <MX_TIM1_Init+0x19c>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b66:	4b54      	ldr	r3, [pc, #336]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b52      	ldr	r3, [pc, #328]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000b72:	4b51      	ldr	r3, [pc, #324]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8a:	484b      	ldr	r0, [pc, #300]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000b8c:	f003 fcfd 	bl	800458a <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b96:	f000 fdcd 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4844      	ldr	r0, [pc, #272]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000ba8:	f004 fc38 	bl	800541c <HAL_TIM_ConfigClockSource>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bb2:	f000 fdbf 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000bb6:	4840      	ldr	r0, [pc, #256]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000bb8:	f003 fdb6 	bl	8004728 <HAL_TIM_OC_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bc2:	f000 fdb7 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4837      	ldr	r0, [pc, #220]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000bda:	f005 fa05 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000be4:	f000 fda6 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000be8:	2350      	movs	r3, #80	@ 0x50
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	482a      	ldr	r0, [pc, #168]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000c0e:	f004 f9db 	bl	8004fc8 <HAL_TIM_OC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000c18:	f000 fd8c 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4824      	ldr	r0, [pc, #144]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000c26:	f004 f9cf 	bl	8004fc8 <HAL_TIM_OC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c30:	f000 fd80 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c38:	2208      	movs	r2, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481e      	ldr	r0, [pc, #120]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000c3e:	f004 f9c3 	bl	8004fc8 <HAL_TIM_OC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000c48:	f000 fd74 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c50:	220c      	movs	r2, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	4818      	ldr	r0, [pc, #96]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000c56:	f004 f9b7 	bl	8004fc8 <HAL_TIM_OC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000c60:	f000 fd68 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000c9a:	f005 fa33 	bl	8006104 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000ca4:	f000 fd46 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ca8:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <MX_TIM1_Init+0x198>)
 8000caa:	f001 f81b 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8000cae:	bf00      	nop
 8000cb0:	3768      	adds	r7, #104	@ 0x68
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000017c 	.word	0x2000017c
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b092      	sub	sp, #72	@ 0x48
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d00:	4b3b      	ldr	r3, [pc, #236]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d08:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b38      	ldr	r3, [pc, #224]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d14:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b33      	ldr	r3, [pc, #204]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4831      	ldr	r0, [pc, #196]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d2a:	f003 fc2e 	bl	800458a <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d34:	f000 fcfe 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d42:	4619      	mov	r1, r3
 8000d44:	482a      	ldr	r0, [pc, #168]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d46:	f004 fb69 	bl	800541c <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d50:	f000 fcf0 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d54:	4826      	ldr	r0, [pc, #152]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d56:	f003 fd48 	bl	80047ea <HAL_TIM_PWM_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d60:	f000 fce8 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d64:	4822      	ldr	r0, [pc, #136]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d66:	f003 fe91 	bl	8004a8c <HAL_TIM_IC_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d70:	f000 fce0 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	481b      	ldr	r0, [pc, #108]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000d84:	f005 f930 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000d8e:	f000 fcd1 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d92:	2360      	movs	r3, #96	@ 0x60
 8000d94:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000dac:	f004 fa22 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000db6:	f000 fcbd 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2208      	movs	r2, #8
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000dd2:	f004 f973 	bl	80050bc <HAL_TIM_IC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000ddc:	f000 fcaa 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <MX_TIM2_Init+0x130>)
 8000de2:	f000 ff7f 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3748      	adds	r7, #72	@ 0x48
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001c8 	.word	0x200001c8

08000df4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	@ 0x30
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2224      	movs	r2, #36	@ 0x24
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f006 f839 	bl	8006e7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e14:	4a21      	ldr	r2, [pc, #132]	@ (8000e9c <MX_TIM3_Init+0xa8>)
 8000e16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e26:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8000e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e40:	2301      	movs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e50:	2301      	movs	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e64:	f003 fe74 	bl	8004b50 <HAL_TIM_Encoder_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e6e:	f000 fc61 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_TIM3_Init+0xa4>)
 8000e80:	f005 f8b2 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e8a:	f000 fc53 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	@ 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000214 	.word	0x20000214
 8000e9c:	40000400 	.word	0x40000400

08000ea0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2224      	movs	r2, #36	@ 0x24
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 ffe3 	bl	8006e7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000ec0:	4a21      	ldr	r2, [pc, #132]	@ (8000f48 <MX_TIM4_Init+0xa8>)
 8000ec2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000ed2:	f640 62ff 	movw	r2, #3839	@ 0xeff
 8000ed6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000f04:	230f      	movs	r3, #15
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480d      	ldr	r0, [pc, #52]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000f10:	f003 fe1e 	bl	8004b50 <HAL_TIM_Encoder_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f1a:	f000 fc0b 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_TIM4_Init+0xa4>)
 8000f2c:	f005 f85c 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f36:	f000 fbfd 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	@ 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000260 	.word	0x20000260
 8000f48:	40000800 	.word	0x40000800

08000f4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	@ 0x38
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000f80:	4a2d      	ldr	r2, [pc, #180]	@ (8001038 <MX_TIM5_Init+0xec>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f90:	4b28      	ldr	r3, [pc, #160]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fa4:	4823      	ldr	r0, [pc, #140]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000fa6:	f003 faf0 	bl	800458a <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000fb0:	f000 fbc0 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481c      	ldr	r0, [pc, #112]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000fc2:	f004 fa2b 	bl	800541c <HAL_TIM_ConfigClockSource>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000fcc:	f000 fbb2 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fd0:	4818      	ldr	r0, [pc, #96]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000fd2:	f003 fc0a 	bl	80047ea <HAL_TIM_PWM_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000fdc:	f000 fbaa 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4811      	ldr	r0, [pc, #68]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8000ff0:	f004 fffa 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ffa:	f000 fb9b 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	2360      	movs	r3, #96	@ 0x60
 8001000:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8001016:	f004 f8ed 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001020:	f000 fb88 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM5_Init+0xe8>)
 8001026:	f000 fe5d 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3738      	adds	r7, #56	@ 0x38
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200002ac 	.word	0x200002ac
 8001038:	40000c00 	.word	0x40000c00

0800103c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_TIM6_Init+0x68>)
 800104e:	4a16      	ldr	r2, [pc, #88]	@ (80010a8 <MX_TIM6_Init+0x6c>)
 8001050:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_TIM6_Init+0x68>)
 8001054:	f240 32bf 	movw	r2, #959	@ 0x3bf
 8001058:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_TIM6_Init+0x68>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_TIM6_Init+0x68>)
 8001062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001066:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_TIM6_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800106e:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_TIM6_Init+0x68>)
 8001070:	f003 fa8b 	bl	800458a <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800107a:	f000 fb5b 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <MX_TIM6_Init+0x68>)
 800108c:	f004 ffac 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001096:	f000 fb4d 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200002f8 	.word	0x200002f8
 80010a8:	40001000 	.word	0x40001000

080010ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09a      	sub	sp, #104	@ 0x68
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	222c      	movs	r2, #44	@ 0x2c
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fec7 	bl	8006e7a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010ec:	4b56      	ldr	r3, [pc, #344]	@ (8001248 <MX_TIM8_Init+0x19c>)
 80010ee:	4a57      	ldr	r2, [pc, #348]	@ (800124c <MX_TIM8_Init+0x1a0>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80010f2:	4b55      	ldr	r3, [pc, #340]	@ (8001248 <MX_TIM8_Init+0x19c>)
 80010f4:	f240 32bf 	movw	r2, #959	@ 0x3bf
 80010f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b53      	ldr	r3, [pc, #332]	@ (8001248 <MX_TIM8_Init+0x19c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001100:	4b51      	ldr	r3, [pc, #324]	@ (8001248 <MX_TIM8_Init+0x19c>)
 8001102:	f240 128f 	movw	r2, #399	@ 0x18f
 8001106:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b4f      	ldr	r3, [pc, #316]	@ (8001248 <MX_TIM8_Init+0x19c>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800110e:	4b4e      	ldr	r3, [pc, #312]	@ (8001248 <MX_TIM8_Init+0x19c>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b4c      	ldr	r3, [pc, #304]	@ (8001248 <MX_TIM8_Init+0x19c>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800111a:	484b      	ldr	r0, [pc, #300]	@ (8001248 <MX_TIM8_Init+0x19c>)
 800111c:	f003 fa35 	bl	800458a <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001126:	f000 fb05 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001130:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001134:	4619      	mov	r1, r3
 8001136:	4844      	ldr	r0, [pc, #272]	@ (8001248 <MX_TIM8_Init+0x19c>)
 8001138:	f004 f970 	bl	800541c <HAL_TIM_ConfigClockSource>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001142:	f000 faf7 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001146:	4840      	ldr	r0, [pc, #256]	@ (8001248 <MX_TIM8_Init+0x19c>)
 8001148:	f003 fb4f 	bl	80047ea <HAL_TIM_PWM_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001152:	f000 faef 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001162:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001166:	4619      	mov	r1, r3
 8001168:	4837      	ldr	r0, [pc, #220]	@ (8001248 <MX_TIM8_Init+0x19c>)
 800116a:	f004 ff3d 	bl	8005fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001174:	f000 fade 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001178:	2360      	movs	r3, #96	@ 0x60
 800117a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001194:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	482a      	ldr	r0, [pc, #168]	@ (8001248 <MX_TIM8_Init+0x19c>)
 800119e:	f004 f829 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80011a8:	f000 fac4 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b0:	2204      	movs	r2, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4824      	ldr	r0, [pc, #144]	@ (8001248 <MX_TIM8_Init+0x19c>)
 80011b6:	f004 f81d 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80011c0:	f000 fab8 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c8:	2208      	movs	r2, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	481e      	ldr	r0, [pc, #120]	@ (8001248 <MX_TIM8_Init+0x19c>)
 80011ce:	f004 f811 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80011d8:	f000 faac 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011e0:	220c      	movs	r2, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4818      	ldr	r0, [pc, #96]	@ (8001248 <MX_TIM8_Init+0x19c>)
 80011e6:	f004 f805 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80011f0:	f000 faa0 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001208:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800120c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <MX_TIM8_Init+0x19c>)
 800122a:	f004 ff6b 	bl	8006104 <HAL_TIMEx_ConfigBreakDeadTime>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001234:	f000 fa7e 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <MX_TIM8_Init+0x19c>)
 800123a:	f000 fd53 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 800123e:	bf00      	nop
 8001240:	3768      	adds	r7, #104	@ 0x68
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000344 	.word	0x20000344
 800124c:	40010400 	.word	0x40010400

08001250 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001268:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_TIM9_Init+0x98>)
 800126a:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <MX_TIM9_Init+0x9c>)
 800126c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800126e:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <MX_TIM9_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_TIM9_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_TIM9_Init+0x98>)
 800127c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001280:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <MX_TIM9_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_TIM9_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800128e:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <MX_TIM9_Init+0x98>)
 8001290:	f003 faab 	bl	80047ea <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800129a:	f000 fa4b 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_TIM9_Init+0x98>)
 80012b6:	f003 ff9d 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80012c0:	f000 fa38 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2204      	movs	r2, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_TIM9_Init+0x98>)
 80012cc:	f003 ff92 	bl	80051f4 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80012d6:	f000 fa2d 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80012da:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <MX_TIM9_Init+0x98>)
 80012dc:	f000 fd02 	bl	8001ce4 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000390 	.word	0x20000390
 80012ec:	40014000 	.word	0x40014000

080012f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_UART4_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <MX_UART4_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_UART4_Init+0x58>)
 80012fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001300:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_UART4_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_UART4_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_UART4_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_UART4_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_UART4_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_UART4_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_UART4_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_UART4_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_UART4_Init+0x58>)
 8001334:	f004 ff82 	bl	800623c <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 f9f9 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003dc 	.word	0x200003dc
 800134c:	40004c00 	.word	0x40004c00

08001350 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001356:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <MX_UART5_Init+0x5c>)
 8001358:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_UART5_Init+0x58>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_UART5_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_UART5_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_UART5_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_UART5_Init+0x58>)
 8001394:	f004 ff52 	bl	800623c <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 f9c9 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000464 	.word	0x20000464
 80013ac:	40005000 	.word	0x40005000

080013b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013b6:	4a15      	ldr	r2, [pc, #84]	@ (800140c <MX_USART1_UART_Init+0x5c>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_USART1_UART_Init+0x58>)
 80013f4:	f004 ff22 	bl	800623c <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013fe:	f000 f999 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200004ec 	.word	0x200004ec
 800140c:	40011000 	.word	0x40011000

08001410 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001416:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <MX_USART2_UART_Init+0x58>)
 8001418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 800141c:	4a13      	ldr	r2, [pc, #76]	@ (800146c <MX_USART2_UART_Init+0x5c>)
 800141e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001420:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001434:	220c      	movs	r2, #12
 8001436:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001444:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_USART2_UART_Init+0x54>)
 8001452:	f004 fef3 	bl	800623c <HAL_UART_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 800145c:	f000 f96a 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000574 	.word	0x20000574
 8001468:	40004400 	.word	0x40004400
 800146c:	000f4240 	.word	0x000f4240

08001470 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001474:	4b14      	ldr	r3, [pc, #80]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 8001476:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <MX_USART3_UART_Init+0x5c>)
 8001478:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_USART3_UART_Init+0x58>)
 80014b4:	f004 fec2 	bl	800623c <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014be:	f000 f939 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200005fc 	.word	0x200005fc
 80014cc:	40004800 	.word	0x40004800

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	@ 0x38
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e6:	4b8c      	ldr	r3, [pc, #560]	@ (8001718 <MX_GPIO_Init+0x248>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a8b      	ldr	r2, [pc, #556]	@ (8001718 <MX_GPIO_Init+0x248>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <MX_GPIO_Init+0x248>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b86      	ldr	r3, [pc, #536]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a85      	ldr	r2, [pc, #532]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b83      	ldr	r3, [pc, #524]	@ (8001718 <MX_GPIO_Init+0x248>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b80      	ldr	r3, [pc, #512]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a7f      	ldr	r2, [pc, #508]	@ (8001718 <MX_GPIO_Init+0x248>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b7d      	ldr	r3, [pc, #500]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	4b7a      	ldr	r3, [pc, #488]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a79      	ldr	r2, [pc, #484]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b77      	ldr	r3, [pc, #476]	@ (8001718 <MX_GPIO_Init+0x248>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a73      	ldr	r2, [pc, #460]	@ (8001718 <MX_GPIO_Init+0x248>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b71      	ldr	r3, [pc, #452]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b6e      	ldr	r3, [pc, #440]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a6d      	ldr	r2, [pc, #436]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b6b      	ldr	r3, [pc, #428]	@ (8001718 <MX_GPIO_Init+0x248>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a67      	ldr	r2, [pc, #412]	@ (8001718 <MX_GPIO_Init+0x248>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b65      	ldr	r3, [pc, #404]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800158e:	4b62      	ldr	r3, [pc, #392]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a61      	ldr	r2, [pc, #388]	@ (8001718 <MX_GPIO_Init+0x248>)
 8001594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <MX_GPIO_Init+0x248>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2118      	movs	r1, #24
 80015aa:	485c      	ldr	r0, [pc, #368]	@ (800171c <MX_GPIO_Init+0x24c>)
 80015ac:	f001 fc7e 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f244 0181 	movw	r1, #16513	@ 0x4081
 80015b6:	485a      	ldr	r0, [pc, #360]	@ (8001720 <MX_GPIO_Init+0x250>)
 80015b8:	f001 fc78 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	@ 0x40
 80015c0:	4858      	ldr	r0, [pc, #352]	@ (8001724 <MX_GPIO_Init+0x254>)
 80015c2:	f001 fc73 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80015c6:	2318      	movs	r3, #24
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	484f      	ldr	r0, [pc, #316]	@ (800171c <MX_GPIO_Init+0x24c>)
 80015de:	f001 fab9 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 80015e2:	f643 731c 	movw	r3, #16156	@ 0x3f1c
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	484b      	ldr	r0, [pc, #300]	@ (8001728 <MX_GPIO_Init+0x258>)
 80015fa:	f001 faab 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015fe:	2332      	movs	r3, #50	@ 0x32
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800160e:	230b      	movs	r3, #11
 8001610:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4844      	ldr	r0, [pc, #272]	@ (800172c <MX_GPIO_Init+0x25c>)
 800161a:	f001 fa9b 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800161e:	2386      	movs	r3, #134	@ 0x86
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800162e:	230b      	movs	r3, #11
 8001630:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	483d      	ldr	r0, [pc, #244]	@ (8001730 <MX_GPIO_Init+0x260>)
 800163a:	f001 fa8b 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800163e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4832      	ldr	r0, [pc, #200]	@ (8001720 <MX_GPIO_Init+0x250>)
 8001658:	f001 fa7c 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800165c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800166e:	230b      	movs	r3, #11
 8001670:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4829      	ldr	r0, [pc, #164]	@ (8001720 <MX_GPIO_Init+0x250>)
 800167a:	f001 fa6b 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800167e:	2340      	movs	r3, #64	@ 0x40
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	4823      	ldr	r0, [pc, #140]	@ (8001724 <MX_GPIO_Init+0x254>)
 8001696:	f001 fa5d 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	481d      	ldr	r0, [pc, #116]	@ (8001724 <MX_GPIO_Init+0x254>)
 80016ae:	f001 fa51 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016b2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016c4:	230a      	movs	r3, #10
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	4818      	ldr	r0, [pc, #96]	@ (8001730 <MX_GPIO_Init+0x260>)
 80016d0:	f001 fa40 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4811      	ldr	r0, [pc, #68]	@ (8001730 <MX_GPIO_Init+0x260>)
 80016ea:	f001 fa33 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016ee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001700:	230b      	movs	r3, #11
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <MX_GPIO_Init+0x254>)
 800170c:	f001 fa22 	bl	8002b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001710:	bf00      	nop
 8001712:	3738      	adds	r7, #56	@ 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40021000 	.word	0x40021000
 8001720:	40020400 	.word	0x40020400
 8001724:	40021800 	.word	0x40021800
 8001728:	40021400 	.word	0x40021400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  static uint32_t kLed = 0;
	  if(++kLed >= 1000)
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <Error_Handler+0x30>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <Error_Handler+0x30>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <Error_Handler+0x30>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800174e:	d3f5      	bcc.n	800173c <Error_Handler+0x8>
	  {
		  kLed = 0;
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <Error_Handler+0x30>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800175a:	4803      	ldr	r0, [pc, #12]	@ (8001768 <Error_Handler+0x34>)
 800175c:	f001 fbbf 	bl	8002ede <HAL_GPIO_TogglePin>
  {
 8001760:	e7ec      	b.n	800173c <Error_Handler+0x8>
 8001762:	bf00      	nop
 8001764:	20000764 	.word	0x20000764
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <HAL_MspInit+0x44>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	@ 0x40
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <HAL_MspInit+0x44>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_MspInit+0x44>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <HAL_MspInit+0x44>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_MspInit+0x44>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a15      	ldr	r2, [pc, #84]	@ (8001828 <HAL_ADC_MspInit+0x74>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d123      	bne.n	800181e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_ADC_MspInit+0x78>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_ADC_MspInit+0x78>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_ADC_MspInit+0x78>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_ADC_MspInit+0x78>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a0e      	ldr	r2, [pc, #56]	@ (800182c <HAL_ADC_MspInit+0x78>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_ADC_MspInit+0x78>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001806:	2308      	movs	r3, #8
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	@ (8001830 <HAL_ADC_MspInit+0x7c>)
 800181a:	f001 f99b 	bl	8002b54 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	@ 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012000 	.word	0x40012000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0b0      	sub	sp, #192	@ 0xc0
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	2290      	movs	r2, #144	@ 0x90
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f005 fb10 	bl	8006e7a <memset>
  if(hi2c->Instance==I2C1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a44      	ldr	r2, [pc, #272]	@ (8001970 <HAL_I2C_MspInit+0x13c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d13e      	bne.n	80018e2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001864:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001868:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4618      	mov	r0, r3
 8001876:	f002 f9b5 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001880:	f7ff ff58 	bl	8001734 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	4a3a      	ldr	r2, [pc, #232]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001890:	4b38      	ldr	r3, [pc, #224]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800189c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a4:	2312      	movs	r3, #18
 80018a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b6:	2304      	movs	r3, #4
 80018b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018c0:	4619      	mov	r1, r3
 80018c2:	482d      	ldr	r0, [pc, #180]	@ (8001978 <HAL_I2C_MspInit+0x144>)
 80018c4:	f001 f946 	bl	8002b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	4a29      	ldr	r2, [pc, #164]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 80018ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018e0:	e041      	b.n	8001966 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a25      	ldr	r2, [pc, #148]	@ (800197c <HAL_I2C_MspInit+0x148>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13c      	bne.n	8001966 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4618      	mov	r0, r3
 80018fe:	f002 f971 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001908:	f7ff ff14 	bl	8001734 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	4a18      	ldr	r2, [pc, #96]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	6313      	str	r3, [r2, #48]	@ 0x30
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001924:	2303      	movs	r3, #3
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800192a:	2312      	movs	r3, #18
 800192c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001930:	2301      	movs	r3, #1
 8001932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800193c:	2304      	movs	r3, #4
 800193e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001942:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001946:	4619      	mov	r1, r3
 8001948:	480d      	ldr	r0, [pc, #52]	@ (8001980 <HAL_I2C_MspInit+0x14c>)
 800194a:	f001 f903 	bl	8002b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 8001954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_I2C_MspInit+0x140>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	bf00      	nop
 8001968:	37c0      	adds	r7, #192	@ 0xc0
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40005400 	.word	0x40005400
 8001974:	40023800 	.word	0x40023800
 8001978:	40020400 	.word	0x40020400
 800197c:	40005800 	.word	0x40005800
 8001980:	40021400 	.word	0x40021400

08001984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	@ 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a33      	ldr	r2, [pc, #204]	@ (8001a70 <HAL_SPI_MspInit+0xec>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d160      	bne.n	8001a68 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a32      	ldr	r2, [pc, #200]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a26      	ldr	r2, [pc, #152]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b24      	ldr	r3, [pc, #144]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a20      	ldr	r2, [pc, #128]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <HAL_SPI_MspInit+0xf0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a06:	2320      	movs	r3, #32
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a16:	2305      	movs	r3, #5
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <HAL_SPI_MspInit+0xf4>)
 8001a22:	f001 f897 	bl	8002b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a26:	2380      	movs	r3, #128	@ 0x80
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a36:	2305      	movs	r3, #5
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480e      	ldr	r0, [pc, #56]	@ (8001a7c <HAL_SPI_MspInit+0xf8>)
 8001a42:	f001 f887 	bl	8002b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	4619      	mov	r1, r3
 8001a62:	4807      	ldr	r0, [pc, #28]	@ (8001a80 <HAL_SPI_MspInit+0xfc>)
 8001a64:	f001 f876 	bl	8002b54 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a68:	bf00      	nop
 8001a6a:	3730      	adds	r7, #48	@ 0x30
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	40021800 	.word	0x40021800

08001a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	@ 0x38
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba0 <HAL_TIM_Base_MspInit+0x11c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001abe:	e06b      	b.n	8001b98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac8:	d129      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aca:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a35      	ldr	r2, [pc, #212]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4824      	ldr	r0, [pc, #144]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x124>)
 8001b18:	f001 f81c 	bl	8002b54 <HAL_GPIO_Init>
}
 8001b1c:	e03c      	b.n	8001b98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <HAL_TIM_Base_MspInit+0x128>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10c      	bne.n	8001b42 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
}
 8001b40:	e02a      	b.n	8001b98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb0 <HAL_TIM_Base_MspInit+0x12c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d114      	bne.n	8001b76 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2101      	movs	r1, #1
 8001b68:	2036      	movs	r0, #54	@ 0x36
 8001b6a:	f000 ffbc 	bl	8002ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b6e:	2036      	movs	r0, #54	@ 0x36
 8001b70:	f000 ffd5 	bl	8002b1e <HAL_NVIC_EnableIRQ>
}
 8001b74:	e010      	b.n	8001b98 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <HAL_TIM_Base_MspInit+0x130>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d10b      	bne.n	8001b98 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x120>)
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3738      	adds	r7, #56	@ 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40001000 	.word	0x40001000
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001c90 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d128      	bne.n	8001c2c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bda:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	4a2d      	ldr	r2, [pc, #180]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a27      	ldr	r2, [pc, #156]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001c0a:	2330      	movs	r3, #48	@ 0x30
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	481c      	ldr	r0, [pc, #112]	@ (8001c98 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c26:	f000 ff95 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c2a:	e02d      	b.n	8001c88 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	@ (8001c9c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d128      	bne.n	8001c88 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a16      	ldr	r2, [pc, #88]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a10      	ldr	r2, [pc, #64]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001c66:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c84:	f000 ff66 	bl	8002b54 <HAL_GPIO_Init>
}
 8001c88:	bf00      	nop
 8001c8a:	3730      	adds	r7, #48	@ 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40020c00 	.word	0x40020c00

08001ca4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <HAL_TIM_PWM_MspInit+0x38>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10b      	bne.n	8001cce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM9_MspInit 1 */

  }

}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <HAL_TIM_MspPostInit+0x178>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d11d      	bne.n	8001d42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d06:	4b56      	ldr	r3, [pc, #344]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a55      	ldr	r2, [pc, #340]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d0c:	f043 0310 	orr.w	r3, r3, #16
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b53      	ldr	r3, [pc, #332]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8001d1e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d30:	2301      	movs	r3, #1
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	484a      	ldr	r0, [pc, #296]	@ (8001e64 <HAL_TIM_MspPostInit+0x180>)
 8001d3c:	f000 ff0a 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001d40:	e088      	b.n	8001e54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4a:	d11d      	bne.n	8001d88 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4c:	4b44      	ldr	r3, [pc, #272]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	4a43      	ldr	r2, [pc, #268]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d58:	4b41      	ldr	r3, [pc, #260]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8001d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d76:	2301      	movs	r3, #1
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4839      	ldr	r0, [pc, #228]	@ (8001e68 <HAL_TIM_MspPostInit+0x184>)
 8001d82:	f000 fee7 	bl	8002b54 <HAL_GPIO_Init>
}
 8001d86:	e065      	b.n	8001e54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a37      	ldr	r2, [pc, #220]	@ (8001e6c <HAL_TIM_MspPostInit+0x188>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d11c      	bne.n	8001dcc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4828      	ldr	r0, [pc, #160]	@ (8001e68 <HAL_TIM_MspPostInit+0x184>)
 8001dc6:	f000 fec5 	bl	8002b54 <HAL_GPIO_Init>
}
 8001dca:	e043      	b.n	8001e54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a27      	ldr	r2, [pc, #156]	@ (8001e70 <HAL_TIM_MspPostInit+0x18c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d11d      	bne.n	8001e12 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a21      	ldr	r2, [pc, #132]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8001dee:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e00:	2303      	movs	r3, #3
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481a      	ldr	r0, [pc, #104]	@ (8001e74 <HAL_TIM_MspPostInit+0x190>)
 8001e0c:	f000 fea2 	bl	8002b54 <HAL_GPIO_Init>
}
 8001e10:	e020      	b.n	8001e54 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a18      	ldr	r2, [pc, #96]	@ (8001e78 <HAL_TIM_MspPostInit+0x194>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001e22:	f043 0310 	orr.w	r3, r3, #16
 8001e26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e28:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <HAL_TIM_MspPostInit+0x17c>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8001e34:	2360      	movs	r3, #96	@ 0x60
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e44:	2303      	movs	r3, #3
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <HAL_TIM_MspPostInit+0x180>)
 8001e50:	f000 fe80 	bl	8002b54 <HAL_GPIO_Init>
}
 8001e54:	bf00      	nop
 8001e56:	3730      	adds	r7, #48	@ 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40020000 	.word	0x40020000
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40010400 	.word	0x40010400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40014000 	.word	0x40014000

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e98:	2290      	movs	r2, #144	@ 0x90
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 ffec 	bl	8006e7a <memset>
  if(huart->Instance==UART4)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4aa0      	ldr	r2, [pc, #640]	@ (8002128 <HAL_UART_MspInit+0x2ac>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d13e      	bne.n	8001f2a <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fe91 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ec8:	f7ff fc34 	bl	8001734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ecc:	4b97      	ldr	r3, [pc, #604]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	4a96      	ldr	r2, [pc, #600]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001ed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed8:	4b94      	ldr	r3, [pc, #592]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001edc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee4:	4b91      	ldr	r3, [pc, #580]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	4a90      	ldr	r2, [pc, #576]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8001efc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f16:	2308      	movs	r3, #8
 8001f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4883      	ldr	r0, [pc, #524]	@ (8002130 <HAL_UART_MspInit+0x2b4>)
 8001f24:	f000 fe16 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f28:	e151      	b.n	80021ce <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a81      	ldr	r2, [pc, #516]	@ (8002134 <HAL_UART_MspInit+0x2b8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d160      	bne.n	8001ff6 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fe4d 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001f50:	f7ff fbf0 	bl	8001734 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f54:	4b75      	ldr	r3, [pc, #468]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	4a74      	ldr	r2, [pc, #464]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f60:	4b72      	ldr	r3, [pc, #456]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f78:	4b6c      	ldr	r3, [pc, #432]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4b69      	ldr	r3, [pc, #420]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f88:	4a68      	ldr	r2, [pc, #416]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f90:	4b66      	ldr	r3, [pc, #408]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	485d      	ldr	r0, [pc, #372]	@ (8002138 <HAL_UART_MspInit+0x2bc>)
 8001fc4:	f000 fdc6 	bl	8002b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4850      	ldr	r0, [pc, #320]	@ (8002130 <HAL_UART_MspInit+0x2b4>)
 8001ff0:	f000 fdb0 	bl	8002b54 <HAL_GPIO_Init>
}
 8001ff4:	e0eb      	b.n	80021ce <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a50      	ldr	r2, [pc, #320]	@ (800213c <HAL_UART_MspInit+0x2c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d151      	bne.n	80020a4 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002000:	2340      	movs	r3, #64	@ 0x40
 8002002:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002004:	2300      	movs	r3, #0
 8002006:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002008:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fde9 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002018:	f7ff fb8c 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800201c:	4b43      	ldr	r3, [pc, #268]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	4a42      	ldr	r2, [pc, #264]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6453      	str	r3, [r2, #68]	@ 0x44
 8002028:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	4a3c      	ldr	r2, [pc, #240]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002040:	4b3a      	ldr	r3, [pc, #232]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800204c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002050:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002066:	2304      	movs	r3, #4
 8002068:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002070:	4619      	mov	r1, r3
 8002072:	4831      	ldr	r0, [pc, #196]	@ (8002138 <HAL_UART_MspInit+0x2bc>)
 8002074:	f000 fd6e 	bl	8002b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002078:	2340      	movs	r3, #64	@ 0x40
 800207a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002090:	2307      	movs	r3, #7
 8002092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800209a:	4619      	mov	r1, r3
 800209c:	4826      	ldr	r0, [pc, #152]	@ (8002138 <HAL_UART_MspInit+0x2bc>)
 800209e:	f000 fd59 	bl	8002b54 <HAL_GPIO_Init>
}
 80020a2:	e094      	b.n	80021ce <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	@ (8002140 <HAL_UART_MspInit+0x2c4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d14c      	bne.n	8002148 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fd92 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80020c6:	f7ff fb35 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a11      	ldr	r2, [pc, #68]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_UART_MspInit+0x2b0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020fa:	2360      	movs	r3, #96	@ 0x60
 80020fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002112:	2307      	movs	r3, #7
 8002114:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002118:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800211c:	4619      	mov	r1, r3
 800211e:	4809      	ldr	r0, [pc, #36]	@ (8002144 <HAL_UART_MspInit+0x2c8>)
 8002120:	f000 fd18 	bl	8002b54 <HAL_GPIO_Init>
}
 8002124:	e053      	b.n	80021ce <HAL_UART_MspInit+0x352>
 8002126:	bf00      	nop
 8002128:	40004c00 	.word	0x40004c00
 800212c:	40023800 	.word	0x40023800
 8002130:	40020800 	.word	0x40020800
 8002134:	40005000 	.word	0x40005000
 8002138:	40020400 	.word	0x40020400
 800213c:	40011000 	.word	0x40011000
 8002140:	40004400 	.word	0x40004400
 8002144:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a22      	ldr	r2, [pc, #136]	@ (80021d8 <HAL_UART_MspInit+0x35c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d13d      	bne.n	80021ce <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002152:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002156:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002162:	4618      	mov	r0, r3
 8002164:	f001 fd3e 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800216e:	f7ff fae1 	bl	8001734 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002172:	4b1a      	ldr	r3, [pc, #104]	@ (80021dc <HAL_UART_MspInit+0x360>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <HAL_UART_MspInit+0x360>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_UART_MspInit+0x360>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_UART_MspInit+0x360>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_UART_MspInit+0x360>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_UART_MspInit+0x360>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021bc:	2307      	movs	r3, #7
 80021be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <HAL_UART_MspInit+0x364>)
 80021ca:	f000 fcc3 	bl	8002b54 <HAL_GPIO_Init>
}
 80021ce:	bf00      	nop
 80021d0:	37d8      	adds	r7, #216	@ 0xd8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40004800 	.word	0x40004800
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020c00 	.word	0x40020c00

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <NMI_Handler+0x4>

080021ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  static uint32_t kLed = 0;
	  if(++kLed >= 100000)
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HardFault_Handler+0x2c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HardFault_Handler+0x2c>)
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <HardFault_Handler+0x2c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HardFault_Handler+0x30>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d9f5      	bls.n	80021f0 <HardFault_Handler+0x4>
	  {
		  kLed = 0;
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <HardFault_Handler+0x2c>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800220a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800220e:	4804      	ldr	r0, [pc, #16]	@ (8002220 <HardFault_Handler+0x34>)
 8002210:	f000 fe65 	bl	8002ede <HAL_GPIO_TogglePin>
  {
 8002214:	e7ec      	b.n	80021f0 <HardFault_Handler+0x4>
 8002216:	bf00      	nop
 8002218:	20000768 	.word	0x20000768
 800221c:	0001869f 	.word	0x0001869f
 8002220:	40020400 	.word	0x40020400

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <MemManage_Handler+0x4>

0800222c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <BusFault_Handler+0x4>

08002234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <UsageFault_Handler+0x4>

0800223c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226a:	f000 f889 	bl	8002380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <TIM6_DAC_IRQHandler+0x10>)
 800227a:	f002 fd9d 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200002f8 	.word	0x200002f8

08002288 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <SystemInit+0x28>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <SystemInit+0x28>)
 8002294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <SystemInit+0x28>)
 800229e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022a2:	609a      	str	r2, [r3, #8]
#endif
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ba:	e003      	b.n	80022c4 <LoopCopyDataInit>

080022bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022c2:	3104      	adds	r1, #4

080022c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022c4:	480b      	ldr	r0, [pc, #44]	@ (80022f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022c6:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022cc:	d3f6      	bcc.n	80022bc <CopyDataInit>
  ldr  r2, =_sbss
 80022ce:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022d0:	e002      	b.n	80022d8 <LoopFillZerobss>

080022d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022d4:	f842 3b04 	str.w	r3, [r2], #4

080022d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022d8:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022dc:	d3f9      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022de:	f7ff ffd3 	bl	8002288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e2:	f004 fdd3 	bl	8006e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e6:	f7fe fa0f 	bl	8000708 <main>
  bx  lr    
 80022ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022ec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80022f0:	08006f30 	.word	0x08006f30
  ldr  r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022f8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80022fc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002300:	20000770 	.word	0x20000770

08002304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <ADC_IRQHandler>

08002306 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230a:	2003      	movs	r0, #3
 800230c:	f000 fbe0 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002310:	2000      	movs	r0, #0
 8002312:	f000 f805 	bl	8002320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002316:	f7ff fa29 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_InitTick+0x54>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_InitTick+0x58>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002336:	fbb3 f3f1 	udiv	r3, r3, r1
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fbfb 	bl	8002b3a <HAL_SYSTICK_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00e      	b.n	800236c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d80a      	bhi.n	800236a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800235c:	f000 fbc3 	bl	8002ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002360:	4a06      	ldr	r2, [pc, #24]	@ (800237c <HAL_InitTick+0x5c>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000000 	.word	0x20000000
 8002378:	20000008 	.word	0x20000008
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x20>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_IncTick+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_IncTick+0x24>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008
 80023a4:	2000076c 	.word	0x2000076c

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_GetTick+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	2000076c 	.word	0x2000076c

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008

08002408 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e031      	b.n	8002482 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff f9c4 	bl	80017b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_ADC_Init+0x84>)
 800244c:	4013      	ands	r3, r2
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f970 	bl	800273c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
 8002472:	e001      	b.n	8002478 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	ffffeefd 	.word	0xffffeefd

08002490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x1c>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e136      	b.n	800271a <HAL_ADC_ConfigChannel+0x28a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d93a      	bls.n	8002532 <HAL_ADC_ConfigChannel+0xa2>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024c4:	d035      	beq.n	8002532 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68d9      	ldr	r1, [r3, #12]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	3b1e      	subs	r3, #30
 80024dc:	2207      	movs	r2, #7
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	400a      	ands	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a8d      	ldr	r2, [pc, #564]	@ (8002728 <HAL_ADC_ConfigChannel+0x298>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10a      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	061a      	lsls	r2, r3, #24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250a:	e035      	b.n	8002578 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	4603      	mov	r3, r0
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4403      	add	r3, r0
 8002524:	3b1e      	subs	r3, #30
 8002526:	409a      	lsls	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002530:	e022      	b.n	8002578 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6919      	ldr	r1, [r3, #16]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	2207      	movs	r2, #7
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6919      	ldr	r1, [r3, #16]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	4603      	mov	r3, r0
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4403      	add	r3, r0
 800256e:	409a      	lsls	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b06      	cmp	r3, #6
 800257e:	d824      	bhi.n	80025ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3b05      	subs	r3, #5
 8002592:	221f      	movs	r2, #31
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b05      	subs	r3, #5
 80025bc:	fa00 f203 	lsl.w	r2, r0, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80025c8:	e04c      	b.n	8002664 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d824      	bhi.n	800261c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3b23      	subs	r3, #35	@ 0x23
 80025e4:	221f      	movs	r2, #31
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	3b23      	subs	r3, #35	@ 0x23
 800260e:	fa00 f203 	lsl.w	r2, r0, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	@ 0x30
 800261a:	e023      	b.n	8002664 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b41      	subs	r3, #65	@ 0x41
 800262e:	221f      	movs	r2, #31
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43da      	mvns	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	400a      	ands	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	4618      	mov	r0, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3b41      	subs	r3, #65	@ 0x41
 8002658:	fa00 f203 	lsl.w	r2, r0, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a30      	ldr	r2, [pc, #192]	@ (800272c <HAL_ADC_ConfigChannel+0x29c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1f4>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002676:	d105      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002678:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a2c      	ldr	r2, [pc, #176]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 800267e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002682:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a28      	ldr	r2, [pc, #160]	@ (800272c <HAL_ADC_ConfigChannel+0x29c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10f      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x21e>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b12      	cmp	r3, #18
 8002694:	d10b      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002696:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 800269c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026a2:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 80026a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1e      	ldr	r2, [pc, #120]	@ (800272c <HAL_ADC_ConfigChannel+0x29c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d12b      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x280>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002728 <HAL_ADC_ConfigChannel+0x298>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <HAL_ADC_ConfigChannel+0x23a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b11      	cmp	r3, #17
 80026c8:	d122      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80026ca:	4b19      	ldr	r3, [pc, #100]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a18      	ldr	r2, [pc, #96]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 80026d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80026d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80026d6:	4b16      	ldr	r3, [pc, #88]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <HAL_ADC_ConfigChannel+0x2a0>)
 80026dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a10      	ldr	r2, [pc, #64]	@ (8002728 <HAL_ADC_ConfigChannel+0x298>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_ADC_ConfigChannel+0x2a4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_ADC_ConfigChannel+0x2a8>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9a      	lsrs	r2, r3, #18
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002702:	e002      	b.n	800270a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3b01      	subs	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f9      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	10000012 	.word	0x10000012
 800272c:	40012000 	.word	0x40012000
 8002730:	40012300 	.word	0x40012300
 8002734:	20000000 	.word	0x20000000
 8002738:	431bde83 	.word	0x431bde83

0800273c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002744:	4b78      	ldr	r3, [pc, #480]	@ (8002928 <ADC_Init+0x1ec>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a77      	ldr	r2, [pc, #476]	@ (8002928 <ADC_Init+0x1ec>)
 800274a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800274e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002750:	4b75      	ldr	r3, [pc, #468]	@ (8002928 <ADC_Init+0x1ec>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4973      	ldr	r1, [pc, #460]	@ (8002928 <ADC_Init+0x1ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	4a58      	ldr	r2, [pc, #352]	@ (800292c <ADC_Init+0x1f0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00f      	b.n	8002836 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002872:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	035a      	lsls	r2, r3, #13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e007      	b.n	80028ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ee:	025a      	lsls	r2, r3, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	029a      	lsls	r2, r3, #10
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	0f000001 	.word	0x0f000001

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <__NVIC_SetPriorityGrouping+0x40>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	4313      	orrs	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <__NVIC_SetPriorityGrouping+0x40>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00
 8002974:	05fa0000 	.word	0x05fa0000

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db0b      	blt.n	80029be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4907      	ldr	r1, [pc, #28]	@ (80029cc <__NVIC_EnableIRQ+0x38>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2001      	movs	r0, #1
 80029b6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100

080029d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db0a      	blt.n	80029fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	490c      	ldr	r1, [pc, #48]	@ (8002a1c <__NVIC_SetPriority+0x4c>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	440b      	add	r3, r1
 80029f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f8:	e00a      	b.n	8002a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4908      	ldr	r1, [pc, #32]	@ (8002a20 <__NVIC_SetPriority+0x50>)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3b04      	subs	r3, #4
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	761a      	strb	r2, [r3, #24]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e100 	.word	0xe000e100
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	@ 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f1c3 0307 	rsb	r3, r3, #7
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf28      	it	cs
 8002a42:	2304      	movcs	r3, #4
 8002a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d902      	bls.n	8002a54 <NVIC_EncodePriority+0x30>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3b03      	subs	r3, #3
 8002a52:	e000      	b.n	8002a56 <NVIC_EncodePriority+0x32>
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	4313      	orrs	r3, r2
         );
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	@ 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a9c:	d301      	bcc.n	8002aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00f      	b.n	8002ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002acc <SysTick_Config+0x40>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aaa:	210f      	movs	r1, #15
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ab0:	f7ff ff8e 	bl	80029d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <SysTick_Config+0x40>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aba:	4b04      	ldr	r3, [pc, #16]	@ (8002acc <SysTick_Config+0x40>)
 8002abc:	2207      	movs	r2, #7
 8002abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	e000e010 	.word	0xe000e010

08002ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff29 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af8:	f7ff ff3e 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff8e 	bl	8002a24 <NVIC_EncodePriority>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff5d 	bl	80029d0 <__NVIC_SetPriority>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff31 	bl	8002994 <__NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffa2 	bl	8002a8c <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	@ 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e175      	b.n	8002e60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	f040 8164 	bne.w	8002e5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d005      	beq.n	8002baa <HAL_GPIO_Init+0x56>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d130      	bne.n	8002c0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 0201 	and.w	r2, r3, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d017      	beq.n	8002c48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d123      	bne.n	8002c9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	69b9      	ldr	r1, [r7, #24]
 8002c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80be 	beq.w	8002e5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cde:	4b66      	ldr	r3, [pc, #408]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	4a65      	ldr	r2, [pc, #404]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cea:	4b63      	ldr	r3, [pc, #396]	@ (8002e78 <HAL_GPIO_Init+0x324>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cf6:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_GPIO_Init+0x328>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	@ (8002e80 <HAL_GPIO_Init+0x32c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d037      	beq.n	8002d92 <HAL_GPIO_Init+0x23e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a57      	ldr	r2, [pc, #348]	@ (8002e84 <HAL_GPIO_Init+0x330>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d031      	beq.n	8002d8e <HAL_GPIO_Init+0x23a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a56      	ldr	r2, [pc, #344]	@ (8002e88 <HAL_GPIO_Init+0x334>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02b      	beq.n	8002d8a <HAL_GPIO_Init+0x236>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a55      	ldr	r2, [pc, #340]	@ (8002e8c <HAL_GPIO_Init+0x338>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d025      	beq.n	8002d86 <HAL_GPIO_Init+0x232>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a54      	ldr	r2, [pc, #336]	@ (8002e90 <HAL_GPIO_Init+0x33c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <HAL_GPIO_Init+0x22e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a53      	ldr	r2, [pc, #332]	@ (8002e94 <HAL_GPIO_Init+0x340>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x22a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	@ (8002e98 <HAL_GPIO_Init+0x344>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x226>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a51      	ldr	r2, [pc, #324]	@ (8002e9c <HAL_GPIO_Init+0x348>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x222>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ea0 <HAL_GPIO_Init+0x34c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x21e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ea4 <HAL_GPIO_Init+0x350>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x21a>
 8002d6a:	2309      	movs	r3, #9
 8002d6c:	e012      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e010      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d72:	2308      	movs	r3, #8
 8002d74:	e00e      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d76:	2307      	movs	r3, #7
 8002d78:	e00c      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	e00a      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d7e:	2305      	movs	r3, #5
 8002d80:	e008      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d82:	2304      	movs	r3, #4
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d86:	2303      	movs	r3, #3
 8002d88:	e004      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e002      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x240>
 8002d92:	2300      	movs	r3, #0
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	f002 0203 	and.w	r2, r2, #3
 8002d9a:	0092      	lsls	r2, r2, #2
 8002d9c:	4093      	lsls	r3, r2
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da4:	4935      	ldr	r1, [pc, #212]	@ (8002e7c <HAL_GPIO_Init+0x328>)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002db2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd6:	4a34      	ldr	r2, [pc, #208]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ddc:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e00:	4a29      	ldr	r2, [pc, #164]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e06:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e54:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <HAL_GPIO_Init+0x354>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b0f      	cmp	r3, #15
 8002e64:	f67f ae86 	bls.w	8002b74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3724      	adds	r7, #36	@ 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020c00 	.word	0x40020c00
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40021400 	.word	0x40021400
 8002e98:	40021800 	.word	0x40021800
 8002e9c:	40021c00 	.word	0x40021c00
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40022400 	.word	0x40022400
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	041a      	lsls	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	887b      	ldrh	r3, [r7, #2]
 8002efe:	400b      	ands	r3, r1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e08b      	b.n	800303e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fc7a 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	@ 0x24
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	e006      	b.n	8002f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d108      	bne.n	8002fb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	e007      	b.n	8002fc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <HAL_I2C_Init+0x134>)
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69d9      	ldr	r1, [r3, #28]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	02008000 	.word	0x02008000

0800304c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	d138      	bne.n	80030d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800306c:	2302      	movs	r3, #2
 800306e:	e032      	b.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	@ 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800309e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d139      	bne.n	800316c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003102:	2302      	movs	r3, #2
 8003104:	e033      	b.n	800316e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2224      	movs	r2, #36	@ 0x24
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003134:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40007000 	.word	0x40007000

0800319c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b23      	ldr	r3, [pc, #140]	@ (8003234 <HAL_PWREx_EnableOverDrive+0x98>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a22      	ldr	r2, [pc, #136]	@ (8003234 <HAL_PWREx_EnableOverDrive+0x98>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <HAL_PWREx_EnableOverDrive+0x98>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ca:	f7ff f8ed 	bl	80023a8 <HAL_GetTick>
 80031ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031d0:	e009      	b.n	80031e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031d2:	f7ff f8e9 	bl	80023a8 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031e0:	d901      	bls.n	80031e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e022      	b.n	800322c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031e6:	4b14      	ldr	r3, [pc, #80]	@ (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f2:	d1ee      	bne.n	80031d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031f4:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003200:	f7ff f8d2 	bl	80023a8 <HAL_GetTick>
 8003204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003206:	e009      	b.n	800321c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003208:	f7ff f8ce 	bl	80023a8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003216:	d901      	bls.n	800321c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e007      	b.n	800322c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_PWREx_EnableOverDrive+0x9c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003228:	d1ee      	bne.n	8003208 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000

0800323c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e29b      	b.n	800378a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8087 	beq.w	800336e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003260:	4b96      	ldr	r3, [pc, #600]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b04      	cmp	r3, #4
 800326a:	d00c      	beq.n	8003286 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326c:	4b93      	ldr	r3, [pc, #588]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d112      	bne.n	800329e <HAL_RCC_OscConfig+0x62>
 8003278:	4b90      	ldr	r3, [pc, #576]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003284:	d10b      	bne.n	800329e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003286:	4b8d      	ldr	r3, [pc, #564]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06c      	beq.n	800336c <HAL_RCC_OscConfig+0x130>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d168      	bne.n	800336c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e275      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x7a>
 80032a8:	4b84      	ldr	r3, [pc, #528]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a83      	ldr	r2, [pc, #524]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e02e      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x9c>
 80032be:	4b7f      	ldr	r3, [pc, #508]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7e      	ldr	r2, [pc, #504]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b7c      	ldr	r3, [pc, #496]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7b      	ldr	r2, [pc, #492]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0xc0>
 80032e2:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a75      	ldr	r2, [pc, #468]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b73      	ldr	r3, [pc, #460]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a72      	ldr	r2, [pc, #456]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xd8>
 80032fc:	4b6f      	ldr	r3, [pc, #444]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6e      	ldr	r2, [pc, #440]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b6c      	ldr	r3, [pc, #432]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a6b      	ldr	r2, [pc, #428]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7ff f844 	bl	80023a8 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7ff f840 	bl	80023a8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e229      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xe8>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff f830 	bl	80023a8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7ff f82c 	bl	80023a8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e215      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b57      	ldr	r3, [pc, #348]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x110>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d069      	beq.n	800344e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337a:	4b50      	ldr	r3, [pc, #320]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b4d      	ldr	r3, [pc, #308]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x190>
 8003392:	4b4a      	ldr	r3, [pc, #296]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b47      	ldr	r3, [pc, #284]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x17a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1e9      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b41      	ldr	r3, [pc, #260]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	493d      	ldr	r1, [pc, #244]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e040      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d023      	beq.n	800341c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b39      	ldr	r3, [pc, #228]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a38      	ldr	r2, [pc, #224]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe ffe2 	bl	80023a8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fe ffde 	bl	80023a8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1c7      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fa:	4b30      	ldr	r3, [pc, #192]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003406:	4b2d      	ldr	r3, [pc, #180]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4929      	ldr	r1, [pc, #164]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
 800341a:	e018      	b.n	800344e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341c:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe ffbe 	bl	80023a8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7fe ffba 	bl	80023a8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1a3      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d038      	beq.n	80034cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d019      	beq.n	8003496 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003462:	4b16      	ldr	r3, [pc, #88]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003466:	4a15      	ldr	r2, [pc, #84]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7fe ff9b 	bl	80023a8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7fe ff97 	bl	80023a8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e180      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003488:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x23a>
 8003494:	e01a      	b.n	80034cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003496:	4b09      	ldr	r3, [pc, #36]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349a:	4a08      	ldr	r2, [pc, #32]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe ff81 	bl	80023a8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fe ff7d 	bl	80023a8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d903      	bls.n	80034c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e166      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
 80034bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	4b92      	ldr	r3, [pc, #584]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ee      	bne.n	80034aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a4 	beq.w	8003622 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034da:	4b8c      	ldr	r3, [pc, #560]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	4b89      	ldr	r3, [pc, #548]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	4a88      	ldr	r2, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f2:	4b86      	ldr	r3, [pc, #536]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003502:	4b83      	ldr	r3, [pc, #524]	@ (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800350e:	4b80      	ldr	r3, [pc, #512]	@ (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7f      	ldr	r2, [pc, #508]	@ (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fe ff45 	bl	80023a8 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fe ff41 	bl	80023a8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	@ 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e12a      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003534:	4b76      	ldr	r3, [pc, #472]	@ (8003710 <HAL_RCC_OscConfig+0x4d4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x31a>
 8003548:	4b70      	ldr	r3, [pc, #448]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	4a6f      	ldr	r2, [pc, #444]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6713      	str	r3, [r2, #112]	@ 0x70
 8003554:	e02d      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x33c>
 800355e:	4b6b      	ldr	r3, [pc, #428]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a6a      	ldr	r2, [pc, #424]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70
 800356a:	4b68      	ldr	r3, [pc, #416]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356e:	4a67      	ldr	r2, [pc, #412]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003570:	f023 0304 	bic.w	r3, r3, #4
 8003574:	6713      	str	r3, [r2, #112]	@ 0x70
 8003576:	e01c      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x35e>
 8003580:	4b62      	ldr	r3, [pc, #392]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	4a61      	ldr	r2, [pc, #388]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	@ 0x70
 800358c:	4b5f      	ldr	r3, [pc, #380]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	4a5e      	ldr	r2, [pc, #376]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6713      	str	r3, [r2, #112]	@ 0x70
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x376>
 800359a:	4b5c      	ldr	r3, [pc, #368]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a6:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe fef5 	bl	80023a8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe fef1 	bl	80023a8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0d8      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	4b4c      	ldr	r3, [pc, #304]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ee      	beq.n	80035c2 <HAL_RCC_OscConfig+0x386>
 80035e4:	e014      	b.n	8003610 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e6:	f7fe fedf 	bl	80023a8 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fedb 	bl	80023a8 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0c2      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	4a3c      	ldr	r2, [pc, #240]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80ae 	beq.w	8003788 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362c:	4b37      	ldr	r3, [pc, #220]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d06d      	beq.n	8003714 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d14b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b32      	ldr	r3, [pc, #200]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a31      	ldr	r2, [pc, #196]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe feac 	bl	80023a8 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe fea8 	bl	80023a8 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e091      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b29      	ldr	r3, [pc, #164]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	071b      	lsls	r3, r3, #28
 800369e:	491b      	ldr	r1, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fe7a 	bl	80023a8 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fe76 	bl	80023a8 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e05f      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x47c>
 80036d6:	e057      	b.n	8003788 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0b      	ldr	r2, [pc, #44]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fe60 	bl	80023a8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fe5c 	bl	80023a8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e045      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_RCC_OscConfig+0x4d0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x4b0>
 800370a:	e03d      	b.n	8003788 <HAL_RCC_OscConfig+0x54c>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCC_OscConfig+0x558>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d030      	beq.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d129      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d122      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800374a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800374c:	4293      	cmp	r3, r2
 800374e:	d119      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d10f      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0d0      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b6a      	ldr	r3, [pc, #424]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d910      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b67      	ldr	r3, [pc, #412]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 020f 	bic.w	r2, r3, #15
 80037c6:	4965      	ldr	r1, [pc, #404]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a58      	ldr	r2, [pc, #352]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003802:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4b53      	ldr	r3, [pc, #332]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a52      	ldr	r2, [pc, #328]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800381a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b50      	ldr	r3, [pc, #320]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	494d      	ldr	r1, [pc, #308]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d040      	beq.n	80038bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d115      	bne.n	800387a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b41      	ldr	r3, [pc, #260]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e073      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06b      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b39      	ldr	r3, [pc, #228]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4936      	ldr	r1, [pc, #216]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fe fd8c 	bl	80023a8 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fe fd88 	bl	80023a8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e053      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d210      	bcs.n	80038ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b24      	ldr	r3, [pc, #144]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 020f 	bic.w	r2, r3, #15
 80038d2:	4922      	ldr	r1, [pc, #136]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	@ (800395c <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4916      	ldr	r1, [pc, #88]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	490e      	ldr	r1, [pc, #56]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f821 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <HAL_RCC_ClockConfig+0x1c8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490a      	ldr	r1, [pc, #40]	@ (8003964 <HAL_RCC_ClockConfig+0x1cc>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	fa22 f303 	lsr.w	r3, r2, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <HAL_RCC_ClockConfig+0x1d0>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	@ (800396c <HAL_RCC_ClockConfig+0x1d4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fce8 	bl	8002320 <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00
 8003960:	40023800 	.word	0x40023800
 8003964:	08006f08 	.word	0x08006f08
 8003968:	20000000 	.word	0x20000000
 800396c:	20000004 	.word	0x20000004

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b094      	sub	sp, #80	@ 0x50
 8003976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	647b      	str	r3, [r7, #68]	@ 0x44
 800397c:	2300      	movs	r3, #0
 800397e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003980:	2300      	movs	r3, #0
 8003982:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003988:	4b79      	ldr	r3, [pc, #484]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d00d      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003994:	2b08      	cmp	r3, #8
 8003996:	f200 80e1 	bhi.w	8003b5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x34>
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d003      	beq.n	80039aa <HAL_RCC_GetSysClockFreq+0x3a>
 80039a2:	e0db      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b73      	ldr	r3, [pc, #460]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80039a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039a8:	e0db      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039aa:	4b73      	ldr	r3, [pc, #460]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x208>)
 80039ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ae:	e0d8      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d063      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	2200      	movs	r2, #0
 80039ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039da:	2300      	movs	r3, #0
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	f04f 0000 	mov.w	r0, #0
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	0159      	lsls	r1, r3, #5
 80039f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f4:	0150      	lsls	r0, r2, #5
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4621      	mov	r1, r4
 80039fc:	1a51      	subs	r1, r2, r1
 80039fe:	6139      	str	r1, [r7, #16]
 8003a00:	4629      	mov	r1, r5
 8003a02:	eb63 0301 	sbc.w	r3, r3, r1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a14:	4659      	mov	r1, fp
 8003a16:	018b      	lsls	r3, r1, #6
 8003a18:	4651      	mov	r1, sl
 8003a1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1e:	4651      	mov	r1, sl
 8003a20:	018a      	lsls	r2, r1, #6
 8003a22:	4651      	mov	r1, sl
 8003a24:	ebb2 0801 	subs.w	r8, r2, r1
 8003a28:	4659      	mov	r1, fp
 8003a2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a42:	4690      	mov	r8, r2
 8003a44:	4699      	mov	r9, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	eb18 0303 	adds.w	r3, r8, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	462b      	mov	r3, r5
 8003a50:	eb49 0303 	adc.w	r3, r9, r3
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a62:	4629      	mov	r1, r5
 8003a64:	024b      	lsls	r3, r1, #9
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	024a      	lsls	r2, r1, #9
 8003a70:	4610      	mov	r0, r2
 8003a72:	4619      	mov	r1, r3
 8003a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a76:	2200      	movs	r2, #0
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a80:	f7fc fbda 	bl	8000238 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4613      	mov	r3, r2
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8c:	e058      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b38      	ldr	r3, [pc, #224]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	2200      	movs	r2, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	4611      	mov	r1, r2
 8003a9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	0159      	lsls	r1, r3, #5
 8003ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aba:	0150      	lsls	r0, r2, #5
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ad8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003adc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ae0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ae4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	00eb      	lsls	r3, r5, #3
 8003af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af6:	00e2      	lsls	r2, r4, #3
 8003af8:	4614      	mov	r4, r2
 8003afa:	461d      	mov	r5, r3
 8003afc:	4643      	mov	r3, r8
 8003afe:	18e3      	adds	r3, r4, r3
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	464b      	mov	r3, r9
 8003b04:	eb45 0303 	adc.w	r3, r5, r3
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b16:	4629      	mov	r1, r5
 8003b18:	028b      	lsls	r3, r1, #10
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b20:	4621      	mov	r1, r4
 8003b22:	028a      	lsls	r2, r1, #10
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	61fa      	str	r2, [r7, #28]
 8003b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b34:	f7fc fb80 	bl	8000238 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b5a:	e002      	b.n	8003b62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3750      	adds	r7, #80	@ 0x50
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200

08003b7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b80:	4b03      	ldr	r3, [pc, #12]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000000 	.word	0x20000000

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b98:	f7ff fff0 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0a9b      	lsrs	r3, r3, #10
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4903      	ldr	r1, [pc, #12]	@ (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	08006f18 	.word	0x08006f18

08003bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bc0:	f7ff ffdc 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	@ (8003bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0b5b      	lsrs	r3, r3, #13
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	@ (8003be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08006f18 	.word	0x08006f18

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c0c:	4b69      	ldr	r3, [pc, #420]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4a68      	ldr	r2, [pc, #416]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c16:	6093      	str	r3, [r2, #8]
 8003c18:	4b66      	ldr	r3, [pc, #408]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	4964      	ldr	r1, [pc, #400]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4c:	4959      	ldr	r1, [pc, #356]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d017      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	494a      	ldr	r1, [pc, #296]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c98:	d101      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 808b 	beq.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	4a39      	ldr	r2, [pc, #228]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd4:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ce0:	4b35      	ldr	r3, [pc, #212]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a34      	ldr	r2, [pc, #208]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fe fb5c 	bl	80023a8 <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf4:	f7fe fb58 	bl	80023a8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	@ 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e38f      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d06:	4b2c      	ldr	r3, [pc, #176]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d12:	4b28      	ldr	r3, [pc, #160]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d035      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d02e      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d30:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d46:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d52:	4a18      	ldr	r2, [pc, #96]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d58:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d114      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fb20 	bl	80023a8 <HAL_GetTick>
 8003d68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fb1c 	bl	80023a8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e351      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ee      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d9a:	d111      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003da8:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003daa:	400b      	ands	r3, r1
 8003dac:	4901      	ldr	r1, [pc, #4]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	0ffffcff 	.word	0x0ffffcff
 8003dc0:	4bac      	ldr	r3, [pc, #688]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4aab      	ldr	r2, [pc, #684]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003dca:	6093      	str	r3, [r2, #8]
 8003dcc:	4ba9      	ldr	r3, [pc, #676]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd8:	49a6      	ldr	r1, [pc, #664]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d010      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dea:	4ba2      	ldr	r3, [pc, #648]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df0:	4aa0      	ldr	r2, [pc, #640]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003dfa:	4b9e      	ldr	r3, [pc, #632]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e04:	499b      	ldr	r1, [pc, #620]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e18:	4b96      	ldr	r3, [pc, #600]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e26:	4993      	ldr	r1, [pc, #588]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e3a:	4b8e      	ldr	r3, [pc, #568]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e48:	498a      	ldr	r1, [pc, #552]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e5c:	4b85      	ldr	r3, [pc, #532]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e6a:	4982      	ldr	r1, [pc, #520]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8c:	4979      	ldr	r1, [pc, #484]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea0:	4b74      	ldr	r3, [pc, #464]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	4971      	ldr	r1, [pc, #452]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec8:	f023 020c 	bic.w	r2, r3, #12
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	4968      	ldr	r1, [pc, #416]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ee4:	4b63      	ldr	r3, [pc, #396]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef2:	4960      	ldr	r1, [pc, #384]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f06:	4b5b      	ldr	r3, [pc, #364]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	4957      	ldr	r1, [pc, #348]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f28:	4b52      	ldr	r3, [pc, #328]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	494f      	ldr	r1, [pc, #316]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	4946      	ldr	r1, [pc, #280]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f6c:	4b41      	ldr	r3, [pc, #260]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7a:	493e      	ldr	r1, [pc, #248]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f8e:	4b39      	ldr	r3, [pc, #228]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9c:	4935      	ldr	r1, [pc, #212]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fb0:	4b30      	ldr	r3, [pc, #192]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fbe:	492d      	ldr	r1, [pc, #180]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d011      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fd2:	4b28      	ldr	r3, [pc, #160]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe0:	4924      	ldr	r1, [pc, #144]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004012:	4b18      	ldr	r3, [pc, #96]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004018:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004020:	4914      	ldr	r1, [pc, #80]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004034:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004044:	490b      	ldr	r1, [pc, #44]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004058:	4b06      	ldr	r3, [pc, #24]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004068:	4902      	ldr	r1, [pc, #8]	@ (8004074 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004070:	e002      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004084:	4b8a      	ldr	r3, [pc, #552]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800408a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	4986      	ldr	r1, [pc, #536]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040a8:	4b81      	ldr	r3, [pc, #516]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b8:	497d      	ldr	r1, [pc, #500]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d006      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80d6 	beq.w	8004280 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040d4:	4b76      	ldr	r3, [pc, #472]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a75      	ldr	r2, [pc, #468]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e0:	f7fe f962 	bl	80023a8 <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040e8:	f7fe f95e 	bl	80023a8 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	@ 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e195      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040fa:	4b6d      	ldr	r3, [pc, #436]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d021      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800411a:	4b65      	ldr	r3, [pc, #404]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004128:	4b61      	ldr	r3, [pc, #388]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412e:	0e1b      	lsrs	r3, r3, #24
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	019a      	lsls	r2, r3, #6
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	4958      	ldr	r1, [pc, #352]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d004      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004180:	d129      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004182:	4b4b      	ldr	r3, [pc, #300]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004190:	4b47      	ldr	r3, [pc, #284]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004196:	0f1b      	lsrs	r3, r3, #28
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	019a      	lsls	r2, r3, #6
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	061b      	lsls	r3, r3, #24
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	493e      	ldr	r1, [pc, #248]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041be:	4b3c      	ldr	r3, [pc, #240]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c4:	f023 021f 	bic.w	r2, r3, #31
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4938      	ldr	r1, [pc, #224]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d01d      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041e2:	4b33      	ldr	r3, [pc, #204]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041f0:	4b2f      	ldr	r3, [pc, #188]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f6:	0f1b      	lsrs	r3, r3, #28
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	019a      	lsls	r2, r3, #6
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	431a      	orrs	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	4926      	ldr	r1, [pc, #152]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d011      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	019a      	lsls	r2, r3, #6
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	491a      	ldr	r1, [pc, #104]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800424e:	4b18      	ldr	r3, [pc, #96]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a17      	ldr	r2, [pc, #92]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004254:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425a:	f7fe f8a5 	bl	80023a8 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004262:	f7fe f8a1 	bl	80023a8 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	@ 0x64
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e0d8      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004274:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b01      	cmp	r3, #1
 8004284:	f040 80ce 	bne.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a08      	ldr	r2, [pc, #32]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004294:	f7fe f888 	bl	80023a8 <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800429a:	e00b      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800429c:	f7fe f884 	bl	80023a8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d904      	bls.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0bb      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c0:	d0ec      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d02e      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12a      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042ea:	4b51      	ldr	r3, [pc, #324]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fe:	0f1b      	lsrs	r3, r3, #28
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	019a      	lsls	r2, r3, #6
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	041b      	lsls	r3, r3, #16
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	061b      	lsls	r3, r3, #24
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	4944      	ldr	r1, [pc, #272]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004326:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800432c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	493d      	ldr	r1, [pc, #244]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d022      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004354:	d11d      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004356:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	0e1b      	lsrs	r3, r3, #24
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004364:	4b32      	ldr	r3, [pc, #200]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	0f1b      	lsrs	r3, r3, #28
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	019a      	lsls	r2, r3, #6
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	061b      	lsls	r3, r3, #24
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	071b      	lsls	r3, r3, #28
 800438a:	4929      	ldr	r1, [pc, #164]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d028      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ac:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	019a      	lsls	r2, r3, #6
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	061b      	lsls	r3, r3, #24
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	071b      	lsls	r3, r3, #28
 80043d2:	4917      	ldr	r1, [pc, #92]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	4911      	ldr	r1, [pc, #68]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fc:	f7fd ffd4 	bl	80023a8 <HAL_GetTick>
 8004400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004404:	f7fd ffd0 	bl	80023a8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e007      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800441e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004422:	d1ef      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800

08004434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e09d      	b.n	8004582 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004456:	d009      	beq.n	800446c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
 800445e:	e005      	b.n	800446c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd fa7c 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ac:	d902      	bls.n	80044b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e002      	b.n	80044ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044c2:	d007      	beq.n	80044d4 <HAL_SPI_Init+0xa0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	ea42 0103 	orr.w	r1, r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	f003 0204 	and.w	r2, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004550:	ea42 0103 	orr.w	r1, r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e049      	b.n	8004630 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fd fa67 	bl	8001a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f001 f819 	bl	8005600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d001      	beq.n	8004650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e054      	b.n	80046fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a26      	ldr	r2, [pc, #152]	@ (8004708 <HAL_TIM_Base_Start_IT+0xd0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d022      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467a:	d01d      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_TIM_Base_Start_IT+0xd4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a21      	ldr	r2, [pc, #132]	@ (8004710 <HAL_TIM_Base_Start_IT+0xd8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1f      	ldr	r2, [pc, #124]	@ (8004714 <HAL_TIM_Base_Start_IT+0xdc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1e      	ldr	r2, [pc, #120]	@ (8004718 <HAL_TIM_Base_Start_IT+0xe0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <HAL_TIM_Base_Start_IT+0xe4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0x80>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004720 <HAL_TIM_Base_Start_IT+0xe8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d115      	bne.n	80046e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	4b19      	ldr	r3, [pc, #100]	@ (8004724 <HAL_TIM_Base_Start_IT+0xec>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b06      	cmp	r3, #6
 80046c8:	d015      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0xbe>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d0:	d011      	beq.n	80046f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0201 	orr.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	e008      	b.n	80046f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	e000      	b.n	80046f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010000 	.word	0x40010000
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40010400 	.word	0x40010400
 800471c:	40014000 	.word	0x40014000
 8004720:	40001800 	.word	0x40001800
 8004724:	00010007 	.word	0x00010007

08004728 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e049      	b.n	80047ce <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f841 	bl	80047d6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 ff4a 	bl	8005600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e049      	b.n	8004890 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fd fa47 	bl	8001ca4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f000 fee9 	bl	8005600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x24>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e03c      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d109      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x3e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e02f      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x58>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e022      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d109      	bne.n	800490a <HAL_TIM_PWM_Start+0x72>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e015      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b10      	cmp	r3, #16
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x8c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e008      	b.n	8004936 <HAL_TIM_PWM_Start+0x9e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e092      	b.n	8004a64 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0xb6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800494c:	e023      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0xc6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800495c:	e01b      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0xd6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800496c:	e013      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	d104      	bne.n	800497e <HAL_TIM_PWM_Start+0xe6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800497c:	e00b      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d104      	bne.n	800498e <HAL_TIM_PWM_Start+0xf6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498c:	e003      	b.n	8004996 <HAL_TIM_PWM_Start+0xfe>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fafc 	bl	8005f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a30      	ldr	r2, [pc, #192]	@ (8004a6c <HAL_TIM_PWM_Start+0x1d4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIM_PWM_Start+0x120>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004a70 <HAL_TIM_PWM_Start+0x1d8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <HAL_TIM_PWM_Start+0x124>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <HAL_TIM_PWM_Start+0x126>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a25      	ldr	r2, [pc, #148]	@ (8004a6c <HAL_TIM_PWM_Start+0x1d4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d022      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e4:	d01d      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	@ (8004a74 <HAL_TIM_PWM_Start+0x1dc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d018      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a20      	ldr	r2, [pc, #128]	@ (8004a78 <HAL_TIM_PWM_Start+0x1e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1f      	ldr	r2, [pc, #124]	@ (8004a7c <HAL_TIM_PWM_Start+0x1e4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <HAL_TIM_PWM_Start+0x1d8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	@ (8004a80 <HAL_TIM_PWM_Start+0x1e8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x18a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	@ (8004a84 <HAL_TIM_PWM_Start+0x1ec>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d115      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	4b17      	ldr	r3, [pc, #92]	@ (8004a88 <HAL_TIM_PWM_Start+0x1f0>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d015      	beq.n	8004a60 <HAL_TIM_PWM_Start+0x1c8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3a:	d011      	beq.n	8004a60 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	e008      	b.n	8004a60 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010400 	.word	0x40010400
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40001800 	.word	0x40001800
 8004a88:	00010007 	.word	0x00010007

08004a8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e049      	b.n	8004b32 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f841 	bl	8004b3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fd98 	bl	8005600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e08f      	b.n	8004c84 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d106      	bne.n	8004b7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fd f81d 	bl	8001bb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	4b3e      	ldr	r3, [pc, #248]	@ (8004c8c <HAL_TIM_Encoder_Init+0x13c>)
 8004b92:	400b      	ands	r3, r1
 8004b94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 fd2d 	bl	8005600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4b31      	ldr	r3, [pc, #196]	@ (8004c90 <HAL_TIM_Encoder_Init+0x140>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c94 <HAL_TIM_Encoder_Init+0x144>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4b2a      	ldr	r3, [pc, #168]	@ (8004c98 <HAL_TIM_Encoder_Init+0x148>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	011a      	lsls	r2, r3, #4
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	031b      	lsls	r3, r3, #12
 8004c10:	4313      	orrs	r3, r2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	4313      	orrs	r3, r2
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fffebff8 	.word	0xfffebff8
 8004c90:	fffffcfc 	.word	0xfffffcfc
 8004c94:	fffff3f3 	.word	0xfffff3f3
 8004c98:	ffff0f0f 	.word	0xffff0f0f

08004c9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d110      	bne.n	8004cee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d102      	bne.n	8004cd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cd2:	7b7b      	ldrb	r3, [r7, #13]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d001      	beq.n	8004cdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e069      	b.n	8004db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cec:	e031      	b.n	8004d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d110      	bne.n	8004d16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d102      	bne.n	8004d00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cfa:	7b3b      	ldrb	r3, [r7, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d001      	beq.n	8004d04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e055      	b.n	8004db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d14:	e01d      	b.n	8004d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d108      	bne.n	8004d2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d1c:	7bbb      	ldrb	r3, [r7, #14]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d105      	bne.n	8004d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d22:	7b7b      	ldrb	r3, [r7, #13]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d102      	bne.n	8004d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d28:	7b3b      	ldrb	r3, [r7, #12]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d001      	beq.n	8004d32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e03e      	b.n	8004db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_TIM_Encoder_Start+0xc4>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d008      	beq.n	8004d70 <HAL_TIM_Encoder_Start+0xd4>
 8004d5e:	e00f      	b.n	8004d80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 f917 	bl	8005f9c <TIM_CCxChannelCmd>
      break;
 8004d6e:	e016      	b.n	8004d9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2201      	movs	r2, #1
 8004d76:	2104      	movs	r1, #4
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 f90f 	bl	8005f9c <TIM_CCxChannelCmd>
      break;
 8004d7e:	e00e      	b.n	8004d9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2201      	movs	r2, #1
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 f907 	bl	8005f9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2201      	movs	r2, #1
 8004d94:	2104      	movs	r1, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 f900 	bl	8005f9c <TIM_CCxChannelCmd>
      break;
 8004d9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0202 	mvn.w	r2, #2
 8004dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fbde 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fbd0 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fbe1 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0204 	mvn.w	r2, #4
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fbb8 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fbaa 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fbbb 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0208 	mvn.w	r2, #8
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fb92 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb84 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb95 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01b      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0210 	mvn.w	r2, #16
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb6c 	bl	80055c4 <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fb5e 	bl	80055b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb6f 	bl	80055d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0201 	mvn.w	r2, #1
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb fba2 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 f961 	bl	8006214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 f959 	bl	8006228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00c      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb29 	bl	80055ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0220 	mvn.w	r2, #32
 8004fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 f921 	bl	8006200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e066      	b.n	80050b4 <HAL_TIM_OC_ConfigChannel+0xec>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b14      	cmp	r3, #20
 8004ff2:	d857      	bhi.n	80050a4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ffc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005051 	.word	0x08005051
 8005000:	080050a5 	.word	0x080050a5
 8005004:	080050a5 	.word	0x080050a5
 8005008:	080050a5 	.word	0x080050a5
 800500c:	0800505f 	.word	0x0800505f
 8005010:	080050a5 	.word	0x080050a5
 8005014:	080050a5 	.word	0x080050a5
 8005018:	080050a5 	.word	0x080050a5
 800501c:	0800506d 	.word	0x0800506d
 8005020:	080050a5 	.word	0x080050a5
 8005024:	080050a5 	.word	0x080050a5
 8005028:	080050a5 	.word	0x080050a5
 800502c:	0800507b 	.word	0x0800507b
 8005030:	080050a5 	.word	0x080050a5
 8005034:	080050a5 	.word	0x080050a5
 8005038:	080050a5 	.word	0x080050a5
 800503c:	08005089 	.word	0x08005089
 8005040:	080050a5 	.word	0x080050a5
 8005044:	080050a5 	.word	0x080050a5
 8005048:	080050a5 	.word	0x080050a5
 800504c:	08005097 	.word	0x08005097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fb7e 	bl	8005758 <TIM_OC1_SetConfig>
      break;
 800505c:	e025      	b.n	80050aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fbe9 	bl	800583c <TIM_OC2_SetConfig>
      break;
 800506a:	e01e      	b.n	80050aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fc5a 	bl	800592c <TIM_OC3_SetConfig>
      break;
 8005078:	e017      	b.n	80050aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fcc9 	bl	8005a18 <TIM_OC4_SetConfig>
      break;
 8005086:	e010      	b.n	80050aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fd1a 	bl	8005ac8 <TIM_OC5_SetConfig>
      break;
 8005094:	e009      	b.n	80050aa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fd65 	bl	8005b6c <TIM_OC6_SetConfig>
      break;
 80050a2:	e002      	b.n	80050aa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	75fb      	strb	r3, [r7, #23]
      break;
 80050a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_TIM_IC_ConfigChannel+0x1e>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e088      	b.n	80051ec <HAL_TIM_IC_ConfigChannel+0x130>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80050f8:	f000 fd8c 	bl	8005c14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 020c 	bic.w	r2, r2, #12
 800510a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	619a      	str	r2, [r3, #24]
 800511e:	e060      	b.n	80051e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d11c      	bne.n	8005160 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005136:	f000 fe10 	bl	8005d5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005148:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6999      	ldr	r1, [r3, #24]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	619a      	str	r2, [r3, #24]
 800515e:	e040      	b.n	80051e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b08      	cmp	r3, #8
 8005164:	d11b      	bne.n	800519e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005176:	f000 fe5d 	bl	8005e34 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 020c 	bic.w	r2, r2, #12
 8005188:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	61da      	str	r2, [r3, #28]
 800519c:	e021      	b.n	80051e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d11c      	bne.n	80051de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051b4:	f000 fe7a 	bl	8005eac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69d9      	ldr	r1, [r3, #28]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	e001      	b.n	80051e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800520e:	2302      	movs	r3, #2
 8005210:	e0ff      	b.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b14      	cmp	r3, #20
 800521e:	f200 80f0 	bhi.w	8005402 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800527d 	.word	0x0800527d
 800522c:	08005403 	.word	0x08005403
 8005230:	08005403 	.word	0x08005403
 8005234:	08005403 	.word	0x08005403
 8005238:	080052bd 	.word	0x080052bd
 800523c:	08005403 	.word	0x08005403
 8005240:	08005403 	.word	0x08005403
 8005244:	08005403 	.word	0x08005403
 8005248:	080052ff 	.word	0x080052ff
 800524c:	08005403 	.word	0x08005403
 8005250:	08005403 	.word	0x08005403
 8005254:	08005403 	.word	0x08005403
 8005258:	0800533f 	.word	0x0800533f
 800525c:	08005403 	.word	0x08005403
 8005260:	08005403 	.word	0x08005403
 8005264:	08005403 	.word	0x08005403
 8005268:	08005381 	.word	0x08005381
 800526c:	08005403 	.word	0x08005403
 8005270:	08005403 	.word	0x08005403
 8005274:	08005403 	.word	0x08005403
 8005278:	080053c1 	.word	0x080053c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fa68 	bl	8005758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0208 	orr.w	r2, r2, #8
 8005296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0204 	bic.w	r2, r2, #4
 80052a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6999      	ldr	r1, [r3, #24]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	619a      	str	r2, [r3, #24]
      break;
 80052ba:	e0a5      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 faba 	bl	800583c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	021a      	lsls	r2, r3, #8
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	619a      	str	r2, [r3, #24]
      break;
 80052fc:	e084      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 fb11 	bl	800592c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0208 	orr.w	r2, r2, #8
 8005318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0204 	bic.w	r2, r2, #4
 8005328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69d9      	ldr	r1, [r3, #28]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	61da      	str	r2, [r3, #28]
      break;
 800533c:	e064      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fb67 	bl	8005a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69d9      	ldr	r1, [r3, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	021a      	lsls	r2, r3, #8
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	61da      	str	r2, [r3, #28]
      break;
 800537e:	e043      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fb9e 	bl	8005ac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0208 	orr.w	r2, r2, #8
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0204 	bic.w	r2, r2, #4
 80053aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053be:	e023      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fbd0 	bl	8005b6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005400:	e002      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
      break;
 8005406:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop

0800541c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_TIM_ConfigClockSource+0x1c>
 8005434:	2302      	movs	r3, #2
 8005436:	e0b4      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x186>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	4b56      	ldr	r3, [pc, #344]	@ (80055ac <HAL_TIM_ConfigClockSource+0x190>)
 8005454:	4013      	ands	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800545e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005470:	d03e      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005476:	f200 8087 	bhi.w	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547e:	f000 8086 	beq.w	800558e <HAL_TIM_ConfigClockSource+0x172>
 8005482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005486:	d87f      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b70      	cmp	r3, #112	@ 0x70
 800548a:	d01a      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0xa6>
 800548c:	2b70      	cmp	r3, #112	@ 0x70
 800548e:	d87b      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b60      	cmp	r3, #96	@ 0x60
 8005492:	d050      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x11a>
 8005494:	2b60      	cmp	r3, #96	@ 0x60
 8005496:	d877      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 8005498:	2b50      	cmp	r3, #80	@ 0x50
 800549a:	d03c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0xfa>
 800549c:	2b50      	cmp	r3, #80	@ 0x50
 800549e:	d873      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b40      	cmp	r3, #64	@ 0x40
 80054a2:	d058      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x13a>
 80054a4:	2b40      	cmp	r3, #64	@ 0x40
 80054a6:	d86f      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b30      	cmp	r3, #48	@ 0x30
 80054aa:	d064      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054ac:	2b30      	cmp	r3, #48	@ 0x30
 80054ae:	d86b      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d060      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d867      	bhi.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d05c      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d05a      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x15a>
 80054c0:	e062      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d2:	f000 fd43 	bl	8005f5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	609a      	str	r2, [r3, #8]
      break;
 80054ee:	e04f      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005500:	f000 fd2c 	bl	8005f5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005512:	609a      	str	r2, [r3, #8]
      break;
 8005514:	e03c      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	461a      	mov	r2, r3
 8005524:	f000 fbea 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2150      	movs	r1, #80	@ 0x50
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fcf9 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005534:	e02c      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005542:	461a      	mov	r2, r3
 8005544:	f000 fc46 	bl	8005dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2160      	movs	r1, #96	@ 0x60
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fce9 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005554:	e01c      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	461a      	mov	r2, r3
 8005564:	f000 fbca 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2140      	movs	r1, #64	@ 0x40
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fcd9 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005574:	e00c      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 fcd0 	bl	8005f26 <TIM_ITRx_SetConfig>
      break;
 8005586:	e003      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	e000      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800558e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	fffeff88 	.word	0xfffeff88

080055b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a46      	ldr	r2, [pc, #280]	@ (800572c <TIM_Base_SetConfig+0x12c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561e:	d00f      	beq.n	8005640 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a43      	ldr	r2, [pc, #268]	@ (8005730 <TIM_Base_SetConfig+0x130>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00b      	beq.n	8005640 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a42      	ldr	r2, [pc, #264]	@ (8005734 <TIM_Base_SetConfig+0x134>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d007      	beq.n	8005640 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a41      	ldr	r2, [pc, #260]	@ (8005738 <TIM_Base_SetConfig+0x138>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d003      	beq.n	8005640 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a40      	ldr	r2, [pc, #256]	@ (800573c <TIM_Base_SetConfig+0x13c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a35      	ldr	r2, [pc, #212]	@ (800572c <TIM_Base_SetConfig+0x12c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02b      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005660:	d027      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a32      	ldr	r2, [pc, #200]	@ (8005730 <TIM_Base_SetConfig+0x130>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d023      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a31      	ldr	r2, [pc, #196]	@ (8005734 <TIM_Base_SetConfig+0x134>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01f      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a30      	ldr	r2, [pc, #192]	@ (8005738 <TIM_Base_SetConfig+0x138>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01b      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2f      	ldr	r2, [pc, #188]	@ (800573c <TIM_Base_SetConfig+0x13c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d017      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2e      	ldr	r2, [pc, #184]	@ (8005740 <TIM_Base_SetConfig+0x140>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2d      	ldr	r2, [pc, #180]	@ (8005744 <TIM_Base_SetConfig+0x144>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00f      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2c      	ldr	r2, [pc, #176]	@ (8005748 <TIM_Base_SetConfig+0x148>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2b      	ldr	r2, [pc, #172]	@ (800574c <TIM_Base_SetConfig+0x14c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005750 <TIM_Base_SetConfig+0x150>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a29      	ldr	r2, [pc, #164]	@ (8005754 <TIM_Base_SetConfig+0x154>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d108      	bne.n	80056c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a10      	ldr	r2, [pc, #64]	@ (800572c <TIM_Base_SetConfig+0x12c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_Base_SetConfig+0xf8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a12      	ldr	r2, [pc, #72]	@ (800573c <TIM_Base_SetConfig+0x13c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d103      	bne.n	8005700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d105      	bne.n	800571e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]
  }
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800
 800574c:	40001800 	.word	0x40001800
 8005750:	40001c00 	.word	0x40001c00
 8005754:	40002000 	.word	0x40002000

08005758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f023 0201 	bic.w	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <TIM_OC1_SetConfig+0xd8>)
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 0302 	bic.w	r3, r3, #2
 80057a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a21      	ldr	r2, [pc, #132]	@ (8005834 <TIM_OC1_SetConfig+0xdc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC1_SetConfig+0x64>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a20      	ldr	r2, [pc, #128]	@ (8005838 <TIM_OC1_SetConfig+0xe0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10c      	bne.n	80057d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0308 	bic.w	r3, r3, #8
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a16      	ldr	r2, [pc, #88]	@ (8005834 <TIM_OC1_SetConfig+0xdc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_OC1_SetConfig+0x8e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <TIM_OC1_SetConfig+0xe0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	fffeff8f 	.word	0xfffeff8f
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400

0800583c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f023 0210 	bic.w	r2, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4b2e      	ldr	r3, [pc, #184]	@ (8005920 <TIM_OC2_SetConfig+0xe4>)
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0320 	bic.w	r3, r3, #32
 8005886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a23      	ldr	r2, [pc, #140]	@ (8005924 <TIM_OC2_SetConfig+0xe8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d003      	beq.n	80058a4 <TIM_OC2_SetConfig+0x68>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a22      	ldr	r2, [pc, #136]	@ (8005928 <TIM_OC2_SetConfig+0xec>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d10d      	bne.n	80058c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a18      	ldr	r2, [pc, #96]	@ (8005924 <TIM_OC2_SetConfig+0xe8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC2_SetConfig+0x94>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <TIM_OC2_SetConfig+0xec>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d113      	bne.n	80058f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	feff8fff 	.word	0xfeff8fff
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400

0800592c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4b2d      	ldr	r3, [pc, #180]	@ (8005a0c <TIM_OC3_SetConfig+0xe0>)
 8005958:	4013      	ands	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a22      	ldr	r2, [pc, #136]	@ (8005a10 <TIM_OC3_SetConfig+0xe4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC3_SetConfig+0x66>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a21      	ldr	r2, [pc, #132]	@ (8005a14 <TIM_OC3_SetConfig+0xe8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d10d      	bne.n	80059ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <TIM_OC3_SetConfig+0xe4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_OC3_SetConfig+0x92>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a16      	ldr	r2, [pc, #88]	@ (8005a14 <TIM_OC3_SetConfig+0xe8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d113      	bne.n	80059e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	621a      	str	r2, [r3, #32]
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	fffeff8f 	.word	0xfffeff8f
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40010400 	.word	0x40010400

08005a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4b1e      	ldr	r3, [pc, #120]	@ (8005abc <TIM_OC4_SetConfig+0xa4>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <TIM_OC4_SetConfig+0xa8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC4_SetConfig+0x68>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a12      	ldr	r2, [pc, #72]	@ (8005ac4 <TIM_OC4_SetConfig+0xac>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d109      	bne.n	8005a94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	019b      	lsls	r3, r3, #6
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	feff8fff 	.word	0xfeff8fff
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40010400 	.word	0x40010400

08005ac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b60 <TIM_OC5_SetConfig+0x98>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a12      	ldr	r2, [pc, #72]	@ (8005b64 <TIM_OC5_SetConfig+0x9c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_OC5_SetConfig+0x5e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a11      	ldr	r2, [pc, #68]	@ (8005b68 <TIM_OC5_SetConfig+0xa0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d109      	bne.n	8005b3a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	fffeff8f 	.word	0xfffeff8f
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400

08005b6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4b1c      	ldr	r3, [pc, #112]	@ (8005c08 <TIM_OC6_SetConfig+0x9c>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	051b      	lsls	r3, r3, #20
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a13      	ldr	r2, [pc, #76]	@ (8005c0c <TIM_OC6_SetConfig+0xa0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC6_SetConfig+0x60>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a12      	ldr	r2, [pc, #72]	@ (8005c10 <TIM_OC6_SetConfig+0xa4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d109      	bne.n	8005be0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	029b      	lsls	r3, r3, #10
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	feff8fff 	.word	0xfeff8fff
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	f023 0201 	bic.w	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ce0 <TIM_TI1_SetConfig+0xcc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01b      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c48:	d017      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	@ (8005ce4 <TIM_TI1_SetConfig+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a24      	ldr	r2, [pc, #144]	@ (8005ce8 <TIM_TI1_SetConfig+0xd4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	@ (8005cec <TIM_TI1_SetConfig+0xd8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a22      	ldr	r2, [pc, #136]	@ (8005cf0 <TIM_TI1_SetConfig+0xdc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <TIM_TI1_SetConfig+0xe0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_TI1_SetConfig+0x66>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <TIM_TI1_SetConfig+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <TIM_TI1_SetConfig+0x6a>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <TIM_TI1_SetConfig+0x6c>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e003      	b.n	8005c9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f023 030a 	bic.w	r3, r3, #10
 8005cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f003 030a 	and.w	r3, r3, #10
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40010400 	.word	0x40010400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40001800 	.word	0x40001800

08005cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 0201 	bic.w	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 030a 	bic.w	r3, r3, #10
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f023 0210 	bic.w	r2, r3, #16
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	031b      	lsls	r3, r3, #12
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f023 0210 	bic.w	r2, r3, #16
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	031b      	lsls	r3, r3, #12
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	621a      	str	r2, [r3, #32]
}
 8005e28:	bf00      	nop
 8005e2a:	371c      	adds	r7, #28
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005eea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	031b      	lsls	r3, r3, #12
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	031b      	lsls	r3, r3, #12
 8005f04:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f043 0307 	orr.w	r3, r3, #7
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	609a      	str	r2, [r3, #8]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	021a      	lsls	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	609a      	str	r2, [r3, #8]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2201      	movs	r2, #1
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1a      	ldr	r2, [r3, #32]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1a      	ldr	r2, [r3, #32]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e06d      	b.n	80060dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a30      	ldr	r2, [pc, #192]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800603a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a20      	ldr	r2, [pc, #128]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d022      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006072:	d01d      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1d      	ldr	r2, [pc, #116]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d018      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1c      	ldr	r2, [pc, #112]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d013      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a16      	ldr	r2, [pc, #88]	@ (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a15      	ldr	r2, [pc, #84]	@ (8006100 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10c      	bne.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40014000 	.word	0x40014000
 8006100:	40001800 	.word	0x40001800

08006104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800611c:	2302      	movs	r3, #2
 800611e:	e065      	b.n	80061ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a14      	ldr	r2, [pc, #80]	@ (80061fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d115      	bne.n	80061da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40010400 	.word	0x40010400

08006200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e040      	b.n	80062d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fb fe0c 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	@ 0x24
 8006268:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fbde 	bl	8006a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f977 	bl	800657c <UART_SetConfig>
 800628e:	4603      	mov	r3, r0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e01b      	b.n	80062d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689a      	ldr	r2, [r3, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fc5d 	bl	8006b88 <UART_CheckIdleState>
 80062ce:	4603      	mov	r3, r0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	@ 0x28
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d177      	bne.n	80063e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_UART_Transmit+0x24>
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e070      	b.n	80063e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2221      	movs	r2, #33	@ 0x21
 800630c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630e:	f7fc f84b 	bl	80023a8 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632c:	d108      	bne.n	8006340 <HAL_UART_Transmit+0x68>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d104      	bne.n	8006340 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e003      	b.n	8006348 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006348:	e02f      	b.n	80063aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2200      	movs	r2, #0
 8006352:	2180      	movs	r1, #128	@ 0x80
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fcbf 	bl	8006cd8 <UART_WaitOnFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e03b      	b.n	80063e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800637e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	3302      	adds	r3, #2
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e007      	b.n	8006398 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	3301      	adds	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1c9      	bne.n	800634a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2200      	movs	r2, #0
 80063be:	2140      	movs	r1, #64	@ 0x40
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fc89 	bl	8006cd8 <UART_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e005      	b.n	80063e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	e000      	b.n	80063e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80063e0:	2302      	movs	r3, #2
  }
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08a      	sub	sp, #40	@ 0x28
 80063ee:	af02      	add	r7, sp, #8
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006400:	2b20      	cmp	r3, #32
 8006402:	f040 80b5 	bne.w	8006570 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_UART_Receive+0x28>
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0ad      	b.n	8006572 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2222      	movs	r2, #34	@ 0x22
 8006422:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642c:	f7fb ffbc 	bl	80023a8 <HAL_GetTick>
 8006430:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644a:	d10e      	bne.n	800646a <HAL_UART_Receive+0x80>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_UART_Receive+0x76>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800645a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800645e:	e02d      	b.n	80064bc <HAL_UART_Receive+0xd2>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	22ff      	movs	r2, #255	@ 0xff
 8006464:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006468:	e028      	b.n	80064bc <HAL_UART_Receive+0xd2>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <HAL_UART_Receive+0xa4>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <HAL_UART_Receive+0x9a>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	22ff      	movs	r2, #255	@ 0xff
 800647e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006482:	e01b      	b.n	80064bc <HAL_UART_Receive+0xd2>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	227f      	movs	r2, #127	@ 0x7f
 8006488:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800648c:	e016      	b.n	80064bc <HAL_UART_Receive+0xd2>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006496:	d10d      	bne.n	80064b4 <HAL_UART_Receive+0xca>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_UART_Receive+0xc0>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	227f      	movs	r2, #127	@ 0x7f
 80064a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064a8:	e008      	b.n	80064bc <HAL_UART_Receive+0xd2>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	223f      	movs	r2, #63	@ 0x3f
 80064ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80064b2:	e003      	b.n	80064bc <HAL_UART_Receive+0xd2>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064cc:	d108      	bne.n	80064e0 <HAL_UART_Receive+0xf6>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e003      	b.n	80064e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064e8:	e036      	b.n	8006558 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	2120      	movs	r1, #32
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fbef 	bl	8006cd8 <UART_WaitOnFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e032      	b.n	8006572 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10c      	bne.n	800652c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	b29a      	uxth	r2, r3
 800651a:	8a7b      	ldrh	r3, [r7, #18]
 800651c:	4013      	ands	r3, r2
 800651e:	b29a      	uxth	r2, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3302      	adds	r3, #2
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e00c      	b.n	8006546 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	b2da      	uxtb	r2, r3
 8006534:	8a7b      	ldrh	r3, [r7, #18]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	4013      	ands	r3, r2
 800653a:	b2da      	uxtb	r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	3301      	adds	r3, #1
 8006544:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1c2      	bne.n	80064ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e000      	b.n	8006572 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006570:	2302      	movs	r3, #2
  }
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4ba6      	ldr	r3, [pc, #664]	@ (8006840 <UART_SetConfig+0x2c4>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	6979      	ldr	r1, [r7, #20]
 80065b0:	430b      	orrs	r3, r1
 80065b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a94      	ldr	r2, [pc, #592]	@ (8006844 <UART_SetConfig+0x2c8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d120      	bne.n	800663a <UART_SetConfig+0xbe>
 80065f8:	4b93      	ldr	r3, [pc, #588]	@ (8006848 <UART_SetConfig+0x2cc>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	2b03      	cmp	r3, #3
 8006604:	d816      	bhi.n	8006634 <UART_SetConfig+0xb8>
 8006606:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <UART_SetConfig+0x90>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	0800661d 	.word	0x0800661d
 8006610:	08006629 	.word	0x08006629
 8006614:	08006623 	.word	0x08006623
 8006618:	0800662f 	.word	0x0800662f
 800661c:	2301      	movs	r3, #1
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e150      	b.n	80068c4 <UART_SetConfig+0x348>
 8006622:	2302      	movs	r3, #2
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e14d      	b.n	80068c4 <UART_SetConfig+0x348>
 8006628:	2304      	movs	r3, #4
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e14a      	b.n	80068c4 <UART_SetConfig+0x348>
 800662e:	2308      	movs	r3, #8
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e147      	b.n	80068c4 <UART_SetConfig+0x348>
 8006634:	2310      	movs	r3, #16
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e144      	b.n	80068c4 <UART_SetConfig+0x348>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a83      	ldr	r2, [pc, #524]	@ (800684c <UART_SetConfig+0x2d0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d132      	bne.n	80066aa <UART_SetConfig+0x12e>
 8006644:	4b80      	ldr	r3, [pc, #512]	@ (8006848 <UART_SetConfig+0x2cc>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	f003 030c 	and.w	r3, r3, #12
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d828      	bhi.n	80066a4 <UART_SetConfig+0x128>
 8006652:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <UART_SetConfig+0xdc>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800668d 	.word	0x0800668d
 800665c:	080066a5 	.word	0x080066a5
 8006660:	080066a5 	.word	0x080066a5
 8006664:	080066a5 	.word	0x080066a5
 8006668:	08006699 	.word	0x08006699
 800666c:	080066a5 	.word	0x080066a5
 8006670:	080066a5 	.word	0x080066a5
 8006674:	080066a5 	.word	0x080066a5
 8006678:	08006693 	.word	0x08006693
 800667c:	080066a5 	.word	0x080066a5
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066a5 	.word	0x080066a5
 8006688:	0800669f 	.word	0x0800669f
 800668c:	2300      	movs	r3, #0
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e118      	b.n	80068c4 <UART_SetConfig+0x348>
 8006692:	2302      	movs	r3, #2
 8006694:	77fb      	strb	r3, [r7, #31]
 8006696:	e115      	b.n	80068c4 <UART_SetConfig+0x348>
 8006698:	2304      	movs	r3, #4
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e112      	b.n	80068c4 <UART_SetConfig+0x348>
 800669e:	2308      	movs	r3, #8
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e10f      	b.n	80068c4 <UART_SetConfig+0x348>
 80066a4:	2310      	movs	r3, #16
 80066a6:	77fb      	strb	r3, [r7, #31]
 80066a8:	e10c      	b.n	80068c4 <UART_SetConfig+0x348>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a68      	ldr	r2, [pc, #416]	@ (8006850 <UART_SetConfig+0x2d4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d120      	bne.n	80066f6 <UART_SetConfig+0x17a>
 80066b4:	4b64      	ldr	r3, [pc, #400]	@ (8006848 <UART_SetConfig+0x2cc>)
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066be:	2b30      	cmp	r3, #48	@ 0x30
 80066c0:	d013      	beq.n	80066ea <UART_SetConfig+0x16e>
 80066c2:	2b30      	cmp	r3, #48	@ 0x30
 80066c4:	d814      	bhi.n	80066f0 <UART_SetConfig+0x174>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d009      	beq.n	80066de <UART_SetConfig+0x162>
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d810      	bhi.n	80066f0 <UART_SetConfig+0x174>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <UART_SetConfig+0x15c>
 80066d2:	2b10      	cmp	r3, #16
 80066d4:	d006      	beq.n	80066e4 <UART_SetConfig+0x168>
 80066d6:	e00b      	b.n	80066f0 <UART_SetConfig+0x174>
 80066d8:	2300      	movs	r3, #0
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e0f2      	b.n	80068c4 <UART_SetConfig+0x348>
 80066de:	2302      	movs	r3, #2
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e0ef      	b.n	80068c4 <UART_SetConfig+0x348>
 80066e4:	2304      	movs	r3, #4
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e0ec      	b.n	80068c4 <UART_SetConfig+0x348>
 80066ea:	2308      	movs	r3, #8
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e0e9      	b.n	80068c4 <UART_SetConfig+0x348>
 80066f0:	2310      	movs	r3, #16
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e0e6      	b.n	80068c4 <UART_SetConfig+0x348>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a56      	ldr	r2, [pc, #344]	@ (8006854 <UART_SetConfig+0x2d8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d120      	bne.n	8006742 <UART_SetConfig+0x1c6>
 8006700:	4b51      	ldr	r3, [pc, #324]	@ (8006848 <UART_SetConfig+0x2cc>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006706:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800670a:	2bc0      	cmp	r3, #192	@ 0xc0
 800670c:	d013      	beq.n	8006736 <UART_SetConfig+0x1ba>
 800670e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006710:	d814      	bhi.n	800673c <UART_SetConfig+0x1c0>
 8006712:	2b80      	cmp	r3, #128	@ 0x80
 8006714:	d009      	beq.n	800672a <UART_SetConfig+0x1ae>
 8006716:	2b80      	cmp	r3, #128	@ 0x80
 8006718:	d810      	bhi.n	800673c <UART_SetConfig+0x1c0>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <UART_SetConfig+0x1a8>
 800671e:	2b40      	cmp	r3, #64	@ 0x40
 8006720:	d006      	beq.n	8006730 <UART_SetConfig+0x1b4>
 8006722:	e00b      	b.n	800673c <UART_SetConfig+0x1c0>
 8006724:	2300      	movs	r3, #0
 8006726:	77fb      	strb	r3, [r7, #31]
 8006728:	e0cc      	b.n	80068c4 <UART_SetConfig+0x348>
 800672a:	2302      	movs	r3, #2
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e0c9      	b.n	80068c4 <UART_SetConfig+0x348>
 8006730:	2304      	movs	r3, #4
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e0c6      	b.n	80068c4 <UART_SetConfig+0x348>
 8006736:	2308      	movs	r3, #8
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e0c3      	b.n	80068c4 <UART_SetConfig+0x348>
 800673c:	2310      	movs	r3, #16
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e0c0      	b.n	80068c4 <UART_SetConfig+0x348>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a44      	ldr	r2, [pc, #272]	@ (8006858 <UART_SetConfig+0x2dc>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d125      	bne.n	8006798 <UART_SetConfig+0x21c>
 800674c:	4b3e      	ldr	r3, [pc, #248]	@ (8006848 <UART_SetConfig+0x2cc>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800675a:	d017      	beq.n	800678c <UART_SetConfig+0x210>
 800675c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006760:	d817      	bhi.n	8006792 <UART_SetConfig+0x216>
 8006762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006766:	d00b      	beq.n	8006780 <UART_SetConfig+0x204>
 8006768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800676c:	d811      	bhi.n	8006792 <UART_SetConfig+0x216>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <UART_SetConfig+0x1fe>
 8006772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006776:	d006      	beq.n	8006786 <UART_SetConfig+0x20a>
 8006778:	e00b      	b.n	8006792 <UART_SetConfig+0x216>
 800677a:	2300      	movs	r3, #0
 800677c:	77fb      	strb	r3, [r7, #31]
 800677e:	e0a1      	b.n	80068c4 <UART_SetConfig+0x348>
 8006780:	2302      	movs	r3, #2
 8006782:	77fb      	strb	r3, [r7, #31]
 8006784:	e09e      	b.n	80068c4 <UART_SetConfig+0x348>
 8006786:	2304      	movs	r3, #4
 8006788:	77fb      	strb	r3, [r7, #31]
 800678a:	e09b      	b.n	80068c4 <UART_SetConfig+0x348>
 800678c:	2308      	movs	r3, #8
 800678e:	77fb      	strb	r3, [r7, #31]
 8006790:	e098      	b.n	80068c4 <UART_SetConfig+0x348>
 8006792:	2310      	movs	r3, #16
 8006794:	77fb      	strb	r3, [r7, #31]
 8006796:	e095      	b.n	80068c4 <UART_SetConfig+0x348>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a2f      	ldr	r2, [pc, #188]	@ (800685c <UART_SetConfig+0x2e0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d125      	bne.n	80067ee <UART_SetConfig+0x272>
 80067a2:	4b29      	ldr	r3, [pc, #164]	@ (8006848 <UART_SetConfig+0x2cc>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b0:	d017      	beq.n	80067e2 <UART_SetConfig+0x266>
 80067b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b6:	d817      	bhi.n	80067e8 <UART_SetConfig+0x26c>
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067bc:	d00b      	beq.n	80067d6 <UART_SetConfig+0x25a>
 80067be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c2:	d811      	bhi.n	80067e8 <UART_SetConfig+0x26c>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <UART_SetConfig+0x254>
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067cc:	d006      	beq.n	80067dc <UART_SetConfig+0x260>
 80067ce:	e00b      	b.n	80067e8 <UART_SetConfig+0x26c>
 80067d0:	2301      	movs	r3, #1
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e076      	b.n	80068c4 <UART_SetConfig+0x348>
 80067d6:	2302      	movs	r3, #2
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e073      	b.n	80068c4 <UART_SetConfig+0x348>
 80067dc:	2304      	movs	r3, #4
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e070      	b.n	80068c4 <UART_SetConfig+0x348>
 80067e2:	2308      	movs	r3, #8
 80067e4:	77fb      	strb	r3, [r7, #31]
 80067e6:	e06d      	b.n	80068c4 <UART_SetConfig+0x348>
 80067e8:	2310      	movs	r3, #16
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e06a      	b.n	80068c4 <UART_SetConfig+0x348>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006860 <UART_SetConfig+0x2e4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d138      	bne.n	800686a <UART_SetConfig+0x2ee>
 80067f8:	4b13      	ldr	r3, [pc, #76]	@ (8006848 <UART_SetConfig+0x2cc>)
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006802:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006806:	d017      	beq.n	8006838 <UART_SetConfig+0x2bc>
 8006808:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800680c:	d82a      	bhi.n	8006864 <UART_SetConfig+0x2e8>
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006812:	d00b      	beq.n	800682c <UART_SetConfig+0x2b0>
 8006814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006818:	d824      	bhi.n	8006864 <UART_SetConfig+0x2e8>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <UART_SetConfig+0x2aa>
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006822:	d006      	beq.n	8006832 <UART_SetConfig+0x2b6>
 8006824:	e01e      	b.n	8006864 <UART_SetConfig+0x2e8>
 8006826:	2300      	movs	r3, #0
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e04b      	b.n	80068c4 <UART_SetConfig+0x348>
 800682c:	2302      	movs	r3, #2
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e048      	b.n	80068c4 <UART_SetConfig+0x348>
 8006832:	2304      	movs	r3, #4
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e045      	b.n	80068c4 <UART_SetConfig+0x348>
 8006838:	2308      	movs	r3, #8
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e042      	b.n	80068c4 <UART_SetConfig+0x348>
 800683e:	bf00      	nop
 8006840:	efff69f3 	.word	0xefff69f3
 8006844:	40011000 	.word	0x40011000
 8006848:	40023800 	.word	0x40023800
 800684c:	40004400 	.word	0x40004400
 8006850:	40004800 	.word	0x40004800
 8006854:	40004c00 	.word	0x40004c00
 8006858:	40005000 	.word	0x40005000
 800685c:	40011400 	.word	0x40011400
 8006860:	40007800 	.word	0x40007800
 8006864:	2310      	movs	r3, #16
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e02c      	b.n	80068c4 <UART_SetConfig+0x348>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a72      	ldr	r2, [pc, #456]	@ (8006a38 <UART_SetConfig+0x4bc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d125      	bne.n	80068c0 <UART_SetConfig+0x344>
 8006874:	4b71      	ldr	r3, [pc, #452]	@ (8006a3c <UART_SetConfig+0x4c0>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800687e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006882:	d017      	beq.n	80068b4 <UART_SetConfig+0x338>
 8006884:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006888:	d817      	bhi.n	80068ba <UART_SetConfig+0x33e>
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800688e:	d00b      	beq.n	80068a8 <UART_SetConfig+0x32c>
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006894:	d811      	bhi.n	80068ba <UART_SetConfig+0x33e>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <UART_SetConfig+0x326>
 800689a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800689e:	d006      	beq.n	80068ae <UART_SetConfig+0x332>
 80068a0:	e00b      	b.n	80068ba <UART_SetConfig+0x33e>
 80068a2:	2300      	movs	r3, #0
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e00d      	b.n	80068c4 <UART_SetConfig+0x348>
 80068a8:	2302      	movs	r3, #2
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e00a      	b.n	80068c4 <UART_SetConfig+0x348>
 80068ae:	2304      	movs	r3, #4
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e007      	b.n	80068c4 <UART_SetConfig+0x348>
 80068b4:	2308      	movs	r3, #8
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e004      	b.n	80068c4 <UART_SetConfig+0x348>
 80068ba:	2310      	movs	r3, #16
 80068bc:	77fb      	strb	r3, [r7, #31]
 80068be:	e001      	b.n	80068c4 <UART_SetConfig+0x348>
 80068c0:	2310      	movs	r3, #16
 80068c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068cc:	d15b      	bne.n	8006986 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80068ce:	7ffb      	ldrb	r3, [r7, #31]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d828      	bhi.n	8006926 <UART_SetConfig+0x3aa>
 80068d4:	a201      	add	r2, pc, #4	@ (adr r2, 80068dc <UART_SetConfig+0x360>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006911 	.word	0x08006911
 80068e8:	08006927 	.word	0x08006927
 80068ec:	08006917 	.word	0x08006917
 80068f0:	08006927 	.word	0x08006927
 80068f4:	08006927 	.word	0x08006927
 80068f8:	08006927 	.word	0x08006927
 80068fc:	0800691f 	.word	0x0800691f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006900:	f7fd f948 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8006904:	61b8      	str	r0, [r7, #24]
        break;
 8006906:	e013      	b.n	8006930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006908:	f7fd f958 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 800690c:	61b8      	str	r0, [r7, #24]
        break;
 800690e:	e00f      	b.n	8006930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006910:	4b4b      	ldr	r3, [pc, #300]	@ (8006a40 <UART_SetConfig+0x4c4>)
 8006912:	61bb      	str	r3, [r7, #24]
        break;
 8006914:	e00c      	b.n	8006930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006916:	f7fd f82b 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800691a:	61b8      	str	r0, [r7, #24]
        break;
 800691c:	e008      	b.n	8006930 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006922:	61bb      	str	r3, [r7, #24]
        break;
 8006924:	e004      	b.n	8006930 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	77bb      	strb	r3, [r7, #30]
        break;
 800692e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d074      	beq.n	8006a20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	005a      	lsls	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b0f      	cmp	r3, #15
 8006950:	d916      	bls.n	8006980 <UART_SetConfig+0x404>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006958:	d212      	bcs.n	8006980 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f023 030f 	bic.w	r3, r3, #15
 8006962:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	085b      	lsrs	r3, r3, #1
 8006968:	b29b      	uxth	r3, r3
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	b29a      	uxth	r2, r3
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	4313      	orrs	r3, r2
 8006974:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	89fa      	ldrh	r2, [r7, #14]
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	e04f      	b.n	8006a20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	77bb      	strb	r3, [r7, #30]
 8006984:	e04c      	b.n	8006a20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006986:	7ffb      	ldrb	r3, [r7, #31]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d828      	bhi.n	80069de <UART_SetConfig+0x462>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <UART_SetConfig+0x418>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069c1 	.word	0x080069c1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	080069df 	.word	0x080069df
 80069a4:	080069cf 	.word	0x080069cf
 80069a8:	080069df 	.word	0x080069df
 80069ac:	080069df 	.word	0x080069df
 80069b0:	080069df 	.word	0x080069df
 80069b4:	080069d7 	.word	0x080069d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fd f8ec 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 80069bc:	61b8      	str	r0, [r7, #24]
        break;
 80069be:	e013      	b.n	80069e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c0:	f7fd f8fc 	bl	8003bbc <HAL_RCC_GetPCLK2Freq>
 80069c4:	61b8      	str	r0, [r7, #24]
        break;
 80069c6:	e00f      	b.n	80069e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a40 <UART_SetConfig+0x4c4>)
 80069ca:	61bb      	str	r3, [r7, #24]
        break;
 80069cc:	e00c      	b.n	80069e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ce:	f7fc ffcf 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 80069d2:	61b8      	str	r0, [r7, #24]
        break;
 80069d4:	e008      	b.n	80069e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069da:	61bb      	str	r3, [r7, #24]
        break;
 80069dc:	e004      	b.n	80069e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	77bb      	strb	r3, [r7, #30]
        break;
 80069e6:	bf00      	nop
    }

    if (pclk != 0U)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	085a      	lsrs	r2, r3, #1
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	441a      	add	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	2b0f      	cmp	r3, #15
 8006a06:	d909      	bls.n	8006a1c <UART_SetConfig+0x4a0>
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0e:	d205      	bcs.n	8006a1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60da      	str	r2, [r3, #12]
 8006a1a:	e001      	b.n	8006a20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40007c00 	.word	0x40007c00
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400

08006a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01a      	beq.n	8006b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b42:	d10a      	bne.n	8006b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b098      	sub	sp, #96	@ 0x60
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b98:	f7fb fc06 	bl	80023a8 <HAL_GetTick>
 8006b9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d12e      	bne.n	8006c0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f88c 	bl	8006cd8 <UART_WaitOnFlagUntilTimeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d021      	beq.n	8006c0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e062      	b.n	8006cd0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d149      	bne.n	8006cac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f856 	bl	8006cd8 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d03c      	beq.n	8006cac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c84:	61fa      	str	r2, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	617b      	str	r3, [r7, #20]
   return(result);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e5      	bne.n	8006c64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e011      	b.n	8006cd0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3758      	adds	r7, #88	@ 0x58
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce8:	e04f      	b.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cf0:	d04b      	beq.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf2:	f7fb fb59 	bl	80023a8 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d302      	bcc.n	8006d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e04e      	b.n	8006daa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d037      	beq.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b80      	cmp	r3, #128	@ 0x80
 8006d1e:	d034      	beq.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b40      	cmp	r3, #64	@ 0x40
 8006d24:	d031      	beq.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d110      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2208      	movs	r2, #8
 8006d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f838 	bl	8006db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2208      	movs	r2, #8
 8006d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e029      	b.n	8006daa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d64:	d111      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f81e 	bl	8006db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e00f      	b.n	8006daa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4013      	ands	r3, r2
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	bf0c      	ite	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d0a0      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b095      	sub	sp, #84	@ 0x54
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d118      	bne.n	8006e5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f023 0310 	bic.w	r3, r3, #16
 8006e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	613b      	str	r3, [r7, #16]
   return(result);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e6      	bne.n	8006e28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e6e:	bf00      	nop
 8006e70:	3754      	adds	r7, #84	@ 0x54
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <memset>:
 8006e7a:	4402      	add	r2, r0
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d100      	bne.n	8006e84 <memset+0xa>
 8006e82:	4770      	bx	lr
 8006e84:	f803 1b01 	strb.w	r1, [r3], #1
 8006e88:	e7f9      	b.n	8006e7e <memset+0x4>
	...

08006e8c <__libc_init_array>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ec4 <__libc_init_array+0x38>)
 8006e90:	4c0d      	ldr	r4, [pc, #52]	@ (8006ec8 <__libc_init_array+0x3c>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	2600      	movs	r6, #0
 8006e98:	42a6      	cmp	r6, r4
 8006e9a:	d109      	bne.n	8006eb0 <__libc_init_array+0x24>
 8006e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006ecc <__libc_init_array+0x40>)
 8006e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed0 <__libc_init_array+0x44>)
 8006ea0:	f000 f826 	bl	8006ef0 <_init>
 8006ea4:	1b64      	subs	r4, r4, r5
 8006ea6:	10a4      	asrs	r4, r4, #2
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	42a6      	cmp	r6, r4
 8006eac:	d105      	bne.n	8006eba <__libc_init_array+0x2e>
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb4:	4798      	blx	r3
 8006eb6:	3601      	adds	r6, #1
 8006eb8:	e7ee      	b.n	8006e98 <__libc_init_array+0xc>
 8006eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ebe:	4798      	blx	r3
 8006ec0:	3601      	adds	r6, #1
 8006ec2:	e7f2      	b.n	8006eaa <__libc_init_array+0x1e>
 8006ec4:	08006f28 	.word	0x08006f28
 8006ec8:	08006f28 	.word	0x08006f28
 8006ecc:	08006f28 	.word	0x08006f28
 8006ed0:	08006f2c 	.word	0x08006f2c

08006ed4 <memcpy>:
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006edc:	d100      	bne.n	8006ee0 <memcpy+0xc>
 8006ede:	4770      	bx	lr
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eea:	4291      	cmp	r1, r2
 8006eec:	d1f9      	bne.n	8006ee2 <memcpy+0xe>
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <_init>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr

08006efc <_fini>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr
